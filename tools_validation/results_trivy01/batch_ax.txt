
Report Summary

┌───────────────────────────────────────────────────────────────────────────────┬────────────┬───────────────────┐
│                                    Target                                     │    Type    │ Misconfigurations │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-application-controller-role1.yaml                                      │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-application-controller-rolebinding.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-application-controller-rolebinding1.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-application-controller-sa.yaml                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-application-controller-sa1.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-application-controller-service.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-application-controller-service1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-application-controller-statefulset1.yaml                               │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-application-controller-statefulset2.yaml                               │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-application-controller-statefulset3.yaml                               │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-application-controller-statefulset5.yaml                               │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-application-controller-statefulset6.yaml                               │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-application-controller-statefulset7.yaml                               │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-application-controller.yaml                                            │ kubernetes │        14         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-applicationset-controller-clusterrole.yaml                             │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-applicationset-controller-clusterrole1.yaml                            │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-applicationset-controller-clusterrolebinding.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-applicationset-controller-clusterrolebinding1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-applicationset-controller-network-policy.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-applicationset-controller-network-policy1.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-applicationset-controller-role.yaml                                    │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-applicationset-controller-role1.yaml                                   │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-applicationset-controller-rolebinding.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-applicationset-controller-rolebinding1.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-applicationset-controller-sa.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-applicationset-controller-sa1.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-applicationset-controller-service.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-applicationset-controller-service1.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-cm-patch.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-cm-patch1.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-cm.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-cm1.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-cm11.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-cm13.yaml                                                              │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-cm14.yaml                                                              │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-cm15.yaml                                                              │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-cm16.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-cm17.yaml                                                              │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-cm19.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-cm21.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-cm22.yaml                                                              │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-cm23.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-cm26.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-cm27.yaml                                                              │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-cm28.yaml                                                              │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-cm3.yaml                                                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-cm7.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-cm8.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-cmd-params-cm1.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-cmd-params-cm10.yaml                                                   │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-cmd-params-cm12.yaml                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-cmd-params-cm13.yaml                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-cmd-params-cm14.yaml                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-cmd-params-cm15.yaml                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-cmd-params-cm16.yaml                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-cmd-params-cm19.yaml                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-cmd-params-cm21.yaml                                                   │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-cmd-params-cm22.yaml                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-cmd-params-cm23.yaml                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-cmd-params-cm24.yaml                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-cmd-params-cm3.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-cmd-params-cm6.yaml                                                    │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-cmd-params-cm7.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-cmd-params-cm8.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-cmd-params-cm9.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-config-map.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-config-map_1.yaml                                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-config.yaml                                                            │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-config1.yaml                                                           │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-config1_1.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-config1_10.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-config1_2.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-config1_3.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-config1_4.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-config1_5.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-config1_6.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-config1_7.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-config1_8.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-config1_9.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-config_1.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-config_10.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-config_2.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-config_3.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-config_4.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-config_5.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-config_6.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-config_7.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-config_8.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-config_9.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-configs.yaml                                                           │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-configs_1.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-configs_2.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-configs_3.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-dex-server-deployment.yaml                                             │ kubernetes │        17         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-dex-server-deployment1.yaml                                            │ kubernetes │        17         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-dex-server-network-policy.yaml                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-dex-server-network-policy1.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-dex-server-role.yaml                                                   │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-dex-server-role1.yaml                                                  │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-dex-server-rolebinding.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-dex-server-rolebinding1.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-dex-server-sa.yaml                                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-dex-server-sa1.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-dex-server-service.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-dex-server-service1.yaml                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-github-repo.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-gpg-keys-cm4.yaml                                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-gpg-keys-cm9.yaml                                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-ingress-routes.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-ingress.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-ingress11.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-ingress12.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-ingress13.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-ingress14.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-ingress16.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-ingress17.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-ingress19.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-ingress2.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-ingress20.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-ingress21.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-ingress22.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-ingress3.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-ingress5.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-ingress6.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-ingress6_1.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-ingress7.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-ingress8.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-ingress9.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-known-hosts-mounts.yaml                                                │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-known-hosts-mounts1.yaml                                               │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-known-hosts-mounts1_1.yaml                                             │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-known-hosts-mounts1_2.yaml                                             │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-known-hosts-mounts_1.yaml                                              │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-known-hosts-mounts_2.yaml                                              │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-known-hosts.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-known-hosts1.yaml                                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-loadbalancer.yaml                                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-manager-sa-token.yaml                                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-manager-sa-token1.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-manager-sa.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-manager-sa1.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-metrics.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-metrics2.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-multi-cluster.yaml                                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-namespace-apps.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-namespace.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-namespace1.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-namespace2.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-namespace3.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-namespace4.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-namespace5.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-namespace6.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-namespace7.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-namespace8.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-nginx-ingress.yaml                                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-notifications-cm14.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-notifications-cm5.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-notifications-controller-deployment.yaml                               │ kubernetes │         9         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-notifications-controller-deployment1.yaml                              │ kubernetes │         9         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-notifications-controller-metrics-service.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-notifications-controller-metrics-service1.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-notifications-controller-network-policy.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-notifications-controller-network-policy1.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-notifications-controller-rbac-clusterrole.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-notifications-controller-rbac-clusterrole1.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-notifications-controller-rbac-clusterrolebinding.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-notifications-controller-rbac-clusterrolebinding1.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-notifications-controller-role.yaml                                     │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-notifications-controller-role1.yaml                                    │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-notifications-controller-rolebinding.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-notifications-controller-rolebinding1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-notifications-controller-sa.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-notifications-controller-sa1.yaml                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-notifications-secret10.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-notifications-secret12.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-notifications-secret13.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-notifications-secret4.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-notifications-secret5.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-notifications-secret8.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-ns.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-operator-controller-manager-metrics-service_v1_service.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-operator-controller-manager-metrics-service_v1_service1.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-operator-controller-manager-metrics-service_v1_service2.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-operator-controller-manager-metrics-service_v1_service3.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-operator-controller-manager-metrics-service_v1_service4.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-operator-controller-manager-metrics-service_v1_service5.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-operator-controller-manager-metrics-service_v1_service6.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-operator-controller-manager-metrics-service_v1_service7.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-operator-controller-manager-metrics-service_v1_service9.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-operator-manager-config_v1_configmap.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-operator-manager-config_v1_configmap1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-operator-manager-config_v1_configmap2.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-operator-manager-config_v1_configmap3.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-operator-manager-config_v1_configmap4.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-operator-manager-config_v1_configmap5.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-operator-manager-config_v1_configmap6.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-operator-manager-config_v1_configmap7.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-operator-manager-config_v1_configmap8.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-operator-manager-config_v1_configmap9.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-operator-metrics-reader_rbac.authorization.k8s.io_v1_clusterrole.yaml  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-operator-metrics-reader_rbac.authorization.k8s.io_v1_clusterrole1.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-operator-metrics-reader_rbac.authorization.k8s.io_v1_clusterrole2.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-operator-metrics-reader_rbac.authorization.k8s.io_v1_clusterrole3.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-operator-metrics-reader_rbac.authorization.k8s.io_v1_clusterrole4.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-operator-metrics-reader_rbac.authorization.k8s.io_v1_clusterrole5.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-operator-metrics-reader_rbac.authorization.k8s.io_v1_clusterrole6.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-operator-metrics-reader_rbac.authorization.k8s.io_v1_clusterrole7.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-operator-metrics-reader_rbac.authorization.k8s.io_v1_clusterrole8.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-operator-metrics-reader_rbac.authorization.k8s.io_v1_clusterrole9.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-operator-webhook-service_v1_service.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-operator-webhook-service_v1_service1.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-rbac-cm-patch.yaml                                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-rbac-cm-patch1.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-rbac-cm.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-rbac-cm1.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-rbac-cm11.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-rbac-cm12.yaml                                                         │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-rbac-cm13.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-rbac-cm14.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-rbac-cm15.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-rbac-cm18.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-rbac-cm20.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-rbac-cm21.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-rbac-cm22.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-rbac-cm23.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-rbac-cm24.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-rbac-cm7.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-rbac-cm8.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-rbac-cm9.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-redis-deployment.yaml                                                  │ kubernetes │        15         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-redis-deployment1.yaml                                                 │ kubernetes │         7         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-redis-ha-proxy-network-policy.yaml                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-redis-ha-proxy-network-policy1.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-redis-ha-server-network-policy.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-redis-ha-server-network-policy1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-redis-network-policy.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-redis-network-policy1.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-redis-network-policy2.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-redis-role.yaml                                                        │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-redis-rolebinding.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-redis-sa.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-redis-sa1.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-redis-service.yaml                                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-redis-service1.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-remote-permissions.yaml                                                │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-remote-permissions1.yaml                                               │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-remote-permissions1_1.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-remote-permissions_1.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-repo-creds.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-repo-creds1.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-repo-creds2.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-repo-creds2_1.yaml                                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-repo-creds2_2.yaml                                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-repo-creds2_3.yaml                                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-repo-creds_1.yaml                                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-repo-creds_2.yaml                                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-repo-creds_3.yaml                                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-repo-server-deploy.yaml                                                │ kubernetes │        52         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-repo-server-deployment-patch.yaml                                      │ kubernetes │        32         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-repo-server-deployment-patch1.yaml                                     │ kubernetes │        31         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-repo-server-deployment-patch2.yaml                                     │ kubernetes │        32         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-repo-server-deployment1.yaml                                           │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-repo-server-deployment2.yaml                                           │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-repo-server-deployment4.yaml                                           │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-repo-server-deployment5.yaml                                           │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-repo-server-keys.yaml                                                  │ kubernetes │        35         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-repo-server-ksops.yaml                                                 │ kubernetes │        34         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-repo-server-network-policy.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-repo-server-network-policy1.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-repo-server-network-policy2.yaml                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-repo-server-sa.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-repo-server-sa1.yaml                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-repo-server-service.yaml                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-repo-server-service1.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-repositories.yaml                                                      │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-repositories1.yaml                                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-repositories2.yaml                                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-repositories2_1.yaml                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-repositories2_2.yaml                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-repositories2_3.yaml                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-repositories2_4.yaml                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-repositories_1.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-repositories_2.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-repositories_3.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-repositories_4.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-route2.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-sa.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-sa_1.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-sa_2.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-secret13.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-secret14.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-secret5.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-secret6.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-secret8.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-secret9.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-server-cluster-apps.yaml                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-server-cluster-apps_1.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-server-clusterrole.yaml                                                │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-server-clusterrole1.yaml                                               │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-server-clusterrolebinding.yaml                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-server-clusterrolebinding1.yaml                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-server-deployment1.yaml                                                │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-server-deployment2.yaml                                                │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-server-deployment4.yaml                                                │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-server-deployment5.yaml                                                │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-server-metrics.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-server-metrics4.yaml                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-server-network-policy.yaml                                             │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-server-network-policy1.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-server-network-policy2.yaml                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-server-nodeport-service.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-server-nodeport.yaml                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-server-rbac-clusterrole.yaml                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-server-rbac-clusterrole1.yaml                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-server-rbac-clusterrolebinding.yaml                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-server-rbac-clusterrolebinding1.yaml                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-server-role.yaml                                                       │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-server-role1.yaml                                                      │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-server-rolebinding.yaml                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-server-rolebinding1.yaml                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-server-sa.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-server-sa1.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-server-service.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-server-service1.yaml                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-server-service3.yaml                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-server-tls.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-server-tls1.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-server.yaml                                                            │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-server1.yaml                                                           │ kubernetes │        18         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-service.yaml                                                           │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-service1.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-service2.yaml                                                          │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-ssh-known-hosts-cm11.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-ssh-known-hosts-cm12.yaml                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-ssh-known-hosts-cm5.yaml                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-ssh-known-hosts-cm6.yaml                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-sync1.yaml                                                             │ kubernetes │        19         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-tls-certs-cm11.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-tls-certs-cm12.yaml                                                    │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-tls-certs-cm5.yaml                                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-tls-certs-cm6.yaml                                                     │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-tls.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-ui-ingress1.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-webhook-ingress.yaml                                                   │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-webhook-ingress_1.yaml                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-workload1_1.yaml                                                       │ kubernetes │        16         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-workload1_2.yaml                                                       │ kubernetes │         8         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-workload_1.yaml                                                        │ kubernetes │        16         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd-workload_2.yaml                                                        │ kubernetes │         8         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_10.yaml                                                       │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_11.yaml                                                       │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_12.yaml                                                       │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_13.yaml                                                       │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_14.yaml                                                       │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_15.yaml                                                       │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_16.yaml                                                       │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_17.yaml                                                       │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_18.yaml                                                       │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_19.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_20.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_21.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_22.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_23.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_24.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_25.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_26.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_27.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_28.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_29.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_3.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_30.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_31.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_32.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_33.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_34.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_35.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_36.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_37.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_38.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_39.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_4.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_40.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_41.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_42.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_43.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_44.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_46.yaml                                                       │ kubernetes │        16         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_47.yaml                                                       │ kubernetes │         8         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_48.yaml                                                       │ kubernetes │        14         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_5.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_52.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_53.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_54.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_55.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_56.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_57.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_58.yaml                                                       │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_6.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_7.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_8.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install1_9.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_10.yaml                                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_11.yaml                                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_12.yaml                                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_13.yaml                                                        │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_14.yaml                                                        │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_15.yaml                                                        │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_16.yaml                                                        │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_17.yaml                                                        │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_18.yaml                                                        │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_19.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_20.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_21.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_22.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_23.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_24.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_25.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_26.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_27.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_28.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_29.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_3.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_30.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_31.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_32.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_33.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_34.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_35.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_36.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_37.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_38.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_39.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_4.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_40.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_41.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_42.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_43.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_44.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_46.yaml                                                        │ kubernetes │        16         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_47.yaml                                                        │ kubernetes │         8         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_48.yaml                                                        │ kubernetes │        14         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_5.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_52.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_53.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_54.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_55.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_56.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_57.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_58.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_6.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_7.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_8.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.install_9.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_10.yaml                                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_11.yaml                                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_12.yaml                                                        │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_13.yaml                                                        │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_14.yaml                                                        │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_15.yaml                                                        │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_16.yaml                                                        │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_17.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_18.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_19.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_20.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_21.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_22.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_23.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_24.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_25.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_26.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_27.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_28.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_29.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_3.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_30.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_31.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_32.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_33.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_34.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_35.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_36.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_37.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_38.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_39.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_4.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_40.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_42.yaml                                                        │ kubernetes │        16         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_43.yaml                                                        │ kubernetes │         8         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_44.yaml                                                        │ kubernetes │         7         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_48.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_49.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_5.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_50.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_51.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_52.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_53.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_54.yaml                                                        │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_6.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_7.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_8.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd.v2.8.11_9.yaml                                                         │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd1.yaml                                                                  │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd10.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd10_1.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd10_10.yaml                                                              │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd10_11.yaml                                                              │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd10_12.yaml                                                              │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd10_13.yaml                                                              │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd10_14.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd10_15.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd10_16.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd10_17.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd10_18.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd10_19.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd10_2.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd10_20.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd10_21.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd10_22.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd10_23.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd10_24.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd10_25.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd10_26.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd10_27.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd10_28.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd10_29.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd10_3.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd10_30.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd10_31.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd10_32.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd10_33.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd10_34.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd10_35.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd10_4.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd10_5.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd10_6.yaml                                                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd10_7.yaml                                                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd10_8.yaml                                                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd10_9.yaml                                                               │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_10.yaml                                                              │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_11.yaml                                                              │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_12.yaml                                                              │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_13.yaml                                                              │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_14.yaml                                                              │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_15.yaml                                                              │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_16.yaml                                                              │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_17.yaml                                                              │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_18.yaml                                                              │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_19.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_20.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_21.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_22.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_23.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_24.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_25.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_26.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_27.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_28.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_29.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_3.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_30.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_31.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_32.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_33.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_34.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_35.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_36.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_37.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_38.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_39.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_4.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_40.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_41.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_42.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_43.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_44.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_46.yaml                                                              │ kubernetes │        16         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_47.yaml                                                              │ kubernetes │         8         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_48.yaml                                                              │ kubernetes │        14         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_5.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_52.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_53.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_54.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_55.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_56.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_57.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_58.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_6.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_7.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_8.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd13_9.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd15.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd1_1.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd1_10.yaml                                                               │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd1_11.yaml                                                               │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd1_12.yaml                                                               │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd1_13.yaml                                                               │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd1_14.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd1_15.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd1_16.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd1_17.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd1_18.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd1_19.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd1_2.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd1_20.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd1_21.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd1_22.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd1_23.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd1_24.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd1_25.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd1_26.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd1_27.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd1_28.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd1_29.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd1_3.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd1_30.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd1_31.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd1_32.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd1_33.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd1_34.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd1_35.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd1_4.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd1_5.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd1_6.yaml                                                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd1_7.yaml                                                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd1_8.yaml                                                                │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd1_9.yaml                                                                │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd22.yaml                                                                 │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_10.yaml                                                              │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_11.yaml                                                              │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_12.yaml                                                              │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_13.yaml                                                              │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_14.yaml                                                              │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_15.yaml                                                              │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_16.yaml                                                              │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_17.yaml                                                              │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_18.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_19.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_20.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_21.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_22.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_23.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_24.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_25.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_26.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_27.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_28.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_29.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_3.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_30.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_31.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_32.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_33.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_34.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_35.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_36.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_37.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_38.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_39.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_4.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_40.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_41.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_42.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_44.yaml                                                              │ kubernetes │        16         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_45.yaml                                                              │ kubernetes │         8         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_46.yaml                                                              │ kubernetes │         7         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_5.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_50.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_51.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_52.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_53.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_54.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_55.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_56.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_6.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_7.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_8.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd44_9.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_10.yaml                                                              │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_11.yaml                                                              │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_12.yaml                                                              │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_13.yaml                                                              │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_14.yaml                                                              │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_15.yaml                                                              │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_16.yaml                                                              │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_17.yaml                                                              │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_18.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_19.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_20.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_21.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_22.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_23.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_24.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_25.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_26.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_27.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_28.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_29.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_3.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_30.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_31.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_32.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_33.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_34.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_35.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_36.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_37.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_38.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_39.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_4.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_40.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_41.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_42.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_44.yaml                                                              │ kubernetes │        16         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_45.yaml                                                              │ kubernetes │         8         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_46.yaml                                                              │ kubernetes │         7         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_5.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_50.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_51.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_52.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_53.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_54.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_55.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_56.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_6.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_7.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_8.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd45_9.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_10.yaml                                                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_11.yaml                                                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_12.yaml                                                               │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_13.yaml                                                               │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_14.yaml                                                               │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_15.yaml                                                               │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_16.yaml                                                               │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_17.yaml                                                               │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_18.yaml                                                               │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_19.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_20.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_21.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_22.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_23.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_24.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_25.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_26.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_27.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_28.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_29.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_3.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_30.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_31.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_32.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_33.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_34.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_35.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_36.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_37.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_38.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_39.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_4.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_40.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_41.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_42.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_43.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_44.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_46.yaml                                                               │ kubernetes │        16         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_47.yaml                                                               │ kubernetes │         8         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_48.yaml                                                               │ kubernetes │        14         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_5.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_52.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_53.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_54.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_55.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_56.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_57.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_58.yaml                                                               │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_6.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_7.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_8.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd4_9.yaml                                                                │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd50_10.yaml                                                              │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd50_11.yaml                                                              │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd50_12.yaml                                                              │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd50_13.yaml                                                              │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd50_14.yaml                                                              │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd50_15.yaml                                                              │ kubernetes │         2         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd50_16.yaml                                                              │ kubernetes │         1         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd50_17.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd50_18.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd50_19.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd50_20.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd50_21.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd50_22.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd50_23.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd50_24.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd50_25.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd50_26.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd50_27.yaml                                                              │ kubernetes │         0         │
├───────────────────────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ argocd50_28.yaml                                                              │ kubernetes │         0         │
└───────────────────────────────────────────────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


argocd-application-controller-role1.yaml (kubernetes)
=====================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-application-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd-application-controller-role1.yaml:10-18
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ""
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - list
  18 └   - watch
────────────────────────────────────────



argocd-application-controller-statefulset1.yaml (kubernetes)
============================================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 argocd-application-controller-statefulset1.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 argocd-application-controller-statefulset1.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'argocd-application-controller' of 'statefulset' 'argocd-application-controller' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 argocd-application-controller-statefulset1.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-application-controller-statefulset1.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 argocd-application-controller-statefulset1.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 argocd-application-controller-statefulset1.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 argocd-application-controller-statefulset1.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-application-controller-statefulset1.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-application-controller-statefulset1.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-application-controller-statefulset1.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-application-controller-statefulset1.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-application-controller-statefulset1.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 argocd-application-controller-statefulset1.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "argocd-application-controller" of statefulset "argocd-application-controller" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 argocd-application-controller-statefulset1.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 argocd-application-controller-statefulset1.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset argocd-application-controller in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-application-controller-statefulset1.yaml:4
────────────────────────────────────────
   4 [   name: argocd-application-controller
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container argocd-application-controller in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-application-controller-statefulset1.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset argocd-application-controller in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-application-controller-statefulset1.yaml:9-15
────────────────────────────────────────
   9 ┌       containers:
  10 │       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────



argocd-application-controller-statefulset2.yaml (kubernetes)
============================================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 argocd-application-controller-statefulset2.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 argocd-application-controller-statefulset2.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'argocd-application-controller' of 'statefulset' 'argocd-application-controller' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 argocd-application-controller-statefulset2.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-application-controller-statefulset2.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 argocd-application-controller-statefulset2.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 argocd-application-controller-statefulset2.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 argocd-application-controller-statefulset2.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-application-controller-statefulset2.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-application-controller-statefulset2.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-application-controller-statefulset2.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-application-controller-statefulset2.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-application-controller-statefulset2.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 argocd-application-controller-statefulset2.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "argocd-application-controller" of statefulset "argocd-application-controller" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 argocd-application-controller-statefulset2.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 argocd-application-controller-statefulset2.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset argocd-application-controller in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-application-controller-statefulset2.yaml:4
────────────────────────────────────────
   4 [   name: argocd-application-controller
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container argocd-application-controller in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-application-controller-statefulset2.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset argocd-application-controller in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-application-controller-statefulset2.yaml:9-15
────────────────────────────────────────
   9 ┌       containers:
  10 │       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────



argocd-application-controller-statefulset3.yaml (kubernetes)
============================================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 argocd-application-controller-statefulset3.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         args:
  11 └         - /usr/local/bin/argocd-application-controller
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 argocd-application-controller-statefulset3.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         args:
  11 └         - /usr/local/bin/argocd-application-controller
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'argocd-application-controller' of 'statefulset' 'argocd-application-controller' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 argocd-application-controller-statefulset3.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         args:
  11 └         - /usr/local/bin/argocd-application-controller
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-application-controller-statefulset3.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         args:
  11 └         - /usr/local/bin/argocd-application-controller
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 argocd-application-controller-statefulset3.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         args:
  11 └         - /usr/local/bin/argocd-application-controller
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 argocd-application-controller-statefulset3.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         args:
  11 └         - /usr/local/bin/argocd-application-controller
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 argocd-application-controller-statefulset3.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         args:
  11 └         - /usr/local/bin/argocd-application-controller
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-application-controller-statefulset3.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         args:
  11 └         - /usr/local/bin/argocd-application-controller
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-application-controller-statefulset3.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         args:
  11 └         - /usr/local/bin/argocd-application-controller
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-application-controller-statefulset3.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         args:
  11 └         - /usr/local/bin/argocd-application-controller
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-application-controller-statefulset3.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         args:
  11 └         - /usr/local/bin/argocd-application-controller
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-application-controller-statefulset3.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         args:
  11 └         - /usr/local/bin/argocd-application-controller
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 argocd-application-controller-statefulset3.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         args:
  11 └         - /usr/local/bin/argocd-application-controller
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "argocd-application-controller" of statefulset "argocd-application-controller" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 argocd-application-controller-statefulset3.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         args:
  11 └         - /usr/local/bin/argocd-application-controller
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 argocd-application-controller-statefulset3.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         args:
  11 └         - /usr/local/bin/argocd-application-controller
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset argocd-application-controller in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-application-controller-statefulset3.yaml:4
────────────────────────────────────────
   4 [   name: argocd-application-controller
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container argocd-application-controller in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-application-controller-statefulset3.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         args:
  11 └         - /usr/local/bin/argocd-application-controller
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset argocd-application-controller in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-application-controller-statefulset3.yaml:8-11
────────────────────────────────────────
   8 ┌       containers:
   9 │       - name: argocd-application-controller
  10 │         args:
  11 └         - /usr/local/bin/argocd-application-controller
────────────────────────────────────────



argocd-application-controller-statefulset5.yaml (kubernetes)
============================================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 argocd-application-controller-statefulset5.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 argocd-application-controller-statefulset5.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'argocd-application-controller' of 'statefulset' 'argocd-application-controller' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 argocd-application-controller-statefulset5.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-application-controller-statefulset5.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 argocd-application-controller-statefulset5.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 argocd-application-controller-statefulset5.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 argocd-application-controller-statefulset5.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-application-controller-statefulset5.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-application-controller-statefulset5.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-application-controller-statefulset5.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-application-controller-statefulset5.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-application-controller-statefulset5.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 argocd-application-controller-statefulset5.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "argocd-application-controller" of statefulset "argocd-application-controller" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 argocd-application-controller-statefulset5.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 argocd-application-controller-statefulset5.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset argocd-application-controller in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-application-controller-statefulset5.yaml:4
────────────────────────────────────────
   4 [   name: argocd-application-controller
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container argocd-application-controller in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-application-controller-statefulset5.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset argocd-application-controller in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-application-controller-statefulset5.yaml:9-15
────────────────────────────────────────
   9 ┌       containers:
  10 │       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────



argocd-application-controller-statefulset6.yaml (kubernetes)
============================================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 argocd-application-controller-statefulset6.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 argocd-application-controller-statefulset6.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'argocd-application-controller' of 'statefulset' 'argocd-application-controller' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 argocd-application-controller-statefulset6.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-application-controller-statefulset6.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 argocd-application-controller-statefulset6.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 argocd-application-controller-statefulset6.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 argocd-application-controller-statefulset6.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-application-controller-statefulset6.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-application-controller-statefulset6.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-application-controller-statefulset6.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-application-controller-statefulset6.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-application-controller-statefulset6.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 argocd-application-controller-statefulset6.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "argocd-application-controller" of statefulset "argocd-application-controller" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 argocd-application-controller-statefulset6.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 argocd-application-controller-statefulset6.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset argocd-application-controller in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-application-controller-statefulset6.yaml:4
────────────────────────────────────────
   4 [   name: argocd-application-controller
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container argocd-application-controller in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-application-controller-statefulset6.yaml:10-15
────────────────────────────────────────
  10 ┌       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset argocd-application-controller in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-application-controller-statefulset6.yaml:9-15
────────────────────────────────────────
   9 ┌       containers:
  10 │       - name: argocd-application-controller
  11 │         args:
  12 │         - /usr/local/bin/argocd-application-controller
  13 │         env:
  14 │         - name: ARGOCD_CONTROLLER_REPLICAS
  15 └           value: "0"
────────────────────────────────────────



argocd-application-controller-statefulset7.yaml (kubernetes)
============================================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 argocd-application-controller-statefulset7.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         args:
  11 └         - /usr/local/bin/argocd-application-controller
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 argocd-application-controller-statefulset7.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         args:
  11 └         - /usr/local/bin/argocd-application-controller
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'argocd-application-controller' of 'statefulset' 'argocd-application-controller' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 argocd-application-controller-statefulset7.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         args:
  11 └         - /usr/local/bin/argocd-application-controller
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-application-controller-statefulset7.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         args:
  11 └         - /usr/local/bin/argocd-application-controller
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 argocd-application-controller-statefulset7.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         args:
  11 └         - /usr/local/bin/argocd-application-controller
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 argocd-application-controller-statefulset7.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         args:
  11 └         - /usr/local/bin/argocd-application-controller
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 argocd-application-controller-statefulset7.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         args:
  11 └         - /usr/local/bin/argocd-application-controller
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-application-controller-statefulset7.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         args:
  11 └         - /usr/local/bin/argocd-application-controller
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-application-controller-statefulset7.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         args:
  11 └         - /usr/local/bin/argocd-application-controller
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-application-controller-statefulset7.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         args:
  11 └         - /usr/local/bin/argocd-application-controller
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-application-controller-statefulset7.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         args:
  11 └         - /usr/local/bin/argocd-application-controller
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-application-controller-statefulset7.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         args:
  11 └         - /usr/local/bin/argocd-application-controller
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 argocd-application-controller-statefulset7.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         args:
  11 └         - /usr/local/bin/argocd-application-controller
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "argocd-application-controller" of statefulset "argocd-application-controller" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 argocd-application-controller-statefulset7.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         args:
  11 └         - /usr/local/bin/argocd-application-controller
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 argocd-application-controller-statefulset7.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         args:
  11 └         - /usr/local/bin/argocd-application-controller
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset argocd-application-controller in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-application-controller-statefulset7.yaml:4
────────────────────────────────────────
   4 [   name: argocd-application-controller
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container argocd-application-controller in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-application-controller-statefulset7.yaml:9-11
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         args:
  11 └         - /usr/local/bin/argocd-application-controller
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset argocd-application-controller in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-application-controller-statefulset7.yaml:8-11
────────────────────────────────────────
   8 ┌       containers:
   9 │       - name: argocd-application-controller
  10 │         args:
  11 └         - /usr/local/bin/argocd-application-controller
────────────────────────────────────────



argocd-application-controller.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 argocd-application-controller.yaml:9-16
────────────────────────────────────────
   9 ┌         - name: argocd-application-controller
  10 │           resources:
  11 │             requests:
  12 │               cpu: 2.0
  13 │               memory: 2Gi
  14 │             limits:
  15 │               cpu: 2.0
  16 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 argocd-application-controller.yaml:9-16
────────────────────────────────────────
   9 ┌         - name: argocd-application-controller
  10 │           resources:
  11 │             requests:
  12 │               cpu: 2.0
  13 │               memory: 2Gi
  14 │             limits:
  15 │               cpu: 2.0
  16 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'argocd-application-controller' of 'statefulset' 'argocd-application-controller' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 argocd-application-controller.yaml:9-16
────────────────────────────────────────
   9 ┌         - name: argocd-application-controller
  10 │           resources:
  11 │             requests:
  12 │               cpu: 2.0
  13 │               memory: 2Gi
  14 │             limits:
  15 │               cpu: 2.0
  16 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 argocd-application-controller.yaml:9-16
────────────────────────────────────────
   9 ┌         - name: argocd-application-controller
  10 │           resources:
  11 │             requests:
  12 │               cpu: 2.0
  13 │               memory: 2Gi
  14 │             limits:
  15 │               cpu: 2.0
  16 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 argocd-application-controller.yaml:9-16
────────────────────────────────────────
   9 ┌         - name: argocd-application-controller
  10 │           resources:
  11 │             requests:
  12 │               cpu: 2.0
  13 │               memory: 2Gi
  14 │             limits:
  15 │               cpu: 2.0
  16 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 argocd-application-controller.yaml:9-16
────────────────────────────────────────
   9 ┌         - name: argocd-application-controller
  10 │           resources:
  11 │             requests:
  12 │               cpu: 2.0
  13 │               memory: 2Gi
  14 │             limits:
  15 │               cpu: 2.0
  16 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-application-controller.yaml:9-16
────────────────────────────────────────
   9 ┌         - name: argocd-application-controller
  10 │           resources:
  11 │             requests:
  12 │               cpu: 2.0
  13 │               memory: 2Gi
  14 │             limits:
  15 │               cpu: 2.0
  16 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-application-controller' of StatefulSet 'argocd-application-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-application-controller.yaml:9-16
────────────────────────────────────────
   9 ┌         - name: argocd-application-controller
  10 │           resources:
  11 │             requests:
  12 │               cpu: 2.0
  13 │               memory: 2Gi
  14 │             limits:
  15 │               cpu: 2.0
  16 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 argocd-application-controller.yaml:9-16
────────────────────────────────────────
   9 ┌         - name: argocd-application-controller
  10 │           resources:
  11 │             requests:
  12 │               cpu: 2.0
  13 │               memory: 2Gi
  14 │             limits:
  15 │               cpu: 2.0
  16 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "argocd-application-controller" of statefulset "argocd-application-controller" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 argocd-application-controller.yaml:9-16
────────────────────────────────────────
   9 ┌         - name: argocd-application-controller
  10 │           resources:
  11 │             requests:
  12 │               cpu: 2.0
  13 │               memory: 2Gi
  14 │             limits:
  15 │               cpu: 2.0
  16 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 argocd-application-controller.yaml:9-16
────────────────────────────────────────
   9 ┌         - name: argocd-application-controller
  10 │           resources:
  11 │             requests:
  12 │               cpu: 2.0
  13 │               memory: 2Gi
  14 │             limits:
  15 │               cpu: 2.0
  16 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset argocd-application-controller in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-application-controller.yaml:4
────────────────────────────────────────
   4 [   name: argocd-application-controller
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container argocd-application-controller in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-application-controller.yaml:9-16
────────────────────────────────────────
   9 ┌         - name: argocd-application-controller
  10 │           resources:
  11 │             requests:
  12 │               cpu: 2.0
  13 │               memory: 2Gi
  14 │             limits:
  15 │               cpu: 2.0
  16 └               memory: 2Gi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset argocd-application-controller in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-application-controller.yaml:8-16
────────────────────────────────────────
   8 ┌       containers:
   9 │         - name: argocd-application-controller
  10 │           resources:
  11 │             requests:
  12 │               cpu: 2.0
  13 │               memory: 2Gi
  14 │             limits:
  15 │               cpu: 2.0
  16 └               memory: 2Gi
────────────────────────────────────────



argocd-applicationset-controller-clusterrole.yaml (kubernetes)
==============================================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'argocd-applicationset-controller' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 argocd-applicationset-controller-clusterrole.yaml:62-69
────────────────────────────────────────
  62 ┌ - apiGroups:
  63 │   - ""
  64 │   resources:
  65 │   - secrets
  66 │   verbs:
  67 │   - get
  68 │   - list
  69 └   - watch
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'argocd-applicationset-controller' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 argocd-applicationset-controller-clusterrole.yaml:50-61
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ""
  52 │   resources:
  53 │   - configmaps
  54 │   verbs:
  55 │   - create
  56 │   - update
  57 │   - delete
  58 └   - get
  ..   
────────────────────────────────────────



argocd-applicationset-controller-clusterrole1.yaml (kubernetes)
===============================================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'argocd-applicationset-controller' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 argocd-applicationset-controller-clusterrole1.yaml:60-67
────────────────────────────────────────
  60 ┌ - apiGroups:
  61 │   - ""
  62 │   resources:
  63 │   - secrets
  64 │   verbs:
  65 │   - get
  66 │   - list
  67 └   - watch
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'argocd-applicationset-controller' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 argocd-applicationset-controller-clusterrole1.yaml:48-59
────────────────────────────────────────
  48 ┌ - apiGroups:
  49 │   - ""
  50 │   resources:
  51 │   - configmaps
  52 │   verbs:
  53 │   - create
  54 │   - update
  55 │   - delete
  56 └   - get
  ..   
────────────────────────────────────────



argocd-applicationset-controller-role.yaml (kubernetes)
=======================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-applicationset-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd-applicationset-controller-role.yaml:50-58
────────────────────────────────────────
  50 ┌   - apiGroups:
  51 │       - ''
  52 │     resources:
  53 │       - secrets
  54 │       - configmaps
  55 │     verbs:
  56 │       - get
  57 │       - list
  58 └       - watch
────────────────────────────────────────



argocd-applicationset-controller-role1.yaml (kubernetes)
========================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-applicationset-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd-applicationset-controller-role1.yaml:48-56
────────────────────────────────────────
  48 ┌   - apiGroups:
  49 │       - ''
  50 │     resources:
  51 │       - secrets
  52 │       - configmaps
  53 │     verbs:
  54 │       - get
  55 │       - list
  56 └       - watch
────────────────────────────────────────



argocd-cm13.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'argocd-cm' in 'default' namespace stores secrets in key(s) or value(s) '{"      clientSecret"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



argocd-cm14.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'argocd-cm' in 'default' namespace stores secrets in key(s) or value(s) '{"    clientSecret"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────
 argocd-cm14.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



argocd-cm15.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'argocd-cm' in 'argocd' namespace stores secrets in key(s) or value(s) '{"clientSecret"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



argocd-cm17.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'argocd-cm' in 'default' namespace stores secrets in key(s) or value(s) '{"clientSecret"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



argocd-cm22.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'argocd-cm' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"application.instanceLabelKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────
 argocd-cm22.yaml:1
────────────────────────────────────────
   1 [ ---
────────────────────────────────────────



argocd-cm27.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'argocd-cm' in 'argocd' namespace stores sensitive contents in key(s) or value(s) '{"username"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'argocd-cm' in 'argocd' namespace stores secrets in key(s) or value(s) '{"password"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



argocd-cm28.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'argocd-cm' in 'argocd' namespace stores sensitive contents in key(s) or value(s) '{"application.instanceLabelKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



argocd-cm3.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'argocd-cm' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"application.instanceLabelKey"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



argocd-cmd-params-cm10.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'argocd-cmd-params-cm' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"controller.k8sclient.retry.base.backoff", "controller.repo.error.grace.period.seconds", "reposerver.max.combined.directory.manifests.size", "reposerver.streamed.manifest.max.tar.size", "server.k8sclient.retry.base.backoff"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



argocd-cmd-params-cm21.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'argocd-cmd-params-cm' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"controller.k8sclient.retry.base.backoff", "controller.repo.error.grace.period.seconds", "reposerver.max.combined.directory.manifests.size", "reposerver.streamed.manifest.max.tar.size", "server.k8sclient.retry.base.backoff"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



argocd-cmd-params-cm6.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'argocd-cmd-params-cm' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"controller.k8sclient.retry.base.backoff", "controller.repo.error.grace.period.seconds", "controller.self.heal.backoff.cap.seconds", "reposerver.max.combined.directory.manifests.size", "reposerver.streamed.manifest.max.tar.size", "server.k8sclient.retry.base.backoff"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



argocd-config.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'argocd-cm' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"        username"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'argocd-cm' in 'default' namespace stores secrets in key(s) or value(s) '{"      bindPW"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



argocd-config1.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'argocd-cm' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"        username"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'argocd-cm' in 'default' namespace stores secrets in key(s) or value(s) '{"      bindPW"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



argocd-configs.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0109 (HIGH): ConfigMap 'argocd-cm' in 'argocd' namespace stores secrets in key(s) or value(s) '{"    clientSecret"}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



argocd-dex-server-deployment.yaml (kubernetes)
==============================================
Tests: 121 (SUCCESSES: 104, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-dex-server-deployment.yaml:20-37
────────────────────────────────────────
  20 ┌       - name: copyutil
  21 │         image: quay.io/argoproj/argocd:latest
  22 │         imagePullPolicy: Always
  23 │         command: [/bin/cp, -n, /usr/local/bin/argocd, /shared/argocd-dex]
  24 │         volumeMounts:
  25 │         - mountPath: /shared
  26 │           name: static-files
  27 │         - mountPath: /tmp
  28 └           name: dexconfig
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-dex-server-deployment.yaml:39-81
────────────────────────────────────────
  39 ┌       - name: dex
  40 │         image: ghcr.io/dexidp/dex:v2.41.1
  41 │         imagePullPolicy: Always
  42 │         command: [/shared/argocd-dex, rundex]
  43 │         env:
  44 │           - name: ARGOCD_DEX_SERVER_LOGFORMAT
  45 │             valueFrom:
  46 │               configMapKeyRef:
  47 └                 key: dexserver.log.format
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'copyutil' of Deployment 'argocd-dex-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 argocd-dex-server-deployment.yaml:20-37
────────────────────────────────────────
  20 ┌       - name: copyutil
  21 │         image: quay.io/argoproj/argocd:latest
  22 │         imagePullPolicy: Always
  23 │         command: [/bin/cp, -n, /usr/local/bin/argocd, /shared/argocd-dex]
  24 │         volumeMounts:
  25 │         - mountPath: /shared
  26 │           name: static-files
  27 │         - mountPath: /tmp
  28 └           name: dexconfig
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-dex-server-deployment.yaml:20-37
────────────────────────────────────────
  20 ┌       - name: copyutil
  21 │         image: quay.io/argoproj/argocd:latest
  22 │         imagePullPolicy: Always
  23 │         command: [/bin/cp, -n, /usr/local/bin/argocd, /shared/argocd-dex]
  24 │         volumeMounts:
  25 │         - mountPath: /shared
  26 │           name: static-files
  27 │         - mountPath: /tmp
  28 └           name: dexconfig
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-dex-server-deployment.yaml:39-81
────────────────────────────────────────
  39 ┌       - name: dex
  40 │         image: ghcr.io/dexidp/dex:v2.41.1
  41 │         imagePullPolicy: Always
  42 │         command: [/shared/argocd-dex, rundex]
  43 │         env:
  44 │           - name: ARGOCD_DEX_SERVER_LOGFORMAT
  45 │             valueFrom:
  46 │               configMapKeyRef:
  47 └                 key: dexserver.log.format
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-dex-server-deployment.yaml:20-37
────────────────────────────────────────
  20 ┌       - name: copyutil
  21 │         image: quay.io/argoproj/argocd:latest
  22 │         imagePullPolicy: Always
  23 │         command: [/bin/cp, -n, /usr/local/bin/argocd, /shared/argocd-dex]
  24 │         volumeMounts:
  25 │         - mountPath: /shared
  26 │           name: static-files
  27 │         - mountPath: /tmp
  28 └           name: dexconfig
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-dex-server-deployment.yaml:39-81
────────────────────────────────────────
  39 ┌       - name: dex
  40 │         image: ghcr.io/dexidp/dex:v2.41.1
  41 │         imagePullPolicy: Always
  42 │         command: [/shared/argocd-dex, rundex]
  43 │         env:
  44 │           - name: ARGOCD_DEX_SERVER_LOGFORMAT
  45 │             valueFrom:
  46 │               configMapKeyRef:
  47 └                 key: dexserver.log.format
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-dex-server-deployment.yaml:20-37
────────────────────────────────────────
  20 ┌       - name: copyutil
  21 │         image: quay.io/argoproj/argocd:latest
  22 │         imagePullPolicy: Always
  23 │         command: [/bin/cp, -n, /usr/local/bin/argocd, /shared/argocd-dex]
  24 │         volumeMounts:
  25 │         - mountPath: /shared
  26 │           name: static-files
  27 │         - mountPath: /tmp
  28 └           name: dexconfig
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-dex-server-deployment.yaml:39-81
────────────────────────────────────────
  39 ┌       - name: dex
  40 │         image: ghcr.io/dexidp/dex:v2.41.1
  41 │         imagePullPolicy: Always
  42 │         command: [/shared/argocd-dex, rundex]
  43 │         env:
  44 │           - name: ARGOCD_DEX_SERVER_LOGFORMAT
  45 │             valueFrom:
  46 │               configMapKeyRef:
  47 └                 key: dexserver.log.format
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-dex-server-deployment.yaml:20-37
────────────────────────────────────────
  20 ┌       - name: copyutil
  21 │         image: quay.io/argoproj/argocd:latest
  22 │         imagePullPolicy: Always
  23 │         command: [/bin/cp, -n, /usr/local/bin/argocd, /shared/argocd-dex]
  24 │         volumeMounts:
  25 │         - mountPath: /shared
  26 │           name: static-files
  27 │         - mountPath: /tmp
  28 └           name: dexconfig
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-dex-server-deployment.yaml:39-81
────────────────────────────────────────
  39 ┌       - name: dex
  40 │         image: ghcr.io/dexidp/dex:v2.41.1
  41 │         imagePullPolicy: Always
  42 │         command: [/shared/argocd-dex, rundex]
  43 │         env:
  44 │           - name: ARGOCD_DEX_SERVER_LOGFORMAT
  45 │             valueFrom:
  46 │               configMapKeyRef:
  47 └                 key: dexserver.log.format
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-dex-server-deployment.yaml:20-37
────────────────────────────────────────
  20 ┌       - name: copyutil
  21 │         image: quay.io/argoproj/argocd:latest
  22 │         imagePullPolicy: Always
  23 │         command: [/bin/cp, -n, /usr/local/bin/argocd, /shared/argocd-dex]
  24 │         volumeMounts:
  25 │         - mountPath: /shared
  26 │           name: static-files
  27 │         - mountPath: /tmp
  28 └           name: dexconfig
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-dex-server-deployment.yaml:39-81
────────────────────────────────────────
  39 ┌       - name: dex
  40 │         image: ghcr.io/dexidp/dex:v2.41.1
  41 │         imagePullPolicy: Always
  42 │         command: [/shared/argocd-dex, rundex]
  43 │         env:
  44 │           - name: ARGOCD_DEX_SERVER_LOGFORMAT
  45 │             valueFrom:
  46 │               configMapKeyRef:
  47 └                 key: dexserver.log.format
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-dex-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-dex-server-deployment.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/name: argocd-dex-server
   6 │     app.kubernetes.io/part-of: argocd
   7 │     app.kubernetes.io/component: dex-server
   8 └   name: argocd-dex-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment argocd-dex-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-dex-server-deployment.yaml:18-106
────────────────────────────────────────
  18 ┌       serviceAccountName: argocd-dex-server
  19 │       initContainers:
  20 │       - name: copyutil
  21 │         image: quay.io/argoproj/argocd:latest
  22 │         imagePullPolicy: Always
  23 │         command: [/bin/cp, -n, /usr/local/bin/argocd, /shared/argocd-dex]
  24 │         volumeMounts:
  25 │         - mountPath: /shared
  26 └           name: static-files
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container copyutil in deployment argocd-dex-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd-dex-server-deployment.yaml:20-37
────────────────────────────────────────
  20 ┌       - name: copyutil
  21 │         image: quay.io/argoproj/argocd:latest
  22 │         imagePullPolicy: Always
  23 │         command: [/bin/cp, -n, /usr/local/bin/argocd, /shared/argocd-dex]
  24 │         volumeMounts:
  25 │         - mountPath: /shared
  26 │           name: static-files
  27 │         - mountPath: /tmp
  28 └           name: dexconfig
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dex in deployment argocd-dex-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd-dex-server-deployment.yaml:39-81
────────────────────────────────────────
  39 ┌       - name: dex
  40 │         image: ghcr.io/dexidp/dex:v2.41.1
  41 │         imagePullPolicy: Always
  42 │         command: [/shared/argocd-dex, rundex]
  43 │         env:
  44 │           - name: ARGOCD_DEX_SERVER_LOGFORMAT
  45 │             valueFrom:
  46 │               configMapKeyRef:
  47 └                 key: dexserver.log.format
  ..   
────────────────────────────────────────



argocd-dex-server-deployment1.yaml (kubernetes)
===============================================
Tests: 121 (SUCCESSES: 104, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 13, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-dex-server-deployment1.yaml:20-37
────────────────────────────────────────
  20 ┌       - name: copyutil
  21 │         image: quay.io/argoproj/argocd:latest
  22 │         imagePullPolicy: Always
  23 │         command: [/bin/cp, -n, /usr/local/bin/argocd, /shared/argocd-dex]
  24 │         volumeMounts:
  25 │         - mountPath: /shared
  26 │           name: static-files
  27 │         - mountPath: /tmp
  28 └           name: dexconfig
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-dex-server-deployment1.yaml:39-69
────────────────────────────────────────
  39 ┌       - name: dex
  40 │         image: ghcr.io/dexidp/dex:v2.38.0
  41 │         imagePullPolicy: Always
  42 │         command: [/shared/argocd-dex, rundex]
  43 │         env:
  44 │           - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  45 │             valueFrom:
  46 │               configMapKeyRef:
  47 └                 name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'copyutil' of Deployment 'argocd-dex-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 argocd-dex-server-deployment1.yaml:20-37
────────────────────────────────────────
  20 ┌       - name: copyutil
  21 │         image: quay.io/argoproj/argocd:latest
  22 │         imagePullPolicy: Always
  23 │         command: [/bin/cp, -n, /usr/local/bin/argocd, /shared/argocd-dex]
  24 │         volumeMounts:
  25 │         - mountPath: /shared
  26 │           name: static-files
  27 │         - mountPath: /tmp
  28 └           name: dexconfig
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-dex-server-deployment1.yaml:20-37
────────────────────────────────────────
  20 ┌       - name: copyutil
  21 │         image: quay.io/argoproj/argocd:latest
  22 │         imagePullPolicy: Always
  23 │         command: [/bin/cp, -n, /usr/local/bin/argocd, /shared/argocd-dex]
  24 │         volumeMounts:
  25 │         - mountPath: /shared
  26 │           name: static-files
  27 │         - mountPath: /tmp
  28 └           name: dexconfig
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-dex-server-deployment1.yaml:39-69
────────────────────────────────────────
  39 ┌       - name: dex
  40 │         image: ghcr.io/dexidp/dex:v2.38.0
  41 │         imagePullPolicy: Always
  42 │         command: [/shared/argocd-dex, rundex]
  43 │         env:
  44 │           - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  45 │             valueFrom:
  46 │               configMapKeyRef:
  47 └                 name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-dex-server-deployment1.yaml:20-37
────────────────────────────────────────
  20 ┌       - name: copyutil
  21 │         image: quay.io/argoproj/argocd:latest
  22 │         imagePullPolicy: Always
  23 │         command: [/bin/cp, -n, /usr/local/bin/argocd, /shared/argocd-dex]
  24 │         volumeMounts:
  25 │         - mountPath: /shared
  26 │           name: static-files
  27 │         - mountPath: /tmp
  28 └           name: dexconfig
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-dex-server-deployment1.yaml:39-69
────────────────────────────────────────
  39 ┌       - name: dex
  40 │         image: ghcr.io/dexidp/dex:v2.38.0
  41 │         imagePullPolicy: Always
  42 │         command: [/shared/argocd-dex, rundex]
  43 │         env:
  44 │           - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  45 │             valueFrom:
  46 │               configMapKeyRef:
  47 └                 name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-dex-server-deployment1.yaml:20-37
────────────────────────────────────────
  20 ┌       - name: copyutil
  21 │         image: quay.io/argoproj/argocd:latest
  22 │         imagePullPolicy: Always
  23 │         command: [/bin/cp, -n, /usr/local/bin/argocd, /shared/argocd-dex]
  24 │         volumeMounts:
  25 │         - mountPath: /shared
  26 │           name: static-files
  27 │         - mountPath: /tmp
  28 └           name: dexconfig
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-dex-server-deployment1.yaml:39-69
────────────────────────────────────────
  39 ┌       - name: dex
  40 │         image: ghcr.io/dexidp/dex:v2.38.0
  41 │         imagePullPolicy: Always
  42 │         command: [/shared/argocd-dex, rundex]
  43 │         env:
  44 │           - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  45 │             valueFrom:
  46 │               configMapKeyRef:
  47 └                 name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-dex-server-deployment1.yaml:20-37
────────────────────────────────────────
  20 ┌       - name: copyutil
  21 │         image: quay.io/argoproj/argocd:latest
  22 │         imagePullPolicy: Always
  23 │         command: [/bin/cp, -n, /usr/local/bin/argocd, /shared/argocd-dex]
  24 │         volumeMounts:
  25 │         - mountPath: /shared
  26 │           name: static-files
  27 │         - mountPath: /tmp
  28 └           name: dexconfig
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-dex-server-deployment1.yaml:39-69
────────────────────────────────────────
  39 ┌       - name: dex
  40 │         image: ghcr.io/dexidp/dex:v2.38.0
  41 │         imagePullPolicy: Always
  42 │         command: [/shared/argocd-dex, rundex]
  43 │         env:
  44 │           - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  45 │             valueFrom:
  46 │               configMapKeyRef:
  47 └                 name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-dex-server-deployment1.yaml:20-37
────────────────────────────────────────
  20 ┌       - name: copyutil
  21 │         image: quay.io/argoproj/argocd:latest
  22 │         imagePullPolicy: Always
  23 │         command: [/bin/cp, -n, /usr/local/bin/argocd, /shared/argocd-dex]
  24 │         volumeMounts:
  25 │         - mountPath: /shared
  26 │           name: static-files
  27 │         - mountPath: /tmp
  28 └           name: dexconfig
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-dex-server-deployment1.yaml:39-69
────────────────────────────────────────
  39 ┌       - name: dex
  40 │         image: ghcr.io/dexidp/dex:v2.38.0
  41 │         imagePullPolicy: Always
  42 │         command: [/shared/argocd-dex, rundex]
  43 │         env:
  44 │           - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  45 │             valueFrom:
  46 │               configMapKeyRef:
  47 └                 name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-dex-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-dex-server-deployment1.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/name: argocd-dex-server
   6 │     app.kubernetes.io/part-of: argocd
   7 │     app.kubernetes.io/component: dex-server
   8 └   name: argocd-dex-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment argocd-dex-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-dex-server-deployment1.yaml:18-94
────────────────────────────────────────
  18 ┌       serviceAccountName: argocd-dex-server
  19 │       initContainers:
  20 │       - name: copyutil
  21 │         image: quay.io/argoproj/argocd:latest
  22 │         imagePullPolicy: Always
  23 │         command: [/bin/cp, -n, /usr/local/bin/argocd, /shared/argocd-dex]
  24 │         volumeMounts:
  25 │         - mountPath: /shared
  26 └           name: static-files
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container copyutil in deployment argocd-dex-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd-dex-server-deployment1.yaml:20-37
────────────────────────────────────────
  20 ┌       - name: copyutil
  21 │         image: quay.io/argoproj/argocd:latest
  22 │         imagePullPolicy: Always
  23 │         command: [/bin/cp, -n, /usr/local/bin/argocd, /shared/argocd-dex]
  24 │         volumeMounts:
  25 │         - mountPath: /shared
  26 │           name: static-files
  27 │         - mountPath: /tmp
  28 └           name: dexconfig
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dex in deployment argocd-dex-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd-dex-server-deployment1.yaml:39-69
────────────────────────────────────────
  39 ┌       - name: dex
  40 │         image: ghcr.io/dexidp/dex:v2.38.0
  41 │         imagePullPolicy: Always
  42 │         command: [/shared/argocd-dex, rundex]
  43 │         env:
  44 │           - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  45 │             valueFrom:
  46 │               configMapKeyRef:
  47 └                 name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────



argocd-dex-server-role.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-dex-server' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd-dex-server-role.yaml:10-18
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ""
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - list
  18 └   - watch
────────────────────────────────────────



argocd-dex-server-role1.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-dex-server' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd-dex-server-role1.yaml:10-18
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ""
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - list
  18 └   - watch
────────────────────────────────────────



argocd-known-hosts-mounts.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'argocd-server' of Deployment 'argocd-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 argocd-known-hosts-mounts.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 argocd-known-hosts-mounts.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'argocd-server' of 'deployment' 'argocd-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 argocd-known-hosts-mounts.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-known-hosts-mounts.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'argocd-server' of Deployment 'argocd-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 argocd-known-hosts-mounts.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'argocd-server' of Deployment 'argocd-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 argocd-known-hosts-mounts.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'argocd-server' of Deployment 'argocd-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 argocd-known-hosts-mounts.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-known-hosts-mounts.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-known-hosts-mounts.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-known-hosts-mounts.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-known-hosts-mounts.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-known-hosts-mounts.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 argocd-known-hosts-mounts.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "argocd-server" of deployment "argocd-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 argocd-known-hosts-mounts.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 argocd-known-hosts-mounts.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-known-hosts-mounts.yaml:4
────────────────────────────────────────
   4 [   name: argocd-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container argocd-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-known-hosts-mounts.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment argocd-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-known-hosts-mounts.yaml:8-17
────────────────────────────────────────
   8 ┌       containers:
   9 │       - name: argocd-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 │           subPath: known_hosts
  14 │       volumes:
  15 │       - name: known-hosts
  16 │         configMap:
  17 └           name: argocd-known-hosts
────────────────────────────────────────



argocd-known-hosts-mounts1.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'argocd-server' of Deployment 'argocd-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 argocd-known-hosts-mounts1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 argocd-known-hosts-mounts1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'argocd-server' of 'deployment' 'argocd-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 argocd-known-hosts-mounts1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-known-hosts-mounts1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'argocd-server' of Deployment 'argocd-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 argocd-known-hosts-mounts1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'argocd-server' of Deployment 'argocd-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 argocd-known-hosts-mounts1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'argocd-server' of Deployment 'argocd-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 argocd-known-hosts-mounts1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-known-hosts-mounts1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-known-hosts-mounts1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-known-hosts-mounts1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-known-hosts-mounts1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-known-hosts-mounts1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 argocd-known-hosts-mounts1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "argocd-server" of deployment "argocd-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 argocd-known-hosts-mounts1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 argocd-known-hosts-mounts1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-known-hosts-mounts1.yaml:4
────────────────────────────────────────
   4 [   name: argocd-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container argocd-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-known-hosts-mounts1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment argocd-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-known-hosts-mounts1.yaml:8-17
────────────────────────────────────────
   8 ┌       containers:
   9 │       - name: argocd-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 │           subPath: known_hosts
  14 │       volumes:
  15 │       - name: known-hosts
  16 │         configMap:
  17 └           name: argocd-known-hosts
────────────────────────────────────────



argocd-known-hosts-mounts1_1.yaml (kubernetes)
==============================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 argocd-known-hosts-mounts1_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-repo-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 argocd-known-hosts-mounts1_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-repo-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'argocd-repo-server' of 'deployment' 'argocd-repo-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 argocd-known-hosts-mounts1_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-repo-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-known-hosts-mounts1_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-repo-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 argocd-known-hosts-mounts1_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-repo-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 argocd-known-hosts-mounts1_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-repo-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 argocd-known-hosts-mounts1_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-repo-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-known-hosts-mounts1_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-repo-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-known-hosts-mounts1_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-repo-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-known-hosts-mounts1_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-repo-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-known-hosts-mounts1_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-repo-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-known-hosts-mounts1_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-repo-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 argocd-known-hosts-mounts1_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-repo-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "argocd-repo-server" of deployment "argocd-repo-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 argocd-known-hosts-mounts1_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-repo-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 argocd-known-hosts-mounts1_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-repo-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-repo-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-known-hosts-mounts1_1.yaml:4
────────────────────────────────────────
   4 [   name: argocd-repo-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container argocd-repo-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-known-hosts-mounts1_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-repo-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment argocd-repo-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-known-hosts-mounts1_1.yaml:8-17
────────────────────────────────────────
   8 ┌       containers:
   9 │       - name: argocd-repo-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 │           subPath: known_hosts
  14 │       volumes:
  15 │       - name: known-hosts
  16 │         configMap:
  17 └           name: argocd-known-hosts
────────────────────────────────────────



argocd-known-hosts-mounts1_2.yaml (kubernetes)
==============================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'argocd-application-controller' of Deployment 'argocd-application-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 argocd-known-hosts-mounts1_2.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'argocd-application-controller' of Deployment 'argocd-application-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 argocd-known-hosts-mounts1_2.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'argocd-application-controller' of 'deployment' 'argocd-application-controller' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 argocd-known-hosts-mounts1_2.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'argocd-application-controller' of Deployment 'argocd-application-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-known-hosts-mounts1_2.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'argocd-application-controller' of Deployment 'argocd-application-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 argocd-known-hosts-mounts1_2.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'argocd-application-controller' of Deployment 'argocd-application-controller' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 argocd-known-hosts-mounts1_2.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'argocd-application-controller' of Deployment 'argocd-application-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 argocd-known-hosts-mounts1_2.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-application-controller' of Deployment 'argocd-application-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-known-hosts-mounts1_2.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-application-controller' of Deployment 'argocd-application-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-known-hosts-mounts1_2.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-application-controller' of Deployment 'argocd-application-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-known-hosts-mounts1_2.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-application-controller' of Deployment 'argocd-application-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-known-hosts-mounts1_2.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-application-controller' of Deployment 'argocd-application-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-known-hosts-mounts1_2.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 argocd-known-hosts-mounts1_2.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "argocd-application-controller" of deployment "argocd-application-controller" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 argocd-known-hosts-mounts1_2.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 argocd-known-hosts-mounts1_2.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-application-controller in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-known-hosts-mounts1_2.yaml:4
────────────────────────────────────────
   4 [   name: argocd-application-controller
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container argocd-application-controller in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-known-hosts-mounts1_2.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment argocd-application-controller in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-known-hosts-mounts1_2.yaml:8-17
────────────────────────────────────────
   8 ┌       containers:
   9 │       - name: argocd-application-controller
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 │           subPath: known_hosts
  14 │       volumes:
  15 │       - name: known-hosts
  16 │         configMap:
  17 └           name: argocd-known-hosts
────────────────────────────────────────



argocd-known-hosts-mounts_1.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 argocd-known-hosts-mounts_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-repo-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 argocd-known-hosts-mounts_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-repo-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'argocd-repo-server' of 'deployment' 'argocd-repo-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 argocd-known-hosts-mounts_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-repo-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-known-hosts-mounts_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-repo-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 argocd-known-hosts-mounts_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-repo-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 argocd-known-hosts-mounts_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-repo-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 argocd-known-hosts-mounts_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-repo-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-known-hosts-mounts_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-repo-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-known-hosts-mounts_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-repo-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-known-hosts-mounts_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-repo-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-known-hosts-mounts_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-repo-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-known-hosts-mounts_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-repo-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 argocd-known-hosts-mounts_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-repo-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "argocd-repo-server" of deployment "argocd-repo-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 argocd-known-hosts-mounts_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-repo-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 argocd-known-hosts-mounts_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-repo-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-repo-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-known-hosts-mounts_1.yaml:4
────────────────────────────────────────
   4 [   name: argocd-repo-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container argocd-repo-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-known-hosts-mounts_1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-repo-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment argocd-repo-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-known-hosts-mounts_1.yaml:8-17
────────────────────────────────────────
   8 ┌       containers:
   9 │       - name: argocd-repo-server
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 │           subPath: known_hosts
  14 │       volumes:
  15 │       - name: known-hosts
  16 │         configMap:
  17 └           name: argocd-known-hosts
────────────────────────────────────────



argocd-known-hosts-mounts_2.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'argocd-application-controller' of Deployment 'argocd-application-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 argocd-known-hosts-mounts_2.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'argocd-application-controller' of Deployment 'argocd-application-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 argocd-known-hosts-mounts_2.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'argocd-application-controller' of 'deployment' 'argocd-application-controller' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 argocd-known-hosts-mounts_2.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'argocd-application-controller' of Deployment 'argocd-application-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-known-hosts-mounts_2.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'argocd-application-controller' of Deployment 'argocd-application-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 argocd-known-hosts-mounts_2.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'argocd-application-controller' of Deployment 'argocd-application-controller' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 argocd-known-hosts-mounts_2.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'argocd-application-controller' of Deployment 'argocd-application-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 argocd-known-hosts-mounts_2.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-application-controller' of Deployment 'argocd-application-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-known-hosts-mounts_2.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-application-controller' of Deployment 'argocd-application-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-known-hosts-mounts_2.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-application-controller' of Deployment 'argocd-application-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-known-hosts-mounts_2.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-application-controller' of Deployment 'argocd-application-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-known-hosts-mounts_2.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-application-controller' of Deployment 'argocd-application-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-known-hosts-mounts_2.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 argocd-known-hosts-mounts_2.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "argocd-application-controller" of deployment "argocd-application-controller" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 argocd-known-hosts-mounts_2.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 argocd-known-hosts-mounts_2.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-application-controller in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-known-hosts-mounts_2.yaml:4
────────────────────────────────────────
   4 [   name: argocd-application-controller
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container argocd-application-controller in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-known-hosts-mounts_2.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-application-controller
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 └           subPath: known_hosts
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment argocd-application-controller in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-known-hosts-mounts_2.yaml:8-17
────────────────────────────────────────
   8 ┌       containers:
   9 │       - name: argocd-application-controller
  10 │         volumeMounts:
  11 │         - name: known-hosts
  12 │           mountPath: /etc/ssh/ssh_known_hosts
  13 │           subPath: known_hosts
  14 │       volumes:
  15 │       - name: known-hosts
  16 │         configMap:
  17 └           name: argocd-known-hosts
────────────────────────────────────────



argocd-notifications-controller-deployment.yaml (kubernetes)
============================================================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 7, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-notifications-controller-deployment.yaml:36-86
────────────────────────────────────────
  36 ┌         - args:
  37 │             - /usr/local/bin/argocd-notifications
  38 │           env:
  39 │             - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  40 │               valueFrom:
  41 │                 configMapKeyRef:
  42 │                   key: notificationscontroller.log.format
  43 │                   name: argocd-cmd-params-cm
  44 └                   optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 argocd-notifications-controller-deployment.yaml:36-86
────────────────────────────────────────
  36 ┌         - args:
  37 │             - /usr/local/bin/argocd-notifications
  38 │           env:
  39 │             - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  40 │               valueFrom:
  41 │                 configMapKeyRef:
  42 │                   key: notificationscontroller.log.format
  43 │                   name: argocd-cmd-params-cm
  44 └                   optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-notifications-controller-deployment.yaml:36-86
────────────────────────────────────────
  36 ┌         - args:
  37 │             - /usr/local/bin/argocd-notifications
  38 │           env:
  39 │             - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  40 │               valueFrom:
  41 │                 configMapKeyRef:
  42 │                   key: notificationscontroller.log.format
  43 │                   name: argocd-cmd-params-cm
  44 └                   optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-notifications-controller-deployment.yaml:36-86
────────────────────────────────────────
  36 ┌         - args:
  37 │             - /usr/local/bin/argocd-notifications
  38 │           env:
  39 │             - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  40 │               valueFrom:
  41 │                 configMapKeyRef:
  42 │                   key: notificationscontroller.log.format
  43 │                   name: argocd-cmd-params-cm
  44 └                   optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-notifications-controller-deployment.yaml:36-86
────────────────────────────────────────
  36 ┌         - args:
  37 │             - /usr/local/bin/argocd-notifications
  38 │           env:
  39 │             - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  40 │               valueFrom:
  41 │                 configMapKeyRef:
  42 │                   key: notificationscontroller.log.format
  43 │                   name: argocd-cmd-params-cm
  44 └                   optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-notifications-controller-deployment.yaml:36-86
────────────────────────────────────────
  36 ┌         - args:
  37 │             - /usr/local/bin/argocd-notifications
  38 │           env:
  39 │             - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  40 │               valueFrom:
  41 │                 configMapKeyRef:
  42 │                   key: notificationscontroller.log.format
  43 │                   name: argocd-cmd-params-cm
  44 └                   optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-notifications-controller-deployment.yaml:36-86
────────────────────────────────────────
  36 ┌         - args:
  37 │             - /usr/local/bin/argocd-notifications
  38 │           env:
  39 │             - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  40 │               valueFrom:
  41 │                 configMapKeyRef:
  42 │                   key: notificationscontroller.log.format
  43 │                   name: argocd-cmd-params-cm
  44 └                   optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-notifications-controller in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-notifications-controller-deployment.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: notifications-controller
   6 │     app.kubernetes.io/name: argocd-notifications-controller
   7 │     app.kubernetes.io/part-of: argocd
   8 └   name: argocd-notifications-controller
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container argocd-notifications-controller in deployment argocd-notifications-controller (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd-notifications-controller-deployment.yaml:36-86
────────────────────────────────────────
  36 ┌         - args:
  37 │             - /usr/local/bin/argocd-notifications
  38 │           env:
  39 │             - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  40 │               valueFrom:
  41 │                 configMapKeyRef:
  42 │                   key: notificationscontroller.log.format
  43 │                   name: argocd-cmd-params-cm
  44 └                   optional: true
  ..   
────────────────────────────────────────



argocd-notifications-controller-deployment1.yaml (kubernetes)
=============================================================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 7, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-notifications-controller-deployment1.yaml:36-80
────────────────────────────────────────
  36 ┌         - args:
  37 │             - /usr/local/bin/argocd-notifications
  38 │           env:
  39 │             - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  40 │               valueFrom:
  41 │                 configMapKeyRef:
  42 │                   key: notificationscontroller.log.format
  43 │                   name: argocd-cmd-params-cm
  44 └                   optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 argocd-notifications-controller-deployment1.yaml:36-80
────────────────────────────────────────
  36 ┌         - args:
  37 │             - /usr/local/bin/argocd-notifications
  38 │           env:
  39 │             - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  40 │               valueFrom:
  41 │                 configMapKeyRef:
  42 │                   key: notificationscontroller.log.format
  43 │                   name: argocd-cmd-params-cm
  44 └                   optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-notifications-controller-deployment1.yaml:36-80
────────────────────────────────────────
  36 ┌         - args:
  37 │             - /usr/local/bin/argocd-notifications
  38 │           env:
  39 │             - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  40 │               valueFrom:
  41 │                 configMapKeyRef:
  42 │                   key: notificationscontroller.log.format
  43 │                   name: argocd-cmd-params-cm
  44 └                   optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-notifications-controller-deployment1.yaml:36-80
────────────────────────────────────────
  36 ┌         - args:
  37 │             - /usr/local/bin/argocd-notifications
  38 │           env:
  39 │             - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  40 │               valueFrom:
  41 │                 configMapKeyRef:
  42 │                   key: notificationscontroller.log.format
  43 │                   name: argocd-cmd-params-cm
  44 └                   optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-notifications-controller-deployment1.yaml:36-80
────────────────────────────────────────
  36 ┌         - args:
  37 │             - /usr/local/bin/argocd-notifications
  38 │           env:
  39 │             - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  40 │               valueFrom:
  41 │                 configMapKeyRef:
  42 │                   key: notificationscontroller.log.format
  43 │                   name: argocd-cmd-params-cm
  44 └                   optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-notifications-controller-deployment1.yaml:36-80
────────────────────────────────────────
  36 ┌         - args:
  37 │             - /usr/local/bin/argocd-notifications
  38 │           env:
  39 │             - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  40 │               valueFrom:
  41 │                 configMapKeyRef:
  42 │                   key: notificationscontroller.log.format
  43 │                   name: argocd-cmd-params-cm
  44 └                   optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-notifications-controller-deployment1.yaml:36-80
────────────────────────────────────────
  36 ┌         - args:
  37 │             - /usr/local/bin/argocd-notifications
  38 │           env:
  39 │             - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  40 │               valueFrom:
  41 │                 configMapKeyRef:
  42 │                   key: notificationscontroller.log.format
  43 │                   name: argocd-cmd-params-cm
  44 └                   optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-notifications-controller in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-notifications-controller-deployment1.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: notifications-controller
   6 │     app.kubernetes.io/name: argocd-notifications-controller
   7 │     app.kubernetes.io/part-of: argocd
   8 └   name: argocd-notifications-controller
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container argocd-notifications-controller in deployment argocd-notifications-controller (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd-notifications-controller-deployment1.yaml:36-80
────────────────────────────────────────
  36 ┌         - args:
  37 │             - /usr/local/bin/argocd-notifications
  38 │           env:
  39 │             - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  40 │               valueFrom:
  41 │                 configMapKeyRef:
  42 │                   key: notificationscontroller.log.format
  43 │                   name: argocd-cmd-params-cm
  44 └                   optional: true
  ..   
────────────────────────────────────────



argocd-notifications-controller-rbac-clusterrole.yaml (kubernetes)
==================================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'argocd-notifications-controller-cluster-apps' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 argocd-notifications-controller-rbac-clusterrole.yaml:20-28
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ""
  22 │   resources:
  23 │   - secrets
  24 │   - configmaps
  25 │   verbs:
  26 │   - get
  27 │   - list
  28 └   - watch
────────────────────────────────────────



argocd-notifications-controller-rbac-clusterrole1.yaml (kubernetes)
===================================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'argocd-notifications-controller-cluster-apps' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 argocd-notifications-controller-rbac-clusterrole1.yaml:20-28
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ""
  22 │   resources:
  23 │   - secrets
  24 │   - configmaps
  25 │   verbs:
  26 │   - get
  27 │   - list
  28 └   - watch
────────────────────────────────────────



argocd-notifications-controller-role.yaml (kubernetes)
======================================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-notifications-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd-notifications-controller-role.yaml:21-28
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ""
  23 │   resources:
  24 │   - configmaps
  25 │   - secrets
  26 │   verbs:
  27 │   - list
  28 └   - watch
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argocd-notifications-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd-notifications-controller-role.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ""
  39 │   resourceNames:
  40 │   - argocd-notifications-secret
  41 │   resources:
  42 │   - secrets
  43 │   verbs:
  44 └   - get
────────────────────────────────────────



argocd-notifications-controller-role1.yaml (kubernetes)
=======================================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-notifications-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd-notifications-controller-role1.yaml:21-28
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ""
  23 │   resources:
  24 │   - configmaps
  25 │   - secrets
  26 │   verbs:
  27 │   - list
  28 └   - watch
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argocd-notifications-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd-notifications-controller-role1.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ""
  39 │   resourceNames:
  40 │   - argocd-notifications-secret
  41 │   resources:
  42 │   - secrets
  43 │   verbs:
  44 └   - get
────────────────────────────────────────



argocd-rbac-cm12.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'argocd-rbac-cm' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"g, selfuryon@gmail.com, role", "policy.csv"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



argocd-redis-deployment.yaml (kubernetes)
=========================================
Tests: 120 (SUCCESSES: 105, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 13, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-redis-deployment.yaml:42-64
────────────────────────────────────────
  42 ┌       - name: redis
  43 │         image: redis:7.0.15-alpine
  44 │         imagePullPolicy: Always
  45 │         args:
  46 │         - "--save"
  47 │         - ""
  48 │         - "--appendonly"
  49 │         - "no"
  50 └         - --requirepass $(REDIS_PASSWORD)
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-redis-deployment.yaml:19-34
────────────────────────────────────────
  19 ┌         - command:
  20 │             - argocd
  21 │             - admin
  22 │             - redis-initial-password
  23 │           image: quay.io/argoproj/argocd:latest
  24 │           imagePullPolicy: IfNotPresent
  25 │           name: secret-init
  26 │           securityContext:
  27 └             allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'secret-init' of Deployment 'argocd-redis' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 argocd-redis-deployment.yaml:19-34
────────────────────────────────────────
  19 ┌         - command:
  20 │             - argocd
  21 │             - admin
  22 │             - redis-initial-password
  23 │           image: quay.io/argoproj/argocd:latest
  24 │           imagePullPolicy: IfNotPresent
  25 │           name: secret-init
  26 │           securityContext:
  27 └             allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-redis-deployment.yaml:42-64
────────────────────────────────────────
  42 ┌       - name: redis
  43 │         image: redis:7.0.15-alpine
  44 │         imagePullPolicy: Always
  45 │         args:
  46 │         - "--save"
  47 │         - ""
  48 │         - "--appendonly"
  49 │         - "no"
  50 └         - --requirepass $(REDIS_PASSWORD)
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-redis-deployment.yaml:19-34
────────────────────────────────────────
  19 ┌         - command:
  20 │             - argocd
  21 │             - admin
  22 │             - redis-initial-password
  23 │           image: quay.io/argoproj/argocd:latest
  24 │           imagePullPolicy: IfNotPresent
  25 │           name: secret-init
  26 │           securityContext:
  27 └             allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-redis-deployment.yaml:42-64
────────────────────────────────────────
  42 ┌       - name: redis
  43 │         image: redis:7.0.15-alpine
  44 │         imagePullPolicy: Always
  45 │         args:
  46 │         - "--save"
  47 │         - ""
  48 │         - "--appendonly"
  49 │         - "no"
  50 └         - --requirepass $(REDIS_PASSWORD)
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-redis-deployment.yaml:19-34
────────────────────────────────────────
  19 ┌         - command:
  20 │             - argocd
  21 │             - admin
  22 │             - redis-initial-password
  23 │           image: quay.io/argoproj/argocd:latest
  24 │           imagePullPolicy: IfNotPresent
  25 │           name: secret-init
  26 │           securityContext:
  27 └             allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-redis-deployment.yaml:42-64
────────────────────────────────────────
  42 ┌       - name: redis
  43 │         image: redis:7.0.15-alpine
  44 │         imagePullPolicy: Always
  45 │         args:
  46 │         - "--save"
  47 │         - ""
  48 │         - "--appendonly"
  49 │         - "no"
  50 └         - --requirepass $(REDIS_PASSWORD)
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-redis-deployment.yaml:19-34
────────────────────────────────────────
  19 ┌         - command:
  20 │             - argocd
  21 │             - admin
  22 │             - redis-initial-password
  23 │           image: quay.io/argoproj/argocd:latest
  24 │           imagePullPolicy: IfNotPresent
  25 │           name: secret-init
  26 │           securityContext:
  27 └             allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-redis-deployment.yaml:42-64
────────────────────────────────────────
  42 ┌       - name: redis
  43 │         image: redis:7.0.15-alpine
  44 │         imagePullPolicy: Always
  45 │         args:
  46 │         - "--save"
  47 │         - ""
  48 │         - "--appendonly"
  49 │         - "no"
  50 └         - --requirepass $(REDIS_PASSWORD)
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-redis-deployment.yaml:19-34
────────────────────────────────────────
  19 ┌         - command:
  20 │             - argocd
  21 │             - admin
  22 │             - redis-initial-password
  23 │           image: quay.io/argoproj/argocd:latest
  24 │           imagePullPolicy: IfNotPresent
  25 │           name: secret-init
  26 │           securityContext:
  27 └             allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-redis-deployment.yaml:42-64
────────────────────────────────────────
  42 ┌       - name: redis
  43 │         image: redis:7.0.15-alpine
  44 │         imagePullPolicy: Always
  45 │         args:
  46 │         - "--save"
  47 │         - ""
  48 │         - "--appendonly"
  49 │         - "no"
  50 └         - --requirepass $(REDIS_PASSWORD)
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-redis-deployment.yaml:19-34
────────────────────────────────────────
  19 ┌         - command:
  20 │             - argocd
  21 │             - admin
  22 │             - redis-initial-password
  23 │           image: quay.io/argoproj/argocd:latest
  24 │           imagePullPolicy: IfNotPresent
  25 │           name: secret-init
  26 │           securityContext:
  27 └             allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-redis in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-redis-deployment.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/name: argocd-redis
   6 │     app.kubernetes.io/part-of: argocd
   7 │     app.kubernetes.io/component: redis
   8 └   name: argocd-redis
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container secret-init in deployment argocd-redis (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd-redis-deployment.yaml:19-34
────────────────────────────────────────
  19 ┌         - command:
  20 │             - argocd
  21 │             - admin
  22 │             - redis-initial-password
  23 │           image: quay.io/argoproj/argocd:latest
  24 │           imagePullPolicy: IfNotPresent
  25 │           name: secret-init
  26 │           securityContext:
  27 └             allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────



argocd-redis-deployment1.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 7, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-redis-deployment1.yaml:25-40
────────────────────────────────────────
  25 ┌       - name: redis
  26 │         image: redis:7.0.14-alpine
  27 │         imagePullPolicy: Always
  28 │         args:
  29 │         - "--save"
  30 │         - ""
  31 │         - "--appendonly"
  32 │         - "no"
  33 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-redis-deployment1.yaml:25-40
────────────────────────────────────────
  25 ┌       - name: redis
  26 │         image: redis:7.0.14-alpine
  27 │         imagePullPolicy: Always
  28 │         args:
  29 │         - "--save"
  30 │         - ""
  31 │         - "--appendonly"
  32 │         - "no"
  33 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-redis-deployment1.yaml:25-40
────────────────────────────────────────
  25 ┌       - name: redis
  26 │         image: redis:7.0.14-alpine
  27 │         imagePullPolicy: Always
  28 │         args:
  29 │         - "--save"
  30 │         - ""
  31 │         - "--appendonly"
  32 │         - "no"
  33 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-redis-deployment1.yaml:25-40
────────────────────────────────────────
  25 ┌       - name: redis
  26 │         image: redis:7.0.14-alpine
  27 │         imagePullPolicy: Always
  28 │         args:
  29 │         - "--save"
  30 │         - ""
  31 │         - "--appendonly"
  32 │         - "no"
  33 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-redis-deployment1.yaml:25-40
────────────────────────────────────────
  25 ┌       - name: redis
  26 │         image: redis:7.0.14-alpine
  27 │         imagePullPolicy: Always
  28 │         args:
  29 │         - "--save"
  30 │         - ""
  31 │         - "--appendonly"
  32 │         - "no"
  33 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-redis-deployment1.yaml:25-40
────────────────────────────────────────
  25 ┌       - name: redis
  26 │         image: redis:7.0.14-alpine
  27 │         imagePullPolicy: Always
  28 │         args:
  29 │         - "--save"
  30 │         - ""
  31 │         - "--appendonly"
  32 │         - "no"
  33 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-redis in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-redis-deployment1.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/name: argocd-redis
   6 │     app.kubernetes.io/part-of: argocd
   7 │     app.kubernetes.io/component: redis
   8 └   name: argocd-redis
────────────────────────────────────────



argocd-redis-role.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-redis' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd-redis-role.yaml:10-17
────────────────────────────────────────
  10 ┌   - apiGroups:
  11 │       - ""
  12 │     resources:
  13 │       - secrets
  14 │     resourceNames:
  15 │       - argocd-redis
  16 │     verbs:
  17 └       - get
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argocd-redis' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd-redis-role.yaml:18-23
────────────────────────────────────────
  18 ┌   - apiGroups:
  19 │       - ""
  20 │     resources:
  21 │       - secrets
  22 │     verbs:
  23 └       - create
────────────────────────────────────────



argocd-remote-permissions.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 argocd-remote-permissions.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'null' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 argocd-remote-permissions.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────



argocd-remote-permissions1.yaml (kubernetes)
============================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 argocd-remote-permissions1.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'null' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 argocd-remote-permissions1.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────



argocd-repo-server-deploy.yaml (kubernetes)
===========================================
Tests: 148 (SUCCESSES: 96, FAILURES: 52)
Failures: 52 (UNKNOWN: 0, LOW: 33, MEDIUM: 12, HIGH: 7, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:41-49
────────────────────────────────────────
  41 ┌         - name: argocd-repo-server
  42 │           volumeMounts:
  43 │             - mountPath: /usr/local/bin/docker-credential-gcr
  44 │               name: docker-credential-gcr
  45 │               subPath: docker-credential-gcr
  46 │               readOnly: true
  47 │             - mountPath: /home/argocd/.docker
  48 │               name: docker-config
  49 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'argocd-vault-plugin' of Deployment 'argocd-repo-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:76-104
────────────────────────────────────────
  76 ┌         - name: argocd-vault-plugin
  77 │           command: [/var/run/argocd/argocd-cmp-server]
  78 │           env:
  79 │             - name: AVP_TYPE
  80 │               value: gcpsecretmanager
  81 │           image: quay.io/argoproj/argocd:v2.11.0
  82 │           securityContext:
  83 │             runAsNonRoot: true
  84 └             runAsUser: 999
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'cue-plugin' of Deployment 'argocd-repo-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:50-75
────────────────────────────────────────
  50 ┌         - name: cue-plugin
  51 │           command: [/var/run/argocd/argocd-cmp-server]
  52 │           image: busybox:1.36
  53 │           securityContext:
  54 │             runAsNonRoot: true
  55 │             runAsUser: 999
  56 │           volumeMounts:
  57 │             - mountPath: /var/run/argocd
  58 └               name: var-files
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'toolchain-setup' of Deployment 'argocd-repo-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:10-39
────────────────────────────────────────
  10 ┌         - name: toolchain-setup
  11 │           image: busybox:1.36
  12 │           env:
  13 │             - name: CUE_VERSION
  14 │               value: 0.8.2
  15 │             - name: AVP_VERSION
  16 │               value: 1.17.0
  17 │             - name: GCR_VERSION
  18 └               value: 2.1.22
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:41-49
────────────────────────────────────────
  41 ┌         - name: argocd-repo-server
  42 │           volumeMounts:
  43 │             - mountPath: /usr/local/bin/docker-credential-gcr
  44 │               name: docker-credential-gcr
  45 │               subPath: docker-credential-gcr
  46 │               readOnly: true
  47 │             - mountPath: /home/argocd/.docker
  48 │               name: docker-config
  49 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'argocd-vault-plugin' of Deployment 'argocd-repo-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:76-104
────────────────────────────────────────
  76 ┌         - name: argocd-vault-plugin
  77 │           command: [/var/run/argocd/argocd-cmp-server]
  78 │           env:
  79 │             - name: AVP_TYPE
  80 │               value: gcpsecretmanager
  81 │           image: quay.io/argoproj/argocd:v2.11.0
  82 │           securityContext:
  83 │             runAsNonRoot: true
  84 └             runAsUser: 999
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cue-plugin' of Deployment 'argocd-repo-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:50-75
────────────────────────────────────────
  50 ┌         - name: cue-plugin
  51 │           command: [/var/run/argocd/argocd-cmp-server]
  52 │           image: busybox:1.36
  53 │           securityContext:
  54 │             runAsNonRoot: true
  55 │             runAsUser: 999
  56 │           volumeMounts:
  57 │             - mountPath: /var/run/argocd
  58 └               name: var-files
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'toolchain-setup' of Deployment 'argocd-repo-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:10-39
────────────────────────────────────────
  10 ┌         - name: toolchain-setup
  11 │           image: busybox:1.36
  12 │           env:
  13 │             - name: CUE_VERSION
  14 │               value: 0.8.2
  15 │             - name: AVP_VERSION
  16 │               value: 1.17.0
  17 │             - name: GCR_VERSION
  18 └               value: 2.1.22
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'argocd-repo-server' of 'deployment' 'argocd-repo-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:41-49
────────────────────────────────────────
  41 ┌         - name: argocd-repo-server
  42 │           volumeMounts:
  43 │             - mountPath: /usr/local/bin/docker-credential-gcr
  44 │               name: docker-credential-gcr
  45 │               subPath: docker-credential-gcr
  46 │               readOnly: true
  47 │             - mountPath: /home/argocd/.docker
  48 │               name: docker-config
  49 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'argocd-vault-plugin' of 'deployment' 'argocd-repo-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:76-104
────────────────────────────────────────
  76 ┌         - name: argocd-vault-plugin
  77 │           command: [/var/run/argocd/argocd-cmp-server]
  78 │           env:
  79 │             - name: AVP_TYPE
  80 │               value: gcpsecretmanager
  81 │           image: quay.io/argoproj/argocd:v2.11.0
  82 │           securityContext:
  83 │             runAsNonRoot: true
  84 └             runAsUser: 999
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cue-plugin' of 'deployment' 'argocd-repo-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:50-75
────────────────────────────────────────
  50 ┌         - name: cue-plugin
  51 │           command: [/var/run/argocd/argocd-cmp-server]
  52 │           image: busybox:1.36
  53 │           securityContext:
  54 │             runAsNonRoot: true
  55 │             runAsUser: 999
  56 │           volumeMounts:
  57 │             - mountPath: /var/run/argocd
  58 └               name: var-files
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'toolchain-setup' of 'deployment' 'argocd-repo-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:10-39
────────────────────────────────────────
  10 ┌         - name: toolchain-setup
  11 │           image: busybox:1.36
  12 │           env:
  13 │             - name: CUE_VERSION
  14 │               value: 0.8.2
  15 │             - name: AVP_VERSION
  16 │               value: 1.17.0
  17 │             - name: GCR_VERSION
  18 └               value: 2.1.22
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:41-49
────────────────────────────────────────
  41 ┌         - name: argocd-repo-server
  42 │           volumeMounts:
  43 │             - mountPath: /usr/local/bin/docker-credential-gcr
  44 │               name: docker-credential-gcr
  45 │               subPath: docker-credential-gcr
  46 │               readOnly: true
  47 │             - mountPath: /home/argocd/.docker
  48 │               name: docker-config
  49 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'toolchain-setup' of Deployment 'argocd-repo-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:10-39
────────────────────────────────────────
  10 ┌         - name: toolchain-setup
  11 │           image: busybox:1.36
  12 │           env:
  13 │             - name: CUE_VERSION
  14 │               value: 0.8.2
  15 │             - name: AVP_VERSION
  16 │               value: 1.17.0
  17 │             - name: GCR_VERSION
  18 └               value: 2.1.22
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:41-49
────────────────────────────────────────
  41 ┌         - name: argocd-repo-server
  42 │           volumeMounts:
  43 │             - mountPath: /usr/local/bin/docker-credential-gcr
  44 │               name: docker-credential-gcr
  45 │               subPath: docker-credential-gcr
  46 │               readOnly: true
  47 │             - mountPath: /home/argocd/.docker
  48 │               name: docker-config
  49 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'toolchain-setup' of Deployment 'argocd-repo-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:10-39
────────────────────────────────────────
  10 ┌         - name: toolchain-setup
  11 │           image: busybox:1.36
  12 │           env:
  13 │             - name: CUE_VERSION
  14 │               value: 0.8.2
  15 │             - name: AVP_VERSION
  16 │               value: 1.17.0
  17 │             - name: GCR_VERSION
  18 └               value: 2.1.22
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:41-49
────────────────────────────────────────
  41 ┌         - name: argocd-repo-server
  42 │           volumeMounts:
  43 │             - mountPath: /usr/local/bin/docker-credential-gcr
  44 │               name: docker-credential-gcr
  45 │               subPath: docker-credential-gcr
  46 │               readOnly: true
  47 │             - mountPath: /home/argocd/.docker
  48 │               name: docker-config
  49 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:41-49
────────────────────────────────────────
  41 ┌         - name: argocd-repo-server
  42 │           volumeMounts:
  43 │             - mountPath: /usr/local/bin/docker-credential-gcr
  44 │               name: docker-credential-gcr
  45 │               subPath: docker-credential-gcr
  46 │               readOnly: true
  47 │             - mountPath: /home/argocd/.docker
  48 │               name: docker-config
  49 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'argocd-vault-plugin' of Deployment 'argocd-repo-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:76-104
────────────────────────────────────────
  76 ┌         - name: argocd-vault-plugin
  77 │           command: [/var/run/argocd/argocd-cmp-server]
  78 │           env:
  79 │             - name: AVP_TYPE
  80 │               value: gcpsecretmanager
  81 │           image: quay.io/argoproj/argocd:v2.11.0
  82 │           securityContext:
  83 │             runAsNonRoot: true
  84 └             runAsUser: 999
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cue-plugin' of Deployment 'argocd-repo-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:50-75
────────────────────────────────────────
  50 ┌         - name: cue-plugin
  51 │           command: [/var/run/argocd/argocd-cmp-server]
  52 │           image: busybox:1.36
  53 │           securityContext:
  54 │             runAsNonRoot: true
  55 │             runAsUser: 999
  56 │           volumeMounts:
  57 │             - mountPath: /var/run/argocd
  58 └               name: var-files
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'toolchain-setup' of Deployment 'argocd-repo-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:10-39
────────────────────────────────────────
  10 ┌         - name: toolchain-setup
  11 │           image: busybox:1.36
  12 │           env:
  13 │             - name: CUE_VERSION
  14 │               value: 0.8.2
  15 │             - name: AVP_VERSION
  16 │               value: 1.17.0
  17 │             - name: GCR_VERSION
  18 └               value: 2.1.22
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:41-49
────────────────────────────────────────
  41 ┌         - name: argocd-repo-server
  42 │           volumeMounts:
  43 │             - mountPath: /usr/local/bin/docker-credential-gcr
  44 │               name: docker-credential-gcr
  45 │               subPath: docker-credential-gcr
  46 │               readOnly: true
  47 │             - mountPath: /home/argocd/.docker
  48 │               name: docker-config
  49 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'toolchain-setup' of Deployment 'argocd-repo-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:10-39
────────────────────────────────────────
  10 ┌         - name: toolchain-setup
  11 │           image: busybox:1.36
  12 │           env:
  13 │             - name: CUE_VERSION
  14 │               value: 0.8.2
  15 │             - name: AVP_VERSION
  16 │               value: 1.17.0
  17 │             - name: GCR_VERSION
  18 └               value: 2.1.22
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:41-49
────────────────────────────────────────
  41 ┌         - name: argocd-repo-server
  42 │           volumeMounts:
  43 │             - mountPath: /usr/local/bin/docker-credential-gcr
  44 │               name: docker-credential-gcr
  45 │               subPath: docker-credential-gcr
  46 │               readOnly: true
  47 │             - mountPath: /home/argocd/.docker
  48 │               name: docker-config
  49 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'toolchain-setup' of Deployment 'argocd-repo-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:10-39
────────────────────────────────────────
  10 ┌         - name: toolchain-setup
  11 │           image: busybox:1.36
  12 │           env:
  13 │             - name: CUE_VERSION
  14 │               value: 0.8.2
  15 │             - name: AVP_VERSION
  16 │               value: 1.17.0
  17 │             - name: GCR_VERSION
  18 └               value: 2.1.22
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:41-49
────────────────────────────────────────
  41 ┌         - name: argocd-repo-server
  42 │           volumeMounts:
  43 │             - mountPath: /usr/local/bin/docker-credential-gcr
  44 │               name: docker-credential-gcr
  45 │               subPath: docker-credential-gcr
  46 │               readOnly: true
  47 │             - mountPath: /home/argocd/.docker
  48 │               name: docker-config
  49 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'toolchain-setup' of Deployment 'argocd-repo-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:10-39
────────────────────────────────────────
  10 ┌         - name: toolchain-setup
  11 │           image: busybox:1.36
  12 │           env:
  13 │             - name: CUE_VERSION
  14 │               value: 0.8.2
  15 │             - name: AVP_VERSION
  16 │               value: 1.17.0
  17 │             - name: GCR_VERSION
  18 └               value: 2.1.22
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:41-49
────────────────────────────────────────
  41 ┌         - name: argocd-repo-server
  42 │           volumeMounts:
  43 │             - mountPath: /usr/local/bin/docker-credential-gcr
  44 │               name: docker-credential-gcr
  45 │               subPath: docker-credential-gcr
  46 │               readOnly: true
  47 │             - mountPath: /home/argocd/.docker
  48 │               name: docker-config
  49 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-vault-plugin' of Deployment 'argocd-repo-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:76-104
────────────────────────────────────────
  76 ┌         - name: argocd-vault-plugin
  77 │           command: [/var/run/argocd/argocd-cmp-server]
  78 │           env:
  79 │             - name: AVP_TYPE
  80 │               value: gcpsecretmanager
  81 │           image: quay.io/argoproj/argocd:v2.11.0
  82 │           securityContext:
  83 │             runAsNonRoot: true
  84 └             runAsUser: 999
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cue-plugin' of Deployment 'argocd-repo-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:50-75
────────────────────────────────────────
  50 ┌         - name: cue-plugin
  51 │           command: [/var/run/argocd/argocd-cmp-server]
  52 │           image: busybox:1.36
  53 │           securityContext:
  54 │             runAsNonRoot: true
  55 │             runAsUser: 999
  56 │           volumeMounts:
  57 │             - mountPath: /var/run/argocd
  58 └               name: var-files
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'toolchain-setup' of Deployment 'argocd-repo-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:10-39
────────────────────────────────────────
  10 ┌         - name: toolchain-setup
  11 │           image: busybox:1.36
  12 │           env:
  13 │             - name: CUE_VERSION
  14 │               value: 0.8.2
  15 │             - name: AVP_VERSION
  16 │               value: 1.17.0
  17 │             - name: GCR_VERSION
  18 └               value: 2.1.22
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:41-49
────────────────────────────────────────
  41 ┌         - name: argocd-repo-server
  42 │           volumeMounts:
  43 │             - mountPath: /usr/local/bin/docker-credential-gcr
  44 │               name: docker-credential-gcr
  45 │               subPath: docker-credential-gcr
  46 │               readOnly: true
  47 │             - mountPath: /home/argocd/.docker
  48 │               name: docker-config
  49 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-vault-plugin' of Deployment 'argocd-repo-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:76-104
────────────────────────────────────────
  76 ┌         - name: argocd-vault-plugin
  77 │           command: [/var/run/argocd/argocd-cmp-server]
  78 │           env:
  79 │             - name: AVP_TYPE
  80 │               value: gcpsecretmanager
  81 │           image: quay.io/argoproj/argocd:v2.11.0
  82 │           securityContext:
  83 │             runAsNonRoot: true
  84 └             runAsUser: 999
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cue-plugin' of Deployment 'argocd-repo-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:50-75
────────────────────────────────────────
  50 ┌         - name: cue-plugin
  51 │           command: [/var/run/argocd/argocd-cmp-server]
  52 │           image: busybox:1.36
  53 │           securityContext:
  54 │             runAsNonRoot: true
  55 │             runAsUser: 999
  56 │           volumeMounts:
  57 │             - mountPath: /var/run/argocd
  58 └               name: var-files
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'toolchain-setup' of Deployment 'argocd-repo-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:10-39
────────────────────────────────────────
  10 ┌         - name: toolchain-setup
  11 │           image: busybox:1.36
  12 │           env:
  13 │             - name: CUE_VERSION
  14 │               value: 0.8.2
  15 │             - name: AVP_VERSION
  16 │               value: 1.17.0
  17 │             - name: GCR_VERSION
  18 └               value: 2.1.22
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:41-49
────────────────────────────────────────
  41 ┌         - name: argocd-repo-server
  42 │           volumeMounts:
  43 │             - mountPath: /usr/local/bin/docker-credential-gcr
  44 │               name: docker-credential-gcr
  45 │               subPath: docker-credential-gcr
  46 │               readOnly: true
  47 │             - mountPath: /home/argocd/.docker
  48 │               name: docker-config
  49 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:10-39
────────────────────────────────────────
  10 ┌         - name: toolchain-setup
  11 │           image: busybox:1.36
  12 │           env:
  13 │             - name: CUE_VERSION
  14 │               value: 0.8.2
  15 │             - name: AVP_VERSION
  16 │               value: 1.17.0
  17 │             - name: GCR_VERSION
  18 └               value: 2.1.22
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:76-104
────────────────────────────────────────
  76 ┌         - name: argocd-vault-plugin
  77 │           command: [/var/run/argocd/argocd-cmp-server]
  78 │           env:
  79 │             - name: AVP_TYPE
  80 │               value: gcpsecretmanager
  81 │           image: quay.io/argoproj/argocd:v2.11.0
  82 │           securityContext:
  83 │             runAsNonRoot: true
  84 └             runAsUser: 999
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:50-75
────────────────────────────────────────
  50 ┌         - name: cue-plugin
  51 │           command: [/var/run/argocd/argocd-cmp-server]
  52 │           image: busybox:1.36
  53 │           securityContext:
  54 │             runAsNonRoot: true
  55 │             runAsUser: 999
  56 │           volumeMounts:
  57 │             - mountPath: /var/run/argocd
  58 └               name: var-files
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "argocd-repo-server" of deployment "argocd-repo-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:41-49
────────────────────────────────────────
  41 ┌         - name: argocd-repo-server
  42 │           volumeMounts:
  43 │             - mountPath: /usr/local/bin/docker-credential-gcr
  44 │               name: docker-credential-gcr
  45 │               subPath: docker-credential-gcr
  46 │               readOnly: true
  47 │             - mountPath: /home/argocd/.docker
  48 │               name: docker-config
  49 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "argocd-vault-plugin" of deployment "argocd-repo-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:76-104
────────────────────────────────────────
  76 ┌         - name: argocd-vault-plugin
  77 │           command: [/var/run/argocd/argocd-cmp-server]
  78 │           env:
  79 │             - name: AVP_TYPE
  80 │               value: gcpsecretmanager
  81 │           image: quay.io/argoproj/argocd:v2.11.0
  82 │           securityContext:
  83 │             runAsNonRoot: true
  84 └             runAsUser: 999
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cue-plugin" of deployment "argocd-repo-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:50-75
────────────────────────────────────────
  50 ┌         - name: cue-plugin
  51 │           command: [/var/run/argocd/argocd-cmp-server]
  52 │           image: busybox:1.36
  53 │           securityContext:
  54 │             runAsNonRoot: true
  55 │             runAsUser: 999
  56 │           volumeMounts:
  57 │             - mountPath: /var/run/argocd
  58 └               name: var-files
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "toolchain-setup" of deployment "argocd-repo-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:10-39
────────────────────────────────────────
  10 ┌         - name: toolchain-setup
  11 │           image: busybox:1.36
  12 │           env:
  13 │             - name: CUE_VERSION
  14 │               value: 0.8.2
  15 │             - name: AVP_VERSION
  16 │               value: 1.17.0
  17 │             - name: GCR_VERSION
  18 └               value: 2.1.22
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:10-39
────────────────────────────────────────
  10 ┌         - name: toolchain-setup
  11 │           image: busybox:1.36
  12 │           env:
  13 │             - name: CUE_VERSION
  14 │               value: 0.8.2
  15 │             - name: AVP_VERSION
  16 │               value: 1.17.0
  17 │             - name: GCR_VERSION
  18 └               value: 2.1.22
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:41-49
────────────────────────────────────────
  41 ┌         - name: argocd-repo-server
  42 │           volumeMounts:
  43 │             - mountPath: /usr/local/bin/docker-credential-gcr
  44 │               name: docker-credential-gcr
  45 │               subPath: docker-credential-gcr
  46 │               readOnly: true
  47 │             - mountPath: /home/argocd/.docker
  48 │               name: docker-config
  49 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:50-75
────────────────────────────────────────
  50 ┌         - name: cue-plugin
  51 │           command: [/var/run/argocd/argocd-cmp-server]
  52 │           image: busybox:1.36
  53 │           securityContext:
  54 │             runAsNonRoot: true
  55 │             runAsUser: 999
  56 │           volumeMounts:
  57 │             - mountPath: /var/run/argocd
  58 └               name: var-files
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:76-104
────────────────────────────────────────
  76 ┌         - name: argocd-vault-plugin
  77 │           command: [/var/run/argocd/argocd-cmp-server]
  78 │           env:
  79 │             - name: AVP_TYPE
  80 │               value: gcpsecretmanager
  81 │           image: quay.io/argoproj/argocd:v2.11.0
  82 │           securityContext:
  83 │             runAsNonRoot: true
  84 └             runAsUser: 999
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-repo-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:4
────────────────────────────────────────
   4 [   name: argocd-repo-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container argocd-repo-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:10-39
────────────────────────────────────────
  10 ┌         - name: toolchain-setup
  11 │           image: busybox:1.36
  12 │           env:
  13 │             - name: CUE_VERSION
  14 │               value: 0.8.2
  15 │             - name: AVP_VERSION
  16 │               value: 1.17.0
  17 │             - name: GCR_VERSION
  18 └               value: 2.1.22
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container argocd-repo-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:41-49
────────────────────────────────────────
  41 ┌         - name: argocd-repo-server
  42 │           volumeMounts:
  43 │             - mountPath: /usr/local/bin/docker-credential-gcr
  44 │               name: docker-credential-gcr
  45 │               subPath: docker-credential-gcr
  46 │               readOnly: true
  47 │             - mountPath: /home/argocd/.docker
  48 │               name: docker-config
  49 └               readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment argocd-repo-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:8-119
────────────────────────────────────────
   8 ┌       automountServiceAccountToken: true
   9 │       initContainers:
  10 │         - name: toolchain-setup
  11 │           image: busybox:1.36
  12 │           env:
  13 │             - name: CUE_VERSION
  14 │               value: 0.8.2
  15 │             - name: AVP_VERSION
  16 └               value: 1.17.0
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container argocd-vault-plugin in deployment argocd-repo-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd-repo-server-deploy.yaml:76-104
────────────────────────────────────────
  76 ┌         - name: argocd-vault-plugin
  77 │           command: [/var/run/argocd/argocd-cmp-server]
  78 │           env:
  79 │             - name: AVP_TYPE
  80 │               value: gcpsecretmanager
  81 │           image: quay.io/argoproj/argocd:v2.11.0
  82 │           securityContext:
  83 │             runAsNonRoot: true
  84 └             runAsUser: 999
  ..   
────────────────────────────────────────



argocd-repo-server-deployment-patch.yaml (kubernetes)
=====================================================
Tests: 129 (SUCCESSES: 97, FAILURES: 32)
Failures: 32 (UNKNOWN: 0, LOW: 21, MEDIUM: 7, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'helm-plugin' of Deployment 'argocd-repo-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 argocd-repo-server-deployment-patch.yaml:22-46
────────────────────────────────────────
  22 ┌         - name: helm-plugin
  23 │           command: [/var/run/argocd/argocd-cmp-server]
  24 │           args: [--loglevel, debug]
  25 │           image: busybox
  26 │           securityContext:
  27 │             runAsNonRoot: true
  28 │             runAsUser: 999
  29 │           volumeMounts:
  30 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'helm-plugin-setup' of Deployment 'argocd-repo-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 argocd-repo-server-deployment-patch.yaml:9-20
────────────────────────────────────────
   9 ┌         - name: helm-plugin-setup
  10 │           image: busybox
  11 │           command:
  12 │             - sh
  13 │             - -c
  14 │             - |
  15 │               wget https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz -O - | tar xz && mv linux-amd64/helm /tools/helm && chmod +x /tools/helm
  16 │               wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /tools/jq && chmod +x /tools/jq
  17 └               wget https://github.com/mikefarah/yq/releases/download/v4.30.6/yq_linux_amd64 -O /tools/yq && chmod +x /tools/yq
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'helm-plugin' of Deployment 'argocd-repo-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 argocd-repo-server-deployment-patch.yaml:22-46
────────────────────────────────────────
  22 ┌         - name: helm-plugin
  23 │           command: [/var/run/argocd/argocd-cmp-server]
  24 │           args: [--loglevel, debug]
  25 │           image: busybox
  26 │           securityContext:
  27 │             runAsNonRoot: true
  28 │             runAsUser: 999
  29 │           volumeMounts:
  30 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'helm-plugin-setup' of Deployment 'argocd-repo-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 argocd-repo-server-deployment-patch.yaml:9-20
────────────────────────────────────────
   9 ┌         - name: helm-plugin-setup
  10 │           image: busybox
  11 │           command:
  12 │             - sh
  13 │             - -c
  14 │             - |
  15 │               wget https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz -O - | tar xz && mv linux-amd64/helm /tools/helm && chmod +x /tools/helm
  16 │               wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /tools/jq && chmod +x /tools/jq
  17 └               wget https://github.com/mikefarah/yq/releases/download/v4.30.6/yq_linux_amd64 -O /tools/yq && chmod +x /tools/yq
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'helm-plugin' of 'deployment' 'argocd-repo-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 argocd-repo-server-deployment-patch.yaml:22-46
────────────────────────────────────────
  22 ┌         - name: helm-plugin
  23 │           command: [/var/run/argocd/argocd-cmp-server]
  24 │           args: [--loglevel, debug]
  25 │           image: busybox
  26 │           securityContext:
  27 │             runAsNonRoot: true
  28 │             runAsUser: 999
  29 │           volumeMounts:
  30 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'helm-plugin-setup' of 'deployment' 'argocd-repo-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 argocd-repo-server-deployment-patch.yaml:9-20
────────────────────────────────────────
   9 ┌         - name: helm-plugin-setup
  10 │           image: busybox
  11 │           command:
  12 │             - sh
  13 │             - -c
  14 │             - |
  15 │               wget https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz -O - | tar xz && mv linux-amd64/helm /tools/helm && chmod +x /tools/helm
  16 │               wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /tools/jq && chmod +x /tools/jq
  17 └               wget https://github.com/mikefarah/yq/releases/download/v4.30.6/yq_linux_amd64 -O /tools/yq && chmod +x /tools/yq
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'helm-plugin' of Deployment 'argocd-repo-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-repo-server-deployment-patch.yaml:22-46
────────────────────────────────────────
  22 ┌         - name: helm-plugin
  23 │           command: [/var/run/argocd/argocd-cmp-server]
  24 │           args: [--loglevel, debug]
  25 │           image: busybox
  26 │           securityContext:
  27 │             runAsNonRoot: true
  28 │             runAsUser: 999
  29 │           volumeMounts:
  30 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'helm-plugin-setup' of Deployment 'argocd-repo-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-repo-server-deployment-patch.yaml:9-20
────────────────────────────────────────
   9 ┌         - name: helm-plugin-setup
  10 │           image: busybox
  11 │           command:
  12 │             - sh
  13 │             - -c
  14 │             - |
  15 │               wget https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz -O - | tar xz && mv linux-amd64/helm /tools/helm && chmod +x /tools/helm
  16 │               wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /tools/jq && chmod +x /tools/jq
  17 └               wget https://github.com/mikefarah/yq/releases/download/v4.30.6/yq_linux_amd64 -O /tools/yq && chmod +x /tools/yq
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'helm-plugin-setup' of Deployment 'argocd-repo-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 argocd-repo-server-deployment-patch.yaml:9-20
────────────────────────────────────────
   9 ┌         - name: helm-plugin-setup
  10 │           image: busybox
  11 │           command:
  12 │             - sh
  13 │             - -c
  14 │             - |
  15 │               wget https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz -O - | tar xz && mv linux-amd64/helm /tools/helm && chmod +x /tools/helm
  16 │               wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /tools/jq && chmod +x /tools/jq
  17 └               wget https://github.com/mikefarah/yq/releases/download/v4.30.6/yq_linux_amd64 -O /tools/yq && chmod +x /tools/yq
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'helm-plugin' of Deployment 'argocd-repo-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 argocd-repo-server-deployment-patch.yaml:22-46
────────────────────────────────────────
  22 ┌         - name: helm-plugin
  23 │           command: [/var/run/argocd/argocd-cmp-server]
  24 │           args: [--loglevel, debug]
  25 │           image: busybox
  26 │           securityContext:
  27 │             runAsNonRoot: true
  28 │             runAsUser: 999
  29 │           volumeMounts:
  30 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'helm-plugin-setup' of Deployment 'argocd-repo-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 argocd-repo-server-deployment-patch.yaml:9-20
────────────────────────────────────────
   9 ┌         - name: helm-plugin-setup
  10 │           image: busybox
  11 │           command:
  12 │             - sh
  13 │             - -c
  14 │             - |
  15 │               wget https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz -O - | tar xz && mv linux-amd64/helm /tools/helm && chmod +x /tools/helm
  16 │               wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /tools/jq && chmod +x /tools/jq
  17 └               wget https://github.com/mikefarah/yq/releases/download/v4.30.6/yq_linux_amd64 -O /tools/yq && chmod +x /tools/yq
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'helm-plugin' of Deployment 'argocd-repo-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 argocd-repo-server-deployment-patch.yaml:22-46
────────────────────────────────────────
  22 ┌         - name: helm-plugin
  23 │           command: [/var/run/argocd/argocd-cmp-server]
  24 │           args: [--loglevel, debug]
  25 │           image: busybox
  26 │           securityContext:
  27 │             runAsNonRoot: true
  28 │             runAsUser: 999
  29 │           volumeMounts:
  30 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'helm-plugin-setup' of Deployment 'argocd-repo-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 argocd-repo-server-deployment-patch.yaml:9-20
────────────────────────────────────────
   9 ┌         - name: helm-plugin-setup
  10 │           image: busybox
  11 │           command:
  12 │             - sh
  13 │             - -c
  14 │             - |
  15 │               wget https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz -O - | tar xz && mv linux-amd64/helm /tools/helm && chmod +x /tools/helm
  16 │               wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /tools/jq && chmod +x /tools/jq
  17 └               wget https://github.com/mikefarah/yq/releases/download/v4.30.6/yq_linux_amd64 -O /tools/yq && chmod +x /tools/yq
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'helm-plugin' of Deployment 'argocd-repo-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-repo-server-deployment-patch.yaml:22-46
────────────────────────────────────────
  22 ┌         - name: helm-plugin
  23 │           command: [/var/run/argocd/argocd-cmp-server]
  24 │           args: [--loglevel, debug]
  25 │           image: busybox
  26 │           securityContext:
  27 │             runAsNonRoot: true
  28 │             runAsUser: 999
  29 │           volumeMounts:
  30 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'helm-plugin-setup' of Deployment 'argocd-repo-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-repo-server-deployment-patch.yaml:9-20
────────────────────────────────────────
   9 ┌         - name: helm-plugin-setup
  10 │           image: busybox
  11 │           command:
  12 │             - sh
  13 │             - -c
  14 │             - |
  15 │               wget https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz -O - | tar xz && mv linux-amd64/helm /tools/helm && chmod +x /tools/helm
  16 │               wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /tools/jq && chmod +x /tools/jq
  17 └               wget https://github.com/mikefarah/yq/releases/download/v4.30.6/yq_linux_amd64 -O /tools/yq && chmod +x /tools/yq
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'helm-plugin' of Deployment 'argocd-repo-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-repo-server-deployment-patch.yaml:22-46
────────────────────────────────────────
  22 ┌         - name: helm-plugin
  23 │           command: [/var/run/argocd/argocd-cmp-server]
  24 │           args: [--loglevel, debug]
  25 │           image: busybox
  26 │           securityContext:
  27 │             runAsNonRoot: true
  28 │             runAsUser: 999
  29 │           volumeMounts:
  30 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'helm-plugin-setup' of Deployment 'argocd-repo-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-repo-server-deployment-patch.yaml:9-20
────────────────────────────────────────
   9 ┌         - name: helm-plugin-setup
  10 │           image: busybox
  11 │           command:
  12 │             - sh
  13 │             - -c
  14 │             - |
  15 │               wget https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz -O - | tar xz && mv linux-amd64/helm /tools/helm && chmod +x /tools/helm
  16 │               wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /tools/jq && chmod +x /tools/jq
  17 └               wget https://github.com/mikefarah/yq/releases/download/v4.30.6/yq_linux_amd64 -O /tools/yq && chmod +x /tools/yq
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'helm-plugin' of Deployment 'argocd-repo-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-repo-server-deployment-patch.yaml:22-46
────────────────────────────────────────
  22 ┌         - name: helm-plugin
  23 │           command: [/var/run/argocd/argocd-cmp-server]
  24 │           args: [--loglevel, debug]
  25 │           image: busybox
  26 │           securityContext:
  27 │             runAsNonRoot: true
  28 │             runAsUser: 999
  29 │           volumeMounts:
  30 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'helm-plugin-setup' of Deployment 'argocd-repo-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-repo-server-deployment-patch.yaml:9-20
────────────────────────────────────────
   9 ┌         - name: helm-plugin-setup
  10 │           image: busybox
  11 │           command:
  12 │             - sh
  13 │             - -c
  14 │             - |
  15 │               wget https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz -O - | tar xz && mv linux-amd64/helm /tools/helm && chmod +x /tools/helm
  16 │               wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /tools/jq && chmod +x /tools/jq
  17 └               wget https://github.com/mikefarah/yq/releases/download/v4.30.6/yq_linux_amd64 -O /tools/yq && chmod +x /tools/yq
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'helm-plugin' of Deployment 'argocd-repo-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-repo-server-deployment-patch.yaml:22-46
────────────────────────────────────────
  22 ┌         - name: helm-plugin
  23 │           command: [/var/run/argocd/argocd-cmp-server]
  24 │           args: [--loglevel, debug]
  25 │           image: busybox
  26 │           securityContext:
  27 │             runAsNonRoot: true
  28 │             runAsUser: 999
  29 │           volumeMounts:
  30 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'helm-plugin-setup' of Deployment 'argocd-repo-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-repo-server-deployment-patch.yaml:9-20
────────────────────────────────────────
   9 ┌         - name: helm-plugin-setup
  10 │           image: busybox
  11 │           command:
  12 │             - sh
  13 │             - -c
  14 │             - |
  15 │               wget https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz -O - | tar xz && mv linux-amd64/helm /tools/helm && chmod +x /tools/helm
  16 │               wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /tools/jq && chmod +x /tools/jq
  17 └               wget https://github.com/mikefarah/yq/releases/download/v4.30.6/yq_linux_amd64 -O /tools/yq && chmod +x /tools/yq
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'helm-plugin' of Deployment 'argocd-repo-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-repo-server-deployment-patch.yaml:22-46
────────────────────────────────────────
  22 ┌         - name: helm-plugin
  23 │           command: [/var/run/argocd/argocd-cmp-server]
  24 │           args: [--loglevel, debug]
  25 │           image: busybox
  26 │           securityContext:
  27 │             runAsNonRoot: true
  28 │             runAsUser: 999
  29 │           volumeMounts:
  30 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'helm-plugin-setup' of Deployment 'argocd-repo-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-repo-server-deployment-patch.yaml:9-20
────────────────────────────────────────
   9 ┌         - name: helm-plugin-setup
  10 │           image: busybox
  11 │           command:
  12 │             - sh
  13 │             - -c
  14 │             - |
  15 │               wget https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz -O - | tar xz && mv linux-amd64/helm /tools/helm && chmod +x /tools/helm
  16 │               wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /tools/jq && chmod +x /tools/jq
  17 └               wget https://github.com/mikefarah/yq/releases/download/v4.30.6/yq_linux_amd64 -O /tools/yq && chmod +x /tools/yq
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 argocd-repo-server-deployment-patch.yaml:22-46
────────────────────────────────────────
  22 ┌         - name: helm-plugin
  23 │           command: [/var/run/argocd/argocd-cmp-server]
  24 │           args: [--loglevel, debug]
  25 │           image: busybox
  26 │           securityContext:
  27 │             runAsNonRoot: true
  28 │             runAsUser: 999
  29 │           volumeMounts:
  30 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 argocd-repo-server-deployment-patch.yaml:9-20
────────────────────────────────────────
   9 ┌         - name: helm-plugin-setup
  10 │           image: busybox
  11 │           command:
  12 │             - sh
  13 │             - -c
  14 │             - |
  15 │               wget https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz -O - | tar xz && mv linux-amd64/helm /tools/helm && chmod +x /tools/helm
  16 │               wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /tools/jq && chmod +x /tools/jq
  17 └               wget https://github.com/mikefarah/yq/releases/download/v4.30.6/yq_linux_amd64 -O /tools/yq && chmod +x /tools/yq
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "helm-plugin" of deployment "argocd-repo-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 argocd-repo-server-deployment-patch.yaml:22-46
────────────────────────────────────────
  22 ┌         - name: helm-plugin
  23 │           command: [/var/run/argocd/argocd-cmp-server]
  24 │           args: [--loglevel, debug]
  25 │           image: busybox
  26 │           securityContext:
  27 │             runAsNonRoot: true
  28 │             runAsUser: 999
  29 │           volumeMounts:
  30 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "helm-plugin-setup" of deployment "argocd-repo-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 argocd-repo-server-deployment-patch.yaml:9-20
────────────────────────────────────────
   9 ┌         - name: helm-plugin-setup
  10 │           image: busybox
  11 │           command:
  12 │             - sh
  13 │             - -c
  14 │             - |
  15 │               wget https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz -O - | tar xz && mv linux-amd64/helm /tools/helm && chmod +x /tools/helm
  16 │               wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /tools/jq && chmod +x /tools/jq
  17 └               wget https://github.com/mikefarah/yq/releases/download/v4.30.6/yq_linux_amd64 -O /tools/yq && chmod +x /tools/yq
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 argocd-repo-server-deployment-patch.yaml:9-20
────────────────────────────────────────
   9 ┌         - name: helm-plugin-setup
  10 │           image: busybox
  11 │           command:
  12 │             - sh
  13 │             - -c
  14 │             - |
  15 │               wget https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz -O - | tar xz && mv linux-amd64/helm /tools/helm && chmod +x /tools/helm
  16 │               wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /tools/jq && chmod +x /tools/jq
  17 └               wget https://github.com/mikefarah/yq/releases/download/v4.30.6/yq_linux_amd64 -O /tools/yq && chmod +x /tools/yq
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 argocd-repo-server-deployment-patch.yaml:22-46
────────────────────────────────────────
  22 ┌         - name: helm-plugin
  23 │           command: [/var/run/argocd/argocd-cmp-server]
  24 │           args: [--loglevel, debug]
  25 │           image: busybox
  26 │           securityContext:
  27 │             runAsNonRoot: true
  28 │             runAsUser: 999
  29 │           volumeMounts:
  30 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-repo-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-repo-server-deployment-patch.yaml:4
────────────────────────────────────────
   4 [   name: argocd-repo-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container argocd-repo-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-repo-server-deployment-patch.yaml:9-20
────────────────────────────────────────
   9 ┌         - name: helm-plugin-setup
  10 │           image: busybox
  11 │           command:
  12 │             - sh
  13 │             - -c
  14 │             - |
  15 │               wget https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz -O - | tar xz && mv linux-amd64/helm /tools/helm && chmod +x /tools/helm
  16 │               wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /tools/jq && chmod +x /tools/jq
  17 └               wget https://github.com/mikefarah/yq/releases/download/v4.30.6/yq_linux_amd64 -O /tools/yq && chmod +x /tools/yq
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment argocd-repo-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-repo-server-deployment-patch.yaml:8-54
────────────────────────────────────────
   8 ┌       initContainers:
   9 │         - name: helm-plugin-setup
  10 │           image: busybox
  11 │           command:
  12 │             - sh
  13 │             - -c
  14 │             - |
  15 │               wget https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz -O - | tar xz && mv linux-amd64/helm /tools/helm && chmod +x /tools/helm
  16 └               wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /tools/jq && chmod +x /tools/jq
  ..   
────────────────────────────────────────



argocd-repo-server-deployment-patch1.yaml (kubernetes)
======================================================
Tests: 128 (SUCCESSES: 97, FAILURES: 31)
Failures: 31 (UNKNOWN: 0, LOW: 21, MEDIUM: 6, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cuelang-plugin' of Deployment 'argocd-repo-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 argocd-repo-server-deployment-patch1.yaml:24-43
────────────────────────────────────────
  24 ┌       - name: cuelang-plugin
  25 │         command:
  26 │           - "/var/run/argocd/argocd-cmp-server"
  27 │           - --loglevel=info
  28 │         image: busybox:1.36
  29 │         securityContext:
  30 │           runAsNonRoot: true
  31 │           runAsUser: 999
  32 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'cuelang-plugin-setup' of Deployment 'argocd-repo-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 argocd-repo-server-deployment-patch1.yaml:9-22
────────────────────────────────────────
   9 ┌         - name: cuelang-plugin-setup
  10 │           command:
  11 │             - sh
  12 │             - -c
  13 │             - |
  14 │               mv /code/argocue /usr/local/bin/argocue && chmod a+x /usr/local/bin/argocue
  15 │               /var/run/install_deps.sh
  16 │           image: darkwind8/argocue:v0.4.0
  17 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cuelang-plugin' of Deployment 'argocd-repo-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 argocd-repo-server-deployment-patch1.yaml:24-43
────────────────────────────────────────
  24 ┌       - name: cuelang-plugin
  25 │         command:
  26 │           - "/var/run/argocd/argocd-cmp-server"
  27 │           - --loglevel=info
  28 │         image: busybox:1.36
  29 │         securityContext:
  30 │           runAsNonRoot: true
  31 │           runAsUser: 999
  32 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cuelang-plugin-setup' of Deployment 'argocd-repo-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 argocd-repo-server-deployment-patch1.yaml:9-22
────────────────────────────────────────
   9 ┌         - name: cuelang-plugin-setup
  10 │           command:
  11 │             - sh
  12 │             - -c
  13 │             - |
  14 │               mv /code/argocue /usr/local/bin/argocue && chmod a+x /usr/local/bin/argocue
  15 │               /var/run/install_deps.sh
  16 │           image: darkwind8/argocue:v0.4.0
  17 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cuelang-plugin' of 'deployment' 'argocd-repo-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 argocd-repo-server-deployment-patch1.yaml:24-43
────────────────────────────────────────
  24 ┌       - name: cuelang-plugin
  25 │         command:
  26 │           - "/var/run/argocd/argocd-cmp-server"
  27 │           - --loglevel=info
  28 │         image: busybox:1.36
  29 │         securityContext:
  30 │           runAsNonRoot: true
  31 │           runAsUser: 999
  32 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cuelang-plugin-setup' of 'deployment' 'argocd-repo-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 argocd-repo-server-deployment-patch1.yaml:9-22
────────────────────────────────────────
   9 ┌         - name: cuelang-plugin-setup
  10 │           command:
  11 │             - sh
  12 │             - -c
  13 │             - |
  14 │               mv /code/argocue /usr/local/bin/argocue && chmod a+x /usr/local/bin/argocue
  15 │               /var/run/install_deps.sh
  16 │           image: darkwind8/argocue:v0.4.0
  17 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cuelang-plugin' of Deployment 'argocd-repo-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-repo-server-deployment-patch1.yaml:24-43
────────────────────────────────────────
  24 ┌       - name: cuelang-plugin
  25 │         command:
  26 │           - "/var/run/argocd/argocd-cmp-server"
  27 │           - --loglevel=info
  28 │         image: busybox:1.36
  29 │         securityContext:
  30 │           runAsNonRoot: true
  31 │           runAsUser: 999
  32 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cuelang-plugin-setup' of Deployment 'argocd-repo-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-repo-server-deployment-patch1.yaml:9-22
────────────────────────────────────────
   9 ┌         - name: cuelang-plugin-setup
  10 │           command:
  11 │             - sh
  12 │             - -c
  13 │             - |
  14 │               mv /code/argocue /usr/local/bin/argocue && chmod a+x /usr/local/bin/argocue
  15 │               /var/run/install_deps.sh
  16 │           image: darkwind8/argocue:v0.4.0
  17 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cuelang-plugin-setup' of Deployment 'argocd-repo-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 argocd-repo-server-deployment-patch1.yaml:9-22
────────────────────────────────────────
   9 ┌         - name: cuelang-plugin-setup
  10 │           command:
  11 │             - sh
  12 │             - -c
  13 │             - |
  14 │               mv /code/argocue /usr/local/bin/argocue && chmod a+x /usr/local/bin/argocue
  15 │               /var/run/install_deps.sh
  16 │           image: darkwind8/argocue:v0.4.0
  17 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cuelang-plugin' of Deployment 'argocd-repo-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 argocd-repo-server-deployment-patch1.yaml:24-43
────────────────────────────────────────
  24 ┌       - name: cuelang-plugin
  25 │         command:
  26 │           - "/var/run/argocd/argocd-cmp-server"
  27 │           - --loglevel=info
  28 │         image: busybox:1.36
  29 │         securityContext:
  30 │           runAsNonRoot: true
  31 │           runAsUser: 999
  32 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cuelang-plugin-setup' of Deployment 'argocd-repo-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 argocd-repo-server-deployment-patch1.yaml:9-22
────────────────────────────────────────
   9 ┌         - name: cuelang-plugin-setup
  10 │           command:
  11 │             - sh
  12 │             - -c
  13 │             - |
  14 │               mv /code/argocue /usr/local/bin/argocue && chmod a+x /usr/local/bin/argocue
  15 │               /var/run/install_deps.sh
  16 │           image: darkwind8/argocue:v0.4.0
  17 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cuelang-plugin' of Deployment 'argocd-repo-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-repo-server-deployment-patch1.yaml:24-43
────────────────────────────────────────
  24 ┌       - name: cuelang-plugin
  25 │         command:
  26 │           - "/var/run/argocd/argocd-cmp-server"
  27 │           - --loglevel=info
  28 │         image: busybox:1.36
  29 │         securityContext:
  30 │           runAsNonRoot: true
  31 │           runAsUser: 999
  32 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cuelang-plugin-setup' of Deployment 'argocd-repo-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-repo-server-deployment-patch1.yaml:9-22
────────────────────────────────────────
   9 ┌         - name: cuelang-plugin-setup
  10 │           command:
  11 │             - sh
  12 │             - -c
  13 │             - |
  14 │               mv /code/argocue /usr/local/bin/argocue && chmod a+x /usr/local/bin/argocue
  15 │               /var/run/install_deps.sh
  16 │           image: darkwind8/argocue:v0.4.0
  17 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cuelang-plugin' of Deployment 'argocd-repo-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-repo-server-deployment-patch1.yaml:24-43
────────────────────────────────────────
  24 ┌       - name: cuelang-plugin
  25 │         command:
  26 │           - "/var/run/argocd/argocd-cmp-server"
  27 │           - --loglevel=info
  28 │         image: busybox:1.36
  29 │         securityContext:
  30 │           runAsNonRoot: true
  31 │           runAsUser: 999
  32 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cuelang-plugin-setup' of Deployment 'argocd-repo-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-repo-server-deployment-patch1.yaml:9-22
────────────────────────────────────────
   9 ┌         - name: cuelang-plugin-setup
  10 │           command:
  11 │             - sh
  12 │             - -c
  13 │             - |
  14 │               mv /code/argocue /usr/local/bin/argocue && chmod a+x /usr/local/bin/argocue
  15 │               /var/run/install_deps.sh
  16 │           image: darkwind8/argocue:v0.4.0
  17 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cuelang-plugin' of Deployment 'argocd-repo-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-repo-server-deployment-patch1.yaml:24-43
────────────────────────────────────────
  24 ┌       - name: cuelang-plugin
  25 │         command:
  26 │           - "/var/run/argocd/argocd-cmp-server"
  27 │           - --loglevel=info
  28 │         image: busybox:1.36
  29 │         securityContext:
  30 │           runAsNonRoot: true
  31 │           runAsUser: 999
  32 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cuelang-plugin-setup' of Deployment 'argocd-repo-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-repo-server-deployment-patch1.yaml:9-22
────────────────────────────────────────
   9 ┌         - name: cuelang-plugin-setup
  10 │           command:
  11 │             - sh
  12 │             - -c
  13 │             - |
  14 │               mv /code/argocue /usr/local/bin/argocue && chmod a+x /usr/local/bin/argocue
  15 │               /var/run/install_deps.sh
  16 │           image: darkwind8/argocue:v0.4.0
  17 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cuelang-plugin' of Deployment 'argocd-repo-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-repo-server-deployment-patch1.yaml:24-43
────────────────────────────────────────
  24 ┌       - name: cuelang-plugin
  25 │         command:
  26 │           - "/var/run/argocd/argocd-cmp-server"
  27 │           - --loglevel=info
  28 │         image: busybox:1.36
  29 │         securityContext:
  30 │           runAsNonRoot: true
  31 │           runAsUser: 999
  32 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cuelang-plugin-setup' of Deployment 'argocd-repo-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-repo-server-deployment-patch1.yaml:9-22
────────────────────────────────────────
   9 ┌         - name: cuelang-plugin-setup
  10 │           command:
  11 │             - sh
  12 │             - -c
  13 │             - |
  14 │               mv /code/argocue /usr/local/bin/argocue && chmod a+x /usr/local/bin/argocue
  15 │               /var/run/install_deps.sh
  16 │           image: darkwind8/argocue:v0.4.0
  17 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cuelang-plugin' of Deployment 'argocd-repo-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-repo-server-deployment-patch1.yaml:24-43
────────────────────────────────────────
  24 ┌       - name: cuelang-plugin
  25 │         command:
  26 │           - "/var/run/argocd/argocd-cmp-server"
  27 │           - --loglevel=info
  28 │         image: busybox:1.36
  29 │         securityContext:
  30 │           runAsNonRoot: true
  31 │           runAsUser: 999
  32 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cuelang-plugin-setup' of Deployment 'argocd-repo-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-repo-server-deployment-patch1.yaml:9-22
────────────────────────────────────────
   9 ┌         - name: cuelang-plugin-setup
  10 │           command:
  11 │             - sh
  12 │             - -c
  13 │             - |
  14 │               mv /code/argocue /usr/local/bin/argocue && chmod a+x /usr/local/bin/argocue
  15 │               /var/run/install_deps.sh
  16 │           image: darkwind8/argocue:v0.4.0
  17 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 argocd-repo-server-deployment-patch1.yaml:24-43
────────────────────────────────────────
  24 ┌       - name: cuelang-plugin
  25 │         command:
  26 │           - "/var/run/argocd/argocd-cmp-server"
  27 │           - --loglevel=info
  28 │         image: busybox:1.36
  29 │         securityContext:
  30 │           runAsNonRoot: true
  31 │           runAsUser: 999
  32 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 argocd-repo-server-deployment-patch1.yaml:9-22
────────────────────────────────────────
   9 ┌         - name: cuelang-plugin-setup
  10 │           command:
  11 │             - sh
  12 │             - -c
  13 │             - |
  14 │               mv /code/argocue /usr/local/bin/argocue && chmod a+x /usr/local/bin/argocue
  15 │               /var/run/install_deps.sh
  16 │           image: darkwind8/argocue:v0.4.0
  17 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cuelang-plugin" of deployment "argocd-repo-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 argocd-repo-server-deployment-patch1.yaml:24-43
────────────────────────────────────────
  24 ┌       - name: cuelang-plugin
  25 │         command:
  26 │           - "/var/run/argocd/argocd-cmp-server"
  27 │           - --loglevel=info
  28 │         image: busybox:1.36
  29 │         securityContext:
  30 │           runAsNonRoot: true
  31 │           runAsUser: 999
  32 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cuelang-plugin-setup" of deployment "argocd-repo-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 argocd-repo-server-deployment-patch1.yaml:9-22
────────────────────────────────────────
   9 ┌         - name: cuelang-plugin-setup
  10 │           command:
  11 │             - sh
  12 │             - -c
  13 │             - |
  14 │               mv /code/argocue /usr/local/bin/argocue && chmod a+x /usr/local/bin/argocue
  15 │               /var/run/install_deps.sh
  16 │           image: darkwind8/argocue:v0.4.0
  17 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 argocd-repo-server-deployment-patch1.yaml:9-22
────────────────────────────────────────
   9 ┌         - name: cuelang-plugin-setup
  10 │           command:
  11 │             - sh
  12 │             - -c
  13 │             - |
  14 │               mv /code/argocue /usr/local/bin/argocue && chmod a+x /usr/local/bin/argocue
  15 │               /var/run/install_deps.sh
  16 │           image: darkwind8/argocue:v0.4.0
  17 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 argocd-repo-server-deployment-patch1.yaml:24-43
────────────────────────────────────────
  24 ┌       - name: cuelang-plugin
  25 │         command:
  26 │           - "/var/run/argocd/argocd-cmp-server"
  27 │           - --loglevel=info
  28 │         image: busybox:1.36
  29 │         securityContext:
  30 │           runAsNonRoot: true
  31 │           runAsUser: 999
  32 └         volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-repo-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-repo-server-deployment-patch1.yaml:4
────────────────────────────────────────
   4 [   name: argocd-repo-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container argocd-repo-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-repo-server-deployment-patch1.yaml:9-22
────────────────────────────────────────
   9 ┌         - name: cuelang-plugin-setup
  10 │           command:
  11 │             - sh
  12 │             - -c
  13 │             - |
  14 │               mv /code/argocue /usr/local/bin/argocue && chmod a+x /usr/local/bin/argocue
  15 │               /var/run/install_deps.sh
  16 │           image: darkwind8/argocue:v0.4.0
  17 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment argocd-repo-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-repo-server-deployment-patch1.yaml:8-52
────────────────────────────────────────
   8 ┌       initContainers:
   9 │         - name: cuelang-plugin-setup
  10 │           command:
  11 │             - sh
  12 │             - -c
  13 │             - |
  14 │               mv /code/argocue /usr/local/bin/argocue && chmod a+x /usr/local/bin/argocue
  15 │               /var/run/install_deps.sh
  16 └           image: darkwind8/argocue:v0.4.0
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cuelang-plugin-setup in deployment argocd-repo-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd-repo-server-deployment-patch1.yaml:9-22
────────────────────────────────────────
   9 ┌         - name: cuelang-plugin-setup
  10 │           command:
  11 │             - sh
  12 │             - -c
  13 │             - |
  14 │               mv /code/argocue /usr/local/bin/argocue && chmod a+x /usr/local/bin/argocue
  15 │               /var/run/install_deps.sh
  16 │           image: darkwind8/argocue:v0.4.0
  17 └           volumeMounts:
  ..   
────────────────────────────────────────



argocd-repo-server-deployment-patch2.yaml (kubernetes)
======================================================
Tests: 129 (SUCCESSES: 97, FAILURES: 32)
Failures: 32 (UNKNOWN: 0, LOW: 21, MEDIUM: 7, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'helm-plugin' of Deployment 'argocd-repo-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 argocd-repo-server-deployment-patch2.yaml:22-46
────────────────────────────────────────
  22 ┌         - name: helm-plugin
  23 │           command: [/var/run/argocd/argocd-cmp-server]
  24 │           args: [--loglevel, debug]
  25 │           image: busybox
  26 │           securityContext:
  27 │             runAsNonRoot: true
  28 │             runAsUser: 999
  29 │           volumeMounts:
  30 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'helm-plugin-setup' of Deployment 'argocd-repo-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 argocd-repo-server-deployment-patch2.yaml:9-20
────────────────────────────────────────
   9 ┌         - name: helm-plugin-setup
  10 │           image: busybox
  11 │           command:
  12 │             - sh
  13 │             - -c
  14 │             - |
  15 │               wget https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz -O - | tar xz && mv linux-amd64/helm /tools/helm && chmod +x /tools/helm
  16 │               wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /tools/jq && chmod +x /tools/jq
  17 └               wget https://github.com/mikefarah/yq/releases/download/v4.30.6/yq_linux_amd64 -O /tools/yq && chmod +x /tools/yq
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'helm-plugin' of Deployment 'argocd-repo-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 argocd-repo-server-deployment-patch2.yaml:22-46
────────────────────────────────────────
  22 ┌         - name: helm-plugin
  23 │           command: [/var/run/argocd/argocd-cmp-server]
  24 │           args: [--loglevel, debug]
  25 │           image: busybox
  26 │           securityContext:
  27 │             runAsNonRoot: true
  28 │             runAsUser: 999
  29 │           volumeMounts:
  30 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'helm-plugin-setup' of Deployment 'argocd-repo-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 argocd-repo-server-deployment-patch2.yaml:9-20
────────────────────────────────────────
   9 ┌         - name: helm-plugin-setup
  10 │           image: busybox
  11 │           command:
  12 │             - sh
  13 │             - -c
  14 │             - |
  15 │               wget https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz -O - | tar xz && mv linux-amd64/helm /tools/helm && chmod +x /tools/helm
  16 │               wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /tools/jq && chmod +x /tools/jq
  17 └               wget https://github.com/mikefarah/yq/releases/download/v4.30.6/yq_linux_amd64 -O /tools/yq && chmod +x /tools/yq
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'helm-plugin' of 'deployment' 'argocd-repo-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 argocd-repo-server-deployment-patch2.yaml:22-46
────────────────────────────────────────
  22 ┌         - name: helm-plugin
  23 │           command: [/var/run/argocd/argocd-cmp-server]
  24 │           args: [--loglevel, debug]
  25 │           image: busybox
  26 │           securityContext:
  27 │             runAsNonRoot: true
  28 │             runAsUser: 999
  29 │           volumeMounts:
  30 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'helm-plugin-setup' of 'deployment' 'argocd-repo-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 argocd-repo-server-deployment-patch2.yaml:9-20
────────────────────────────────────────
   9 ┌         - name: helm-plugin-setup
  10 │           image: busybox
  11 │           command:
  12 │             - sh
  13 │             - -c
  14 │             - |
  15 │               wget https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz -O - | tar xz && mv linux-amd64/helm /tools/helm && chmod +x /tools/helm
  16 │               wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /tools/jq && chmod +x /tools/jq
  17 └               wget https://github.com/mikefarah/yq/releases/download/v4.30.6/yq_linux_amd64 -O /tools/yq && chmod +x /tools/yq
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'helm-plugin' of Deployment 'argocd-repo-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-repo-server-deployment-patch2.yaml:22-46
────────────────────────────────────────
  22 ┌         - name: helm-plugin
  23 │           command: [/var/run/argocd/argocd-cmp-server]
  24 │           args: [--loglevel, debug]
  25 │           image: busybox
  26 │           securityContext:
  27 │             runAsNonRoot: true
  28 │             runAsUser: 999
  29 │           volumeMounts:
  30 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'helm-plugin-setup' of Deployment 'argocd-repo-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-repo-server-deployment-patch2.yaml:9-20
────────────────────────────────────────
   9 ┌         - name: helm-plugin-setup
  10 │           image: busybox
  11 │           command:
  12 │             - sh
  13 │             - -c
  14 │             - |
  15 │               wget https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz -O - | tar xz && mv linux-amd64/helm /tools/helm && chmod +x /tools/helm
  16 │               wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /tools/jq && chmod +x /tools/jq
  17 └               wget https://github.com/mikefarah/yq/releases/download/v4.30.6/yq_linux_amd64 -O /tools/yq && chmod +x /tools/yq
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'helm-plugin-setup' of Deployment 'argocd-repo-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 argocd-repo-server-deployment-patch2.yaml:9-20
────────────────────────────────────────
   9 ┌         - name: helm-plugin-setup
  10 │           image: busybox
  11 │           command:
  12 │             - sh
  13 │             - -c
  14 │             - |
  15 │               wget https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz -O - | tar xz && mv linux-amd64/helm /tools/helm && chmod +x /tools/helm
  16 │               wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /tools/jq && chmod +x /tools/jq
  17 └               wget https://github.com/mikefarah/yq/releases/download/v4.30.6/yq_linux_amd64 -O /tools/yq && chmod +x /tools/yq
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'helm-plugin' of Deployment 'argocd-repo-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 argocd-repo-server-deployment-patch2.yaml:22-46
────────────────────────────────────────
  22 ┌         - name: helm-plugin
  23 │           command: [/var/run/argocd/argocd-cmp-server]
  24 │           args: [--loglevel, debug]
  25 │           image: busybox
  26 │           securityContext:
  27 │             runAsNonRoot: true
  28 │             runAsUser: 999
  29 │           volumeMounts:
  30 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'helm-plugin-setup' of Deployment 'argocd-repo-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 argocd-repo-server-deployment-patch2.yaml:9-20
────────────────────────────────────────
   9 ┌         - name: helm-plugin-setup
  10 │           image: busybox
  11 │           command:
  12 │             - sh
  13 │             - -c
  14 │             - |
  15 │               wget https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz -O - | tar xz && mv linux-amd64/helm /tools/helm && chmod +x /tools/helm
  16 │               wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /tools/jq && chmod +x /tools/jq
  17 └               wget https://github.com/mikefarah/yq/releases/download/v4.30.6/yq_linux_amd64 -O /tools/yq && chmod +x /tools/yq
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'helm-plugin' of Deployment 'argocd-repo-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 argocd-repo-server-deployment-patch2.yaml:22-46
────────────────────────────────────────
  22 ┌         - name: helm-plugin
  23 │           command: [/var/run/argocd/argocd-cmp-server]
  24 │           args: [--loglevel, debug]
  25 │           image: busybox
  26 │           securityContext:
  27 │             runAsNonRoot: true
  28 │             runAsUser: 999
  29 │           volumeMounts:
  30 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'helm-plugin-setup' of Deployment 'argocd-repo-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 argocd-repo-server-deployment-patch2.yaml:9-20
────────────────────────────────────────
   9 ┌         - name: helm-plugin-setup
  10 │           image: busybox
  11 │           command:
  12 │             - sh
  13 │             - -c
  14 │             - |
  15 │               wget https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz -O - | tar xz && mv linux-amd64/helm /tools/helm && chmod +x /tools/helm
  16 │               wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /tools/jq && chmod +x /tools/jq
  17 └               wget https://github.com/mikefarah/yq/releases/download/v4.30.6/yq_linux_amd64 -O /tools/yq && chmod +x /tools/yq
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'helm-plugin' of Deployment 'argocd-repo-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-repo-server-deployment-patch2.yaml:22-46
────────────────────────────────────────
  22 ┌         - name: helm-plugin
  23 │           command: [/var/run/argocd/argocd-cmp-server]
  24 │           args: [--loglevel, debug]
  25 │           image: busybox
  26 │           securityContext:
  27 │             runAsNonRoot: true
  28 │             runAsUser: 999
  29 │           volumeMounts:
  30 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'helm-plugin-setup' of Deployment 'argocd-repo-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-repo-server-deployment-patch2.yaml:9-20
────────────────────────────────────────
   9 ┌         - name: helm-plugin-setup
  10 │           image: busybox
  11 │           command:
  12 │             - sh
  13 │             - -c
  14 │             - |
  15 │               wget https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz -O - | tar xz && mv linux-amd64/helm /tools/helm && chmod +x /tools/helm
  16 │               wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /tools/jq && chmod +x /tools/jq
  17 └               wget https://github.com/mikefarah/yq/releases/download/v4.30.6/yq_linux_amd64 -O /tools/yq && chmod +x /tools/yq
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'helm-plugin' of Deployment 'argocd-repo-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-repo-server-deployment-patch2.yaml:22-46
────────────────────────────────────────
  22 ┌         - name: helm-plugin
  23 │           command: [/var/run/argocd/argocd-cmp-server]
  24 │           args: [--loglevel, debug]
  25 │           image: busybox
  26 │           securityContext:
  27 │             runAsNonRoot: true
  28 │             runAsUser: 999
  29 │           volumeMounts:
  30 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'helm-plugin-setup' of Deployment 'argocd-repo-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-repo-server-deployment-patch2.yaml:9-20
────────────────────────────────────────
   9 ┌         - name: helm-plugin-setup
  10 │           image: busybox
  11 │           command:
  12 │             - sh
  13 │             - -c
  14 │             - |
  15 │               wget https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz -O - | tar xz && mv linux-amd64/helm /tools/helm && chmod +x /tools/helm
  16 │               wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /tools/jq && chmod +x /tools/jq
  17 └               wget https://github.com/mikefarah/yq/releases/download/v4.30.6/yq_linux_amd64 -O /tools/yq && chmod +x /tools/yq
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'helm-plugin' of Deployment 'argocd-repo-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-repo-server-deployment-patch2.yaml:22-46
────────────────────────────────────────
  22 ┌         - name: helm-plugin
  23 │           command: [/var/run/argocd/argocd-cmp-server]
  24 │           args: [--loglevel, debug]
  25 │           image: busybox
  26 │           securityContext:
  27 │             runAsNonRoot: true
  28 │             runAsUser: 999
  29 │           volumeMounts:
  30 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'helm-plugin-setup' of Deployment 'argocd-repo-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-repo-server-deployment-patch2.yaml:9-20
────────────────────────────────────────
   9 ┌         - name: helm-plugin-setup
  10 │           image: busybox
  11 │           command:
  12 │             - sh
  13 │             - -c
  14 │             - |
  15 │               wget https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz -O - | tar xz && mv linux-amd64/helm /tools/helm && chmod +x /tools/helm
  16 │               wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /tools/jq && chmod +x /tools/jq
  17 └               wget https://github.com/mikefarah/yq/releases/download/v4.30.6/yq_linux_amd64 -O /tools/yq && chmod +x /tools/yq
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'helm-plugin' of Deployment 'argocd-repo-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-repo-server-deployment-patch2.yaml:22-46
────────────────────────────────────────
  22 ┌         - name: helm-plugin
  23 │           command: [/var/run/argocd/argocd-cmp-server]
  24 │           args: [--loglevel, debug]
  25 │           image: busybox
  26 │           securityContext:
  27 │             runAsNonRoot: true
  28 │             runAsUser: 999
  29 │           volumeMounts:
  30 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'helm-plugin-setup' of Deployment 'argocd-repo-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-repo-server-deployment-patch2.yaml:9-20
────────────────────────────────────────
   9 ┌         - name: helm-plugin-setup
  10 │           image: busybox
  11 │           command:
  12 │             - sh
  13 │             - -c
  14 │             - |
  15 │               wget https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz -O - | tar xz && mv linux-amd64/helm /tools/helm && chmod +x /tools/helm
  16 │               wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /tools/jq && chmod +x /tools/jq
  17 └               wget https://github.com/mikefarah/yq/releases/download/v4.30.6/yq_linux_amd64 -O /tools/yq && chmod +x /tools/yq
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'helm-plugin' of Deployment 'argocd-repo-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-repo-server-deployment-patch2.yaml:22-46
────────────────────────────────────────
  22 ┌         - name: helm-plugin
  23 │           command: [/var/run/argocd/argocd-cmp-server]
  24 │           args: [--loglevel, debug]
  25 │           image: busybox
  26 │           securityContext:
  27 │             runAsNonRoot: true
  28 │             runAsUser: 999
  29 │           volumeMounts:
  30 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'helm-plugin-setup' of Deployment 'argocd-repo-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-repo-server-deployment-patch2.yaml:9-20
────────────────────────────────────────
   9 ┌         - name: helm-plugin-setup
  10 │           image: busybox
  11 │           command:
  12 │             - sh
  13 │             - -c
  14 │             - |
  15 │               wget https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz -O - | tar xz && mv linux-amd64/helm /tools/helm && chmod +x /tools/helm
  16 │               wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /tools/jq && chmod +x /tools/jq
  17 └               wget https://github.com/mikefarah/yq/releases/download/v4.30.6/yq_linux_amd64 -O /tools/yq && chmod +x /tools/yq
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 argocd-repo-server-deployment-patch2.yaml:22-46
────────────────────────────────────────
  22 ┌         - name: helm-plugin
  23 │           command: [/var/run/argocd/argocd-cmp-server]
  24 │           args: [--loglevel, debug]
  25 │           image: busybox
  26 │           securityContext:
  27 │             runAsNonRoot: true
  28 │             runAsUser: 999
  29 │           volumeMounts:
  30 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 argocd-repo-server-deployment-patch2.yaml:9-20
────────────────────────────────────────
   9 ┌         - name: helm-plugin-setup
  10 │           image: busybox
  11 │           command:
  12 │             - sh
  13 │             - -c
  14 │             - |
  15 │               wget https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz -O - | tar xz && mv linux-amd64/helm /tools/helm && chmod +x /tools/helm
  16 │               wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /tools/jq && chmod +x /tools/jq
  17 └               wget https://github.com/mikefarah/yq/releases/download/v4.30.6/yq_linux_amd64 -O /tools/yq && chmod +x /tools/yq
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "helm-plugin" of deployment "argocd-repo-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 argocd-repo-server-deployment-patch2.yaml:22-46
────────────────────────────────────────
  22 ┌         - name: helm-plugin
  23 │           command: [/var/run/argocd/argocd-cmp-server]
  24 │           args: [--loglevel, debug]
  25 │           image: busybox
  26 │           securityContext:
  27 │             runAsNonRoot: true
  28 │             runAsUser: 999
  29 │           volumeMounts:
  30 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "helm-plugin-setup" of deployment "argocd-repo-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 argocd-repo-server-deployment-patch2.yaml:9-20
────────────────────────────────────────
   9 ┌         - name: helm-plugin-setup
  10 │           image: busybox
  11 │           command:
  12 │             - sh
  13 │             - -c
  14 │             - |
  15 │               wget https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz -O - | tar xz && mv linux-amd64/helm /tools/helm && chmod +x /tools/helm
  16 │               wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /tools/jq && chmod +x /tools/jq
  17 └               wget https://github.com/mikefarah/yq/releases/download/v4.30.6/yq_linux_amd64 -O /tools/yq && chmod +x /tools/yq
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 argocd-repo-server-deployment-patch2.yaml:9-20
────────────────────────────────────────
   9 ┌         - name: helm-plugin-setup
  10 │           image: busybox
  11 │           command:
  12 │             - sh
  13 │             - -c
  14 │             - |
  15 │               wget https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz -O - | tar xz && mv linux-amd64/helm /tools/helm && chmod +x /tools/helm
  16 │               wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /tools/jq && chmod +x /tools/jq
  17 └               wget https://github.com/mikefarah/yq/releases/download/v4.30.6/yq_linux_amd64 -O /tools/yq && chmod +x /tools/yq
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 argocd-repo-server-deployment-patch2.yaml:22-46
────────────────────────────────────────
  22 ┌         - name: helm-plugin
  23 │           command: [/var/run/argocd/argocd-cmp-server]
  24 │           args: [--loglevel, debug]
  25 │           image: busybox
  26 │           securityContext:
  27 │             runAsNonRoot: true
  28 │             runAsUser: 999
  29 │           volumeMounts:
  30 └             - mountPath: /var/run/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-repo-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-repo-server-deployment-patch2.yaml:4
────────────────────────────────────────
   4 [   name: argocd-repo-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container argocd-repo-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-repo-server-deployment-patch2.yaml:9-20
────────────────────────────────────────
   9 ┌         - name: helm-plugin-setup
  10 │           image: busybox
  11 │           command:
  12 │             - sh
  13 │             - -c
  14 │             - |
  15 │               wget https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz -O - | tar xz && mv linux-amd64/helm /tools/helm && chmod +x /tools/helm
  16 │               wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /tools/jq && chmod +x /tools/jq
  17 └               wget https://github.com/mikefarah/yq/releases/download/v4.30.6/yq_linux_amd64 -O /tools/yq && chmod +x /tools/yq
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment argocd-repo-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-repo-server-deployment-patch2.yaml:8-54
────────────────────────────────────────
   8 ┌       initContainers:
   9 │         - name: helm-plugin-setup
  10 │           image: busybox
  11 │           command:
  12 │             - sh
  13 │             - -c
  14 │             - |
  15 │               wget https://get.helm.sh/helm-v3.10.3-linux-amd64.tar.gz -O - | tar xz && mv linux-amd64/helm /tools/helm && chmod +x /tools/helm
  16 └               wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 -O /tools/jq && chmod +x /tools/jq
  ..   
────────────────────────────────────────



argocd-repo-server-deployment1.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 argocd-repo-server-deployment1.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 argocd-repo-server-deployment1.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'argocd-repo-server' of 'deployment' 'argocd-repo-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 argocd-repo-server-deployment1.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-repo-server-deployment1.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 argocd-repo-server-deployment1.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 argocd-repo-server-deployment1.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 argocd-repo-server-deployment1.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-repo-server-deployment1.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-repo-server-deployment1.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-repo-server-deployment1.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-repo-server-deployment1.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-repo-server-deployment1.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 argocd-repo-server-deployment1.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "argocd-repo-server" of deployment "argocd-repo-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 argocd-repo-server-deployment1.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 argocd-repo-server-deployment1.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-repo-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-repo-server-deployment1.yaml:4
────────────────────────────────────────
   4 [   name: argocd-repo-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container argocd-repo-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-repo-server-deployment1.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment argocd-repo-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-repo-server-deployment1.yaml:9-26
────────────────────────────────────────
   9 ┌       affinity:
  10 │         podAntiAffinity:
  11 │           requiredDuringSchedulingIgnoredDuringExecution:
  12 │           - labelSelector:
  13 │               matchLabels:
  14 │                 app.kubernetes.io/name: argocd-repo-server
  15 │             topologyKey: kubernetes.io/hostname
  16 │           preferredDuringSchedulingIgnoredDuringExecution:
  17 └           - weight: 100
  ..   
────────────────────────────────────────



argocd-repo-server-deployment2.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 argocd-repo-server-deployment2.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 argocd-repo-server-deployment2.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'argocd-repo-server' of 'deployment' 'argocd-repo-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 argocd-repo-server-deployment2.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-repo-server-deployment2.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 argocd-repo-server-deployment2.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 argocd-repo-server-deployment2.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 argocd-repo-server-deployment2.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-repo-server-deployment2.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-repo-server-deployment2.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-repo-server-deployment2.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-repo-server-deployment2.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-repo-server-deployment2.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 argocd-repo-server-deployment2.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "argocd-repo-server" of deployment "argocd-repo-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 argocd-repo-server-deployment2.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 argocd-repo-server-deployment2.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-repo-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-repo-server-deployment2.yaml:4
────────────────────────────────────────
   4 [   name: argocd-repo-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container argocd-repo-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-repo-server-deployment2.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment argocd-repo-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-repo-server-deployment2.yaml:9-26
────────────────────────────────────────
   9 ┌       affinity:
  10 │         podAntiAffinity:
  11 │           requiredDuringSchedulingIgnoredDuringExecution:
  12 │           - labelSelector:
  13 │               matchLabels:
  14 │                 app.kubernetes.io/name: argocd-repo-server
  15 │             topologyKey: kubernetes.io/hostname
  16 │           preferredDuringSchedulingIgnoredDuringExecution:
  17 └           - weight: 100
  ..   
────────────────────────────────────────



argocd-repo-server-deployment4.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 argocd-repo-server-deployment4.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 argocd-repo-server-deployment4.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'argocd-repo-server' of 'deployment' 'argocd-repo-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 argocd-repo-server-deployment4.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-repo-server-deployment4.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 argocd-repo-server-deployment4.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 argocd-repo-server-deployment4.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 argocd-repo-server-deployment4.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-repo-server-deployment4.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-repo-server-deployment4.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-repo-server-deployment4.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-repo-server-deployment4.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-repo-server-deployment4.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 argocd-repo-server-deployment4.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "argocd-repo-server" of deployment "argocd-repo-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 argocd-repo-server-deployment4.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 argocd-repo-server-deployment4.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-repo-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-repo-server-deployment4.yaml:4
────────────────────────────────────────
   4 [   name: argocd-repo-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container argocd-repo-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-repo-server-deployment4.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment argocd-repo-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-repo-server-deployment4.yaml:9-26
────────────────────────────────────────
   9 ┌       affinity:
  10 │         podAntiAffinity:
  11 │           requiredDuringSchedulingIgnoredDuringExecution:
  12 │           - labelSelector:
  13 │               matchLabels:
  14 │                 app.kubernetes.io/name: argocd-repo-server
  15 │             topologyKey: kubernetes.io/hostname
  16 │           preferredDuringSchedulingIgnoredDuringExecution:
  17 └           - weight: 100
  ..   
────────────────────────────────────────



argocd-repo-server-deployment5.yaml (kubernetes)
================================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 argocd-repo-server-deployment5.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 argocd-repo-server-deployment5.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'argocd-repo-server' of 'deployment' 'argocd-repo-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 argocd-repo-server-deployment5.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-repo-server-deployment5.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 argocd-repo-server-deployment5.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 argocd-repo-server-deployment5.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 argocd-repo-server-deployment5.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-repo-server-deployment5.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-repo-server-deployment5.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-repo-server-deployment5.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-repo-server-deployment5.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-repo-server-deployment5.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 argocd-repo-server-deployment5.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "argocd-repo-server" of deployment "argocd-repo-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 argocd-repo-server-deployment5.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 argocd-repo-server-deployment5.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-repo-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-repo-server-deployment5.yaml:4
────────────────────────────────────────
   4 [   name: argocd-repo-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container argocd-repo-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-repo-server-deployment5.yaml:24-26
────────────────────────────────────────
  24 ┌       - name: argocd-repo-server
  25 │         args:
  26 └         - /usr/local/bin/argocd-repo-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment argocd-repo-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-repo-server-deployment5.yaml:9-26
────────────────────────────────────────
   9 ┌       affinity:
  10 │         podAntiAffinity:
  11 │           requiredDuringSchedulingIgnoredDuringExecution:
  12 │           - labelSelector:
  13 │               matchLabels:
  14 │                 app.kubernetes.io/name: argocd-repo-server
  15 │             topologyKey: kubernetes.io/hostname
  16 │           preferredDuringSchedulingIgnoredDuringExecution:
  17 └           - weight: 100
  ..   
────────────────────────────────────────



argocd-repo-server-keys.yaml (kubernetes)
=========================================
Tests: 131 (SUCCESSES: 96, FAILURES: 35)
Failures: 35 (UNKNOWN: 0, LOW: 21, MEDIUM: 9, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 argocd-repo-server-keys.yaml:28-35
────────────────────────────────────────
  28 ┌         - name: argocd-repo-server
  29 │           env:
  30 │             - name: GNUPGHOME
  31 │               value: /home/argocd/.gnupg
  32 │           volumeMounts:
  33 │             - mountPath: /home/argocd/.gnupg
  34 │               name: gpg-home
  35 └               subPath: .gnupg
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'import-gpg-key' of Deployment 'argocd-repo-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 argocd-repo-server-keys.yaml:15-26
────────────────────────────────────────
  15 ┌         - name: import-gpg-key
  16 │           image: argoproj/argocd
  17 │           command: ["gpg", "--import", "/deploy-key/deploy-key-private"]
  18 │           env:
  19 │             - name: GNUPGHOME
  20 │               value: /gpg-home/.gnupg
  21 │           volumeMounts:
  22 │             - mountPath: /deploy-key
  23 └               name: deploy-key
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 argocd-repo-server-keys.yaml:28-35
────────────────────────────────────────
  28 ┌         - name: argocd-repo-server
  29 │           env:
  30 │             - name: GNUPGHOME
  31 │               value: /home/argocd/.gnupg
  32 │           volumeMounts:
  33 │             - mountPath: /home/argocd/.gnupg
  34 │               name: gpg-home
  35 └               subPath: .gnupg
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'import-gpg-key' of Deployment 'argocd-repo-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 argocd-repo-server-keys.yaml:15-26
────────────────────────────────────────
  15 ┌         - name: import-gpg-key
  16 │           image: argoproj/argocd
  17 │           command: ["gpg", "--import", "/deploy-key/deploy-key-private"]
  18 │           env:
  19 │             - name: GNUPGHOME
  20 │               value: /gpg-home/.gnupg
  21 │           volumeMounts:
  22 │             - mountPath: /deploy-key
  23 └               name: deploy-key
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'argocd-repo-server' of 'deployment' 'argocd-repo-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 argocd-repo-server-keys.yaml:28-35
────────────────────────────────────────
  28 ┌         - name: argocd-repo-server
  29 │           env:
  30 │             - name: GNUPGHOME
  31 │               value: /home/argocd/.gnupg
  32 │           volumeMounts:
  33 │             - mountPath: /home/argocd/.gnupg
  34 │               name: gpg-home
  35 └               subPath: .gnupg
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'import-gpg-key' of 'deployment' 'argocd-repo-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 argocd-repo-server-keys.yaml:15-26
────────────────────────────────────────
  15 ┌         - name: import-gpg-key
  16 │           image: argoproj/argocd
  17 │           command: ["gpg", "--import", "/deploy-key/deploy-key-private"]
  18 │           env:
  19 │             - name: GNUPGHOME
  20 │               value: /gpg-home/.gnupg
  21 │           volumeMounts:
  22 │             - mountPath: /deploy-key
  23 └               name: deploy-key
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-repo-server-keys.yaml:28-35
────────────────────────────────────────
  28 ┌         - name: argocd-repo-server
  29 │           env:
  30 │             - name: GNUPGHOME
  31 │               value: /home/argocd/.gnupg
  32 │           volumeMounts:
  33 │             - mountPath: /home/argocd/.gnupg
  34 │               name: gpg-home
  35 └               subPath: .gnupg
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'import-gpg-key' of Deployment 'argocd-repo-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-repo-server-keys.yaml:15-26
────────────────────────────────────────
  15 ┌         - name: import-gpg-key
  16 │           image: argoproj/argocd
  17 │           command: ["gpg", "--import", "/deploy-key/deploy-key-private"]
  18 │           env:
  19 │             - name: GNUPGHOME
  20 │               value: /gpg-home/.gnupg
  21 │           volumeMounts:
  22 │             - mountPath: /deploy-key
  23 └               name: deploy-key
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 argocd-repo-server-keys.yaml:28-35
────────────────────────────────────────
  28 ┌         - name: argocd-repo-server
  29 │           env:
  30 │             - name: GNUPGHOME
  31 │               value: /home/argocd/.gnupg
  32 │           volumeMounts:
  33 │             - mountPath: /home/argocd/.gnupg
  34 │               name: gpg-home
  35 └               subPath: .gnupg
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'import-gpg-key' of Deployment 'argocd-repo-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 argocd-repo-server-keys.yaml:15-26
────────────────────────────────────────
  15 ┌         - name: import-gpg-key
  16 │           image: argoproj/argocd
  17 │           command: ["gpg", "--import", "/deploy-key/deploy-key-private"]
  18 │           env:
  19 │             - name: GNUPGHOME
  20 │               value: /gpg-home/.gnupg
  21 │           volumeMounts:
  22 │             - mountPath: /deploy-key
  23 └               name: deploy-key
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 argocd-repo-server-keys.yaml:28-35
────────────────────────────────────────
  28 ┌         - name: argocd-repo-server
  29 │           env:
  30 │             - name: GNUPGHOME
  31 │               value: /home/argocd/.gnupg
  32 │           volumeMounts:
  33 │             - mountPath: /home/argocd/.gnupg
  34 │               name: gpg-home
  35 └               subPath: .gnupg
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'import-gpg-key' of Deployment 'argocd-repo-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 argocd-repo-server-keys.yaml:15-26
────────────────────────────────────────
  15 ┌         - name: import-gpg-key
  16 │           image: argoproj/argocd
  17 │           command: ["gpg", "--import", "/deploy-key/deploy-key-private"]
  18 │           env:
  19 │             - name: GNUPGHOME
  20 │               value: /gpg-home/.gnupg
  21 │           volumeMounts:
  22 │             - mountPath: /deploy-key
  23 └               name: deploy-key
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 argocd-repo-server-keys.yaml:28-35
────────────────────────────────────────
  28 ┌         - name: argocd-repo-server
  29 │           env:
  30 │             - name: GNUPGHOME
  31 │               value: /home/argocd/.gnupg
  32 │           volumeMounts:
  33 │             - mountPath: /home/argocd/.gnupg
  34 │               name: gpg-home
  35 └               subPath: .gnupg
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'import-gpg-key' of Deployment 'argocd-repo-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 argocd-repo-server-keys.yaml:15-26
────────────────────────────────────────
  15 ┌         - name: import-gpg-key
  16 │           image: argoproj/argocd
  17 │           command: ["gpg", "--import", "/deploy-key/deploy-key-private"]
  18 │           env:
  19 │             - name: GNUPGHOME
  20 │               value: /gpg-home/.gnupg
  21 │           volumeMounts:
  22 │             - mountPath: /deploy-key
  23 └               name: deploy-key
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-repo-server-keys.yaml:28-35
────────────────────────────────────────
  28 ┌         - name: argocd-repo-server
  29 │           env:
  30 │             - name: GNUPGHOME
  31 │               value: /home/argocd/.gnupg
  32 │           volumeMounts:
  33 │             - mountPath: /home/argocd/.gnupg
  34 │               name: gpg-home
  35 └               subPath: .gnupg
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'import-gpg-key' of Deployment 'argocd-repo-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-repo-server-keys.yaml:15-26
────────────────────────────────────────
  15 ┌         - name: import-gpg-key
  16 │           image: argoproj/argocd
  17 │           command: ["gpg", "--import", "/deploy-key/deploy-key-private"]
  18 │           env:
  19 │             - name: GNUPGHOME
  20 │               value: /gpg-home/.gnupg
  21 │           volumeMounts:
  22 │             - mountPath: /deploy-key
  23 └               name: deploy-key
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-repo-server-keys.yaml:28-35
────────────────────────────────────────
  28 ┌         - name: argocd-repo-server
  29 │           env:
  30 │             - name: GNUPGHOME
  31 │               value: /home/argocd/.gnupg
  32 │           volumeMounts:
  33 │             - mountPath: /home/argocd/.gnupg
  34 │               name: gpg-home
  35 └               subPath: .gnupg
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'import-gpg-key' of Deployment 'argocd-repo-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-repo-server-keys.yaml:15-26
────────────────────────────────────────
  15 ┌         - name: import-gpg-key
  16 │           image: argoproj/argocd
  17 │           command: ["gpg", "--import", "/deploy-key/deploy-key-private"]
  18 │           env:
  19 │             - name: GNUPGHOME
  20 │               value: /gpg-home/.gnupg
  21 │           volumeMounts:
  22 │             - mountPath: /deploy-key
  23 └               name: deploy-key
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-repo-server-keys.yaml:28-35
────────────────────────────────────────
  28 ┌         - name: argocd-repo-server
  29 │           env:
  30 │             - name: GNUPGHOME
  31 │               value: /home/argocd/.gnupg
  32 │           volumeMounts:
  33 │             - mountPath: /home/argocd/.gnupg
  34 │               name: gpg-home
  35 └               subPath: .gnupg
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'import-gpg-key' of Deployment 'argocd-repo-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-repo-server-keys.yaml:15-26
────────────────────────────────────────
  15 ┌         - name: import-gpg-key
  16 │           image: argoproj/argocd
  17 │           command: ["gpg", "--import", "/deploy-key/deploy-key-private"]
  18 │           env:
  19 │             - name: GNUPGHOME
  20 │               value: /gpg-home/.gnupg
  21 │           volumeMounts:
  22 │             - mountPath: /deploy-key
  23 └               name: deploy-key
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-repo-server-keys.yaml:28-35
────────────────────────────────────────
  28 ┌         - name: argocd-repo-server
  29 │           env:
  30 │             - name: GNUPGHOME
  31 │               value: /home/argocd/.gnupg
  32 │           volumeMounts:
  33 │             - mountPath: /home/argocd/.gnupg
  34 │               name: gpg-home
  35 └               subPath: .gnupg
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'import-gpg-key' of Deployment 'argocd-repo-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-repo-server-keys.yaml:15-26
────────────────────────────────────────
  15 ┌         - name: import-gpg-key
  16 │           image: argoproj/argocd
  17 │           command: ["gpg", "--import", "/deploy-key/deploy-key-private"]
  18 │           env:
  19 │             - name: GNUPGHOME
  20 │               value: /gpg-home/.gnupg
  21 │           volumeMounts:
  22 │             - mountPath: /deploy-key
  23 └               name: deploy-key
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-repo-server-keys.yaml:28-35
────────────────────────────────────────
  28 ┌         - name: argocd-repo-server
  29 │           env:
  30 │             - name: GNUPGHOME
  31 │               value: /home/argocd/.gnupg
  32 │           volumeMounts:
  33 │             - mountPath: /home/argocd/.gnupg
  34 │               name: gpg-home
  35 └               subPath: .gnupg
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'import-gpg-key' of Deployment 'argocd-repo-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-repo-server-keys.yaml:15-26
────────────────────────────────────────
  15 ┌         - name: import-gpg-key
  16 │           image: argoproj/argocd
  17 │           command: ["gpg", "--import", "/deploy-key/deploy-key-private"]
  18 │           env:
  19 │             - name: GNUPGHOME
  20 │               value: /gpg-home/.gnupg
  21 │           volumeMounts:
  22 │             - mountPath: /deploy-key
  23 └               name: deploy-key
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 argocd-repo-server-keys.yaml:15-26
────────────────────────────────────────
  15 ┌         - name: import-gpg-key
  16 │           image: argoproj/argocd
  17 │           command: ["gpg", "--import", "/deploy-key/deploy-key-private"]
  18 │           env:
  19 │             - name: GNUPGHOME
  20 │               value: /gpg-home/.gnupg
  21 │           volumeMounts:
  22 │             - mountPath: /deploy-key
  23 └               name: deploy-key
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 argocd-repo-server-keys.yaml:28-35
────────────────────────────────────────
  28 ┌         - name: argocd-repo-server
  29 │           env:
  30 │             - name: GNUPGHOME
  31 │               value: /home/argocd/.gnupg
  32 │           volumeMounts:
  33 │             - mountPath: /home/argocd/.gnupg
  34 │               name: gpg-home
  35 └               subPath: .gnupg
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "argocd-repo-server" of deployment "argocd-repo-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 argocd-repo-server-keys.yaml:28-35
────────────────────────────────────────
  28 ┌         - name: argocd-repo-server
  29 │           env:
  30 │             - name: GNUPGHOME
  31 │               value: /home/argocd/.gnupg
  32 │           volumeMounts:
  33 │             - mountPath: /home/argocd/.gnupg
  34 │               name: gpg-home
  35 └               subPath: .gnupg
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "import-gpg-key" of deployment "argocd-repo-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 argocd-repo-server-keys.yaml:15-26
────────────────────────────────────────
  15 ┌         - name: import-gpg-key
  16 │           image: argoproj/argocd
  17 │           command: ["gpg", "--import", "/deploy-key/deploy-key-private"]
  18 │           env:
  19 │             - name: GNUPGHOME
  20 │               value: /gpg-home/.gnupg
  21 │           volumeMounts:
  22 │             - mountPath: /deploy-key
  23 └               name: deploy-key
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 argocd-repo-server-keys.yaml:15-26
────────────────────────────────────────
  15 ┌         - name: import-gpg-key
  16 │           image: argoproj/argocd
  17 │           command: ["gpg", "--import", "/deploy-key/deploy-key-private"]
  18 │           env:
  19 │             - name: GNUPGHOME
  20 │               value: /gpg-home/.gnupg
  21 │           volumeMounts:
  22 │             - mountPath: /deploy-key
  23 └               name: deploy-key
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 argocd-repo-server-keys.yaml:28-35
────────────────────────────────────────
  28 ┌         - name: argocd-repo-server
  29 │           env:
  30 │             - name: GNUPGHOME
  31 │               value: /home/argocd/.gnupg
  32 │           volumeMounts:
  33 │             - mountPath: /home/argocd/.gnupg
  34 │               name: gpg-home
  35 └               subPath: .gnupg
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-repo-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-repo-server-keys.yaml:4
────────────────────────────────────────
   4 [   name: argocd-repo-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container argocd-repo-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-repo-server-keys.yaml:15-26
────────────────────────────────────────
  15 ┌         - name: import-gpg-key
  16 │           image: argoproj/argocd
  17 │           command: ["gpg", "--import", "/deploy-key/deploy-key-private"]
  18 │           env:
  19 │             - name: GNUPGHOME
  20 │               value: /gpg-home/.gnupg
  21 │           volumeMounts:
  22 │             - mountPath: /deploy-key
  23 └               name: deploy-key
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container argocd-repo-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-repo-server-keys.yaml:28-35
────────────────────────────────────────
  28 ┌         - name: argocd-repo-server
  29 │           env:
  30 │             - name: GNUPGHOME
  31 │               value: /home/argocd/.gnupg
  32 │           volumeMounts:
  33 │             - mountPath: /home/argocd/.gnupg
  34 │               name: gpg-home
  35 └               subPath: .gnupg
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment argocd-repo-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-repo-server-keys.yaml:8-35
────────────────────────────────────────
   8 ┌       volumes:
   9 │         - name: gpg-home
  10 │           emptyDir: {}
  11 │         - name: deploy-key
  12 │           secret:
  13 │             secretName: argocd-secret
  14 │       initContainers:
  15 │         - name: import-gpg-key
  16 └           image: argoproj/argocd
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container import-gpg-key in deployment argocd-repo-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd-repo-server-keys.yaml:15-26
────────────────────────────────────────
  15 ┌         - name: import-gpg-key
  16 │           image: argoproj/argocd
  17 │           command: ["gpg", "--import", "/deploy-key/deploy-key-private"]
  18 │           env:
  19 │             - name: GNUPGHOME
  20 │               value: /gpg-home/.gnupg
  21 │           volumeMounts:
  22 │             - mountPath: /deploy-key
  23 └               name: deploy-key
  ..   
────────────────────────────────────────



argocd-repo-server-ksops.yaml (kubernetes)
==========================================
Tests: 130 (SUCCESSES: 96, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 21, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 argocd-repo-server-ksops.yaml:27-34
────────────────────────────────────────
  27 ┌         - name: argocd-repo-server
  28 │           volumeMounts:
  29 │             - mountPath: /usr/local/bin/kustomize
  30 │               name: custom-tools
  31 │               subPath: kustomize
  32 │             - mountPath: /usr/local/bin/ksops
  33 │               name: custom-tools
  34 └               subPath: ksops
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'install-ksops' of Deployment 'argocd-repo-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 argocd-repo-server-ksops.yaml:14-24
────────────────────────────────────────
  14 ┌         - name: install-ksops
  15 │           image: viaductoss/ksops:v4
  16 │           command: ["/bin/sh", "-c"]
  17 │           args:
  18 │             - echo "Installing KSOPS...";
  19 │               mv ksops /custom-tools/;
  20 │               mv kustomize /custom-tools/;
  21 │               echo "Done.";
  22 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 argocd-repo-server-ksops.yaml:27-34
────────────────────────────────────────
  27 ┌         - name: argocd-repo-server
  28 │           volumeMounts:
  29 │             - mountPath: /usr/local/bin/kustomize
  30 │               name: custom-tools
  31 │               subPath: kustomize
  32 │             - mountPath: /usr/local/bin/ksops
  33 │               name: custom-tools
  34 └               subPath: ksops
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'install-ksops' of Deployment 'argocd-repo-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 argocd-repo-server-ksops.yaml:14-24
────────────────────────────────────────
  14 ┌         - name: install-ksops
  15 │           image: viaductoss/ksops:v4
  16 │           command: ["/bin/sh", "-c"]
  17 │           args:
  18 │             - echo "Installing KSOPS...";
  19 │               mv ksops /custom-tools/;
  20 │               mv kustomize /custom-tools/;
  21 │               echo "Done.";
  22 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'argocd-repo-server' of 'deployment' 'argocd-repo-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 argocd-repo-server-ksops.yaml:27-34
────────────────────────────────────────
  27 ┌         - name: argocd-repo-server
  28 │           volumeMounts:
  29 │             - mountPath: /usr/local/bin/kustomize
  30 │               name: custom-tools
  31 │               subPath: kustomize
  32 │             - mountPath: /usr/local/bin/ksops
  33 │               name: custom-tools
  34 └               subPath: ksops
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'install-ksops' of 'deployment' 'argocd-repo-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 argocd-repo-server-ksops.yaml:14-24
────────────────────────────────────────
  14 ┌         - name: install-ksops
  15 │           image: viaductoss/ksops:v4
  16 │           command: ["/bin/sh", "-c"]
  17 │           args:
  18 │             - echo "Installing KSOPS...";
  19 │               mv ksops /custom-tools/;
  20 │               mv kustomize /custom-tools/;
  21 │               echo "Done.";
  22 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-repo-server-ksops.yaml:27-34
────────────────────────────────────────
  27 ┌         - name: argocd-repo-server
  28 │           volumeMounts:
  29 │             - mountPath: /usr/local/bin/kustomize
  30 │               name: custom-tools
  31 │               subPath: kustomize
  32 │             - mountPath: /usr/local/bin/ksops
  33 │               name: custom-tools
  34 └               subPath: ksops
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'install-ksops' of Deployment 'argocd-repo-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-repo-server-ksops.yaml:14-24
────────────────────────────────────────
  14 ┌         - name: install-ksops
  15 │           image: viaductoss/ksops:v4
  16 │           command: ["/bin/sh", "-c"]
  17 │           args:
  18 │             - echo "Installing KSOPS...";
  19 │               mv ksops /custom-tools/;
  20 │               mv kustomize /custom-tools/;
  21 │               echo "Done.";
  22 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 argocd-repo-server-ksops.yaml:27-34
────────────────────────────────────────
  27 ┌         - name: argocd-repo-server
  28 │           volumeMounts:
  29 │             - mountPath: /usr/local/bin/kustomize
  30 │               name: custom-tools
  31 │               subPath: kustomize
  32 │             - mountPath: /usr/local/bin/ksops
  33 │               name: custom-tools
  34 └               subPath: ksops
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'install-ksops' of Deployment 'argocd-repo-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 argocd-repo-server-ksops.yaml:14-24
────────────────────────────────────────
  14 ┌         - name: install-ksops
  15 │           image: viaductoss/ksops:v4
  16 │           command: ["/bin/sh", "-c"]
  17 │           args:
  18 │             - echo "Installing KSOPS...";
  19 │               mv ksops /custom-tools/;
  20 │               mv kustomize /custom-tools/;
  21 │               echo "Done.";
  22 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 argocd-repo-server-ksops.yaml:27-34
────────────────────────────────────────
  27 ┌         - name: argocd-repo-server
  28 │           volumeMounts:
  29 │             - mountPath: /usr/local/bin/kustomize
  30 │               name: custom-tools
  31 │               subPath: kustomize
  32 │             - mountPath: /usr/local/bin/ksops
  33 │               name: custom-tools
  34 └               subPath: ksops
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 argocd-repo-server-ksops.yaml:27-34
────────────────────────────────────────
  27 ┌         - name: argocd-repo-server
  28 │           volumeMounts:
  29 │             - mountPath: /usr/local/bin/kustomize
  30 │               name: custom-tools
  31 │               subPath: kustomize
  32 │             - mountPath: /usr/local/bin/ksops
  33 │               name: custom-tools
  34 └               subPath: ksops
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'install-ksops' of Deployment 'argocd-repo-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 argocd-repo-server-ksops.yaml:14-24
────────────────────────────────────────
  14 ┌         - name: install-ksops
  15 │           image: viaductoss/ksops:v4
  16 │           command: ["/bin/sh", "-c"]
  17 │           args:
  18 │             - echo "Installing KSOPS...";
  19 │               mv ksops /custom-tools/;
  20 │               mv kustomize /custom-tools/;
  21 │               echo "Done.";
  22 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-repo-server-ksops.yaml:27-34
────────────────────────────────────────
  27 ┌         - name: argocd-repo-server
  28 │           volumeMounts:
  29 │             - mountPath: /usr/local/bin/kustomize
  30 │               name: custom-tools
  31 │               subPath: kustomize
  32 │             - mountPath: /usr/local/bin/ksops
  33 │               name: custom-tools
  34 └               subPath: ksops
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'install-ksops' of Deployment 'argocd-repo-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-repo-server-ksops.yaml:14-24
────────────────────────────────────────
  14 ┌         - name: install-ksops
  15 │           image: viaductoss/ksops:v4
  16 │           command: ["/bin/sh", "-c"]
  17 │           args:
  18 │             - echo "Installing KSOPS...";
  19 │               mv ksops /custom-tools/;
  20 │               mv kustomize /custom-tools/;
  21 │               echo "Done.";
  22 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-repo-server-ksops.yaml:27-34
────────────────────────────────────────
  27 ┌         - name: argocd-repo-server
  28 │           volumeMounts:
  29 │             - mountPath: /usr/local/bin/kustomize
  30 │               name: custom-tools
  31 │               subPath: kustomize
  32 │             - mountPath: /usr/local/bin/ksops
  33 │               name: custom-tools
  34 └               subPath: ksops
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'install-ksops' of Deployment 'argocd-repo-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-repo-server-ksops.yaml:14-24
────────────────────────────────────────
  14 ┌         - name: install-ksops
  15 │           image: viaductoss/ksops:v4
  16 │           command: ["/bin/sh", "-c"]
  17 │           args:
  18 │             - echo "Installing KSOPS...";
  19 │               mv ksops /custom-tools/;
  20 │               mv kustomize /custom-tools/;
  21 │               echo "Done.";
  22 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-repo-server-ksops.yaml:27-34
────────────────────────────────────────
  27 ┌         - name: argocd-repo-server
  28 │           volumeMounts:
  29 │             - mountPath: /usr/local/bin/kustomize
  30 │               name: custom-tools
  31 │               subPath: kustomize
  32 │             - mountPath: /usr/local/bin/ksops
  33 │               name: custom-tools
  34 └               subPath: ksops
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'install-ksops' of Deployment 'argocd-repo-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-repo-server-ksops.yaml:14-24
────────────────────────────────────────
  14 ┌         - name: install-ksops
  15 │           image: viaductoss/ksops:v4
  16 │           command: ["/bin/sh", "-c"]
  17 │           args:
  18 │             - echo "Installing KSOPS...";
  19 │               mv ksops /custom-tools/;
  20 │               mv kustomize /custom-tools/;
  21 │               echo "Done.";
  22 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-repo-server-ksops.yaml:27-34
────────────────────────────────────────
  27 ┌         - name: argocd-repo-server
  28 │           volumeMounts:
  29 │             - mountPath: /usr/local/bin/kustomize
  30 │               name: custom-tools
  31 │               subPath: kustomize
  32 │             - mountPath: /usr/local/bin/ksops
  33 │               name: custom-tools
  34 └               subPath: ksops
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'install-ksops' of Deployment 'argocd-repo-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-repo-server-ksops.yaml:14-24
────────────────────────────────────────
  14 ┌         - name: install-ksops
  15 │           image: viaductoss/ksops:v4
  16 │           command: ["/bin/sh", "-c"]
  17 │           args:
  18 │             - echo "Installing KSOPS...";
  19 │               mv ksops /custom-tools/;
  20 │               mv kustomize /custom-tools/;
  21 │               echo "Done.";
  22 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-repo-server' of Deployment 'argocd-repo-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-repo-server-ksops.yaml:27-34
────────────────────────────────────────
  27 ┌         - name: argocd-repo-server
  28 │           volumeMounts:
  29 │             - mountPath: /usr/local/bin/kustomize
  30 │               name: custom-tools
  31 │               subPath: kustomize
  32 │             - mountPath: /usr/local/bin/ksops
  33 │               name: custom-tools
  34 └               subPath: ksops
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'install-ksops' of Deployment 'argocd-repo-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-repo-server-ksops.yaml:14-24
────────────────────────────────────────
  14 ┌         - name: install-ksops
  15 │           image: viaductoss/ksops:v4
  16 │           command: ["/bin/sh", "-c"]
  17 │           args:
  18 │             - echo "Installing KSOPS...";
  19 │               mv ksops /custom-tools/;
  20 │               mv kustomize /custom-tools/;
  21 │               echo "Done.";
  22 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 argocd-repo-server-ksops.yaml:14-24
────────────────────────────────────────
  14 ┌         - name: install-ksops
  15 │           image: viaductoss/ksops:v4
  16 │           command: ["/bin/sh", "-c"]
  17 │           args:
  18 │             - echo "Installing KSOPS...";
  19 │               mv ksops /custom-tools/;
  20 │               mv kustomize /custom-tools/;
  21 │               echo "Done.";
  22 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 argocd-repo-server-ksops.yaml:27-34
────────────────────────────────────────
  27 ┌         - name: argocd-repo-server
  28 │           volumeMounts:
  29 │             - mountPath: /usr/local/bin/kustomize
  30 │               name: custom-tools
  31 │               subPath: kustomize
  32 │             - mountPath: /usr/local/bin/ksops
  33 │               name: custom-tools
  34 └               subPath: ksops
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "argocd-repo-server" of deployment "argocd-repo-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 argocd-repo-server-ksops.yaml:27-34
────────────────────────────────────────
  27 ┌         - name: argocd-repo-server
  28 │           volumeMounts:
  29 │             - mountPath: /usr/local/bin/kustomize
  30 │               name: custom-tools
  31 │               subPath: kustomize
  32 │             - mountPath: /usr/local/bin/ksops
  33 │               name: custom-tools
  34 └               subPath: ksops
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "install-ksops" of deployment "argocd-repo-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 argocd-repo-server-ksops.yaml:14-24
────────────────────────────────────────
  14 ┌         - name: install-ksops
  15 │           image: viaductoss/ksops:v4
  16 │           command: ["/bin/sh", "-c"]
  17 │           args:
  18 │             - echo "Installing KSOPS...";
  19 │               mv ksops /custom-tools/;
  20 │               mv kustomize /custom-tools/;
  21 │               echo "Done.";
  22 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 argocd-repo-server-ksops.yaml:14-24
────────────────────────────────────────
  14 ┌         - name: install-ksops
  15 │           image: viaductoss/ksops:v4
  16 │           command: ["/bin/sh", "-c"]
  17 │           args:
  18 │             - echo "Installing KSOPS...";
  19 │               mv ksops /custom-tools/;
  20 │               mv kustomize /custom-tools/;
  21 │               echo "Done.";
  22 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 argocd-repo-server-ksops.yaml:27-34
────────────────────────────────────────
  27 ┌         - name: argocd-repo-server
  28 │           volumeMounts:
  29 │             - mountPath: /usr/local/bin/kustomize
  30 │               name: custom-tools
  31 │               subPath: kustomize
  32 │             - mountPath: /usr/local/bin/ksops
  33 │               name: custom-tools
  34 └               subPath: ksops
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-repo-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-repo-server-ksops.yaml:4
────────────────────────────────────────
   4 [   name: argocd-repo-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container argocd-repo-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-repo-server-ksops.yaml:14-24
────────────────────────────────────────
  14 ┌         - name: install-ksops
  15 │           image: viaductoss/ksops:v4
  16 │           command: ["/bin/sh", "-c"]
  17 │           args:
  18 │             - echo "Installing KSOPS...";
  19 │               mv ksops /custom-tools/;
  20 │               mv kustomize /custom-tools/;
  21 │               echo "Done.";
  22 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container argocd-repo-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-repo-server-ksops.yaml:27-34
────────────────────────────────────────
  27 ┌         - name: argocd-repo-server
  28 │           volumeMounts:
  29 │             - mountPath: /usr/local/bin/kustomize
  30 │               name: custom-tools
  31 │               subPath: kustomize
  32 │             - mountPath: /usr/local/bin/ksops
  33 │               name: custom-tools
  34 └               subPath: ksops
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment argocd-repo-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-repo-server-ksops.yaml:9-34
────────────────────────────────────────
   9 ┌       volumes:
  10 │         - name: custom-tools
  11 │           emptyDir: {}
  12 │       # 2. Use an init container to download/copy custom binaries into the emptyDir
  13 │       initContainers:
  14 │         - name: install-ksops
  15 │           image: viaductoss/ksops:v4
  16 │           command: ["/bin/sh", "-c"]
  17 └           args:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container install-ksops in deployment argocd-repo-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd-repo-server-ksops.yaml:14-24
────────────────────────────────────────
  14 ┌         - name: install-ksops
  15 │           image: viaductoss/ksops:v4
  16 │           command: ["/bin/sh", "-c"]
  17 │           args:
  18 │             - echo "Installing KSOPS...";
  19 │               mv ksops /custom-tools/;
  20 │               mv kustomize /custom-tools/;
  21 │               echo "Done.";
  22 └           volumeMounts:
  ..   
────────────────────────────────────────



argocd-server-clusterrole.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'argocd-server' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 argocd-server-clusterrole.yaml:10-17
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 │   - delete  # supports deletion a live object in UI
  16 │   - get     # supports viewing live object manifest in UI
  17 └   - patch   # supports `argocd app patch`
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'argocd-server' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 argocd-server-clusterrole.yaml:40-45
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - batch
  42 │   resources:
  43 │   - jobs
  44 │   verbs:
  45 └   - create   # supports triggering jobs from UI
────────────────────────────────────────



argocd-server-clusterrole1.yaml (kubernetes)
============================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'argocd-server' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 argocd-server-clusterrole1.yaml:10-17
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 │   - delete  # supports deletion a live object in UI
  16 │   - get     # supports viewing live object manifest in UI
  17 └   - patch   # supports `argocd app patch`
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'argocd-server' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 argocd-server-clusterrole1.yaml:40-45
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - batch
  42 │   resources:
  43 │   - jobs
  44 │   verbs:
  45 └   - create   # supports triggering jobs from UI
────────────────────────────────────────



argocd-server-deployment1.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'argocd-server' of Deployment 'argocd-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 argocd-server-deployment1.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 argocd-server-deployment1.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'argocd-server' of 'deployment' 'argocd-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 argocd-server-deployment1.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-server-deployment1.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'argocd-server' of Deployment 'argocd-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 argocd-server-deployment1.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'argocd-server' of Deployment 'argocd-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 argocd-server-deployment1.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'argocd-server' of Deployment 'argocd-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 argocd-server-deployment1.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-server-deployment1.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-server-deployment1.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-server-deployment1.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-server-deployment1.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-server-deployment1.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 argocd-server-deployment1.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "argocd-server" of deployment "argocd-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 argocd-server-deployment1.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 argocd-server-deployment1.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-server-deployment1.yaml:4
────────────────────────────────────────
   4 [   name: argocd-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container argocd-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-server-deployment1.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment argocd-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-server-deployment1.yaml:9-29
────────────────────────────────────────
   9 ┌       affinity:
  10 │         podAntiAffinity:
  11 │           requiredDuringSchedulingIgnoredDuringExecution:
  12 │           - labelSelector:
  13 │               matchLabels:
  14 │                 app.kubernetes.io/name: argocd-server
  15 │             topologyKey: kubernetes.io/hostname
  16 │           preferredDuringSchedulingIgnoredDuringExecution:
  17 └           - weight: 100
  ..   
────────────────────────────────────────



argocd-server-deployment2.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'argocd-server' of Deployment 'argocd-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 argocd-server-deployment2.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 argocd-server-deployment2.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'argocd-server' of 'deployment' 'argocd-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 argocd-server-deployment2.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-server-deployment2.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'argocd-server' of Deployment 'argocd-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 argocd-server-deployment2.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'argocd-server' of Deployment 'argocd-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 argocd-server-deployment2.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'argocd-server' of Deployment 'argocd-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 argocd-server-deployment2.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-server-deployment2.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-server-deployment2.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-server-deployment2.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-server-deployment2.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-server-deployment2.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 argocd-server-deployment2.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "argocd-server" of deployment "argocd-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 argocd-server-deployment2.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 argocd-server-deployment2.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-server-deployment2.yaml:4
────────────────────────────────────────
   4 [   name: argocd-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container argocd-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-server-deployment2.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment argocd-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-server-deployment2.yaml:9-29
────────────────────────────────────────
   9 ┌       affinity:
  10 │         podAntiAffinity:
  11 │           requiredDuringSchedulingIgnoredDuringExecution:
  12 │           - labelSelector:
  13 │               matchLabels:
  14 │                 app.kubernetes.io/name: argocd-server
  15 │             topologyKey: kubernetes.io/hostname
  16 │           preferredDuringSchedulingIgnoredDuringExecution:
  17 └           - weight: 100
  ..   
────────────────────────────────────────



argocd-server-deployment4.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'argocd-server' of Deployment 'argocd-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 argocd-server-deployment4.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 argocd-server-deployment4.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'argocd-server' of 'deployment' 'argocd-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 argocd-server-deployment4.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-server-deployment4.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'argocd-server' of Deployment 'argocd-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 argocd-server-deployment4.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'argocd-server' of Deployment 'argocd-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 argocd-server-deployment4.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'argocd-server' of Deployment 'argocd-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 argocd-server-deployment4.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-server-deployment4.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-server-deployment4.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-server-deployment4.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-server-deployment4.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-server-deployment4.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 argocd-server-deployment4.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "argocd-server" of deployment "argocd-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 argocd-server-deployment4.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 argocd-server-deployment4.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-server-deployment4.yaml:4
────────────────────────────────────────
   4 [   name: argocd-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container argocd-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-server-deployment4.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment argocd-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-server-deployment4.yaml:9-29
────────────────────────────────────────
   9 ┌       affinity:
  10 │         podAntiAffinity:
  11 │           requiredDuringSchedulingIgnoredDuringExecution:
  12 │           - labelSelector:
  13 │               matchLabels:
  14 │                 app.kubernetes.io/name: argocd-server
  15 │             topologyKey: kubernetes.io/hostname
  16 │           preferredDuringSchedulingIgnoredDuringExecution:
  17 └           - weight: 100
  ..   
────────────────────────────────────────



argocd-server-deployment5.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'argocd-server' of Deployment 'argocd-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 argocd-server-deployment5.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 argocd-server-deployment5.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'argocd-server' of 'deployment' 'argocd-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 argocd-server-deployment5.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-server-deployment5.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'argocd-server' of Deployment 'argocd-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 argocd-server-deployment5.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'argocd-server' of Deployment 'argocd-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 argocd-server-deployment5.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'argocd-server' of Deployment 'argocd-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 argocd-server-deployment5.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-server-deployment5.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-server-deployment5.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-server-deployment5.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-server-deployment5.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-server-deployment5.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 argocd-server-deployment5.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "argocd-server" of deployment "argocd-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 argocd-server-deployment5.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 argocd-server-deployment5.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-server-deployment5.yaml:4
────────────────────────────────────────
   4 [   name: argocd-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container argocd-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-server-deployment5.yaml:24-29
────────────────────────────────────────
  24 ┌       - name: argocd-server
  25 │         env:
  26 │         - name: ARGOCD_API_SERVER_REPLICAS
  27 │           value: '2'
  28 │         args:
  29 └         - /usr/local/bin/argocd-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment argocd-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-server-deployment5.yaml:9-29
────────────────────────────────────────
   9 ┌       affinity:
  10 │         podAntiAffinity:
  11 │           requiredDuringSchedulingIgnoredDuringExecution:
  12 │           - labelSelector:
  13 │               matchLabels:
  14 │                 app.kubernetes.io/name: argocd-server
  15 │             topologyKey: kubernetes.io/hostname
  16 │           preferredDuringSchedulingIgnoredDuringExecution:
  17 └           - weight: 100
  ..   
────────────────────────────────────────



argocd-server-role.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'argocd-server' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 argocd-server-role.yaml:10-22
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ""
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - create
  17 │   - get
  18 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argocd-server' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd-server-role.yaml:10-22
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ""
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - create
  17 │   - get
  18 └   - list
  ..   
────────────────────────────────────────



argocd-server-role1.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'argocd-server' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 argocd-server-role1.yaml:10-22
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ""
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - create
  17 │   - get
  18 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argocd-server' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd-server-role1.yaml:10-22
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ""
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - create
  17 │   - get
  18 └   - list
  ..   
────────────────────────────────────────



argocd-server1.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'argocd-server' of Deployment 'argocd-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 argocd-server1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         command:
  11 │         - argocd-server
  12 │         args:
  13 └         - --insecure
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 argocd-server1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         command:
  11 │         - argocd-server
  12 │         args:
  13 └         - --insecure
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'argocd-server' of 'deployment' 'argocd-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 argocd-server1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         command:
  11 │         - argocd-server
  12 │         args:
  13 └         - --insecure
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-server1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         command:
  11 │         - argocd-server
  12 │         args:
  13 └         - --insecure
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'argocd-server' of Deployment 'argocd-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 argocd-server1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         command:
  11 │         - argocd-server
  12 │         args:
  13 └         - --insecure
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'argocd-server' of Deployment 'argocd-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 argocd-server1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         command:
  11 │         - argocd-server
  12 │         args:
  13 └         - --insecure
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'argocd-server' of Deployment 'argocd-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 argocd-server1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         command:
  11 │         - argocd-server
  12 │         args:
  13 └         - --insecure
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-server1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         command:
  11 │         - argocd-server
  12 │         args:
  13 └         - --insecure
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-server1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         command:
  11 │         - argocd-server
  12 │         args:
  13 └         - --insecure
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-server1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         command:
  11 │         - argocd-server
  12 │         args:
  13 └         - --insecure
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-server1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         command:
  11 │         - argocd-server
  12 │         args:
  13 └         - --insecure
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-server' of Deployment 'argocd-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-server1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         command:
  11 │         - argocd-server
  12 │         args:
  13 └         - --insecure
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 argocd-server1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         command:
  11 │         - argocd-server
  12 │         args:
  13 └         - --insecure
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "argocd-server" of deployment "argocd-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 argocd-server1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         command:
  11 │         - argocd-server
  12 │         args:
  13 └         - --insecure
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 argocd-server1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         command:
  11 │         - argocd-server
  12 │         args:
  13 └         - --insecure
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-server1.yaml:4
────────────────────────────────────────
   4 [   name: argocd-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container argocd-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-server1.yaml:9-13
────────────────────────────────────────
   9 ┌       - name: argocd-server
  10 │         command:
  11 │         - argocd-server
  12 │         args:
  13 └         - --insecure
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment argocd-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-server1.yaml:8-13
────────────────────────────────────────
   8 ┌       containers:
   9 │       - name: argocd-server
  10 │         command:
  11 │         - argocd-server
  12 │         args:
  13 └         - --insecure
────────────────────────────────────────



argocd-sync1.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'argocd-sync' of CronJob 'argocd-sync' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 argocd-sync1.yaml:15-33
────────────────────────────────────────
  15 ┌             - name: argocd-sync
  16 │               image: curlimages/curl:latest
  17 │               command:
  18 │                 - sh
  19 │                 - '-c'
  20 │                 - >
  21 │                   echo "------Logging in Argocd------"
  22 │                   response=$(curl -s -X POST https://your-argocd-url.com/api/v1/session \
  23 └                   --header "Content-Type: application/json" \
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'argocd-sync' of CronJob 'argocd-sync' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 argocd-sync1.yaml:15-33
────────────────────────────────────────
  15 ┌             - name: argocd-sync
  16 │               image: curlimages/curl:latest
  17 │               command:
  18 │                 - sh
  19 │                 - '-c'
  20 │                 - >
  21 │                   echo "------Logging in Argocd------"
  22 │                   response=$(curl -s -X POST https://your-argocd-url.com/api/v1/session \
  23 └                   --header "Content-Type: application/json" \
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'argocd-sync' of 'cronjob' 'argocd-sync' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 argocd-sync1.yaml:15-33
────────────────────────────────────────
  15 ┌             - name: argocd-sync
  16 │               image: curlimages/curl:latest
  17 │               command:
  18 │                 - sh
  19 │                 - '-c'
  20 │                 - >
  21 │                   echo "------Logging in Argocd------"
  22 │                   response=$(curl -s -X POST https://your-argocd-url.com/api/v1/session \
  23 └                   --header "Content-Type: application/json" \
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'argocd-sync' of CronJob 'argocd-sync' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-sync1.yaml:15-33
────────────────────────────────────────
  15 ┌             - name: argocd-sync
  16 │               image: curlimages/curl:latest
  17 │               command:
  18 │                 - sh
  19 │                 - '-c'
  20 │                 - >
  21 │                   echo "------Logging in Argocd------"
  22 │                   response=$(curl -s -X POST https://your-argocd-url.com/api/v1/session \
  23 └                   --header "Content-Type: application/json" \
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'argocd-sync' of CronJob 'argocd-sync' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 argocd-sync1.yaml:15-33
────────────────────────────────────────
  15 ┌             - name: argocd-sync
  16 │               image: curlimages/curl:latest
  17 │               command:
  18 │                 - sh
  19 │                 - '-c'
  20 │                 - >
  21 │                   echo "------Logging in Argocd------"
  22 │                   response=$(curl -s -X POST https://your-argocd-url.com/api/v1/session \
  23 └                   --header "Content-Type: application/json" \
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'argocd-sync' of CronJob 'argocd-sync' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 argocd-sync1.yaml:15-33
────────────────────────────────────────
  15 ┌             - name: argocd-sync
  16 │               image: curlimages/curl:latest
  17 │               command:
  18 │                 - sh
  19 │                 - '-c'
  20 │                 - >
  21 │                   echo "------Logging in Argocd------"
  22 │                   response=$(curl -s -X POST https://your-argocd-url.com/api/v1/session \
  23 └                   --header "Content-Type: application/json" \
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'argocd-sync' of CronJob 'argocd-sync' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 argocd-sync1.yaml:15-33
────────────────────────────────────────
  15 ┌             - name: argocd-sync
  16 │               image: curlimages/curl:latest
  17 │               command:
  18 │                 - sh
  19 │                 - '-c'
  20 │                 - >
  21 │                   echo "------Logging in Argocd------"
  22 │                   response=$(curl -s -X POST https://your-argocd-url.com/api/v1/session \
  23 └                   --header "Content-Type: application/json" \
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-sync' of CronJob 'argocd-sync' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-sync1.yaml:15-33
────────────────────────────────────────
  15 ┌             - name: argocd-sync
  16 │               image: curlimages/curl:latest
  17 │               command:
  18 │                 - sh
  19 │                 - '-c'
  20 │                 - >
  21 │                   echo "------Logging in Argocd------"
  22 │                   response=$(curl -s -X POST https://your-argocd-url.com/api/v1/session \
  23 └                   --header "Content-Type: application/json" \
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-sync' of CronJob 'argocd-sync' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-sync1.yaml:15-33
────────────────────────────────────────
  15 ┌             - name: argocd-sync
  16 │               image: curlimages/curl:latest
  17 │               command:
  18 │                 - sh
  19 │                 - '-c'
  20 │                 - >
  21 │                   echo "------Logging in Argocd------"
  22 │                   response=$(curl -s -X POST https://your-argocd-url.com/api/v1/session \
  23 └                   --header "Content-Type: application/json" \
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-sync' of CronJob 'argocd-sync' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-sync1.yaml:15-33
────────────────────────────────────────
  15 ┌             - name: argocd-sync
  16 │               image: curlimages/curl:latest
  17 │               command:
  18 │                 - sh
  19 │                 - '-c'
  20 │                 - >
  21 │                   echo "------Logging in Argocd------"
  22 │                   response=$(curl -s -X POST https://your-argocd-url.com/api/v1/session \
  23 └                   --header "Content-Type: application/json" \
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-sync' of CronJob 'argocd-sync' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-sync1.yaml:15-33
────────────────────────────────────────
  15 ┌             - name: argocd-sync
  16 │               image: curlimages/curl:latest
  17 │               command:
  18 │                 - sh
  19 │                 - '-c'
  20 │                 - >
  21 │                   echo "------Logging in Argocd------"
  22 │                   response=$(curl -s -X POST https://your-argocd-url.com/api/v1/session \
  23 └                   --header "Content-Type: application/json" \
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-sync' of CronJob 'argocd-sync' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-sync1.yaml:15-33
────────────────────────────────────────
  15 ┌             - name: argocd-sync
  16 │               image: curlimages/curl:latest
  17 │               command:
  18 │                 - sh
  19 │                 - '-c'
  20 │                 - >
  21 │                   echo "------Logging in Argocd------"
  22 │                   response=$(curl -s -X POST https://your-argocd-url.com/api/v1/session \
  23 └                   --header "Content-Type: application/json" \
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 argocd-sync1.yaml:15-33
────────────────────────────────────────
  15 ┌             - name: argocd-sync
  16 │               image: curlimages/curl:latest
  17 │               command:
  18 │                 - sh
  19 │                 - '-c'
  20 │                 - >
  21 │                   echo "------Logging in Argocd------"
  22 │                   response=$(curl -s -X POST https://your-argocd-url.com/api/v1/session \
  23 └                   --header "Content-Type: application/json" \
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "argocd-sync" of cronjob "argocd-sync" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 argocd-sync1.yaml:15-33
────────────────────────────────────────
  15 ┌             - name: argocd-sync
  16 │               image: curlimages/curl:latest
  17 │               command:
  18 │                 - sh
  19 │                 - '-c'
  20 │                 - >
  21 │                   echo "------Logging in Argocd------"
  22 │                   response=$(curl -s -X POST https://your-argocd-url.com/api/v1/session \
  23 └                   --header "Content-Type: application/json" \
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 argocd-sync1.yaml:15-33
────────────────────────────────────────
  15 ┌             - name: argocd-sync
  16 │               image: curlimages/curl:latest
  17 │               command:
  18 │                 - sh
  19 │                 - '-c'
  20 │                 - >
  21 │                   echo "------Logging in Argocd------"
  22 │                   response=$(curl -s -X POST https://your-argocd-url.com/api/v1/session \
  23 └                   --header "Content-Type: application/json" \
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): cronjob argocd-sync in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-sync1.yaml:4-7
────────────────────────────────────────
   4 ┌   name: argocd-sync
   5 │   namespace: default
   6 │   labels:
   7 └     k8slens-edit-resource-version: v1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container argocd-sync in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-sync1.yaml:15-33
────────────────────────────────────────
  15 ┌             - name: argocd-sync
  16 │               image: curlimages/curl:latest
  17 │               command:
  18 │                 - sh
  19 │                 - '-c'
  20 │                 - >
  21 │                   echo "------Logging in Argocd------"
  22 │                   response=$(curl -s -X POST https://your-argocd-url.com/api/v1/session \
  23 └                   --header "Content-Type: application/json" \
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): cronjob argocd-sync in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-sync1.yaml:14-36
────────────────────────────────────────
  14 ┌           containers:
  15 │             - name: argocd-sync
  16 │               image: curlimages/curl:latest
  17 │               command:
  18 │                 - sh
  19 │                 - '-c'
  20 │                 - >
  21 │                   echo "------Logging in Argocd------"
  22 └                   response=$(curl -s -X POST https://your-argocd-url.com/api/v1/session \
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container argocd-sync in cronjob argocd-sync (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd-sync1.yaml:15-33
────────────────────────────────────────
  15 ┌             - name: argocd-sync
  16 │               image: curlimages/curl:latest
  17 │               command:
  18 │                 - sh
  19 │                 - '-c'
  20 │                 - >
  21 │                   echo "------Logging in Argocd------"
  22 │                   response=$(curl -s -X POST https://your-argocd-url.com/api/v1/session \
  23 └                   --header "Content-Type: application/json" \
  ..   
────────────────────────────────────────



argocd-workload1_1.yaml (kubernetes)
====================================
Tests: 121 (SUCCESSES: 105, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 13, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-workload1_1.yaml:74-94
────────────────────────────────────────
  74 ┌       - command:
  75 │         - /bin/cp
  76 │         - -n
  77 │         - /usr/local/bin/argocd
  78 │         - /shared/argocd-dex
  79 │         image: quay.io/argoproj/argocd:v2.13.5
  80 │         name: copyutil
  81 │         securityContext:
  82 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-workload1_1.yaml:28-72
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_LOGFORMAT
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.log.format
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-workload1_1.yaml:74-94
────────────────────────────────────────
  74 ┌       - command:
  75 │         - /bin/cp
  76 │         - -n
  77 │         - /usr/local/bin/argocd
  78 │         - /shared/argocd-dex
  79 │         image: quay.io/argoproj/argocd:v2.13.5
  80 │         name: copyutil
  81 │         securityContext:
  82 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-workload1_1.yaml:28-72
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_LOGFORMAT
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.log.format
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-workload1_1.yaml:74-94
────────────────────────────────────────
  74 ┌       - command:
  75 │         - /bin/cp
  76 │         - -n
  77 │         - /usr/local/bin/argocd
  78 │         - /shared/argocd-dex
  79 │         image: quay.io/argoproj/argocd:v2.13.5
  80 │         name: copyutil
  81 │         securityContext:
  82 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-workload1_1.yaml:28-72
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_LOGFORMAT
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.log.format
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-workload1_1.yaml:74-94
────────────────────────────────────────
  74 ┌       - command:
  75 │         - /bin/cp
  76 │         - -n
  77 │         - /usr/local/bin/argocd
  78 │         - /shared/argocd-dex
  79 │         image: quay.io/argoproj/argocd:v2.13.5
  80 │         name: copyutil
  81 │         securityContext:
  82 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-workload1_1.yaml:28-72
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_LOGFORMAT
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.log.format
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-workload1_1.yaml:74-94
────────────────────────────────────────
  74 ┌       - command:
  75 │         - /bin/cp
  76 │         - -n
  77 │         - /usr/local/bin/argocd
  78 │         - /shared/argocd-dex
  79 │         image: quay.io/argoproj/argocd:v2.13.5
  80 │         name: copyutil
  81 │         securityContext:
  82 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-workload1_1.yaml:28-72
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_LOGFORMAT
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.log.format
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-workload1_1.yaml:74-94
────────────────────────────────────────
  74 ┌       - command:
  75 │         - /bin/cp
  76 │         - -n
  77 │         - /usr/local/bin/argocd
  78 │         - /shared/argocd-dex
  79 │         image: quay.io/argoproj/argocd:v2.13.5
  80 │         name: copyutil
  81 │         securityContext:
  82 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-workload1_1.yaml:28-72
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_LOGFORMAT
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.log.format
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-dex-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-workload1_1.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: dex-server
   6 │     app.kubernetes.io/name: argocd-dex-server
   7 │     app.kubernetes.io/part-of: argocd
   8 └   name: argocd-dex-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment argocd-dex-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-workload1_1.yaml:18-111
────────────────────────────────────────
  18 ┌       affinity:
  19 │         podAntiAffinity:
  20 │           preferredDuringSchedulingIgnoredDuringExecution:
  21 │           - podAffinityTerm:
  22 │               labelSelector:
  23 │                 matchLabels:
  24 │                   app.kubernetes.io/part-of: argocd
  25 │               topologyKey: kubernetes.io/hostname
  26 └             weight: 5
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container copyutil in deployment argocd-dex-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd-workload1_1.yaml:74-94
────────────────────────────────────────
  74 ┌       - command:
  75 │         - /bin/cp
  76 │         - -n
  77 │         - /usr/local/bin/argocd
  78 │         - /shared/argocd-dex
  79 │         image: quay.io/argoproj/argocd:v2.13.5
  80 │         name: copyutil
  81 │         securityContext:
  82 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dex in deployment argocd-dex-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd-workload1_1.yaml:28-72
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_LOGFORMAT
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.log.format
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────



argocd-workload1_2.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 7, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-workload1_2.yaml:21-71
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-workload1_2.yaml:21-71
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-workload1_2.yaml:21-71
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-workload1_2.yaml:21-71
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-workload1_2.yaml:21-71
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-workload1_2.yaml:21-71
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-notifications-controller in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-workload1_2.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: notifications-controller
   6 │     app.kubernetes.io/name: argocd-notifications-controller
   7 │     app.kubernetes.io/part-of: argocd
   8 └   name: argocd-notifications-controller
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container argocd-notifications-controller in deployment argocd-notifications-controller (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd-workload1_2.yaml:21-71
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────



argocd-workload_1.yaml (kubernetes)
===================================
Tests: 121 (SUCCESSES: 105, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 13, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-workload_1.yaml:74-94
────────────────────────────────────────
  74 ┌       - command:
  75 │         - /bin/cp
  76 │         - -n
  77 │         - /usr/local/bin/argocd
  78 │         - /shared/argocd-dex
  79 │         image: quay.io/argoproj/argocd:v2.13.5
  80 │         name: copyutil
  81 │         securityContext:
  82 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-workload_1.yaml:28-72
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_LOGFORMAT
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.log.format
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-workload_1.yaml:74-94
────────────────────────────────────────
  74 ┌       - command:
  75 │         - /bin/cp
  76 │         - -n
  77 │         - /usr/local/bin/argocd
  78 │         - /shared/argocd-dex
  79 │         image: quay.io/argoproj/argocd:v2.13.5
  80 │         name: copyutil
  81 │         securityContext:
  82 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-workload_1.yaml:28-72
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_LOGFORMAT
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.log.format
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-workload_1.yaml:74-94
────────────────────────────────────────
  74 ┌       - command:
  75 │         - /bin/cp
  76 │         - -n
  77 │         - /usr/local/bin/argocd
  78 │         - /shared/argocd-dex
  79 │         image: quay.io/argoproj/argocd:v2.13.5
  80 │         name: copyutil
  81 │         securityContext:
  82 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-workload_1.yaml:28-72
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_LOGFORMAT
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.log.format
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-workload_1.yaml:74-94
────────────────────────────────────────
  74 ┌       - command:
  75 │         - /bin/cp
  76 │         - -n
  77 │         - /usr/local/bin/argocd
  78 │         - /shared/argocd-dex
  79 │         image: quay.io/argoproj/argocd:v2.13.5
  80 │         name: copyutil
  81 │         securityContext:
  82 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-workload_1.yaml:28-72
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_LOGFORMAT
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.log.format
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-workload_1.yaml:74-94
────────────────────────────────────────
  74 ┌       - command:
  75 │         - /bin/cp
  76 │         - -n
  77 │         - /usr/local/bin/argocd
  78 │         - /shared/argocd-dex
  79 │         image: quay.io/argoproj/argocd:v2.13.5
  80 │         name: copyutil
  81 │         securityContext:
  82 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-workload_1.yaml:28-72
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_LOGFORMAT
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.log.format
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-workload_1.yaml:74-94
────────────────────────────────────────
  74 ┌       - command:
  75 │         - /bin/cp
  76 │         - -n
  77 │         - /usr/local/bin/argocd
  78 │         - /shared/argocd-dex
  79 │         image: quay.io/argoproj/argocd:v2.13.5
  80 │         name: copyutil
  81 │         securityContext:
  82 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-workload_1.yaml:28-72
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_LOGFORMAT
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.log.format
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-dex-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-workload_1.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: dex-server
   6 │     app.kubernetes.io/name: argocd-dex-server
   7 │     app.kubernetes.io/part-of: argocd
   8 └   name: argocd-dex-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment argocd-dex-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd-workload_1.yaml:18-111
────────────────────────────────────────
  18 ┌       affinity:
  19 │         podAntiAffinity:
  20 │           preferredDuringSchedulingIgnoredDuringExecution:
  21 │           - podAffinityTerm:
  22 │               labelSelector:
  23 │                 matchLabels:
  24 │                   app.kubernetes.io/part-of: argocd
  25 │               topologyKey: kubernetes.io/hostname
  26 └             weight: 5
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container copyutil in deployment argocd-dex-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd-workload_1.yaml:74-94
────────────────────────────────────────
  74 ┌       - command:
  75 │         - /bin/cp
  76 │         - -n
  77 │         - /usr/local/bin/argocd
  78 │         - /shared/argocd-dex
  79 │         image: quay.io/argoproj/argocd:v2.13.5
  80 │         name: copyutil
  81 │         securityContext:
  82 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dex in deployment argocd-dex-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd-workload_1.yaml:28-72
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_LOGFORMAT
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.log.format
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────



argocd-workload_2.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 7, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd-workload_2.yaml:21-71
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd-workload_2.yaml:21-71
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd-workload_2.yaml:21-71
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd-workload_2.yaml:21-71
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd-workload_2.yaml:21-71
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd-workload_2.yaml:21-71
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-notifications-controller in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd-workload_2.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: notifications-controller
   6 │     app.kubernetes.io/name: argocd-notifications-controller
   7 │     app.kubernetes.io/part-of: argocd
   8 └   name: argocd-notifications-controller
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container argocd-notifications-controller in deployment argocd-notifications-controller (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd-workload_2.yaml:21-71
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────



argocd.install1_10.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-application-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd.install1_10.yaml:10-18
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - list
  18 └   - watch
────────────────────────────────────────



argocd.install1_11.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-applicationset-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd.install1_11.yaml:50-58
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - secrets
  54 │   - configmaps
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
────────────────────────────────────────



argocd.install1_12.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-dex-server' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd.install1_12.yaml:10-18
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - list
  18 └   - watch
────────────────────────────────────────



argocd.install1_13.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-notifications-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd.install1_13.yaml:21-28
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - configmaps
  25 │   - secrets
  26 │   verbs:
  27 │   - list
  28 └   - watch
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argocd-notifications-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd.install1_13.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resourceNames:
  40 │   - argocd-notifications-secret
  41 │   resources:
  42 │   - secrets
  43 │   verbs:
  44 └   - get
────────────────────────────────────────



argocd.install1_14.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-redis' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd.install1_14.yaml:10-17
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resourceNames:
  13 │   - argocd-redis
  14 │   resources:
  15 │   - secrets
  16 │   verbs:
  17 └   - get
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argocd-redis' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd.install1_14.yaml:18-23
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - ''
  20 │   resources:
  21 │   - secrets
  22 │   verbs:
  23 └   - create
────────────────────────────────────────



argocd.install1_15.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'argocd-server' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 argocd.install1_15.yaml:10-22
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - create
  17 │   - get
  18 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argocd-server' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd.install1_15.yaml:10-22
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - create
  17 │   - get
  18 └   - list
  ..   
────────────────────────────────────────



argocd.install1_16.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 argocd.install1_16.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'argocd-application-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 argocd.install1_16.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────



argocd.install1_17.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'argocd-applicationset-controller' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 argocd.install1_17.yaml:60-67
────────────────────────────────────────
  60 ┌ - apiGroups:
  61 │   - ''
  62 │   resources:
  63 │   - secrets
  64 │   verbs:
  65 │   - get
  66 │   - list
  67 └   - watch
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'argocd-applicationset-controller' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 argocd.install1_17.yaml:48-59
────────────────────────────────────────
  48 ┌ - apiGroups:
  49 │   - ''
  50 │   resources:
  51 │   - configmaps
  52 │   verbs:
  53 │   - create
  54 │   - update
  55 │   - delete
  56 └   - get
  ..   
────────────────────────────────────────



argocd.install1_18.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'argocd-server' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 argocd.install1_18.yaml:10-17
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 │   - delete
  16 │   - get
  17 └   - patch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'argocd-server' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 argocd.install1_18.yaml:40-45
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - batch
  42 │   resources:
  43 │   - jobs
  44 │   verbs:
  45 └   - create
────────────────────────────────────────



argocd.install1_46.yaml (kubernetes)
====================================
Tests: 121 (SUCCESSES: 105, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 13, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd.install1_46.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.12.0
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd.install1_46.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd.install1_46.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.12.0
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd.install1_46.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd.install1_46.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.12.0
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd.install1_46.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd.install1_46.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.12.0
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd.install1_46.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd.install1_46.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.12.0
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd.install1_46.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd.install1_46.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.12.0
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd.install1_46.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-dex-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd.install1_46.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: dex-server
   6 │     app.kubernetes.io/name: argocd-dex-server
   7 │     app.kubernetes.io/part-of: argocd
   8 └   name: argocd-dex-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment argocd-dex-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd.install1_46.yaml:18-100
────────────────────────────────────────
  18 ┌       affinity:
  19 │         podAntiAffinity:
  20 │           preferredDuringSchedulingIgnoredDuringExecution:
  21 │           - podAffinityTerm:
  22 │               labelSelector:
  23 │                 matchLabels:
  24 │                   app.kubernetes.io/part-of: argocd
  25 │               topologyKey: kubernetes.io/hostname
  26 └             weight: 5
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container copyutil in deployment argocd-dex-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd.install1_46.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.12.0
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dex in deployment argocd-dex-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd.install1_46.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────



argocd.install1_47.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 7, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd.install1_47.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd.install1_47.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd.install1_47.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd.install1_47.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd.install1_47.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd.install1_47.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-notifications-controller in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd.install1_47.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: notifications-controller
   6 │     app.kubernetes.io/name: argocd-notifications-controller
   7 │     app.kubernetes.io/part-of: argocd
   8 └   name: argocd-notifications-controller
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container argocd-notifications-controller in deployment argocd-notifications-controller (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd.install1_47.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────



argocd.install1_48.yaml (kubernetes)
====================================
Tests: 120 (SUCCESSES: 106, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 13, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd.install1_48.yaml:34-56
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         - --requirepass $(REDIS_PASSWORD)
  40 │         env:
  41 │         - name: REDIS_PASSWORD
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd.install1_48.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.12.0
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd.install1_48.yaml:34-56
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         - --requirepass $(REDIS_PASSWORD)
  40 │         env:
  41 │         - name: REDIS_PASSWORD
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd.install1_48.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.12.0
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd.install1_48.yaml:34-56
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         - --requirepass $(REDIS_PASSWORD)
  40 │         env:
  41 │         - name: REDIS_PASSWORD
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd.install1_48.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.12.0
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd.install1_48.yaml:34-56
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         - --requirepass $(REDIS_PASSWORD)
  40 │         env:
  41 │         - name: REDIS_PASSWORD
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd.install1_48.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.12.0
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd.install1_48.yaml:34-56
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         - --requirepass $(REDIS_PASSWORD)
  40 │         env:
  41 │         - name: REDIS_PASSWORD
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd.install1_48.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.12.0
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd.install1_48.yaml:34-56
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         - --requirepass $(REDIS_PASSWORD)
  40 │         env:
  41 │         - name: REDIS_PASSWORD
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd.install1_48.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.12.0
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-redis in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd.install1_48.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: redis
   6 │     app.kubernetes.io/name: argocd-redis
   7 │     app.kubernetes.io/part-of: argocd
   8 └   name: argocd-redis
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container secret-init in deployment argocd-redis (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd.install1_48.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.12.0
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────



argocd.install_10.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-application-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd.install_10.yaml:10-18
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - list
  18 └   - watch
────────────────────────────────────────



argocd.install_11.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-applicationset-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd.install_11.yaml:50-58
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - secrets
  54 │   - configmaps
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
────────────────────────────────────────



argocd.install_12.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-dex-server' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd.install_12.yaml:10-18
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - list
  18 └   - watch
────────────────────────────────────────



argocd.install_13.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-notifications-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd.install_13.yaml:21-28
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - configmaps
  25 │   - secrets
  26 │   verbs:
  27 │   - list
  28 └   - watch
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argocd-notifications-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd.install_13.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resourceNames:
  40 │   - argocd-notifications-secret
  41 │   resources:
  42 │   - secrets
  43 │   verbs:
  44 └   - get
────────────────────────────────────────



argocd.install_14.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-redis' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd.install_14.yaml:10-17
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resourceNames:
  13 │   - argocd-redis
  14 │   resources:
  15 │   - secrets
  16 │   verbs:
  17 └   - get
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argocd-redis' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd.install_14.yaml:18-23
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - ''
  20 │   resources:
  21 │   - secrets
  22 │   verbs:
  23 └   - create
────────────────────────────────────────



argocd.install_15.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'argocd-server' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 argocd.install_15.yaml:10-22
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - create
  17 │   - get
  18 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argocd-server' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd.install_15.yaml:10-22
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - create
  17 │   - get
  18 └   - list
  ..   
────────────────────────────────────────



argocd.install_16.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 argocd.install_16.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'argocd-application-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 argocd.install_16.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────



argocd.install_17.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'argocd-applicationset-controller' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 argocd.install_17.yaml:60-67
────────────────────────────────────────
  60 ┌ - apiGroups:
  61 │   - ''
  62 │   resources:
  63 │   - secrets
  64 │   verbs:
  65 │   - get
  66 │   - list
  67 └   - watch
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'argocd-applicationset-controller' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 argocd.install_17.yaml:48-59
────────────────────────────────────────
  48 ┌ - apiGroups:
  49 │   - ''
  50 │   resources:
  51 │   - configmaps
  52 │   verbs:
  53 │   - create
  54 │   - update
  55 │   - delete
  56 └   - get
  ..   
────────────────────────────────────────



argocd.install_18.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'argocd-server' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 argocd.install_18.yaml:10-17
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 │   - delete
  16 │   - get
  17 └   - patch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'argocd-server' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 argocd.install_18.yaml:40-45
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - batch
  42 │   resources:
  43 │   - jobs
  44 │   verbs:
  45 └   - create
────────────────────────────────────────



argocd.install_46.yaml (kubernetes)
===================================
Tests: 121 (SUCCESSES: 105, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 13, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd.install_46.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.12.0
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd.install_46.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd.install_46.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.12.0
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd.install_46.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd.install_46.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.12.0
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd.install_46.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd.install_46.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.12.0
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd.install_46.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd.install_46.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.12.0
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd.install_46.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd.install_46.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.12.0
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd.install_46.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-dex-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd.install_46.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: dex-server
   6 │     app.kubernetes.io/name: argocd-dex-server
   7 │     app.kubernetes.io/part-of: argocd
   8 └   name: argocd-dex-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment argocd-dex-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd.install_46.yaml:18-100
────────────────────────────────────────
  18 ┌       affinity:
  19 │         podAntiAffinity:
  20 │           preferredDuringSchedulingIgnoredDuringExecution:
  21 │           - podAffinityTerm:
  22 │               labelSelector:
  23 │                 matchLabels:
  24 │                   app.kubernetes.io/part-of: argocd
  25 │               topologyKey: kubernetes.io/hostname
  26 └             weight: 5
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container copyutil in deployment argocd-dex-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd.install_46.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.12.0
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dex in deployment argocd-dex-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd.install_46.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────



argocd.install_47.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 7, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd.install_47.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd.install_47.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd.install_47.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd.install_47.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd.install_47.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd.install_47.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-notifications-controller in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd.install_47.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: notifications-controller
   6 │     app.kubernetes.io/name: argocd-notifications-controller
   7 │     app.kubernetes.io/part-of: argocd
   8 └   name: argocd-notifications-controller
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container argocd-notifications-controller in deployment argocd-notifications-controller (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd.install_47.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────



argocd.install_48.yaml (kubernetes)
===================================
Tests: 120 (SUCCESSES: 106, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 13, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd.install_48.yaml:34-56
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         - --requirepass $(REDIS_PASSWORD)
  40 │         env:
  41 │         - name: REDIS_PASSWORD
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd.install_48.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.12.0
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd.install_48.yaml:34-56
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         - --requirepass $(REDIS_PASSWORD)
  40 │         env:
  41 │         - name: REDIS_PASSWORD
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd.install_48.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.12.0
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd.install_48.yaml:34-56
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         - --requirepass $(REDIS_PASSWORD)
  40 │         env:
  41 │         - name: REDIS_PASSWORD
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd.install_48.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.12.0
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd.install_48.yaml:34-56
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         - --requirepass $(REDIS_PASSWORD)
  40 │         env:
  41 │         - name: REDIS_PASSWORD
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd.install_48.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.12.0
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd.install_48.yaml:34-56
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         - --requirepass $(REDIS_PASSWORD)
  40 │         env:
  41 │         - name: REDIS_PASSWORD
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd.install_48.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.12.0
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd.install_48.yaml:34-56
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         - --requirepass $(REDIS_PASSWORD)
  40 │         env:
  41 │         - name: REDIS_PASSWORD
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd.install_48.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.12.0
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-redis in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd.install_48.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: redis
   6 │     app.kubernetes.io/name: argocd-redis
   7 │     app.kubernetes.io/part-of: argocd
   8 └   name: argocd-redis
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container secret-init in deployment argocd-redis (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd.install_48.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.12.0
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────



argocd.v2.8.11_10.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-application-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd.v2.8.11_10.yaml:10-18
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - list
  18 └   - watch
────────────────────────────────────────



argocd.v2.8.11_11.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-applicationset-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd.v2.8.11_11.yaml:48-56
────────────────────────────────────────
  48 ┌ - apiGroups:
  49 │   - ''
  50 │   resources:
  51 │   - secrets
  52 │   - configmaps
  53 │   verbs:
  54 │   - get
  55 │   - list
  56 └   - watch
────────────────────────────────────────



argocd.v2.8.11_12.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-dex-server' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd.v2.8.11_12.yaml:10-18
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - list
  18 └   - watch
────────────────────────────────────────



argocd.v2.8.11_13.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-notifications-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd.v2.8.11_13.yaml:21-28
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - configmaps
  25 │   - secrets
  26 │   verbs:
  27 │   - list
  28 └   - watch
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argocd-notifications-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd.v2.8.11_13.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resourceNames:
  40 │   - argocd-notifications-secret
  41 │   resources:
  42 │   - secrets
  43 │   verbs:
  44 └   - get
────────────────────────────────────────



argocd.v2.8.11_14.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'argocd-server' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 argocd.v2.8.11_14.yaml:10-22
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - create
  17 │   - get
  18 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argocd-server' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd.v2.8.11_14.yaml:10-22
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - create
  17 │   - get
  18 └   - list
  ..   
────────────────────────────────────────



argocd.v2.8.11_15.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 argocd.v2.8.11_15.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'argocd-application-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 argocd.v2.8.11_15.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────



argocd.v2.8.11_16.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'argocd-server' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 argocd.v2.8.11_16.yaml:10-17
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 │   - delete
  16 │   - get
  17 └   - patch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'argocd-server' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 argocd.v2.8.11_16.yaml:39-44
────────────────────────────────────────
  39 ┌ - apiGroups:
  40 │   - batch
  41 │   resources:
  42 │   - jobs
  43 │   verbs:
  44 └   - create
────────────────────────────────────────



argocd.v2.8.11_42.yaml (kubernetes)
===================================
Tests: 121 (SUCCESSES: 105, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 13, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd.v2.8.11_42.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.8.11
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd.v2.8.11_42.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd.v2.8.11_42.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.8.11
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd.v2.8.11_42.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd.v2.8.11_42.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.8.11
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd.v2.8.11_42.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd.v2.8.11_42.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.8.11
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd.v2.8.11_42.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd.v2.8.11_42.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.8.11
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd.v2.8.11_42.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd.v2.8.11_42.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.8.11
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd.v2.8.11_42.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-dex-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd.v2.8.11_42.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: dex-server
   6 │     app.kubernetes.io/name: argocd-dex-server
   7 │     app.kubernetes.io/part-of: argocd
   8 └   name: argocd-dex-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment argocd-dex-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd.v2.8.11_42.yaml:18-100
────────────────────────────────────────
  18 ┌       affinity:
  19 │         podAntiAffinity:
  20 │           preferredDuringSchedulingIgnoredDuringExecution:
  21 │           - podAffinityTerm:
  22 │               labelSelector:
  23 │                 matchLabels:
  24 │                   app.kubernetes.io/part-of: argocd
  25 │               topologyKey: kubernetes.io/hostname
  26 └             weight: 5
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container copyutil in deployment argocd-dex-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd.v2.8.11_42.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.8.11
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dex in deployment argocd-dex-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd.v2.8.11_42.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────



argocd.v2.8.11_43.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 7, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd.v2.8.11_43.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd.v2.8.11_43.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd.v2.8.11_43.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd.v2.8.11_43.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd.v2.8.11_43.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd.v2.8.11_43.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-notifications-controller in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd.v2.8.11_43.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: notifications-controller
   6 │     app.kubernetes.io/name: argocd-notifications-controller
   7 │     app.kubernetes.io/part-of: argocd
   8 └   name: argocd-notifications-controller
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container argocd-notifications-controller in deployment argocd-notifications-controller (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd.v2.8.11_43.yaml:21-59
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────



argocd.v2.8.11_44.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 7, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd.v2.8.11_44.yaml:34-49
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         image: redis:7.0.11-alpine
  40 │         imagePullPolicy: Always
  41 │         name: redis
  42 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd.v2.8.11_44.yaml:34-49
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         image: redis:7.0.11-alpine
  40 │         imagePullPolicy: Always
  41 │         name: redis
  42 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd.v2.8.11_44.yaml:34-49
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         image: redis:7.0.11-alpine
  40 │         imagePullPolicy: Always
  41 │         name: redis
  42 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd.v2.8.11_44.yaml:34-49
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         image: redis:7.0.11-alpine
  40 │         imagePullPolicy: Always
  41 │         name: redis
  42 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd.v2.8.11_44.yaml:34-49
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         image: redis:7.0.11-alpine
  40 │         imagePullPolicy: Always
  41 │         name: redis
  42 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd.v2.8.11_44.yaml:34-49
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         image: redis:7.0.11-alpine
  40 │         imagePullPolicy: Always
  41 │         name: redis
  42 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-redis in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd.v2.8.11_44.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: redis
   6 │     app.kubernetes.io/name: argocd-redis
   7 │     app.kubernetes.io/part-of: argocd
   8 └   name: argocd-redis
────────────────────────────────────────



argocd10_10.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'argocd-server' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 argocd10_10.yaml:10-22
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - create
  17 │   - get
  18 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argocd-server' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd10_10.yaml:10-22
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - create
  17 │   - get
  18 └   - list
  ..   
────────────────────────────────────────



argocd10_11.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 argocd10_11.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'argocd-application-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 argocd10_11.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────



argocd10_12.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'argocd-applicationset-controller' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 argocd10_12.yaml:62-69
────────────────────────────────────────
  62 ┌ - apiGroups:
  63 │   - ''
  64 │   resources:
  65 │   - secrets
  66 │   verbs:
  67 │   - get
  68 │   - list
  69 └   - watch
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'argocd-applicationset-controller' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 argocd10_12.yaml:50-61
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - configmaps
  54 │   verbs:
  55 │   - create
  56 │   - update
  57 │   - delete
  58 └   - get
  ..   
────────────────────────────────────────



argocd10_13.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'argocd-server' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 argocd10_13.yaml:10-17
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 │   - delete
  16 │   - get
  17 └   - patch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'argocd-server' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 argocd10_13.yaml:40-45
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - batch
  42 │   resources:
  43 │   - jobs
  44 │   verbs:
  45 └   - create
────────────────────────────────────────



argocd10_6.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-application-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd10_6.yaml:10-18
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - list
  18 └   - watch
────────────────────────────────────────



argocd10_7.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-applicationset-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd10_7.yaml:50-58
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - secrets
  54 │   - configmaps
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
────────────────────────────────────────



argocd10_8.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-dex-server' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd10_8.yaml:10-18
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - list
  18 └   - watch
────────────────────────────────────────



argocd10_9.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-notifications-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd10_9.yaml:21-28
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - configmaps
  25 │   - secrets
  26 │   verbs:
  27 │   - list
  28 └   - watch
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argocd-notifications-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd10_9.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resourceNames:
  40 │   - argocd-notifications-secret
  41 │   resources:
  42 │   - secrets
  43 │   verbs:
  44 └   - get
────────────────────────────────────────



argocd13_10.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-application-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd13_10.yaml:10-18
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - list
  18 └   - watch
────────────────────────────────────────



argocd13_11.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-applicationset-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd13_11.yaml:50-58
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - secrets
  54 │   - configmaps
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
────────────────────────────────────────



argocd13_12.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-dex-server' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd13_12.yaml:10-18
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - list
  18 └   - watch
────────────────────────────────────────



argocd13_13.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-notifications-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd13_13.yaml:21-28
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - configmaps
  25 │   - secrets
  26 │   verbs:
  27 │   - list
  28 └   - watch
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argocd-notifications-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd13_13.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resourceNames:
  40 │   - argocd-notifications-secret
  41 │   resources:
  42 │   - secrets
  43 │   verbs:
  44 └   - get
────────────────────────────────────────



argocd13_14.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-redis' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd13_14.yaml:10-17
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resourceNames:
  13 │   - argocd-redis
  14 │   resources:
  15 │   - secrets
  16 │   verbs:
  17 └   - get
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argocd-redis' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd13_14.yaml:18-23
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - ''
  20 │   resources:
  21 │   - secrets
  22 │   verbs:
  23 └   - create
────────────────────────────────────────



argocd13_15.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'argocd-server' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 argocd13_15.yaml:10-22
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - create
  17 │   - get
  18 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argocd-server' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd13_15.yaml:10-22
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - create
  17 │   - get
  18 └   - list
  ..   
────────────────────────────────────────



argocd13_16.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 argocd13_16.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'argocd-application-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 argocd13_16.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────



argocd13_17.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'argocd-applicationset-controller' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 argocd13_17.yaml:62-69
────────────────────────────────────────
  62 ┌ - apiGroups:
  63 │   - ''
  64 │   resources:
  65 │   - secrets
  66 │   verbs:
  67 │   - get
  68 │   - list
  69 └   - watch
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'argocd-applicationset-controller' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 argocd13_17.yaml:50-61
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - configmaps
  54 │   verbs:
  55 │   - create
  56 │   - update
  57 │   - delete
  58 └   - get
  ..   
────────────────────────────────────────



argocd13_18.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'argocd-server' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 argocd13_18.yaml:10-17
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 │   - delete
  16 │   - get
  17 └   - patch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'argocd-server' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 argocd13_18.yaml:40-45
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - batch
  42 │   resources:
  43 │   - jobs
  44 │   verbs:
  45 └   - create
────────────────────────────────────────



argocd13_46.yaml (kubernetes)
=============================
Tests: 121 (SUCCESSES: 105, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 13, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd13_46.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.12.1
  68 │         imagePullPolicy: IfNotPresent
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd13_46.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd13_46.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.12.1
  68 │         imagePullPolicy: IfNotPresent
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd13_46.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd13_46.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.12.1
  68 │         imagePullPolicy: IfNotPresent
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd13_46.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd13_46.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.12.1
  68 │         imagePullPolicy: IfNotPresent
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd13_46.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd13_46.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.12.1
  68 │         imagePullPolicy: IfNotPresent
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd13_46.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd13_46.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.12.1
  68 │         imagePullPolicy: IfNotPresent
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd13_46.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-dex-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd13_46.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: dex-server
   6 │     app.kubernetes.io/name: argocd-dex-server
   7 │     app.kubernetes.io/part-of: argocd
   8 └   name: argocd-dex-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment argocd-dex-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd13_46.yaml:18-100
────────────────────────────────────────
  18 ┌       affinity:
  19 │         podAntiAffinity:
  20 │           preferredDuringSchedulingIgnoredDuringExecution:
  21 │           - podAffinityTerm:
  22 │               labelSelector:
  23 │                 matchLabels:
  24 │                   app.kubernetes.io/part-of: argocd
  25 │               topologyKey: kubernetes.io/hostname
  26 └             weight: 5
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container copyutil in deployment argocd-dex-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd13_46.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.12.1
  68 │         imagePullPolicy: IfNotPresent
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dex in deployment argocd-dex-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd13_46.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────



argocd13_47.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 7, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd13_47.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd13_47.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd13_47.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd13_47.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd13_47.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd13_47.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-notifications-controller in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd13_47.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: notifications-controller
   6 │     app.kubernetes.io/name: argocd-notifications-controller
   7 │     app.kubernetes.io/part-of: argocd
   8 └   name: argocd-notifications-controller
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container argocd-notifications-controller in deployment argocd-notifications-controller (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd13_47.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────



argocd13_48.yaml (kubernetes)
=============================
Tests: 120 (SUCCESSES: 106, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 13, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd13_48.yaml:34-56
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         - --requirepass $(REDIS_PASSWORD)
  40 │         env:
  41 │         - name: REDIS_PASSWORD
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd13_48.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.12.1
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd13_48.yaml:34-56
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         - --requirepass $(REDIS_PASSWORD)
  40 │         env:
  41 │         - name: REDIS_PASSWORD
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd13_48.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.12.1
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd13_48.yaml:34-56
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         - --requirepass $(REDIS_PASSWORD)
  40 │         env:
  41 │         - name: REDIS_PASSWORD
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd13_48.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.12.1
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd13_48.yaml:34-56
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         - --requirepass $(REDIS_PASSWORD)
  40 │         env:
  41 │         - name: REDIS_PASSWORD
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd13_48.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.12.1
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd13_48.yaml:34-56
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         - --requirepass $(REDIS_PASSWORD)
  40 │         env:
  41 │         - name: REDIS_PASSWORD
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd13_48.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.12.1
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd13_48.yaml:34-56
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         - --requirepass $(REDIS_PASSWORD)
  40 │         env:
  41 │         - name: REDIS_PASSWORD
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd13_48.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.12.1
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-redis in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd13_48.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: redis
   6 │     app.kubernetes.io/name: argocd-redis
   7 │     app.kubernetes.io/part-of: argocd
   8 └   name: argocd-redis
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container secret-init in deployment argocd-redis (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd13_48.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.12.1
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────



argocd1_10.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'argocd-server' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 argocd1_10.yaml:10-22
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - create
  17 │   - get
  18 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argocd-server' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd1_10.yaml:10-22
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - create
  17 │   - get
  18 └   - list
  ..   
────────────────────────────────────────



argocd1_11.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 argocd1_11.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'argocd-application-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 argocd1_11.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────



argocd1_12.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'argocd-applicationset-controller' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 argocd1_12.yaml:62-69
────────────────────────────────────────
  62 ┌ - apiGroups:
  63 │   - ''
  64 │   resources:
  65 │   - secrets
  66 │   verbs:
  67 │   - get
  68 │   - list
  69 └   - watch
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'argocd-applicationset-controller' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 argocd1_12.yaml:50-61
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - configmaps
  54 │   verbs:
  55 │   - create
  56 │   - update
  57 │   - delete
  58 └   - get
  ..   
────────────────────────────────────────



argocd1_13.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'argocd-server' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 argocd1_13.yaml:10-17
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 │   - delete
  16 │   - get
  17 └   - patch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'argocd-server' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 argocd1_13.yaml:40-45
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - batch
  42 │   resources:
  43 │   - jobs
  44 │   verbs:
  45 └   - create
────────────────────────────────────────



argocd1_6.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-application-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd1_6.yaml:10-18
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - list
  18 └   - watch
────────────────────────────────────────



argocd1_7.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-applicationset-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd1_7.yaml:50-58
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - secrets
  54 │   - configmaps
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
────────────────────────────────────────



argocd1_8.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-dex-server' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd1_8.yaml:10-18
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - list
  18 └   - watch
────────────────────────────────────────



argocd1_9.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-notifications-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd1_9.yaml:21-28
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - configmaps
  25 │   - secrets
  26 │   verbs:
  27 │   - list
  28 └   - watch
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argocd-notifications-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd1_9.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resourceNames:
  40 │   - argocd-notifications-secret
  41 │   resources:
  42 │   - secrets
  43 │   verbs:
  44 └   - get
────────────────────────────────────────



argocd44_10.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-application-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd44_10.yaml:10-18
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - list
  18 └   - watch
────────────────────────────────────────



argocd44_11.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-applicationset-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd44_11.yaml:48-56
────────────────────────────────────────
  48 ┌ - apiGroups:
  49 │   - ''
  50 │   resources:
  51 │   - secrets
  52 │   - configmaps
  53 │   verbs:
  54 │   - get
  55 │   - list
  56 └   - watch
────────────────────────────────────────



argocd44_12.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-dex-server' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd44_12.yaml:10-18
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - list
  18 └   - watch
────────────────────────────────────────



argocd44_13.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-notifications-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd44_13.yaml:21-28
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - configmaps
  25 │   - secrets
  26 │   verbs:
  27 │   - list
  28 └   - watch
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argocd-notifications-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd44_13.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resourceNames:
  40 │   - argocd-notifications-secret
  41 │   resources:
  42 │   - secrets
  43 │   verbs:
  44 └   - get
────────────────────────────────────────



argocd44_14.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'argocd-server' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 argocd44_14.yaml:10-22
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - create
  17 │   - get
  18 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argocd-server' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd44_14.yaml:10-22
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - create
  17 │   - get
  18 └   - list
  ..   
────────────────────────────────────────



argocd44_15.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 argocd44_15.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'argocd-application-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 argocd44_15.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────



argocd44_16.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'argocd-applicationset-controller' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 argocd44_16.yaml:60-67
────────────────────────────────────────
  60 ┌ - apiGroups:
  61 │   - ''
  62 │   resources:
  63 │   - secrets
  64 │   verbs:
  65 │   - get
  66 │   - list
  67 └   - watch
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'argocd-applicationset-controller' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 argocd44_16.yaml:48-59
────────────────────────────────────────
  48 ┌ - apiGroups:
  49 │   - ''
  50 │   resources:
  51 │   - configmaps
  52 │   verbs:
  53 │   - create
  54 │   - update
  55 │   - delete
  56 └   - get
  ..   
────────────────────────────────────────



argocd44_17.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'argocd-server' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 argocd44_17.yaml:10-17
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 │   - delete
  16 │   - get
  17 └   - patch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'argocd-server' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 argocd44_17.yaml:40-45
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - batch
  42 │   resources:
  43 │   - jobs
  44 │   verbs:
  45 └   - create
────────────────────────────────────────



argocd44_44.yaml (kubernetes)
=============================
Tests: 121 (SUCCESSES: 105, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 13, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd44_44.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.10.6
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd44_44.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd44_44.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.10.6
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd44_44.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd44_44.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.10.6
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd44_44.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd44_44.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.10.6
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd44_44.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd44_44.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.10.6
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd44_44.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd44_44.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.10.6
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd44_44.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-dex-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd44_44.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: dex-server
   6 │     app.kubernetes.io/name: argocd-dex-server
   7 │     app.kubernetes.io/part-of: argocd
   8 └   name: argocd-dex-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment argocd-dex-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd44_44.yaml:18-100
────────────────────────────────────────
  18 ┌       affinity:
  19 │         podAntiAffinity:
  20 │           preferredDuringSchedulingIgnoredDuringExecution:
  21 │           - podAffinityTerm:
  22 │               labelSelector:
  23 │                 matchLabels:
  24 │                   app.kubernetes.io/part-of: argocd
  25 │               topologyKey: kubernetes.io/hostname
  26 └             weight: 5
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container copyutil in deployment argocd-dex-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd44_44.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.10.6
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dex in deployment argocd-dex-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd44_44.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────



argocd44_45.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 7, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd44_45.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd44_45.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd44_45.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd44_45.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd44_45.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd44_45.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-notifications-controller in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd44_45.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: notifications-controller
   6 │     app.kubernetes.io/name: argocd-notifications-controller
   7 │     app.kubernetes.io/part-of: argocd
   8 └   name: argocd-notifications-controller
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container argocd-notifications-controller in deployment argocd-notifications-controller (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd44_45.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────



argocd44_46.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 7, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd44_46.yaml:34-49
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         image: redis:7.0.14-alpine
  40 │         imagePullPolicy: Always
  41 │         name: redis
  42 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd44_46.yaml:34-49
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         image: redis:7.0.14-alpine
  40 │         imagePullPolicy: Always
  41 │         name: redis
  42 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd44_46.yaml:34-49
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         image: redis:7.0.14-alpine
  40 │         imagePullPolicy: Always
  41 │         name: redis
  42 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd44_46.yaml:34-49
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         image: redis:7.0.14-alpine
  40 │         imagePullPolicy: Always
  41 │         name: redis
  42 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd44_46.yaml:34-49
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         image: redis:7.0.14-alpine
  40 │         imagePullPolicy: Always
  41 │         name: redis
  42 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd44_46.yaml:34-49
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         image: redis:7.0.14-alpine
  40 │         imagePullPolicy: Always
  41 │         name: redis
  42 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-redis in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd44_46.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: redis
   6 │     app.kubernetes.io/name: argocd-redis
   7 │     app.kubernetes.io/part-of: argocd
   8 └   name: argocd-redis
────────────────────────────────────────



argocd45_10.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-application-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd45_10.yaml:10-18
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - list
  18 └   - watch
────────────────────────────────────────



argocd45_11.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-applicationset-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd45_11.yaml:48-56
────────────────────────────────────────
  48 ┌ - apiGroups:
  49 │   - ''
  50 │   resources:
  51 │   - secrets
  52 │   - configmaps
  53 │   verbs:
  54 │   - get
  55 │   - list
  56 └   - watch
────────────────────────────────────────



argocd45_12.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-dex-server' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd45_12.yaml:10-18
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - list
  18 └   - watch
────────────────────────────────────────



argocd45_13.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-notifications-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd45_13.yaml:21-28
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - configmaps
  25 │   - secrets
  26 │   verbs:
  27 │   - list
  28 └   - watch
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argocd-notifications-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd45_13.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resourceNames:
  40 │   - argocd-notifications-secret
  41 │   resources:
  42 │   - secrets
  43 │   verbs:
  44 └   - get
────────────────────────────────────────



argocd45_14.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'argocd-server' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 argocd45_14.yaml:10-22
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - create
  17 │   - get
  18 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argocd-server' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd45_14.yaml:10-22
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - create
  17 │   - get
  18 └   - list
  ..   
────────────────────────────────────────



argocd45_15.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 argocd45_15.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'argocd-application-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 argocd45_15.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────



argocd45_16.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'argocd-applicationset-controller' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 argocd45_16.yaml:60-67
────────────────────────────────────────
  60 ┌ - apiGroups:
  61 │   - ''
  62 │   resources:
  63 │   - secrets
  64 │   verbs:
  65 │   - get
  66 │   - list
  67 └   - watch
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'argocd-applicationset-controller' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 argocd45_16.yaml:48-59
────────────────────────────────────────
  48 ┌ - apiGroups:
  49 │   - ''
  50 │   resources:
  51 │   - configmaps
  52 │   verbs:
  53 │   - create
  54 │   - update
  55 │   - delete
  56 └   - get
  ..   
────────────────────────────────────────



argocd45_17.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'argocd-server' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 argocd45_17.yaml:10-17
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 │   - delete
  16 │   - get
  17 └   - patch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'argocd-server' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 argocd45_17.yaml:40-45
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - batch
  42 │   resources:
  43 │   - jobs
  44 │   verbs:
  45 └   - create
────────────────────────────────────────



argocd45_44.yaml (kubernetes)
=============================
Tests: 121 (SUCCESSES: 105, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 13, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd45_44.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.10.6
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd45_44.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd45_44.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.10.6
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd45_44.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd45_44.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.10.6
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd45_44.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd45_44.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.10.6
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd45_44.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd45_44.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.10.6
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd45_44.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd45_44.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.10.6
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd45_44.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-dex-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd45_44.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: dex-server
   6 │     app.kubernetes.io/name: argocd-dex-server
   7 │     app.kubernetes.io/part-of: argocd
   8 └   name: argocd-dex-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment argocd-dex-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd45_44.yaml:18-100
────────────────────────────────────────
  18 ┌       affinity:
  19 │         podAntiAffinity:
  20 │           preferredDuringSchedulingIgnoredDuringExecution:
  21 │           - podAffinityTerm:
  22 │               labelSelector:
  23 │                 matchLabels:
  24 │                   app.kubernetes.io/part-of: argocd
  25 │               topologyKey: kubernetes.io/hostname
  26 └             weight: 5
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container copyutil in deployment argocd-dex-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd45_44.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.10.6
  68 │         imagePullPolicy: Always
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dex in deployment argocd-dex-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd45_44.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────



argocd45_45.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 7, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd45_45.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd45_45.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd45_45.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd45_45.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd45_45.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd45_45.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-notifications-controller in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd45_45.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: notifications-controller
   6 │     app.kubernetes.io/name: argocd-notifications-controller
   7 │     app.kubernetes.io/part-of: argocd
   8 └   name: argocd-notifications-controller
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container argocd-notifications-controller in deployment argocd-notifications-controller (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd45_45.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────



argocd45_46.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 7, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd45_46.yaml:34-49
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         image: redis:7.0.14-alpine
  40 │         imagePullPolicy: Always
  41 │         name: redis
  42 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd45_46.yaml:34-49
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         image: redis:7.0.14-alpine
  40 │         imagePullPolicy: Always
  41 │         name: redis
  42 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd45_46.yaml:34-49
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         image: redis:7.0.14-alpine
  40 │         imagePullPolicy: Always
  41 │         name: redis
  42 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd45_46.yaml:34-49
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         image: redis:7.0.14-alpine
  40 │         imagePullPolicy: Always
  41 │         name: redis
  42 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd45_46.yaml:34-49
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         image: redis:7.0.14-alpine
  40 │         imagePullPolicy: Always
  41 │         name: redis
  42 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd45_46.yaml:34-49
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         image: redis:7.0.14-alpine
  40 │         imagePullPolicy: Always
  41 │         name: redis
  42 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-redis in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd45_46.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: redis
   6 │     app.kubernetes.io/name: argocd-redis
   7 │     app.kubernetes.io/part-of: argocd
   8 └   name: argocd-redis
────────────────────────────────────────



argocd4_10.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-application-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd4_10.yaml:10-18
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - list
  18 └   - watch
────────────────────────────────────────



argocd4_11.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-applicationset-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd4_11.yaml:50-58
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - secrets
  54 │   - configmaps
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
────────────────────────────────────────



argocd4_12.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-dex-server' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd4_12.yaml:10-18
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - list
  18 └   - watch
────────────────────────────────────────



argocd4_13.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-notifications-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd4_13.yaml:21-28
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - configmaps
  25 │   - secrets
  26 │   verbs:
  27 │   - list
  28 └   - watch
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argocd-notifications-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd4_13.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resourceNames:
  40 │   - argocd-notifications-secret
  41 │   resources:
  42 │   - secrets
  43 │   verbs:
  44 └   - get
────────────────────────────────────────



argocd4_14.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-redis' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd4_14.yaml:10-17
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resourceNames:
  13 │   - argocd-redis
  14 │   resources:
  15 │   - secrets
  16 │   verbs:
  17 └   - get
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argocd-redis' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd4_14.yaml:18-23
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - ''
  20 │   resources:
  21 │   - secrets
  22 │   verbs:
  23 └   - create
────────────────────────────────────────



argocd4_15.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'argocd-server' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 argocd4_15.yaml:10-22
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - create
  17 │   - get
  18 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argocd-server' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd4_15.yaml:10-22
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - create
  17 │   - get
  18 └   - list
  ..   
────────────────────────────────────────



argocd4_16.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 argocd4_16.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'argocd-application-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 argocd4_16.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────



argocd4_17.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'argocd-applicationset-controller' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 argocd4_17.yaml:62-69
────────────────────────────────────────
  62 ┌ - apiGroups:
  63 │   - ''
  64 │   resources:
  65 │   - secrets
  66 │   verbs:
  67 │   - get
  68 │   - list
  69 └   - watch
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'argocd-applicationset-controller' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 argocd4_17.yaml:50-61
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - configmaps
  54 │   verbs:
  55 │   - create
  56 │   - update
  57 │   - delete
  58 └   - get
  ..   
────────────────────────────────────────



argocd4_18.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'argocd-server' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 argocd4_18.yaml:10-17
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 │   - delete
  16 │   - get
  17 └   - patch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'argocd-server' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 argocd4_18.yaml:40-45
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - batch
  42 │   resources:
  43 │   - jobs
  44 │   verbs:
  45 └   - create
────────────────────────────────────────



argocd4_46.yaml (kubernetes)
============================
Tests: 121 (SUCCESSES: 105, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 13, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd4_46.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.12.1
  68 │         imagePullPolicy: IfNotPresent
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd4_46.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd4_46.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.12.1
  68 │         imagePullPolicy: IfNotPresent
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd4_46.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd4_46.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.12.1
  68 │         imagePullPolicy: IfNotPresent
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd4_46.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd4_46.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.12.1
  68 │         imagePullPolicy: IfNotPresent
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd4_46.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd4_46.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.12.1
  68 │         imagePullPolicy: IfNotPresent
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd4_46.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'copyutil' of Deployment 'argocd-dex-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd4_46.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.12.1
  68 │         imagePullPolicy: IfNotPresent
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dex' of Deployment 'argocd-dex-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd4_46.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-dex-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd4_46.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: dex-server
   6 │     app.kubernetes.io/name: argocd-dex-server
   7 │     app.kubernetes.io/part-of: argocd
   8 └   name: argocd-dex-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment argocd-dex-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 argocd4_46.yaml:18-100
────────────────────────────────────────
  18 ┌       affinity:
  19 │         podAntiAffinity:
  20 │           preferredDuringSchedulingIgnoredDuringExecution:
  21 │           - podAffinityTerm:
  22 │               labelSelector:
  23 │                 matchLabels:
  24 │                   app.kubernetes.io/part-of: argocd
  25 │               topologyKey: kubernetes.io/hostname
  26 └             weight: 5
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container copyutil in deployment argocd-dex-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd4_46.yaml:62-83
────────────────────────────────────────
  62 ┌       - command:
  63 │         - /bin/cp
  64 │         - -n
  65 │         - /usr/local/bin/argocd
  66 │         - /shared/argocd-dex
  67 │         image: quay.io/argoproj/argocd:v2.12.1
  68 │         imagePullPolicy: IfNotPresent
  69 │         name: copyutil
  70 └         securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dex in deployment argocd-dex-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd4_46.yaml:28-60
────────────────────────────────────────
  28 ┌       - command:
  29 │         - /shared/argocd-dex
  30 │         - rundex
  31 │         env:
  32 │         - name: ARGOCD_DEX_SERVER_DISABLE_TLS
  33 │           valueFrom:
  34 │             configMapKeyRef:
  35 │               key: dexserver.disable.tls
  36 └               name: argocd-cmd-params-cm
  ..   
────────────────────────────────────────



argocd4_47.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 106, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 7, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd4_47.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd4_47.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd4_47.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd4_47.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd4_47.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'argocd-notifications-controller' of Deployment 'argocd-notifications-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd4_47.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-notifications-controller in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd4_47.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: notifications-controller
   6 │     app.kubernetes.io/name: argocd-notifications-controller
   7 │     app.kubernetes.io/part-of: argocd
   8 └   name: argocd-notifications-controller
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container argocd-notifications-controller in deployment argocd-notifications-controller (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd4_47.yaml:21-65
────────────────────────────────────────
  21 ┌       - args:
  22 │         - /usr/local/bin/argocd-notifications
  23 │         env:
  24 │         - name: ARGOCD_NOTIFICATIONS_CONTROLLER_LOGFORMAT
  25 │           valueFrom:
  26 │             configMapKeyRef:
  27 │               key: notificationscontroller.log.format
  28 │               name: argocd-cmd-params-cm
  29 └               optional: true
  ..   
────────────────────────────────────────



argocd4_48.yaml (kubernetes)
============================
Tests: 120 (SUCCESSES: 106, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 13, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd4_48.yaml:34-56
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         - --requirepass $(REDIS_PASSWORD)
  40 │         env:
  41 │         - name: REDIS_PASSWORD
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 argocd4_48.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.12.1
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd4_48.yaml:34-56
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         - --requirepass $(REDIS_PASSWORD)
  40 │         env:
  41 │         - name: REDIS_PASSWORD
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 argocd4_48.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.12.1
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd4_48.yaml:34-56
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         - --requirepass $(REDIS_PASSWORD)
  40 │         env:
  41 │         - name: REDIS_PASSWORD
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 argocd4_48.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.12.1
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd4_48.yaml:34-56
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         - --requirepass $(REDIS_PASSWORD)
  40 │         env:
  41 │         - name: REDIS_PASSWORD
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 argocd4_48.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.12.1
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd4_48.yaml:34-56
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         - --requirepass $(REDIS_PASSWORD)
  40 │         env:
  41 │         - name: REDIS_PASSWORD
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 argocd4_48.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.12.1
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'redis' of Deployment 'argocd-redis' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd4_48.yaml:34-56
────────────────────────────────────────
  34 ┌       - args:
  35 │         - --save
  36 │         - ''
  37 │         - --appendonly
  38 │         - 'no'
  39 │         - --requirepass $(REDIS_PASSWORD)
  40 │         env:
  41 │         - name: REDIS_PASSWORD
  42 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'secret-init' of Deployment 'argocd-redis' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 argocd4_48.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.12.1
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment argocd-redis in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 argocd4_48.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: redis
   6 │     app.kubernetes.io/name: argocd-redis
   7 │     app.kubernetes.io/part-of: argocd
   8 └   name: argocd-redis
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container secret-init in deployment argocd-redis (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 argocd4_48.yaml:58-73
────────────────────────────────────────
  58 ┌       - command:
  59 │         - argocd
  60 │         - admin
  61 │         - redis-initial-password
  62 │         image: quay.io/argoproj/argocd:v2.12.1
  63 │         imagePullPolicy: IfNotPresent
  64 │         name: secret-init
  65 │         securityContext:
  66 └           allowPrivilegeEscalation: false
  ..   
────────────────────────────────────────



argocd50_10.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-application-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd50_10.yaml:10-18
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - list
  18 └   - watch
────────────────────────────────────────



argocd50_11.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-applicationset-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd50_11.yaml:48-56
────────────────────────────────────────
  48 ┌ - apiGroups:
  49 │   - ''
  50 │   resources:
  51 │   - secrets
  52 │   - configmaps
  53 │   verbs:
  54 │   - get
  55 │   - list
  56 └   - watch
────────────────────────────────────────



argocd50_12.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-dex-server' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd50_12.yaml:10-18
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - get
  17 │   - list
  18 └   - watch
────────────────────────────────────────



argocd50_13.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'argocd-notifications-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd50_13.yaml:17-24
────────────────────────────────────────
  17 ┌ - apiGroups:
  18 │   - ''
  19 │   resources:
  20 │   - configmaps
  21 │   - secrets
  22 │   verbs:
  23 │   - list
  24 └   - watch
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argocd-notifications-controller' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd50_13.yaml:33-40
────────────────────────────────────────
  33 ┌ - apiGroups:
  34 │   - ''
  35 │   resourceNames:
  36 │   - argocd-notifications-secret
  37 │   resources:
  38 │   - secrets
  39 │   verbs:
  40 └   - get
────────────────────────────────────────



argocd50_14.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'argocd-server' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 argocd50_14.yaml:10-22
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - create
  17 │   - get
  18 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argocd-server' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 argocd50_14.yaml:10-22
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - ''
  12 │   resources:
  13 │   - secrets
  14 │   - configmaps
  15 │   verbs:
  16 │   - create
  17 │   - get
  18 └   - list
  ..   
────────────────────────────────────────



argocd50_15.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 argocd50_15.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────


AVD-KSV-0046 (CRITICAL): ClusterRole 'argocd-application-controller' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 argocd50_15.yaml:10-15
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 └   - '*'
────────────────────────────────────────



argocd50_16.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'argocd-server' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 argocd50_16.yaml:10-17
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - '*'
  12 │   resources:
  13 │   - '*'
  14 │   verbs:
  15 │   - delete
  16 │   - get
  17 └   - patch
────────────────────────────────────────


