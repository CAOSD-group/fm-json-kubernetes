
Report Summary

┌──────────────────────────────────────────────────────────────┬────────────┬───────────────────┐
│                            Target                            │    Type    │ Misconfigurations │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ VM.original.yaml                                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ VM21.yaml                                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ VM7.yaml                                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ VaultAuth.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Voll-med2.yaml                                               │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Voll-med2_1.yaml                                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Voll-med3.yaml                                               │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v123_1.yaml                                                  │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v124.yaml                                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v124_1.yaml                                                  │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v13.yaml                                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v13_1.yaml                                                   │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v14.yaml                                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v14_1.yaml                                                   │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v15.yaml                                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v15_1.yaml                                                   │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v19.yaml                                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v19_1.yaml                                                   │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v1HPA.yaml                                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v1HPA1.yaml                                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v1HPA10.yaml                                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v1HPA11.yaml                                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v1HPA13.yaml                                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v1HPA14.yaml                                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v1HPA15.yaml                                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v1HPA16.yaml                                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v1HPA17.yaml                                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v1HPA18.yaml                                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v1HPA2.yaml                                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v1HPA3.yaml                                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v1HPA4.yaml                                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v1HPA5.yaml                                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v1HPA6.yaml                                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v1HPA7.yaml                                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v1HPA8.yaml                                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v1HPA9.yaml                                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v1_namespace_kubesync-system.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v1_namespace_kubesync-system1.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v1_service_kubesync-controller-manager-metrics-service.yaml  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v1_service_kubesync-controller-manager-metrics-service1.yaml │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v1_service_neoncode.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v1_service_sshd.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v1_serviceaccount_kubesync-controller-manager.yaml           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v1_serviceaccount_kubesync-controller-manager1.yaml          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2.0.1_10.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2.0.1_13.yaml                                               │ kubernetes │        13         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2.0.1_2.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2.0.1_3.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2.0.1_4.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2.0.1_5.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2.0.1_6.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2.0.1_7.yaml                                                │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2.0.1_8.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2.0.1_9.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2.3.1.yaml                                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2.3.1_1.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2.3.1_10.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2.3.1_11.yaml                                               │ kubernetes │        14         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2.3.1_13.yaml                                               │ kubernetes │        13         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2.3.1_2.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2.3.1_3.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2.3.1_4.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2.3.1_5.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2.3.1_6.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2.3.1_7.yaml                                                │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2.3.1_8.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2.3.1_9.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2.yaml                                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v21.yaml                                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v210.yaml                                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v210_1.yaml                                                  │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v211.yaml                                                    │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v212.yaml                                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v212_1.yaml                                                  │ kubernetes │        20         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v21_1.yaml                                                   │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v22.yaml                                                     │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v23.yaml                                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v23_1.yaml                                                   │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v24.yaml                                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v24_1.yaml                                                   │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v25.yaml                                                     │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v26.yaml                                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v26_1.yaml                                                   │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v27.yaml                                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v27_1.yaml                                                   │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v28.yaml                                                     │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v29.yaml                                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v29_1.yaml                                                   │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_1.yaml                                                    │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_1_full1_11.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_1_full1_12.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_1_full1_14.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_1_full1_2.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_1_full1_3.yaml                                          │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_1_full1_4.yaml                                          │ kubernetes │         3         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_1_full1_5.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_1_full1_6.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_1_full1_7.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_1_full1_8.yaml                                          │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_1_full_11.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_1_full_12.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_1_full_14.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_1_full_2.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_1_full_3.yaml                                           │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_1_full_4.yaml                                           │ kubernetes │         3         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_1_full_5.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_1_full_6.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_1_full_7.yaml                                           │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_1_full_8.yaml                                           │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full-new_11.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full-new_12.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full-new_2.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full-new_3.yaml                                       │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full-new_4.yaml                                       │ kubernetes │         3         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full-new_5.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full-new_6.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full-new_7.yaml                                       │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full-new_8.yaml                                       │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full1_10.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full1_11.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full1_2.yaml                                          │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full1_3.yaml                                          │ kubernetes │         3         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full1_4.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full1_5.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full1_6.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full1_7.yaml                                          │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full2_10.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full2_11.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full2_2.yaml                                          │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full2_3.yaml                                          │ kubernetes │         3         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full2_4.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full2_5.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full2_6.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full2_7.yaml                                          │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full3_10.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full3_11.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full3_2.yaml                                          │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full3_3.yaml                                          │ kubernetes │         3         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full3_4.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full3_5.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full3_6.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full3_7.yaml                                          │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full4_10.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full4_11.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full4_2.yaml                                          │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full4_3.yaml                                          │ kubernetes │         3         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full4_4.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full4_5.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full4_6.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full4_7.yaml                                          │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full_10.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full_11.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full_2.yaml                                           │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full_3.yaml                                           │ kubernetes │         3         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full_4.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full_5.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full_6.yaml                                           │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full_7.yaml                                           │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full_modified1_10.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full_modified1_11.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full_modified1_2.yaml                                 │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full_modified1_3.yaml                                 │ kubernetes │         3         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full_modified1_4.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full_modified1_5.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full_modified1_6.yaml                                 │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full_modified1_7.yaml                                 │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full_modified_10.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full_modified_11.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full_modified_2.yaml                                  │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full_modified_3.yaml                                  │ kubernetes │         3         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full_modified_4.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full_modified_5.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full_modified_6.yaml                                  │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_4_7_full_modified_7.yaml                                  │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_5_4_full1_10.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_5_4_full1_11.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_5_4_full1_2.yaml                                          │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_5_4_full1_3.yaml                                          │ kubernetes │         3         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_5_4_full1_4.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_5_4_full1_5.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_5_4_full1_6.yaml                                          │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_5_4_full1_7.yaml                                          │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_5_4_full_10.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_5_4_full_11.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_5_4_full_2.yaml                                           │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_5_4_full_3.yaml                                           │ kubernetes │         3         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_5_4_full_4.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_5_4_full_5.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_5_4_full_6.yaml                                           │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_5_4_full_7.yaml                                           │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ v2_5_4_ingclass_1.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ valid-pod.yaml                                               │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ valid-pod1.yaml                                              │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ valid-pod10.yaml                                             │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ valid-pod11.yaml                                             │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ valid-pod13.yaml                                             │ kubernetes │        16         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ valid-pod14.yaml                                             │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ valid-pod15.yaml                                             │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ valid-pod16.yaml                                             │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ valid-pod17.yaml                                             │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ valid-pod18.yaml                                             │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ valid-pod2.yaml                                              │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ valid-pod3.yaml                                              │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ valid-pod4.yaml                                              │ kubernetes │        16         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ valid-pod5.yaml                                              │ kubernetes │        16         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ valid-pod6.yaml                                              │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ valid-pod7.yaml                                              │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ valid-pod8.yaml                                              │ kubernetes │        16         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ valid-pod9.yaml                                              │ kubernetes │        16         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ valid1.yaml                                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ valid4.yaml                                                  │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validManagedIdentity.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validManagedIdentity_1.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validPod.yaml                                                │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validPod1.yaml                                               │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validPod10.yaml                                              │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validPod11.yaml                                              │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validPod12.yaml                                              │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validPod13.yaml                                              │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validPod14.yaml                                              │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validPod15.yaml                                              │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validPod16.yaml                                              │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validPod17.yaml                                              │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validPod2.yaml                                               │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validPod20.yaml                                              │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validPod21.yaml                                              │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validPod22.yaml                                              │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validPod23.yaml                                              │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validPod24.yaml                                              │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validPod25.yaml                                              │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validPod26.yaml                                              │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validPod3.yaml                                               │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validPod4.yaml                                               │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validPod5.yaml                                               │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validPod6.yaml                                               │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validPod7.yaml                                               │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validPod8.yaml                                               │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validPod9.yaml                                               │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validate_annotation_format.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validate_label_format.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validate_token_config1.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validating-admission-policy.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validating-admission-policy_1.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validating-admission-webhooks_1.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validating-webhook-config.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validating-webhook-template.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validating-webhook10.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validating-webhook13.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validating-webhook15.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validating-webhook5.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validating-webhook7.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validating-webhook9.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validatingWebhookConfiguration12.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validatingWebhookConfiguration2.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validatingWebhookConfiguration6.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validatingwebhook.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validatingwebhook7.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validatingwebhook7_1.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validatingwebhook_1.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validatingwebhook_2.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validatingwebhook_3.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validatingwebhook_4.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validatingwebhook_5.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validatingwebhook_6.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validatingwebhook_7.yaml                                     │ kubernetes │        13         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validatingwebhookconfiguration-0.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validatingwebhookconfiguration-01.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validatingwebhookconfiguration-03.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validatingwebhookconfiguration59.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validation-webhook.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validation-webhook1.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validation.webhook.pipeline.tekton.dev-valwebhookcfg.yaml    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validation_webhook.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ validation_webhooks.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ valkey-client.yaml                                           │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ valkey-client_1.yaml                                         │ kubernetes │        16         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ valkey-cluster.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ valkey-cluster_1.yaml                                        │ kubernetes │        15         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ valkey-cluster_2.yaml                                        │ kubernetes │        15         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ valkey-cluster_3.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ valkey-cluster_4.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ valkey-cluster_5.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ valkey-cluster_6.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values-config-map.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values-config-map_1.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values-config-map_2.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values-dev65.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values-pro.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values-test4.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_10.yaml                                           │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_11.yaml                                           │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_12.yaml                                           │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_13.yaml                                           │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_14.yaml                                           │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_15.yaml                                           │ kubernetes │         5         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_16.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_17.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_18.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_19.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_20.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_21.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_22.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_23.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_24.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_25.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_26.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_27.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_28.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_29.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_30.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_31.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_32.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_33.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_34.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_35.yaml                                           │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_36.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_37.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_38.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_39.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_40.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_41.yaml                                           │ kubernetes │         7         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_42.yaml                                           │ kubernetes │         7         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_43.yaml                                           │ kubernetes │         7         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_44.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_45.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_7.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_8.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values1684_9.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values3274.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values3274_1.yaml                                            │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values3274_10.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values3274_2.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values3274_3.yaml                                            │ kubernetes │        16         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values3274_4.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values3274_5.yaml                                            │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values3274_6.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values3274_7.yaml                                            │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values3274_8.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values3274_9.yaml                                            │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values3276.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values3276_1.yaml                                            │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values3276_2.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values801.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values802.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ values803.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ var-claim.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ var1.yaml                                                    │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ variable-explorer.yaml                                       │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ variable-explorer_1.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ variables16.yaml                                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vaulRole.yaml                                                │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-auth-k8s-clusterrolebinding.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-auth-k8s-clusterrolebinding1.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-auth-k8s-clusterrolebinding2.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-auth-k8s-clusterrolebinding3.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-auth-k8s-sasecret.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-auth-k8s-sasecret1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-auth-k8s-sasecret2.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-auth-k8s-sasecret3.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-auth-k8s-serviceaccount.yaml                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-auth-k8s-serviceaccount1.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-auth-k8s-serviceaccount2.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-auth-k8s-serviceaccount3.yaml                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-auth-service-account.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-autounseal-config.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-autounseal.yaml                                        │ kubernetes │        15         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-iam-store-sa.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-ingress.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-ingress1.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-kms-provider.yaml                                      │ kubernetes │        14         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-ns.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-operator-sa.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-pipeline-feature.yaml                                  │ kubernetes │        16         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-plugin-config-map.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-plugin-config-map1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-pushsecret.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-pvc.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-raft-storage.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-raft-storage_1.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-raft-storage_10.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-raft-storage_11.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-raft-storage_12.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-raft-storage_13.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-raft-storage_14.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-raft-storage_15.yaml                                   │ kubernetes │         6         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-raft-storage_16.yaml                                   │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-raft-storage_17.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-raft-storage_18.yaml                                   │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-raft-storage_2.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-raft-storage_3.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-raft-storage_4.yaml                                    │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-raft-storage_5.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-raft-storage_6.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-raft-storage_7.yaml                                    │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-raft-storage_8.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-raft-storage_9.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-sa.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-secret.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-secretstore1_1.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-secretstore_1.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-service.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-service1.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-unseal-role.yaml                                       │ kubernetes │         3         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-unseal-rolebinding.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault-unseal-serviceaccount.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault10.yaml                                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault10_1.yaml                                               │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault10_10.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault10_2.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault10_3.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault10_4.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault10_5.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault10_6.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault10_7.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault10_8.yaml                                               │ kubernetes │        35         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault10_9.yaml                                               │ kubernetes │        14         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault110.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault11_1.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault11_10.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault11_11.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault11_12.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault11_13.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault11_14.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault11_15.yaml                                              │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault11_16.yaml                                              │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault11_17.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault11_18.yaml                                              │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault11_2.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault11_3.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault11_4.yaml                                               │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault11_5.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault11_6.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault11_7.yaml                                               │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault11_8.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault11_9.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault13.yaml                                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault13_1.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault13_10.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault13_11.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault13_12.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault13_13.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault13_14.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault13_15.yaml                                              │ kubernetes │         6         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault13_16.yaml                                              │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault13_17.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault13_18.yaml                                              │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault13_2.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault13_3.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault13_4.yaml                                               │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault13_5.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault13_6.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault13_7.yaml                                               │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault13_8.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault13_9.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault16.yaml                                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault20.yaml                                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault20_1.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault20_10.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault20_11.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault20_12.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault20_13.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault20_14.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault20_15.yaml                                              │ kubernetes │         6         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault20_16.yaml                                              │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault20_17.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault20_18.yaml                                              │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault20_2.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault20_3.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault20_4.yaml                                               │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault20_5.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault20_6.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault20_7.yaml                                               │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault20_8.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault20_9.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault22.yaml                                                 │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault23.yaml                                                 │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault26_1.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault31.yaml                                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault31_1.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault31_10.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault31_11.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault31_12.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault31_13.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault31_14.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault31_15.yaml                                              │ kubernetes │         6         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault31_16.yaml                                              │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault31_17.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault31_18.yaml                                              │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault31_2.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault31_3.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault31_4.yaml                                               │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault31_5.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault31_6.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault31_7.yaml                                               │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault31_8.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault31_9.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault32.yaml                                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault33.yaml                                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault4.yaml                                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault4_1.yaml                                                │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault4_10.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault4_2.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault4_3.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault4_4.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault4_5.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault4_6.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault4_7.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault4_8.yaml                                                │ kubernetes │        35         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault4_9.yaml                                                │ kubernetes │        14         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault5_1.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault5_10.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault5_11.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault5_12.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault5_13.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault5_14.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault5_15.yaml                                               │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault5_16.yaml                                               │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault5_17.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault5_18.yaml                                               │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault5_2.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault5_3.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault5_4.yaml                                                │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault5_5.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault5_6.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault5_7.yaml                                                │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault5_8.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault5_9.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vaultCRB.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vaultSA.yaml                                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vaultSASecret.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault_k8s_service_account.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault_k8s_service_account_1.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault_k8s_service_account_2.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vault_k8s_service_account_3.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vaultwarden-claim0-persistentvolumeclaim.yaml                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vaultwarden-cloudflare-tunnel.yaml                           │ kubernetes │        14         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vaultwarden-deployment.yaml                                  │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vaultwarden-pvc.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vector-add-2.yaml                                            │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vector-add-3.yaml                                            │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vector-add.yaml                                              │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vector-aggregator-assert.yaml                                │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vector-aggregator-assert1.yaml                               │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vector-aggregator-assert1_1.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vector-aggregator-assert2.yaml                               │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vector-aggregator-assert2_1.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vector-aggregator-assert_1.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vector-aggregator.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vector-aggregator1.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vector-aggregator2.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vector-rbac.yaml                                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vector-rbac_1.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vector-rbac_2.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vector15.yaml                                                │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vectordb-service.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ velero9.yaml                                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ velero9_1.yaml                                               │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ velero9_2.yaml                                               │ kubernetes │         2         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ velero9_3.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ velero9_4.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ velero9_5.yaml                                               │ kubernetes │        29         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verdaccio-helm.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verdaccio-helm_1.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verdaccio-ingress.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verifica-liveness.yaml                                       │ kubernetes │        13         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verifica-liveness1.yaml                                      │ kubernetes │        13         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verifica-readiness.yaml                                      │ kubernetes │        13         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verifica-readiness1.yaml                                     │ kubernetes │        13         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verifica-startup.yaml                                        │ kubernetes │        13         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verifica-startup1.yaml                                       │ kubernetes │        13         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verifica-todos-aspectos.yaml                                 │ kubernetes │        13         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verifica-todos-aspectos1.yaml                                │ kubernetes │        13         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verification-pod.yaml                                        │ kubernetes │        16         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verification-pod_1.yaml                                      │ kubernetes │        16         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verify-cleanup.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verify-cleanup_1.yaml                                        │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verify-cleanup_2.yaml                                        │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verify-pod.yaml                                              │ kubernetes │        15         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verify-secret-created.yaml                                   │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verify-secret-works-with-wg.yaml                             │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ version-config.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ version-config1.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verticalscaling.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verticalscaling_1.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verticalscaling_10.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verticalscaling_11.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verticalscaling_12.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verticalscaling_13.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verticalscaling_14.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verticalscaling_15.yaml                                      │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verticalscaling_16.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verticalscaling_17.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verticalscaling_18.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verticalscaling_2.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verticalscaling_3.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verticalscaling_4.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verticalscaling_5.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verticalscaling_6.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verticalscaling_7.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verticalscaling_8.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ verticalscaling_9.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vertx-create-span.yaml                                       │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vets-service-service.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vets-service-service1.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vets-service-service2.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ viacep-api.yaml                                              │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ viacep-api_1.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ victim-pod.yaml                                              │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ victoria-deployment.yaml                                     │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ victoria-metrics2.yaml                                       │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ victoria-metrics2_1.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ victoria-metrics2_2.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ victoria-service.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ victoriametrics-pvc.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ victoriametrics-pvc1.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ victoriametrics-service.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ victoriametrics-service1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ victoriametrics-statefulset.yaml                             │ kubernetes │        15         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ victoriametrics-statefulset1.yaml                            │ kubernetes │        15         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ video-clusterip.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ video-deploy.yaml                                            │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ video-hpa.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ video-mongo-deployment.yaml                                  │ kubernetes │        14         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ video-mongo-deployment_1.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ video-mongo-deployment_2.yaml                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ video-process.yaml                                           │ kubernetes │        15         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ video-process_1.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ video-process_2.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ video-recommender.yaml                                       │ kubernetes │        15         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ video-recommender_1.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ video-service-deployment.yaml                                │ kubernetes │        15         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ video-service-deployment_1.yaml                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ video-streaming-deployment.yaml                              │ kubernetes │        13         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ video-streaming-deployment_1.yaml                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ video-streaming.yaml                                         │ kubernetes │        20         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ video-streaming1.yaml                                        │ kubernetes │        20         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ video-uploader-deployment.yaml                               │ kubernetes │        13         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ video-uploader-deployment_1.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ video_game_backend.yaml                                      │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ video_game_backend_1.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ video_game_backend_2.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ video_game_frontend.yaml                                     │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ video_game_frontend_1.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ video_service.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ video_service1.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ video_service2.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ video_service3.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ videopacket-sample.yaml                                      │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ videopacket-sample_1.yaml                                    │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ videopacket-sample_2.yaml                                    │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ videopacket-sample_3.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ videos-storage-config.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ videos-storage-deployment.yaml                               │ kubernetes │        13         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ videos-storage-deployment_1.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ videos-web-v2.yaml                                           │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ videos-web-v21.yaml                                          │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ videos-web-v21_1.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ videos-web-v2_1.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ view-binding.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ view-generator-serv.yaml                                     │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ view-generator-serv1.yaml                                    │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ view-generator-serv1_1.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ view-generator-serv_1.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ view-pods-role.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ view-pods-rolebinding.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ view.yaml                                                    │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ viewer-ingress-nginx.yaml                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ viewer-ingress-nginx1.yaml                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ viewer-ingress-traefik.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ viewer-ingress-traefik1.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ viewer-role.yaml                                             │ kubernetes │         1         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vineyardruntime_editor_role.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vineyardruntime_viewer_role.yaml                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vip.yaml                                                     │ kubernetes │        66         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vip1.yaml                                                    │ kubernetes │        66         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ virt-ingress-routes.yaml                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ virtoolapp_editor_role.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ virtoolapp_viewer_role.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ virtual-node.yaml                                            │ kubernetes │        20         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ virtualhosting.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ virtualservice19.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ virtualservice19_1.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ virtualservice19_2.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ virtualservice19_4.yaml                                      │ kubernetes │         6         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ virtualservice42_1.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ virtualservice_destinationhosts.yaml                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ virtualservice_destinationhosts_1.yaml                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ virtualservice_destinationhosts_20.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ virtualservice_destinationhosts_23.yaml                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ virtualservice_route_rule_no_effects_ingress_4.yaml          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ virtvnc.yaml                                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ virtvnc1.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ virtvnc1_1.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ virtvnc1_2.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ virtvnc1_3.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ virtvnc1_4.yaml                                              │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ virtvnc2.yaml                                                │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ virtvnc2_1.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ virtvnc2_2.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ virtvnc2_3.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ virtvnc2_4.yaml                                              │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ virtvnc_1.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ virtvnc_2.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ virtvnc_3.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ virtvnc_4.yaml                                               │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ visit-cnt-stfs.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ visit-cnt-stfs1.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ visit-cnt-stfs1_1.yaml                                       │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ visit-cnt-stfs_1.yaml                                        │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ visit-counter-app-database-migration-job.yaml                │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ visit-counter-app-deployment-hpa.yaml                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ visit-counter-app-deployment.yaml                            │ kubernetes │        16         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ visit-counter-app-service.yaml                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ visits-service-service.yaml                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ visits-service-service1.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ visits-service-service2.yaml                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ viz2code.yaml                                                │ kubernetes │        16         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ viz2code1.yaml                                               │ kubernetes │        16         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ viz2code1_1.yaml                                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ viz2code_1.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ viz2codenfs.yaml                                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ viz2codenfs1.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ viz2codenfs1_1.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ viz2codenfs_1.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vizier_crd_role.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vizier_crd_role1.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vk7b.yaml                                                    │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vk7b_1.yaml                                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vk7b_2.yaml                                                  │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vllm1.yaml                                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vllm_cache.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vllm_cache_1.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vllm_cache_2.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vllm_dep.yaml                                                │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vllm_dep_1.yaml                                              │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vlmcsd1.yaml                                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vlmcsd1_1.yaml                                               │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vlmcsd1_2.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vlmcsd3.yaml                                                 │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vlmcsd3_1.yaml                                               │ kubernetes │         9         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vlmcsd3_2.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vm-loadbalancer.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vm2.yaml                                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vm5.yaml                                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vm9_1.yaml                                                   │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vmi.yaml                                                     │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vmi1.yaml                                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vmi2.yaml                                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vmi3.yaml                                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vmi4.yaml                                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vms2.yaml                                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vnc-deployments.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vnc-deployments1.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vnc-deployments1_1.yaml                                      │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vnc-deployments1_2.yaml                                      │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vnc-deployments_1.yaml                                       │ kubernetes │        17         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vnc-deployments_2.yaml                                       │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vnc-namespace.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vnc-pod.yaml                                                 │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vnc-service.yaml                                             │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vol-deployment.yaml                                          │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vol-deployment1.yaml                                         │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vol-hostpath.yaml                                            │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vol-pod.yaml                                                 │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vol-pod1.yaml                                                │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vol-samba.yaml                                               │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vol.yaml                                                     │ kubernetes │        19         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vol1.yaml                                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vol2.yaml                                                    │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ voll-med.yaml                                                │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ voll-med1.yaml                                               │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ voll-med4.yaml                                               │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ voll-med5.yaml                                               │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ voll-med6.yaml                                               │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ voll-med7.yaml                                               │ kubernetes │        18         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ vols-demo.yaml                                               │ kubernetes │        34         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ volsync-vars.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ volsync-vars1.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ volsync-vars2.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ volume-and-pvc.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ volume-and-pvc_1.yaml                                        │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ volume-claim.yaml                                            │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ volume-claim10.yaml                                          │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ volume-claim5.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ volume-claim6.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ volume-claim6_1.yaml                                         │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ volume-claim7.yaml                                           │ kubernetes │         0         │
├──────────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ volume-claim8.yaml                                           │ kubernetes │         0         │
└──────────────────────────────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


Voll-med2.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'vollmed-api' of Deployment 'vollmed' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Voll-med2.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v8
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Voll-med2.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v8
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vollmed-api' of 'deployment' 'vollmed' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Voll-med2.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v8
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Voll-med2.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v8
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vollmed-api' of Deployment 'vollmed' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Voll-med2.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v8
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vollmed-api' of Deployment 'vollmed' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Voll-med2.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v8
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Voll-med2.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v8
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Voll-med2.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v8
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Voll-med2.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v8
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Voll-med2.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v8
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Voll-med2.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v8
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vollmed-api" of deployment "vollmed" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Voll-med2.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v8
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Voll-med2.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v8
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vollmed in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 Voll-med2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: vollmed
   5 │   labels:
   6 └     app: vollmed
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vollmed in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Voll-med2.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v8
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vollmed in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Voll-med2.yaml:17-51
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v8
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vollmed-api in deployment vollmed (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 Voll-med2.yaml:18-51
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v8
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados
  ..   
────────────────────────────────────────



Voll-med3.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'vollmed-api' of Deployment 'vollmed' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Voll-med3.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v9
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         # Define the environment variable
  24 │         - name: DB_HOST # Notice that the case is different here
  25 │                                      # from the key name in the ConfigMap.
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Voll-med3.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v9
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         # Define the environment variable
  24 │         - name: DB_HOST # Notice that the case is different here
  25 │                                      # from the key name in the ConfigMap.
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vollmed-api' of 'deployment' 'vollmed' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Voll-med3.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v9
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         # Define the environment variable
  24 │         - name: DB_HOST # Notice that the case is different here
  25 │                                      # from the key name in the ConfigMap.
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Voll-med3.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v9
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         # Define the environment variable
  24 │         - name: DB_HOST # Notice that the case is different here
  25 │                                      # from the key name in the ConfigMap.
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vollmed-api' of Deployment 'vollmed' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Voll-med3.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v9
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         # Define the environment variable
  24 │         - name: DB_HOST # Notice that the case is different here
  25 │                                      # from the key name in the ConfigMap.
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vollmed-api' of Deployment 'vollmed' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Voll-med3.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v9
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         # Define the environment variable
  24 │         - name: DB_HOST # Notice that the case is different here
  25 │                                      # from the key name in the ConfigMap.
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Voll-med3.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v9
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         # Define the environment variable
  24 │         - name: DB_HOST # Notice that the case is different here
  25 │                                      # from the key name in the ConfigMap.
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Voll-med3.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v9
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         # Define the environment variable
  24 │         - name: DB_HOST # Notice that the case is different here
  25 │                                      # from the key name in the ConfigMap.
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Voll-med3.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v9
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         # Define the environment variable
  24 │         - name: DB_HOST # Notice that the case is different here
  25 │                                      # from the key name in the ConfigMap.
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Voll-med3.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v9
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         # Define the environment variable
  24 │         - name: DB_HOST # Notice that the case is different here
  25 │                                      # from the key name in the ConfigMap.
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Voll-med3.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v9
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         # Define the environment variable
  24 │         - name: DB_HOST # Notice that the case is different here
  25 │                                      # from the key name in the ConfigMap.
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Voll-med3.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v9
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         # Define the environment variable
  24 │         - name: DB_HOST # Notice that the case is different here
  25 │                                      # from the key name in the ConfigMap.
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vollmed-api" of deployment "vollmed" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Voll-med3.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v9
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         # Define the environment variable
  24 │         - name: DB_HOST # Notice that the case is different here
  25 │                                      # from the key name in the ConfigMap.
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Voll-med3.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v9
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         # Define the environment variable
  24 │         - name: DB_HOST # Notice that the case is different here
  25 │                                      # from the key name in the ConfigMap.
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vollmed in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 Voll-med3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: vollmed
   5 │   labels:
   6 └     app: vollmed
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vollmed in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Voll-med3.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v9
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         # Define the environment variable
  24 │         - name: DB_HOST # Notice that the case is different here
  25 │                                      # from the key name in the ConfigMap.
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vollmed in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Voll-med3.yaml:17-53
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v9
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         # Define the environment variable
  24 │         - name: DB_HOST # Notice that the case is different here
  25 └                                      # from the key name in the ConfigMap.
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vollmed-api in deployment vollmed (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 Voll-med3.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v9
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         # Define the environment variable
  24 │         - name: DB_HOST # Notice that the case is different here
  25 │                                      # from the key name in the ConfigMap.
  26 └           valueFrom:
  ..   
────────────────────────────────────────



v123_1.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web' of Deployment 'vweb-v1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 v123_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Deployment 'vweb-v1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 v123_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'deployment' 'vweb-v1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 v123_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web' of Deployment 'vweb-v1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 v123_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Deployment 'vweb-v1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 v123_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Deployment 'vweb-v1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 v123_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web' of Deployment 'vweb-v1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 v123_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web' of Deployment 'vweb-v1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 v123_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web' of Deployment 'vweb-v1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 v123_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web' of Deployment 'vweb-v1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 v123_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Deployment 'vweb-v1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 v123_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 v123_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of deployment "vweb-v1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 v123_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 v123_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vweb-v1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 v123_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: vweb-v1
   5 │   labels:
   6 └     kiamol: ch16
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment vweb-v1 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vweb-v1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 v123_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vweb-v1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 v123_1.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container web in deployment vweb-v1 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 v123_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────



v124_1.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web' of Deployment 'vweb-v1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 v124_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v1
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Deployment 'vweb-v1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 v124_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v1
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'deployment' 'vweb-v1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 v124_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v1
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web' of Deployment 'vweb-v1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 v124_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v1
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Deployment 'vweb-v1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 v124_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v1
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Deployment 'vweb-v1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 v124_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v1
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web' of Deployment 'vweb-v1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 v124_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v1
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web' of Deployment 'vweb-v1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 v124_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v1
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web' of Deployment 'vweb-v1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 v124_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v1
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web' of Deployment 'vweb-v1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 v124_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v1
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Deployment 'vweb-v1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 v124_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v1
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 v124_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v1
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of deployment "vweb-v1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 v124_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v1
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 v124_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v1
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vweb-v1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 v124_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: vweb-v1
   5 │   labels:
   6 └     kiamol: ch16
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment vweb-v1 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vweb-v1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 v124_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v1
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vweb-v1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 v124_1.yaml:16-22
────────────────────────────────────────
  16 ┌       automountServiceAccountToken: false
  17 │       containers:
  18 │       - name: web
  19 │         image: kiamol/ch09-vweb:v1
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container web in deployment vweb-v1 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 v124_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v1
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────



v13_1.yaml (kubernetes)
=======================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web' of Deployment 'vweb-v1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 v13_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Deployment 'vweb-v1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 v13_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'deployment' 'vweb-v1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 v13_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web' of Deployment 'vweb-v1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 v13_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Deployment 'vweb-v1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 v13_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Deployment 'vweb-v1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 v13_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web' of Deployment 'vweb-v1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 v13_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web' of Deployment 'vweb-v1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 v13_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web' of Deployment 'vweb-v1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 v13_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web' of Deployment 'vweb-v1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 v13_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Deployment 'vweb-v1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 v13_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 v13_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of deployment "vweb-v1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 v13_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 v13_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vweb-v1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 v13_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: vweb-v1
   5 │   labels:
   6 └     kiamol: ch15
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment vweb-v1 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vweb-v1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 v13_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vweb-v1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 v13_1.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container web in deployment vweb-v1 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 v13_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────



v14_1.yaml (kubernetes)
=======================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web' of Deployment 'vweb-v1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 v14_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Deployment 'vweb-v1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 v14_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'deployment' 'vweb-v1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 v14_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web' of Deployment 'vweb-v1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 v14_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Deployment 'vweb-v1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 v14_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Deployment 'vweb-v1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 v14_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web' of Deployment 'vweb-v1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 v14_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web' of Deployment 'vweb-v1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 v14_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web' of Deployment 'vweb-v1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 v14_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web' of Deployment 'vweb-v1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 v14_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Deployment 'vweb-v1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 v14_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 v14_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of deployment "vweb-v1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 v14_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 v14_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vweb-v1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 v14_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: vweb-v1
   5 │   labels:
   6 └     kiamol: ch16
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment vweb-v1 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vweb-v1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 v14_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vweb-v1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 v14_1.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container web in deployment vweb-v1 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 v14_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────



v15_1.yaml (kubernetes)
=======================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web' of Deployment 'vweb-v1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 v15_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v1
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Deployment 'vweb-v1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 v15_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v1
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'deployment' 'vweb-v1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 v15_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v1
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web' of Deployment 'vweb-v1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 v15_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v1
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Deployment 'vweb-v1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 v15_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v1
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Deployment 'vweb-v1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 v15_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v1
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web' of Deployment 'vweb-v1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 v15_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v1
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web' of Deployment 'vweb-v1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 v15_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v1
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web' of Deployment 'vweb-v1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 v15_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v1
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web' of Deployment 'vweb-v1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 v15_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v1
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Deployment 'vweb-v1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 v15_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v1
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 v15_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v1
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of deployment "vweb-v1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 v15_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v1
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 v15_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v1
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vweb-v1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 v15_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: vweb-v1
   5 │   labels:
   6 └     kiamol: ch16
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment vweb-v1 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vweb-v1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 v15_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v1
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vweb-v1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 v15_1.yaml:16-22
────────────────────────────────────────
  16 ┌       automountServiceAccountToken: false
  17 │       containers:
  18 │       - name: web
  19 │         image: kiamol/ch09-vweb:v1
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container web in deployment vweb-v1 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 v15_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v1
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────



v19_1.yaml (kubernetes)
=======================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web' of Deployment 'vweb-v1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 v19_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Deployment 'vweb-v1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 v19_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'deployment' 'vweb-v1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 v19_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web' of Deployment 'vweb-v1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 v19_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Deployment 'vweb-v1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 v19_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Deployment 'vweb-v1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 v19_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web' of Deployment 'vweb-v1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 v19_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web' of Deployment 'vweb-v1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 v19_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web' of Deployment 'vweb-v1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 v19_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web' of Deployment 'vweb-v1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 v19_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Deployment 'vweb-v1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 v19_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 v19_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of deployment "vweb-v1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 v19_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 v19_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vweb-v1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 v19_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: vweb-v1
   5 │   labels:
   6 └     kiamol: ch15
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment vweb-v1 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vweb-v1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 v19_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vweb-v1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 v19_1.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container web in deployment vweb-v1 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 v19_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v1
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────



v2.0.1_13.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 v2.0.1_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.4
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'dashboard-metrics-scraper' of 'deployment' 'dashboard-metrics-scraper' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 v2.0.1_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.4
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 v2.0.1_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.4
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 v2.0.1_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.4
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 v2.0.1_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.4
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 v2.0.1_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.4
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 v2.0.1_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.4
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 v2.0.1_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.4
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 v2.0.1_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.4
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "dashboard-metrics-scraper" of deployment "dashboard-metrics-scraper" in "kubernetes-dashboard" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 v2.0.1_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.4
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 v2.0.1_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.4
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment dashboard-metrics-scraper in kubernetes-dashboard namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 v2.0.1_13.yaml:21-50
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.4
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dashboard-metrics-scraper in deployment dashboard-metrics-scraper (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 v2.0.1_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.4
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────



v2.0.1_7.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'kubernetes-dashboard' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 v2.0.1_7.yaml:21-29
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - configmaps
  25 │   resourceNames:
  26 │   - kubernetes-dashboard-settings
  27 │   verbs:
  28 │   - get
  29 └   - update
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'kubernetes-dashboard' shouldn't have access to manage secrets in namespace 'kubernetes-dashboard'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 v2.0.1_7.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - secrets
  13 │   resourceNames:
  14 │   - kubernetes-dashboard-key-holder
  15 │   - kubernetes-dashboard-certs
  16 │   - kubernetes-dashboard-csrf
  17 └   verbs:
  ..   
────────────────────────────────────────



v2.3.1_11.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 v2.3.1_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-dashboard' of 'deployment' 'kubernetes-dashboard' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 v2.3.1_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 v2.3.1_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 v2.3.1_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 v2.3.1_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 v2.3.1_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 v2.3.1_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 v2.3.1_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-dashboard' of Deployment 'kubernetes-dashboard' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 v2.3.1_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 v2.3.1_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-dashboard" of deployment "kubernetes-dashboard" in "kubernetes-dashboard" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 v2.3.1_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 v2.3.1_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kubernetes-dashboard in kubernetes-dashboard namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 v2.3.1_11.yaml:19-57
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 └         - --auto-generate-certificates
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-dashboard in deployment kubernetes-dashboard (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 v2.3.1_11.yaml:20-45
────────────────────────────────────────
  20 ┌       - name: kubernetes-dashboard
  21 │         image: kubernetesui/dashboard:v2.3.1
  22 │         imagePullPolicy: Always
  23 │         ports:
  24 │         - containerPort: 8443
  25 │           protocol: TCP
  26 │         args:
  27 │         - --auto-generate-certificates
  28 └         - --namespace=kubernetes-dashboard
  ..   
────────────────────────────────────────



v2.3.1_13.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 v2.3.1_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'dashboard-metrics-scraper' of 'deployment' 'dashboard-metrics-scraper' in 'kubernetes-dashboard' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 v2.3.1_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 v2.3.1_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 v2.3.1_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 v2.3.1_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 v2.3.1_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 v2.3.1_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 v2.3.1_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'dashboard-metrics-scraper' of Deployment 'dashboard-metrics-scraper' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 v2.3.1_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "dashboard-metrics-scraper" of deployment "dashboard-metrics-scraper" in "kubernetes-dashboard" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 v2.3.1_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 v2.3.1_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment dashboard-metrics-scraper in kubernetes-dashboard namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 v2.3.1_13.yaml:21-50
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 └             scheme: HTTP
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container dashboard-metrics-scraper in deployment dashboard-metrics-scraper (namespace: kubernetes-dashboard) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 v2.3.1_13.yaml:22-41
────────────────────────────────────────
  22 ┌       - name: dashboard-metrics-scraper
  23 │         image: kubernetesui/metrics-scraper:v1.0.6
  24 │         ports:
  25 │         - containerPort: 8000
  26 │           protocol: TCP
  27 │         livenessProbe:
  28 │           httpGet:
  29 │             scheme: HTTP
  30 └             path: /
  ..   
────────────────────────────────────────



v2.3.1_7.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'kubernetes-dashboard' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 v2.3.1_7.yaml:21-29
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - configmaps
  25 │   resourceNames:
  26 │   - kubernetes-dashboard-settings
  27 │   verbs:
  28 │   - get
  29 └   - update
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'kubernetes-dashboard' shouldn't have access to manage secrets in namespace 'kubernetes-dashboard'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 v2.3.1_7.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - secrets
  13 │   resourceNames:
  14 │   - kubernetes-dashboard-key-holder
  15 │   - kubernetes-dashboard-certs
  16 │   - kubernetes-dashboard-csrf
  17 └   verbs:
  ..   
────────────────────────────────────────



v210_1.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 v210_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Deployment 'vweb-v2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 v210_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'deployment' 'vweb-v2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 v210_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 v210_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 v210_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 v210_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 v210_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 v210_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 v210_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 v210_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 v210_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 v210_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of deployment "vweb-v2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 v210_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 v210_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vweb-v2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 v210_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: vweb-v2
   5 │   labels:
   6 └     kiamol: ch16
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment vweb-v2 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vweb-v2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 v210_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vweb-v2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 v210_1.yaml:16-22
────────────────────────────────────────
  16 ┌       automountServiceAccountToken: false
  17 │       containers:
  18 │       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container web in deployment vweb-v2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 v210_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────



v211.yaml (kubernetes)
======================
Tests: 114 (SUCCESSES: 97, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 v211.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Deployment 'vweb-v2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 v211.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'deployment' 'vweb-v2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 v211.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 v211.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 v211.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 v211.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 v211.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 v211.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 v211.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 v211.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 v211.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 v211.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of deployment "vweb-v2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 v211.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 v211.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vweb-v2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 v211.yaml:4-6
────────────────────────────────────────
   4 ┌   name:  vweb-v2
   5 │   labels:
   6 └     kiamol: ch16
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment vweb-v2 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container web in deployment vweb-v2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 v211.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────



v212_1.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mycontainer' of Deployment 'mydeployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 v212_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: mycontainer
  21 │         image: devopsjourney1/mywebapp
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mycontainer' of Deployment 'mydeployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 v212_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: mycontainer
  21 │         image: devopsjourney1/mywebapp
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mycontainer' of 'deployment' 'mydeployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 v212_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: mycontainer
  21 │         image: devopsjourney1/mywebapp
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mycontainer' of Deployment 'mydeployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 v212_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: mycontainer
  21 │         image: devopsjourney1/mywebapp
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mycontainer' of Deployment 'mydeployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 v212_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: mycontainer
  21 │         image: devopsjourney1/mywebapp
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mycontainer' of Deployment 'mydeployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 v212_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: mycontainer
  21 │         image: devopsjourney1/mywebapp
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mycontainer' of Deployment 'mydeployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 v212_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: mycontainer
  21 │         image: devopsjourney1/mywebapp
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mycontainer' of Deployment 'mydeployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 v212_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: mycontainer
  21 │         image: devopsjourney1/mywebapp
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mycontainer' of Deployment 'mydeployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 v212_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: mycontainer
  21 │         image: devopsjourney1/mywebapp
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mycontainer' of Deployment 'mydeployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 v212_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: mycontainer
  21 │         image: devopsjourney1/mywebapp
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mycontainer' of Deployment 'mydeployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 v212_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: mycontainer
  21 │         image: devopsjourney1/mywebapp
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mycontainer' of Deployment 'mydeployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 v212_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: mycontainer
  21 │         image: devopsjourney1/mywebapp
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 v212_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: mycontainer
  21 │         image: devopsjourney1/mywebapp
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mycontainer" of deployment "mydeployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 v212_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: mycontainer
  21 │         image: devopsjourney1/mywebapp
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 v212_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: mycontainer
  21 │         image: devopsjourney1/mywebapp
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment mydeployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 v212_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: mydeployment
   5 │   labels:
   6 └     app: mywebapp
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment mydeployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mydeployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 v212_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: mycontainer
  21 │         image: devopsjourney1/mywebapp
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mydeployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 v212_1.yaml:19-23
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: mycontainer
  21 │         image: devopsjourney1/mywebapp
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mycontainer in deployment mydeployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 v212_1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: mycontainer
  21 │         image: devopsjourney1/mywebapp
  22 │         ports:
  23 └         - containerPort: 80
────────────────────────────────────────



v21_1.yaml (kubernetes)
=======================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 v21_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Deployment 'vweb-v2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 v21_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'deployment' 'vweb-v2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 v21_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 v21_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 v21_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 v21_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 v21_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 v21_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 v21_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 v21_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 v21_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 v21_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of deployment "vweb-v2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 v21_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 v21_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vweb-v2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 v21_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: vweb-v2
   5 │   labels:
   6 └     kiamol: ch16
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment vweb-v2 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vweb-v2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 v21_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vweb-v2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 v21_1.yaml:16-22
────────────────────────────────────────
  16 ┌       automountServiceAccountToken: false
  17 │       containers:
  18 │       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container web in deployment vweb-v2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 v21_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────



v22.yaml (kubernetes)
=====================
Tests: 114 (SUCCESSES: 97, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 v22.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Deployment 'vweb-v2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 v22.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'deployment' 'vweb-v2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 v22.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 v22.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 v22.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 v22.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 v22.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 v22.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 v22.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 v22.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 v22.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 v22.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of deployment "vweb-v2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 v22.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 v22.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vweb-v2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 v22.yaml:4-6
────────────────────────────────────────
   4 ┌   name:  vweb-v2
   5 │   labels:
   6 └     kiamol: ch16
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment vweb-v2 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container web in deployment vweb-v2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 v22.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────



v23_1.yaml (kubernetes)
=======================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 v23_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Deployment 'vweb-v2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 v23_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'deployment' 'vweb-v2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 v23_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 v23_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 v23_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 v23_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 v23_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 v23_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 v23_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 v23_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 v23_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 v23_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of deployment "vweb-v2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 v23_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 v23_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vweb-v2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 v23_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: vweb-v2
   5 │   labels:
   6 └     kiamol: ch15
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment vweb-v2 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vweb-v2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 v23_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vweb-v2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 v23_1.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container web in deployment vweb-v2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 v23_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────



v24_1.yaml (kubernetes)
=======================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 v24_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Deployment 'vweb-v2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 v24_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'deployment' 'vweb-v2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 v24_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 v24_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 v24_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 v24_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 v24_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 v24_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 v24_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 v24_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 v24_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 v24_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of deployment "vweb-v2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 v24_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 v24_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vweb-v2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 v24_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: vweb-v2
   5 │   labels:
   6 └     kiamol: ch16
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment vweb-v2 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vweb-v2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 v24_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vweb-v2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 v24_1.yaml:16-22
────────────────────────────────────────
  16 ┌       automountServiceAccountToken: false
  17 │       containers:
  18 │       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container web in deployment vweb-v2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 v24_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────



v25.yaml (kubernetes)
=====================
Tests: 114 (SUCCESSES: 97, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 v25.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Deployment 'vweb-v2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 v25.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'deployment' 'vweb-v2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 v25.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 v25.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 v25.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 v25.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 v25.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 v25.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 v25.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 v25.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 v25.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 v25.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of deployment "vweb-v2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 v25.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 v25.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vweb-v2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 v25.yaml:4-6
────────────────────────────────────────
   4 ┌   name:  vweb-v2
   5 │   labels:
   6 └     kiamol: ch16
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment vweb-v2 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container web in deployment vweb-v2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 v25.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────



v26_1.yaml (kubernetes)
=======================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 v26_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Deployment 'vweb-v2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 v26_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'deployment' 'vweb-v2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 v26_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 v26_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 v26_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 v26_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 v26_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 v26_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 v26_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 v26_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 v26_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 v26_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of deployment "vweb-v2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 v26_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 v26_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vweb-v2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 v26_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: vweb-v2
   5 │   labels:
   6 └     kiamol: ch15
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment vweb-v2 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vweb-v2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 v26_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vweb-v2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 v26_1.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container web in deployment vweb-v2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 v26_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────



v27_1.yaml (kubernetes)
=======================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 v27_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Deployment 'vweb-v2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 v27_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'deployment' 'vweb-v2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 v27_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 v27_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 v27_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 v27_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 v27_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 v27_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 v27_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 v27_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 v27_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 v27_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of deployment "vweb-v2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 v27_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 v27_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vweb-v2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 v27_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: vweb-v2
   5 │   labels:
   6 └     kiamol: ch16
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment vweb-v2 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vweb-v2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 v27_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vweb-v2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 v27_1.yaml:16-22
────────────────────────────────────────
  16 ┌       automountServiceAccountToken: false
  17 │       containers:
  18 │       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container web in deployment vweb-v2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 v27_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: web
  19 │         image: kiamol/ch09-vweb:v2
  20 │         ports:
  21 │         - name: http
  22 └           containerPort: 80
────────────────────────────────────────



v28.yaml (kubernetes)
=====================
Tests: 114 (SUCCESSES: 97, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 v28.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Deployment 'vweb-v2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 v28.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'deployment' 'vweb-v2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 v28.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 v28.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 v28.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 v28.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 v28.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 v28.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 v28.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 v28.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 v28.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 v28.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of deployment "vweb-v2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 v28.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 v28.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vweb-v2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 v28.yaml:4-6
────────────────────────────────────────
   4 ┌   name:  vweb-v2
   5 │   labels:
   6 └     kiamol: ch16
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment vweb-v2 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container web in deployment vweb-v2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 v28.yaml:20-24
────────────────────────────────────────
  20 ┌         - name: web
  21 │           image: kiamol/ch09-vweb:v2
  22 │           ports:
  23 │             - name: http
  24 └               containerPort: 80
────────────────────────────────────────



v29_1.yaml (kubernetes)
=======================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 v29_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Deployment 'vweb-v2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 v29_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'deployment' 'vweb-v2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 v29_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 v29_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 v29_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 v29_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 v29_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 v29_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 v29_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 v29_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 v29_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 v29_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of deployment "vweb-v2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 v29_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 v29_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vweb-v2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 v29_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: vweb-v2
   5 │   labels:
   6 └     kiamol: ch15
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment vweb-v2 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vweb-v2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 v29_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vweb-v2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 v29_1.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container web in deployment vweb-v2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 v29_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────



v2_1.yaml (kubernetes)
======================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 v2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'web' of Deployment 'vweb-v2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 v2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'web' of 'deployment' 'vweb-v2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 v2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 v2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 v2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 v2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 v2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 v2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 v2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 v2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'web' of Deployment 'vweb-v2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 v2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 v2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "web" of deployment "vweb-v2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 v2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 v2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vweb-v2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 v2_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: vweb-v2
   5 │   labels:
   6 └     kiamol: ch15
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment vweb-v2 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vweb-v2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 v2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vweb-v2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 v2_1.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container web in deployment vweb-v2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 v2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: web
  18 │         image: kiamol/ch09-vweb:v2
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 80
────────────────────────────────────────



v2_4_1_full1_3.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'aws-load-balancer-controller-leader-election-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 v2_4_1_full1_3.yaml:9-14
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - configmaps
  13 │   verbs:
  14 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'aws-load-balancer-controller-leader-election-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 v2_4_1_full1_3.yaml:15-24
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - ''
  17 │   resourceNames:
  18 │   - aws-load-balancer-controller-leader
  19 │   resources:
  20 │   - configmaps
  21 │   verbs:
  22 │   - get
  23 │   - update
  24 └   - patch
────────────────────────────────────────



v2_4_1_full1_4.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 3, CRITICAL: 0)

AVD-KSV-0056 (HIGH): ClusterRole 'aws-load-balancer-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 v2_4_1_full1_4.yaml:55-64
────────────────────────────────────────
  55 ┌ - apiGroups:
  56 │   - ''
  57 │   resources:
  58 │   - services
  59 │   verbs:
  60 │   - get
  61 │   - list
  62 │   - patch
  63 │   - update
  64 └   - watch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'aws-load-balancer-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 v2_4_1_full1_4.yaml:107-116
────────────────────────────────────────
 107 ┌ - apiGroups:
 108 │   - extensions
 109 │   resources:
 110 │   - ingresses
 111 │   verbs:
 112 │   - get
 113 │   - list
 114 │   - patch
 115 │   - update
 116 └   - watch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'aws-load-balancer-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 v2_4_1_full1_4.yaml:132-141
────────────────────────────────────────
 132 ┌ - apiGroups:
 133 │   - networking.k8s.io
 134 │   resources:
 135 │   - ingresses
 136 │   verbs:
 137 │   - get
 138 │   - list
 139 │   - patch
 140 │   - update
 141 └   - watch
────────────────────────────────────────



v2_4_1_full1_7.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'aws-load-balancer-webhook-service' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 v2_4_1_full1_7.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │   - port: 443
  11 │     targetPort: 9443
  12 │   selector:
  13 │     app.kubernetes.io/component: controller
  14 └     app.kubernetes.io/name: aws-load-balancer-controller
────────────────────────────────────────



v2_4_1_full1_8.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 6, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'controller' of Deployment 'aws-load-balancer-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 v2_4_1_full1_8.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=demo
  24 │         - --ingress-class=alb
  25 │         image: amazon/aws-alb-ingress-controller:v2.4.2
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'controller' of 'deployment' 'aws-load-balancer-controller' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 v2_4_1_full1_8.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=demo
  24 │         - --ingress-class=alb
  25 │         image: amazon/aws-alb-ingress-controller:v2.4.2
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'aws-load-balancer-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 v2_4_1_full1_8.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=demo
  24 │         - --ingress-class=alb
  25 │         image: amazon/aws-alb-ingress-controller:v2.4.2
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'aws-load-balancer-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 v2_4_1_full1_8.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=demo
  24 │         - --ingress-class=alb
  25 │         image: amazon/aws-alb-ingress-controller:v2.4.2
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 v2_4_1_full1_8.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=demo
  24 │         - --ingress-class=alb
  25 │         image: amazon/aws-alb-ingress-controller:v2.4.2
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'aws-load-balancer-controller' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 v2_4_1_full1_8.yaml:10-63
────────────────────────────────────────
  10 ┌   replicas: 1
  11 │   selector:
  12 │     matchLabels:
  13 │       app.kubernetes.io/component: controller
  14 │       app.kubernetes.io/name: aws-load-balancer-controller
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 └         app.kubernetes.io/component: controller
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "aws-load-balancer-controller" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 v2_4_1_full1_8.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=demo
  24 │         - --ingress-class=alb
  25 │         image: amazon/aws-alb-ingress-controller:v2.4.2
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 v2_4_1_full1_8.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=demo
  24 │         - --ingress-class=alb
  25 │         image: amazon/aws-alb-ingress-controller:v2.4.2
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment aws-load-balancer-controller (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 v2_4_1_full1_8.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=demo
  24 │         - --ingress-class=alb
  25 │         image: amazon/aws-alb-ingress-controller:v2.4.2
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────



v2_4_1_full_3.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'aws-load-balancer-controller-leader-election-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 v2_4_1_full_3.yaml:9-14
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - configmaps
  13 │   verbs:
  14 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'aws-load-balancer-controller-leader-election-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 v2_4_1_full_3.yaml:15-24
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - ''
  17 │   resourceNames:
  18 │   - aws-load-balancer-controller-leader
  19 │   resources:
  20 │   - configmaps
  21 │   verbs:
  22 │   - get
  23 │   - update
  24 └   - patch
────────────────────────────────────────



v2_4_1_full_4.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 3, CRITICAL: 0)

AVD-KSV-0056 (HIGH): ClusterRole 'aws-load-balancer-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 v2_4_1_full_4.yaml:55-64
────────────────────────────────────────
  55 ┌ - apiGroups:
  56 │   - ''
  57 │   resources:
  58 │   - services
  59 │   verbs:
  60 │   - get
  61 │   - list
  62 │   - patch
  63 │   - update
  64 └   - watch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'aws-load-balancer-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 v2_4_1_full_4.yaml:107-116
────────────────────────────────────────
 107 ┌ - apiGroups:
 108 │   - extensions
 109 │   resources:
 110 │   - ingresses
 111 │   verbs:
 112 │   - get
 113 │   - list
 114 │   - patch
 115 │   - update
 116 └   - watch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'aws-load-balancer-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 v2_4_1_full_4.yaml:132-141
────────────────────────────────────────
 132 ┌ - apiGroups:
 133 │   - networking.k8s.io
 134 │   resources:
 135 │   - ingresses
 136 │   verbs:
 137 │   - get
 138 │   - list
 139 │   - patch
 140 │   - update
 141 └   - watch
────────────────────────────────────────



v2_4_1_full_7.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'aws-load-balancer-webhook-service' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 v2_4_1_full_7.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │   - port: 443
  11 │     targetPort: 9443
  12 │   selector:
  13 │     app.kubernetes.io/component: controller
  14 └     app.kubernetes.io/name: aws-load-balancer-controller
────────────────────────────────────────



v2_4_1_full_8.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 6, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'controller' of Deployment 'aws-load-balancer-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 v2_4_1_full_8.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=demo
  24 │         - --ingress-class=alb
  25 │         image: amazon/aws-alb-ingress-controller:v2.4.2
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'controller' of 'deployment' 'aws-load-balancer-controller' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 v2_4_1_full_8.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=demo
  24 │         - --ingress-class=alb
  25 │         image: amazon/aws-alb-ingress-controller:v2.4.2
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'aws-load-balancer-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 v2_4_1_full_8.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=demo
  24 │         - --ingress-class=alb
  25 │         image: amazon/aws-alb-ingress-controller:v2.4.2
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'aws-load-balancer-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 v2_4_1_full_8.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=demo
  24 │         - --ingress-class=alb
  25 │         image: amazon/aws-alb-ingress-controller:v2.4.2
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 v2_4_1_full_8.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=demo
  24 │         - --ingress-class=alb
  25 │         image: amazon/aws-alb-ingress-controller:v2.4.2
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'aws-load-balancer-controller' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 v2_4_1_full_8.yaml:10-63
────────────────────────────────────────
  10 ┌   replicas: 1
  11 │   selector:
  12 │     matchLabels:
  13 │       app.kubernetes.io/component: controller
  14 │       app.kubernetes.io/name: aws-load-balancer-controller
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 └         app.kubernetes.io/component: controller
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "aws-load-balancer-controller" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 v2_4_1_full_8.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=demo
  24 │         - --ingress-class=alb
  25 │         image: amazon/aws-alb-ingress-controller:v2.4.2
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 v2_4_1_full_8.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=demo
  24 │         - --ingress-class=alb
  25 │         image: amazon/aws-alb-ingress-controller:v2.4.2
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment aws-load-balancer-controller (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 v2_4_1_full_8.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=demo
  24 │         - --ingress-class=alb
  25 │         image: amazon/aws-alb-ingress-controller:v2.4.2
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────



v2_4_7_full-new_3.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'aws-load-balancer-controller-leader-election-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 v2_4_7_full-new_3.yaml:9-14
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - configmaps
  13 │   verbs:
  14 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'aws-load-balancer-controller-leader-election-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 v2_4_7_full-new_3.yaml:15-24
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - ''
  17 │   resourceNames:
  18 │   - aws-load-balancer-controller-leader
  19 │   resources:
  20 │   - configmaps
  21 │   verbs:
  22 │   - get
  23 │   - update
  24 └   - patch
────────────────────────────────────────



v2_4_7_full-new_4.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 3, CRITICAL: 0)

AVD-KSV-0056 (HIGH): ClusterRole 'aws-load-balancer-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 v2_4_7_full-new_4.yaml:55-64
────────────────────────────────────────
  55 ┌ - apiGroups:
  56 │   - ''
  57 │   resources:
  58 │   - services
  59 │   verbs:
  60 │   - get
  61 │   - list
  62 │   - patch
  63 │   - update
  64 └   - watch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'aws-load-balancer-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 v2_4_7_full-new_4.yaml:107-116
────────────────────────────────────────
 107 ┌ - apiGroups:
 108 │   - extensions
 109 │   resources:
 110 │   - ingresses
 111 │   verbs:
 112 │   - get
 113 │   - list
 114 │   - patch
 115 │   - update
 116 └   - watch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'aws-load-balancer-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 v2_4_7_full-new_4.yaml:132-141
────────────────────────────────────────
 132 ┌ - apiGroups:
 133 │   - networking.k8s.io
 134 │   resources:
 135 │   - ingresses
 136 │   verbs:
 137 │   - get
 138 │   - list
 139 │   - patch
 140 │   - update
 141 └   - watch
────────────────────────────────────────



v2_4_7_full-new_7.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'aws-load-balancer-webhook-service' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 v2_4_7_full-new_7.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │   - port: 443
  11 │     targetPort: 9443
  12 │   selector:
  13 │     app.kubernetes.io/component: controller
  14 └     app.kubernetes.io/name: aws-load-balancer-controller
────────────────────────────────────────



v2_4_7_full-new_8.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 6, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'controller' of Deployment 'aws-load-balancer-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 v2_4_7_full-new_8.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-0ba62d7c30532709c
  26 │         - --aws-region=us-east-2
  27 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'controller' of 'deployment' 'aws-load-balancer-controller' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 v2_4_7_full-new_8.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-0ba62d7c30532709c
  26 │         - --aws-region=us-east-2
  27 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'aws-load-balancer-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 v2_4_7_full-new_8.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-0ba62d7c30532709c
  26 │         - --aws-region=us-east-2
  27 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'aws-load-balancer-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 v2_4_7_full-new_8.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-0ba62d7c30532709c
  26 │         - --aws-region=us-east-2
  27 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 v2_4_7_full-new_8.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-0ba62d7c30532709c
  26 │         - --aws-region=us-east-2
  27 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'aws-load-balancer-controller' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 v2_4_7_full-new_8.yaml:10-65
────────────────────────────────────────
  10 ┌   replicas: 1
  11 │   selector:
  12 │     matchLabels:
  13 │       app.kubernetes.io/component: controller
  14 │       app.kubernetes.io/name: aws-load-balancer-controller
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 └         app.kubernetes.io/component: controller
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "aws-load-balancer-controller" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 v2_4_7_full-new_8.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-0ba62d7c30532709c
  26 │         - --aws-region=us-east-2
  27 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 v2_4_7_full-new_8.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-0ba62d7c30532709c
  26 │         - --aws-region=us-east-2
  27 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment aws-load-balancer-controller (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 v2_4_7_full-new_8.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-0ba62d7c30532709c
  26 │         - --aws-region=us-east-2
  27 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────



v2_4_7_full1_2.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'aws-load-balancer-controller-leader-election-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 v2_4_7_full1_2.yaml:9-14
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - configmaps
  13 │   verbs:
  14 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'aws-load-balancer-controller-leader-election-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 v2_4_7_full1_2.yaml:15-24
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - ''
  17 │   resourceNames:
  18 │   - aws-load-balancer-controller-leader
  19 │   resources:
  20 │   - configmaps
  21 │   verbs:
  22 │   - get
  23 │   - update
  24 └   - patch
────────────────────────────────────────



v2_4_7_full1_3.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 3, CRITICAL: 0)

AVD-KSV-0056 (HIGH): ClusterRole 'aws-load-balancer-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 v2_4_7_full1_3.yaml:55-64
────────────────────────────────────────
  55 ┌ - apiGroups:
  56 │   - ''
  57 │   resources:
  58 │   - services
  59 │   verbs:
  60 │   - get
  61 │   - list
  62 │   - patch
  63 │   - update
  64 └   - watch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'aws-load-balancer-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 v2_4_7_full1_3.yaml:107-116
────────────────────────────────────────
 107 ┌ - apiGroups:
 108 │   - extensions
 109 │   resources:
 110 │   - ingresses
 111 │   verbs:
 112 │   - get
 113 │   - list
 114 │   - patch
 115 │   - update
 116 └   - watch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'aws-load-balancer-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 v2_4_7_full1_3.yaml:132-141
────────────────────────────────────────
 132 ┌ - apiGroups:
 133 │   - networking.k8s.io
 134 │   resources:
 135 │   - ingresses
 136 │   verbs:
 137 │   - get
 138 │   - list
 139 │   - patch
 140 │   - update
 141 └   - watch
────────────────────────────────────────



v2_4_7_full1_6.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'aws-load-balancer-webhook-service' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 v2_4_7_full1_6.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │   - port: 443
  11 │     targetPort: 9443
  12 │   selector:
  13 │     app.kubernetes.io/component: controller
  14 └     app.kubernetes.io/name: aws-load-balancer-controller
────────────────────────────────────────



v2_4_7_full1_7.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 6, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'controller' of Deployment 'aws-load-balancer-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 v2_4_7_full1_7.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=kubedemo2
  24 │         - --ingress-class=alb
  25 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'controller' of 'deployment' 'aws-load-balancer-controller' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 v2_4_7_full1_7.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=kubedemo2
  24 │         - --ingress-class=alb
  25 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'aws-load-balancer-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 v2_4_7_full1_7.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=kubedemo2
  24 │         - --ingress-class=alb
  25 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'aws-load-balancer-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 v2_4_7_full1_7.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=kubedemo2
  24 │         - --ingress-class=alb
  25 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 v2_4_7_full1_7.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=kubedemo2
  24 │         - --ingress-class=alb
  25 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'aws-load-balancer-controller' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 v2_4_7_full1_7.yaml:10-63
────────────────────────────────────────
  10 ┌   replicas: 1
  11 │   selector:
  12 │     matchLabels:
  13 │       app.kubernetes.io/component: controller
  14 │       app.kubernetes.io/name: aws-load-balancer-controller
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 └         app.kubernetes.io/component: controller
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "aws-load-balancer-controller" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 v2_4_7_full1_7.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=kubedemo2
  24 │         - --ingress-class=alb
  25 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 v2_4_7_full1_7.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=kubedemo2
  24 │         - --ingress-class=alb
  25 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment aws-load-balancer-controller (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 v2_4_7_full1_7.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=kubedemo2
  24 │         - --ingress-class=alb
  25 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────



v2_4_7_full2_2.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'aws-load-balancer-controller-leader-election-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 v2_4_7_full2_2.yaml:9-14
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - configmaps
  13 │   verbs:
  14 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'aws-load-balancer-controller-leader-election-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 v2_4_7_full2_2.yaml:15-24
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - ''
  17 │   resourceNames:
  18 │   - aws-load-balancer-controller-leader
  19 │   resources:
  20 │   - configmaps
  21 │   verbs:
  22 │   - get
  23 │   - update
  24 └   - patch
────────────────────────────────────────



v2_4_7_full2_3.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 3, CRITICAL: 0)

AVD-KSV-0056 (HIGH): ClusterRole 'aws-load-balancer-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 v2_4_7_full2_3.yaml:55-64
────────────────────────────────────────
  55 ┌ - apiGroups:
  56 │   - ''
  57 │   resources:
  58 │   - services
  59 │   verbs:
  60 │   - get
  61 │   - list
  62 │   - patch
  63 │   - update
  64 └   - watch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'aws-load-balancer-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 v2_4_7_full2_3.yaml:107-116
────────────────────────────────────────
 107 ┌ - apiGroups:
 108 │   - extensions
 109 │   resources:
 110 │   - ingresses
 111 │   verbs:
 112 │   - get
 113 │   - list
 114 │   - patch
 115 │   - update
 116 └   - watch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'aws-load-balancer-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 v2_4_7_full2_3.yaml:132-141
────────────────────────────────────────
 132 ┌ - apiGroups:
 133 │   - networking.k8s.io
 134 │   resources:
 135 │   - ingresses
 136 │   verbs:
 137 │   - get
 138 │   - list
 139 │   - patch
 140 │   - update
 141 └   - watch
────────────────────────────────────────



v2_4_7_full2_6.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'aws-load-balancer-webhook-service' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 v2_4_7_full2_6.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │   - port: 443
  11 │     targetPort: 9443
  12 │   selector:
  13 │     app.kubernetes.io/component: controller
  14 └     app.kubernetes.io/name: aws-load-balancer-controller
────────────────────────────────────────



v2_4_7_full2_7.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 6, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'controller' of Deployment 'aws-load-balancer-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 v2_4_7_full2_7.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=cluster11
  24 │         - --ingress-class=alb
  25 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'controller' of 'deployment' 'aws-load-balancer-controller' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 v2_4_7_full2_7.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=cluster11
  24 │         - --ingress-class=alb
  25 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'aws-load-balancer-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 v2_4_7_full2_7.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=cluster11
  24 │         - --ingress-class=alb
  25 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'aws-load-balancer-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 v2_4_7_full2_7.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=cluster11
  24 │         - --ingress-class=alb
  25 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 v2_4_7_full2_7.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=cluster11
  24 │         - --ingress-class=alb
  25 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'aws-load-balancer-controller' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 v2_4_7_full2_7.yaml:10-63
────────────────────────────────────────
  10 ┌   replicas: 1
  11 │   selector:
  12 │     matchLabels:
  13 │       app.kubernetes.io/component: controller
  14 │       app.kubernetes.io/name: aws-load-balancer-controller
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 └         app.kubernetes.io/component: controller
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "aws-load-balancer-controller" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 v2_4_7_full2_7.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=cluster11
  24 │         - --ingress-class=alb
  25 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 v2_4_7_full2_7.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=cluster11
  24 │         - --ingress-class=alb
  25 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment aws-load-balancer-controller (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 v2_4_7_full2_7.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=cluster11
  24 │         - --ingress-class=alb
  25 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────



v2_4_7_full3_2.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'aws-load-balancer-controller-leader-election-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 v2_4_7_full3_2.yaml:9-14
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - configmaps
  13 │   verbs:
  14 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'aws-load-balancer-controller-leader-election-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 v2_4_7_full3_2.yaml:15-24
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - ''
  17 │   resourceNames:
  18 │   - aws-load-balancer-controller-leader
  19 │   resources:
  20 │   - configmaps
  21 │   verbs:
  22 │   - get
  23 │   - update
  24 └   - patch
────────────────────────────────────────



v2_4_7_full3_3.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 3, CRITICAL: 0)

AVD-KSV-0056 (HIGH): ClusterRole 'aws-load-balancer-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 v2_4_7_full3_3.yaml:55-64
────────────────────────────────────────
  55 ┌ - apiGroups:
  56 │   - ''
  57 │   resources:
  58 │   - services
  59 │   verbs:
  60 │   - get
  61 │   - list
  62 │   - patch
  63 │   - update
  64 └   - watch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'aws-load-balancer-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 v2_4_7_full3_3.yaml:107-116
────────────────────────────────────────
 107 ┌ - apiGroups:
 108 │   - extensions
 109 │   resources:
 110 │   - ingresses
 111 │   verbs:
 112 │   - get
 113 │   - list
 114 │   - patch
 115 │   - update
 116 └   - watch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'aws-load-balancer-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 v2_4_7_full3_3.yaml:132-141
────────────────────────────────────────
 132 ┌ - apiGroups:
 133 │   - networking.k8s.io
 134 │   resources:
 135 │   - ingresses
 136 │   verbs:
 137 │   - get
 138 │   - list
 139 │   - patch
 140 │   - update
 141 └   - watch
────────────────────────────────────────



v2_4_7_full3_6.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'aws-load-balancer-webhook-service' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 v2_4_7_full3_6.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │   - port: 443
  11 │     targetPort: 9443
  12 │   selector:
  13 │     app.kubernetes.io/component: controller
  14 └     app.kubernetes.io/name: aws-load-balancer-controller
────────────────────────────────────────



v2_4_7_full3_7.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 6, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'controller' of Deployment 'aws-load-balancer-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 v2_4_7_full3_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster-d3n15-tec
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-08a8329b7a605dd75
  26 │         - --aws-region=us-east-2
  27 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'controller' of 'deployment' 'aws-load-balancer-controller' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 v2_4_7_full3_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster-d3n15-tec
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-08a8329b7a605dd75
  26 │         - --aws-region=us-east-2
  27 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'aws-load-balancer-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 v2_4_7_full3_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster-d3n15-tec
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-08a8329b7a605dd75
  26 │         - --aws-region=us-east-2
  27 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'aws-load-balancer-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 v2_4_7_full3_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster-d3n15-tec
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-08a8329b7a605dd75
  26 │         - --aws-region=us-east-2
  27 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 v2_4_7_full3_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster-d3n15-tec
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-08a8329b7a605dd75
  26 │         - --aws-region=us-east-2
  27 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'aws-load-balancer-controller' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 v2_4_7_full3_7.yaml:10-65
────────────────────────────────────────
  10 ┌   replicas: 1
  11 │   selector:
  12 │     matchLabels:
  13 │       app.kubernetes.io/component: controller
  14 │       app.kubernetes.io/name: aws-load-balancer-controller
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 └         app.kubernetes.io/component: controller
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "aws-load-balancer-controller" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 v2_4_7_full3_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster-d3n15-tec
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-08a8329b7a605dd75
  26 │         - --aws-region=us-east-2
  27 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 v2_4_7_full3_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster-d3n15-tec
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-08a8329b7a605dd75
  26 │         - --aws-region=us-east-2
  27 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment aws-load-balancer-controller (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 v2_4_7_full3_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster-d3n15-tec
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-08a8329b7a605dd75
  26 │         - --aws-region=us-east-2
  27 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────



v2_4_7_full4_2.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'aws-load-balancer-controller-leader-election-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 v2_4_7_full4_2.yaml:9-14
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - configmaps
  13 │   verbs:
  14 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'aws-load-balancer-controller-leader-election-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 v2_4_7_full4_2.yaml:15-24
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - ''
  17 │   resourceNames:
  18 │   - aws-load-balancer-controller-leader
  19 │   resources:
  20 │   - configmaps
  21 │   verbs:
  22 │   - get
  23 │   - update
  24 └   - patch
────────────────────────────────────────



v2_4_7_full4_3.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 3, CRITICAL: 0)

AVD-KSV-0056 (HIGH): ClusterRole 'aws-load-balancer-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 v2_4_7_full4_3.yaml:55-64
────────────────────────────────────────
  55 ┌ - apiGroups:
  56 │   - ''
  57 │   resources:
  58 │   - services
  59 │   verbs:
  60 │   - get
  61 │   - list
  62 │   - patch
  63 │   - update
  64 └   - watch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'aws-load-balancer-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 v2_4_7_full4_3.yaml:107-116
────────────────────────────────────────
 107 ┌ - apiGroups:
 108 │   - extensions
 109 │   resources:
 110 │   - ingresses
 111 │   verbs:
 112 │   - get
 113 │   - list
 114 │   - patch
 115 │   - update
 116 └   - watch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'aws-load-balancer-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 v2_4_7_full4_3.yaml:132-141
────────────────────────────────────────
 132 ┌ - apiGroups:
 133 │   - networking.k8s.io
 134 │   resources:
 135 │   - ingresses
 136 │   verbs:
 137 │   - get
 138 │   - list
 139 │   - patch
 140 │   - update
 141 └   - watch
────────────────────────────────────────



v2_4_7_full4_6.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'aws-load-balancer-webhook-service' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 v2_4_7_full4_6.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │   - port: 443
  11 │     targetPort: 9443
  12 │   selector:
  13 │     app.kubernetes.io/component: controller
  14 └     app.kubernetes.io/name: aws-load-balancer-controller
────────────────────────────────────────



v2_4_7_full4_7.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 6, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'controller' of Deployment 'aws-load-balancer-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 v2_4_7_full4_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-0ecac7c7538898497
  26 │         - --aws-region=eu-west-2
  27 │         image: codedecode25/aws-load-balancer:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'controller' of 'deployment' 'aws-load-balancer-controller' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 v2_4_7_full4_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-0ecac7c7538898497
  26 │         - --aws-region=eu-west-2
  27 │         image: codedecode25/aws-load-balancer:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'aws-load-balancer-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 v2_4_7_full4_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-0ecac7c7538898497
  26 │         - --aws-region=eu-west-2
  27 │         image: codedecode25/aws-load-balancer:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'aws-load-balancer-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 v2_4_7_full4_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-0ecac7c7538898497
  26 │         - --aws-region=eu-west-2
  27 │         image: codedecode25/aws-load-balancer:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 v2_4_7_full4_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-0ecac7c7538898497
  26 │         - --aws-region=eu-west-2
  27 │         image: codedecode25/aws-load-balancer:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'aws-load-balancer-controller' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 v2_4_7_full4_7.yaml:10-65
────────────────────────────────────────
  10 ┌   replicas: 1
  11 │   selector:
  12 │     matchLabels:
  13 │       app.kubernetes.io/component: controller
  14 │       app.kubernetes.io/name: aws-load-balancer-controller
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 └         app.kubernetes.io/component: controller
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "aws-load-balancer-controller" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 v2_4_7_full4_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-0ecac7c7538898497
  26 │         - --aws-region=eu-west-2
  27 │         image: codedecode25/aws-load-balancer:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 v2_4_7_full4_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-0ecac7c7538898497
  26 │         - --aws-region=eu-west-2
  27 │         image: codedecode25/aws-load-balancer:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment aws-load-balancer-controller (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 v2_4_7_full4_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-0ecac7c7538898497
  26 │         - --aws-region=eu-west-2
  27 │         image: codedecode25/aws-load-balancer:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────



v2_4_7_full_2.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'aws-load-balancer-controller-leader-election-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 v2_4_7_full_2.yaml:9-14
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - configmaps
  13 │   verbs:
  14 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'aws-load-balancer-controller-leader-election-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 v2_4_7_full_2.yaml:15-24
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - ''
  17 │   resourceNames:
  18 │   - aws-load-balancer-controller-leader
  19 │   resources:
  20 │   - configmaps
  21 │   verbs:
  22 │   - get
  23 │   - update
  24 └   - patch
────────────────────────────────────────



v2_4_7_full_3.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 3, CRITICAL: 0)

AVD-KSV-0056 (HIGH): ClusterRole 'aws-load-balancer-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 v2_4_7_full_3.yaml:55-64
────────────────────────────────────────
  55 ┌ - apiGroups:
  56 │   - ''
  57 │   resources:
  58 │   - services
  59 │   verbs:
  60 │   - get
  61 │   - list
  62 │   - patch
  63 │   - update
  64 └   - watch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'aws-load-balancer-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 v2_4_7_full_3.yaml:107-116
────────────────────────────────────────
 107 ┌ - apiGroups:
 108 │   - extensions
 109 │   resources:
 110 │   - ingresses
 111 │   verbs:
 112 │   - get
 113 │   - list
 114 │   - patch
 115 │   - update
 116 └   - watch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'aws-load-balancer-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 v2_4_7_full_3.yaml:132-141
────────────────────────────────────────
 132 ┌ - apiGroups:
 133 │   - networking.k8s.io
 134 │   resources:
 135 │   - ingresses
 136 │   verbs:
 137 │   - get
 138 │   - list
 139 │   - patch
 140 │   - update
 141 └   - watch
────────────────────────────────────────



v2_4_7_full_6.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'aws-load-balancer-webhook-service' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 v2_4_7_full_6.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │   - port: 443
  11 │     targetPort: 9443
  12 │   selector:
  13 │     app.kubernetes.io/component: controller
  14 └     app.kubernetes.io/name: aws-load-balancer-controller
────────────────────────────────────────



v2_4_7_full_7.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 6, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'controller' of Deployment 'aws-load-balancer-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 v2_4_7_full_7.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=kubedemo2
  24 │         - --ingress-class=alb
  25 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'controller' of 'deployment' 'aws-load-balancer-controller' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 v2_4_7_full_7.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=kubedemo2
  24 │         - --ingress-class=alb
  25 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'aws-load-balancer-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 v2_4_7_full_7.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=kubedemo2
  24 │         - --ingress-class=alb
  25 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'aws-load-balancer-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 v2_4_7_full_7.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=kubedemo2
  24 │         - --ingress-class=alb
  25 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 v2_4_7_full_7.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=kubedemo2
  24 │         - --ingress-class=alb
  25 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'aws-load-balancer-controller' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 v2_4_7_full_7.yaml:10-63
────────────────────────────────────────
  10 ┌   replicas: 1
  11 │   selector:
  12 │     matchLabels:
  13 │       app.kubernetes.io/component: controller
  14 │       app.kubernetes.io/name: aws-load-balancer-controller
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 └         app.kubernetes.io/component: controller
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "aws-load-balancer-controller" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 v2_4_7_full_7.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=kubedemo2
  24 │         - --ingress-class=alb
  25 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 v2_4_7_full_7.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=kubedemo2
  24 │         - --ingress-class=alb
  25 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment aws-load-balancer-controller (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 v2_4_7_full_7.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=kubedemo2
  24 │         - --ingress-class=alb
  25 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.4.7
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────



v2_4_7_full_modified1_2.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'aws-load-balancer-controller-leader-election-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 v2_4_7_full_modified1_2.yaml:9-14
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - configmaps
  13 │   verbs:
  14 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'aws-load-balancer-controller-leader-election-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 v2_4_7_full_modified1_2.yaml:15-24
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - ''
  17 │   resourceNames:
  18 │   - aws-load-balancer-controller-leader
  19 │   resources:
  20 │   - configmaps
  21 │   verbs:
  22 │   - get
  23 │   - update
  24 └   - patch
────────────────────────────────────────



v2_4_7_full_modified1_3.yaml (kubernetes)
=========================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 3, CRITICAL: 0)

AVD-KSV-0056 (HIGH): ClusterRole 'aws-load-balancer-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 v2_4_7_full_modified1_3.yaml:55-64
────────────────────────────────────────
  55 ┌ - apiGroups:
  56 │   - ''
  57 │   resources:
  58 │   - services
  59 │   verbs:
  60 │   - get
  61 │   - list
  62 │   - patch
  63 │   - update
  64 └   - watch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'aws-load-balancer-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 v2_4_7_full_modified1_3.yaml:107-116
────────────────────────────────────────
 107 ┌ - apiGroups:
 108 │   - extensions
 109 │   resources:
 110 │   - ingresses
 111 │   verbs:
 112 │   - get
 113 │   - list
 114 │   - patch
 115 │   - update
 116 └   - watch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'aws-load-balancer-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 v2_4_7_full_modified1_3.yaml:132-141
────────────────────────────────────────
 132 ┌ - apiGroups:
 133 │   - networking.k8s.io
 134 │   resources:
 135 │   - ingresses
 136 │   verbs:
 137 │   - get
 138 │   - list
 139 │   - patch
 140 │   - update
 141 └   - watch
────────────────────────────────────────



v2_4_7_full_modified1_6.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'aws-load-balancer-webhook-service' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 v2_4_7_full_modified1_6.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │   - port: 443
  11 │     targetPort: 9443
  12 │   selector:
  13 │     app.kubernetes.io/component: controller
  14 └     app.kubernetes.io/name: aws-load-balancer-controller
────────────────────────────────────────



v2_4_7_full_modified1_7.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 6, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'controller' of Deployment 'aws-load-balancer-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 v2_4_7_full_modified1_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-0d58401c9b1ad4e57
  26 │         - --aws-region=us-east-2
  27 │         image: codedecode25/aws-load-balancer:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'controller' of 'deployment' 'aws-load-balancer-controller' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 v2_4_7_full_modified1_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-0d58401c9b1ad4e57
  26 │         - --aws-region=us-east-2
  27 │         image: codedecode25/aws-load-balancer:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'aws-load-balancer-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 v2_4_7_full_modified1_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-0d58401c9b1ad4e57
  26 │         - --aws-region=us-east-2
  27 │         image: codedecode25/aws-load-balancer:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'aws-load-balancer-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 v2_4_7_full_modified1_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-0d58401c9b1ad4e57
  26 │         - --aws-region=us-east-2
  27 │         image: codedecode25/aws-load-balancer:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 v2_4_7_full_modified1_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-0d58401c9b1ad4e57
  26 │         - --aws-region=us-east-2
  27 │         image: codedecode25/aws-load-balancer:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'aws-load-balancer-controller' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 v2_4_7_full_modified1_7.yaml:10-65
────────────────────────────────────────
  10 ┌   replicas: 1
  11 │   selector:
  12 │     matchLabels:
  13 │       app.kubernetes.io/component: controller
  14 │       app.kubernetes.io/name: aws-load-balancer-controller
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 └         app.kubernetes.io/component: controller
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "aws-load-balancer-controller" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 v2_4_7_full_modified1_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-0d58401c9b1ad4e57
  26 │         - --aws-region=us-east-2
  27 │         image: codedecode25/aws-load-balancer:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 v2_4_7_full_modified1_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-0d58401c9b1ad4e57
  26 │         - --aws-region=us-east-2
  27 │         image: codedecode25/aws-load-balancer:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment aws-load-balancer-controller (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 v2_4_7_full_modified1_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-0d58401c9b1ad4e57
  26 │         - --aws-region=us-east-2
  27 │         image: codedecode25/aws-load-balancer:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────



v2_4_7_full_modified_2.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'aws-load-balancer-controller-leader-election-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 v2_4_7_full_modified_2.yaml:9-14
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - configmaps
  13 │   verbs:
  14 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'aws-load-balancer-controller-leader-election-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 v2_4_7_full_modified_2.yaml:15-24
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - ''
  17 │   resourceNames:
  18 │   - aws-load-balancer-controller-leader
  19 │   resources:
  20 │   - configmaps
  21 │   verbs:
  22 │   - get
  23 │   - update
  24 └   - patch
────────────────────────────────────────



v2_4_7_full_modified_3.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 3, CRITICAL: 0)

AVD-KSV-0056 (HIGH): ClusterRole 'aws-load-balancer-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 v2_4_7_full_modified_3.yaml:55-64
────────────────────────────────────────
  55 ┌ - apiGroups:
  56 │   - ''
  57 │   resources:
  58 │   - services
  59 │   verbs:
  60 │   - get
  61 │   - list
  62 │   - patch
  63 │   - update
  64 └   - watch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'aws-load-balancer-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 v2_4_7_full_modified_3.yaml:107-116
────────────────────────────────────────
 107 ┌ - apiGroups:
 108 │   - extensions
 109 │   resources:
 110 │   - ingresses
 111 │   verbs:
 112 │   - get
 113 │   - list
 114 │   - patch
 115 │   - update
 116 └   - watch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'aws-load-balancer-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 v2_4_7_full_modified_3.yaml:132-141
────────────────────────────────────────
 132 ┌ - apiGroups:
 133 │   - networking.k8s.io
 134 │   resources:
 135 │   - ingresses
 136 │   verbs:
 137 │   - get
 138 │   - list
 139 │   - patch
 140 │   - update
 141 └   - watch
────────────────────────────────────────



v2_4_7_full_modified_6.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'aws-load-balancer-webhook-service' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 v2_4_7_full_modified_6.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │   - port: 443
  11 │     targetPort: 9443
  12 │   selector:
  13 │     app.kubernetes.io/component: controller
  14 └     app.kubernetes.io/name: aws-load-balancer-controller
────────────────────────────────────────



v2_4_7_full_modified_7.yaml (kubernetes)
========================================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 6, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'controller' of Deployment 'aws-load-balancer-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 v2_4_7_full_modified_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-078228c09d13712e1
  26 │         - --aws-region=eu-west-2
  27 │         image: codedecode25/aws-load-balancer:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'controller' of 'deployment' 'aws-load-balancer-controller' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 v2_4_7_full_modified_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-078228c09d13712e1
  26 │         - --aws-region=eu-west-2
  27 │         image: codedecode25/aws-load-balancer:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'aws-load-balancer-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 v2_4_7_full_modified_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-078228c09d13712e1
  26 │         - --aws-region=eu-west-2
  27 │         image: codedecode25/aws-load-balancer:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'aws-load-balancer-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 v2_4_7_full_modified_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-078228c09d13712e1
  26 │         - --aws-region=eu-west-2
  27 │         image: codedecode25/aws-load-balancer:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 v2_4_7_full_modified_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-078228c09d13712e1
  26 │         - --aws-region=eu-west-2
  27 │         image: codedecode25/aws-load-balancer:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'aws-load-balancer-controller' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 v2_4_7_full_modified_7.yaml:10-65
────────────────────────────────────────
  10 ┌   replicas: 1
  11 │   selector:
  12 │     matchLabels:
  13 │       app.kubernetes.io/component: controller
  14 │       app.kubernetes.io/name: aws-load-balancer-controller
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 └         app.kubernetes.io/component: controller
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "aws-load-balancer-controller" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 v2_4_7_full_modified_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-078228c09d13712e1
  26 │         - --aws-region=eu-west-2
  27 │         image: codedecode25/aws-load-balancer:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 v2_4_7_full_modified_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-078228c09d13712e1
  26 │         - --aws-region=eu-west-2
  27 │         image: codedecode25/aws-load-balancer:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment aws-load-balancer-controller (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 v2_4_7_full_modified_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-078228c09d13712e1
  26 │         - --aws-region=eu-west-2
  27 │         image: codedecode25/aws-load-balancer:v2.4.7
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────



v2_5_4_full1_2.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'aws-load-balancer-controller-leader-election-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 v2_5_4_full1_2.yaml:9-14
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - configmaps
  13 │   verbs:
  14 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'aws-load-balancer-controller-leader-election-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 v2_5_4_full1_2.yaml:15-24
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - ''
  17 │   resourceNames:
  18 │   - aws-load-balancer-controller-leader
  19 │   resources:
  20 │   - configmaps
  21 │   verbs:
  22 │   - get
  23 │   - update
  24 └   - patch
────────────────────────────────────────



v2_5_4_full1_3.yaml (kubernetes)
================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 3, CRITICAL: 0)

AVD-KSV-0056 (HIGH): ClusterRole 'aws-load-balancer-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 v2_5_4_full1_3.yaml:55-64
────────────────────────────────────────
  55 ┌ - apiGroups:
  56 │   - ''
  57 │   resources:
  58 │   - services
  59 │   verbs:
  60 │   - get
  61 │   - list
  62 │   - patch
  63 │   - update
  64 └   - watch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'aws-load-balancer-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 v2_5_4_full1_3.yaml:107-116
────────────────────────────────────────
 107 ┌ - apiGroups:
 108 │   - extensions
 109 │   resources:
 110 │   - ingresses
 111 │   verbs:
 112 │   - get
 113 │   - list
 114 │   - patch
 115 │   - update
 116 └   - watch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'aws-load-balancer-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 v2_5_4_full1_3.yaml:132-141
────────────────────────────────────────
 132 ┌ - apiGroups:
 133 │   - networking.k8s.io
 134 │   resources:
 135 │   - ingresses
 136 │   verbs:
 137 │   - get
 138 │   - list
 139 │   - patch
 140 │   - update
 141 └   - watch
────────────────────────────────────────



v2_5_4_full1_6.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'aws-load-balancer-webhook-service' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 v2_5_4_full1_6.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │   - port: 443
  11 │     targetPort: 9443
  12 │   selector:
  13 │     app.kubernetes.io/component: controller
  14 └     app.kubernetes.io/name: aws-load-balancer-controller
────────────────────────────────────────



v2_5_4_full1_7.yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 6, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'controller' of Deployment 'aws-load-balancer-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 v2_5_4_full1_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-05a62e5a0d17c96be
  26 │         - --aws-region=us-east-2
  27 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.5.4
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'controller' of 'deployment' 'aws-load-balancer-controller' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 v2_5_4_full1_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-05a62e5a0d17c96be
  26 │         - --aws-region=us-east-2
  27 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.5.4
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'aws-load-balancer-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 v2_5_4_full1_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-05a62e5a0d17c96be
  26 │         - --aws-region=us-east-2
  27 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.5.4
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'aws-load-balancer-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 v2_5_4_full1_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-05a62e5a0d17c96be
  26 │         - --aws-region=us-east-2
  27 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.5.4
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 v2_5_4_full1_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-05a62e5a0d17c96be
  26 │         - --aws-region=us-east-2
  27 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.5.4
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'aws-load-balancer-controller' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 v2_5_4_full1_7.yaml:10-65
────────────────────────────────────────
  10 ┌   replicas: 1
  11 │   selector:
  12 │     matchLabels:
  13 │       app.kubernetes.io/component: controller
  14 │       app.kubernetes.io/name: aws-load-balancer-controller
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 └         app.kubernetes.io/component: controller
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "aws-load-balancer-controller" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 v2_5_4_full1_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-05a62e5a0d17c96be
  26 │         - --aws-region=us-east-2
  27 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.5.4
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 v2_5_4_full1_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-05a62e5a0d17c96be
  26 │         - --aws-region=us-east-2
  27 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.5.4
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment aws-load-balancer-controller (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 v2_5_4_full1_7.yaml:22-55
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=aws-eks-cluster
  24 │         - --ingress-class=alb
  25 │         - --aws-vpc-id=vpc-05a62e5a0d17c96be
  26 │         - --aws-region=us-east-2
  27 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.5.4
  28 │         livenessProbe:
  29 │           failureThreshold: 2
  30 └           httpGet:
  ..   
────────────────────────────────────────



v2_5_4_full_2.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'aws-load-balancer-controller-leader-election-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 v2_5_4_full_2.yaml:9-14
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - configmaps
  13 │   verbs:
  14 └   - create
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'aws-load-balancer-controller-leader-election-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 v2_5_4_full_2.yaml:15-24
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - ''
  17 │   resourceNames:
  18 │   - aws-load-balancer-controller-leader
  19 │   resources:
  20 │   - configmaps
  21 │   verbs:
  22 │   - get
  23 │   - update
  24 └   - patch
────────────────────────────────────────



v2_5_4_full_3.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 3, CRITICAL: 0)

AVD-KSV-0056 (HIGH): ClusterRole 'aws-load-balancer-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 v2_5_4_full_3.yaml:55-64
────────────────────────────────────────
  55 ┌ - apiGroups:
  56 │   - ''
  57 │   resources:
  58 │   - services
  59 │   verbs:
  60 │   - get
  61 │   - list
  62 │   - patch
  63 │   - update
  64 └   - watch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'aws-load-balancer-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 v2_5_4_full_3.yaml:107-116
────────────────────────────────────────
 107 ┌ - apiGroups:
 108 │   - extensions
 109 │   resources:
 110 │   - ingresses
 111 │   verbs:
 112 │   - get
 113 │   - list
 114 │   - patch
 115 │   - update
 116 └   - watch
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'aws-load-balancer-controller-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 v2_5_4_full_3.yaml:132-141
────────────────────────────────────────
 132 ┌ - apiGroups:
 133 │   - networking.k8s.io
 134 │   resources:
 135 │   - ingresses
 136 │   verbs:
 137 │   - get
 138 │   - list
 139 │   - patch
 140 │   - update
 141 └   - watch
────────────────────────────────────────



v2_5_4_full_6.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'aws-load-balancer-webhook-service' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 v2_5_4_full_6.yaml:9-14
────────────────────────────────────────
   9 ┌   ports:
  10 │   - port: 443
  11 │     targetPort: 9443
  12 │   selector:
  13 │     app.kubernetes.io/component: controller
  14 └     app.kubernetes.io/name: aws-load-balancer-controller
────────────────────────────────────────



v2_5_4_full_7.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 6, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'controller' of Deployment 'aws-load-balancer-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 v2_5_4_full_7.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=kube-cluster
  24 │         - --ingress-class=alb
  25 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.5.4
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'controller' of 'deployment' 'aws-load-balancer-controller' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 v2_5_4_full_7.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=kube-cluster
  24 │         - --ingress-class=alb
  25 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.5.4
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'aws-load-balancer-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 v2_5_4_full_7.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=kube-cluster
  24 │         - --ingress-class=alb
  25 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.5.4
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'aws-load-balancer-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 v2_5_4_full_7.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=kube-cluster
  24 │         - --ingress-class=alb
  25 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.5.4
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 v2_5_4_full_7.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=kube-cluster
  24 │         - --ingress-class=alb
  25 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.5.4
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Deployment 'aws-load-balancer-controller' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 v2_5_4_full_7.yaml:10-63
────────────────────────────────────────
  10 ┌   replicas: 1
  11 │   selector:
  12 │     matchLabels:
  13 │       app.kubernetes.io/component: controller
  14 │       app.kubernetes.io/name: aws-load-balancer-controller
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 └         app.kubernetes.io/component: controller
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "aws-load-balancer-controller" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 v2_5_4_full_7.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=kube-cluster
  24 │         - --ingress-class=alb
  25 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.5.4
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 v2_5_4_full_7.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=kube-cluster
  24 │         - --ingress-class=alb
  25 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.5.4
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment aws-load-balancer-controller (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 v2_5_4_full_7.yaml:22-53
────────────────────────────────────────
  22 ┌       - args:
  23 │         - --cluster-name=kube-cluster
  24 │         - --ingress-class=alb
  25 │         image: public.ecr.aws/eks/aws-load-balancer-controller:v2.5.4
  26 │         livenessProbe:
  27 │           failureThreshold: 2
  28 │           httpGet:
  29 │             path: /healthz
  30 └             port: 61779
  ..   
────────────────────────────────────────



valid-pod.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 valid-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 valid-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-serve-hostname' of 'pod' 'valid-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 valid-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 valid-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 valid-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 valid-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 valid-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 valid-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 valid-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 valid-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 valid-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-serve-hostname" of pod "valid-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 valid-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 valid-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod valid-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 valid-pod.yaml:4-6
────────────────────────────────────────
   4 ┌   name: valid-pod
   5 │   labels:
   6 └     name: valid-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container valid-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod valid-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid-pod.yaml:8-14
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-serve-hostname in pod valid-pod (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 valid-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────



valid-pod1.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 valid-pod1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 valid-pod1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-serve-hostname' of 'pod' 'valid-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 valid-pod1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 valid-pod1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 valid-pod1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 valid-pod1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 valid-pod1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 valid-pod1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 valid-pod1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 valid-pod1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 valid-pod1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-serve-hostname" of pod "valid-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 valid-pod1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 valid-pod1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod valid-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 valid-pod1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: valid-pod
   5 │   labels:
   6 └     name: valid-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container valid-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid-pod1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod valid-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid-pod1.yaml:8-14
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-serve-hostname in pod valid-pod (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 valid-pod1.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────



valid-pod10.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 valid-pod10.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 valid-pod10.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-serve-hostname' of 'pod' 'valid-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 valid-pod10.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 valid-pod10.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 valid-pod10.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 valid-pod10.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 valid-pod10.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 valid-pod10.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 valid-pod10.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 valid-pod10.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 valid-pod10.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-serve-hostname" of pod "valid-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 valid-pod10.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 valid-pod10.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod valid-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 valid-pod10.yaml:4-6
────────────────────────────────────────
   4 ┌   name: valid-pod
   5 │   labels:
   6 └     name: valid-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container valid-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid-pod10.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod valid-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid-pod10.yaml:8-14
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-serve-hostname in pod valid-pod (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 valid-pod10.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────



valid-pod11.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 valid-pod11.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 valid-pod11.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-serve-hostname' of 'pod' 'valid-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 valid-pod11.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 valid-pod11.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 valid-pod11.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 valid-pod11.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 valid-pod11.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 valid-pod11.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 valid-pod11.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 valid-pod11.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 valid-pod11.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-serve-hostname" of pod "valid-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 valid-pod11.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 valid-pod11.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod valid-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 valid-pod11.yaml:4-6
────────────────────────────────────────
   4 ┌   name: valid-pod
   5 │   labels:
   6 └     name: valid-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container valid-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid-pod11.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod valid-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid-pod11.yaml:8-14
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-serve-hostname in pod valid-pod (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 valid-pod11.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────



valid-pod13.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 valid-pod13.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 valid-pod13.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-serve-hostname' of 'pod' 'valid-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 valid-pod13.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 valid-pod13.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 valid-pod13.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 valid-pod13.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 valid-pod13.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 valid-pod13.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 valid-pod13.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 valid-pod13.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 valid-pod13.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-serve-hostname" of pod "valid-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 valid-pod13.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 valid-pod13.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod valid-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 valid-pod13.yaml:4-6
────────────────────────────────────────
   4 ┌   name: valid-pod
   5 │   labels:
   6 └     name: valid-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container valid-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid-pod13.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod valid-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid-pod13.yaml:8-14
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────



valid-pod14.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 valid-pod14.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 valid-pod14.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-serve-hostname' of 'pod' 'valid-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 valid-pod14.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 valid-pod14.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 valid-pod14.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 valid-pod14.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 valid-pod14.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 valid-pod14.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 valid-pod14.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 valid-pod14.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 valid-pod14.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-serve-hostname" of pod "valid-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 valid-pod14.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 valid-pod14.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod valid-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 valid-pod14.yaml:4-6
────────────────────────────────────────
   4 ┌   name: valid-pod
   5 │   labels:
   6 └     name: valid-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container valid-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid-pod14.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod valid-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid-pod14.yaml:8-14
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-serve-hostname in pod valid-pod (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 valid-pod14.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────



valid-pod15.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 valid-pod15.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 valid-pod15.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-serve-hostname' of 'pod' 'valid-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 valid-pod15.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 valid-pod15.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 valid-pod15.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 valid-pod15.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 valid-pod15.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 valid-pod15.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 valid-pod15.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 valid-pod15.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 valid-pod15.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-serve-hostname" of pod "valid-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 valid-pod15.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 valid-pod15.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod valid-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 valid-pod15.yaml:4-6
────────────────────────────────────────
   4 ┌   name: valid-pod
   5 │   labels:
   6 └     name: valid-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container valid-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid-pod15.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod valid-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid-pod15.yaml:8-14
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-serve-hostname in pod valid-pod (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 valid-pod15.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────



valid-pod16.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 valid-pod16.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 valid-pod16.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-serve-hostname' of 'pod' 'valid-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 valid-pod16.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 valid-pod16.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 valid-pod16.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 valid-pod16.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 valid-pod16.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 valid-pod16.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 valid-pod16.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 valid-pod16.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 valid-pod16.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-serve-hostname" of pod "valid-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 valid-pod16.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 valid-pod16.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod valid-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 valid-pod16.yaml:4-6
────────────────────────────────────────
   4 ┌   name: valid-pod
   5 │   labels:
   6 └     name: valid-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container valid-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid-pod16.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod valid-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid-pod16.yaml:8-14
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-serve-hostname in pod valid-pod (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 valid-pod16.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────



valid-pod17.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 valid-pod17.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 valid-pod17.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-serve-hostname' of 'pod' 'valid-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 valid-pod17.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 valid-pod17.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 valid-pod17.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 valid-pod17.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 valid-pod17.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 valid-pod17.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 valid-pod17.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 valid-pod17.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 valid-pod17.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-serve-hostname" of pod "valid-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 valid-pod17.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 valid-pod17.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod valid-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 valid-pod17.yaml:4-6
────────────────────────────────────────
   4 ┌   name: valid-pod
   5 │   labels:
   6 └     name: valid-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container valid-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid-pod17.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod valid-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid-pod17.yaml:8-14
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-serve-hostname in pod valid-pod (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 valid-pod17.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────



valid-pod18.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 valid-pod18.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 valid-pod18.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-serve-hostname' of 'pod' 'valid-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 valid-pod18.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 valid-pod18.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 valid-pod18.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 valid-pod18.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 valid-pod18.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 valid-pod18.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 valid-pod18.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 valid-pod18.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 valid-pod18.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-serve-hostname" of pod "valid-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 valid-pod18.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 valid-pod18.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod valid-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 valid-pod18.yaml:4-6
────────────────────────────────────────
   4 ┌   name: valid-pod
   5 │   labels:
   6 └     name: valid-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container valid-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid-pod18.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod valid-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid-pod18.yaml:8-14
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-serve-hostname in pod valid-pod (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 valid-pod18.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────



valid-pod2.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 valid-pod2.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 valid-pod2.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-serve-hostname' of 'pod' 'valid-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 valid-pod2.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 valid-pod2.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 valid-pod2.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 valid-pod2.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 valid-pod2.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 valid-pod2.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 valid-pod2.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 valid-pod2.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 valid-pod2.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-serve-hostname" of pod "valid-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 valid-pod2.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 valid-pod2.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod valid-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 valid-pod2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: valid-pod
   5 │   labels:
   6 └     name: valid-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container valid-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid-pod2.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod valid-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid-pod2.yaml:8-14
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-serve-hostname in pod valid-pod (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 valid-pod2.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────



valid-pod3.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 valid-pod3.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 valid-pod3.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-serve-hostname' of 'pod' 'valid-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 valid-pod3.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 valid-pod3.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 valid-pod3.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 valid-pod3.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 valid-pod3.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 valid-pod3.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 valid-pod3.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 valid-pod3.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 valid-pod3.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-serve-hostname" of pod "valid-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 valid-pod3.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 valid-pod3.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod valid-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 valid-pod3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: valid-pod
   5 │   labels:
   6 └     name: valid-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container valid-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid-pod3.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod valid-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid-pod3.yaml:8-14
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-serve-hostname in pod valid-pod (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 valid-pod3.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────



valid-pod4.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 valid-pod4.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 valid-pod4.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-serve-hostname' of 'pod' 'valid-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 valid-pod4.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 valid-pod4.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 valid-pod4.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 valid-pod4.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 valid-pod4.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 valid-pod4.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 valid-pod4.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 valid-pod4.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 valid-pod4.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-serve-hostname" of pod "valid-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 valid-pod4.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 valid-pod4.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod valid-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 valid-pod4.yaml:4-6
────────────────────────────────────────
   4 ┌   name: valid-pod
   5 │   labels:
   6 └     name: valid-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container valid-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid-pod4.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod valid-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid-pod4.yaml:8-14
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────



valid-pod5.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 valid-pod5.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 valid-pod5.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-serve-hostname' of 'pod' 'valid-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 valid-pod5.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 valid-pod5.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 valid-pod5.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 valid-pod5.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 valid-pod5.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 valid-pod5.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 valid-pod5.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 valid-pod5.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 valid-pod5.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-serve-hostname" of pod "valid-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 valid-pod5.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 valid-pod5.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod valid-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 valid-pod5.yaml:4-6
────────────────────────────────────────
   4 ┌   name: valid-pod
   5 │   labels:
   6 └     name: valid-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container valid-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid-pod5.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod valid-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid-pod5.yaml:8-14
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────



valid-pod6.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 valid-pod6.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 valid-pod6.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-serve-hostname' of 'pod' 'valid-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 valid-pod6.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 valid-pod6.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 valid-pod6.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 valid-pod6.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 valid-pod6.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 valid-pod6.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 valid-pod6.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 valid-pod6.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 valid-pod6.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-serve-hostname" of pod "valid-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 valid-pod6.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 valid-pod6.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod valid-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 valid-pod6.yaml:4-6
────────────────────────────────────────
   4 ┌   name: valid-pod
   5 │   labels:
   6 └     name: valid-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container valid-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid-pod6.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod valid-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid-pod6.yaml:8-14
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-serve-hostname in pod valid-pod (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 valid-pod6.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────



valid-pod7.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 valid-pod7.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 valid-pod7.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-serve-hostname' of 'pod' 'valid-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 valid-pod7.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 valid-pod7.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 valid-pod7.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 valid-pod7.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 valid-pod7.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 valid-pod7.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 valid-pod7.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 valid-pod7.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 valid-pod7.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-serve-hostname" of pod "valid-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 valid-pod7.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 valid-pod7.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod valid-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 valid-pod7.yaml:4-6
────────────────────────────────────────
   4 ┌   name: valid-pod
   5 │   labels:
   6 └     name: valid-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container valid-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid-pod7.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod valid-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid-pod7.yaml:8-14
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kubernetes-serve-hostname in pod valid-pod (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 valid-pod7.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: registry.k8s.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────



valid-pod8.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 valid-pod8.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 valid-pod8.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-serve-hostname' of 'pod' 'valid-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 valid-pod8.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 valid-pod8.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 valid-pod8.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 valid-pod8.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 valid-pod8.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 valid-pod8.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 valid-pod8.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 valid-pod8.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 valid-pod8.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-serve-hostname" of pod "valid-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 valid-pod8.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 valid-pod8.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod valid-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 valid-pod8.yaml:4-6
────────────────────────────────────────
   4 ┌   name: valid-pod
   5 │   labels:
   6 └     name: valid-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container valid-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid-pod8.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod valid-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid-pod8.yaml:8-14
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────



valid-pod9.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 valid-pod9.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 valid-pod9.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubernetes-serve-hostname' of 'pod' 'valid-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 valid-pod9.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 valid-pod9.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 valid-pod9.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 valid-pod9.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 valid-pod9.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 valid-pod9.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 valid-pod9.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubernetes-serve-hostname' of Pod 'valid-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 valid-pod9.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 valid-pod9.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubernetes-serve-hostname" of pod "valid-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 valid-pod9.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 valid-pod9.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod valid-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 valid-pod9.yaml:4-6
────────────────────────────────────────
   4 ┌   name: valid-pod
   5 │   labels:
   6 └     name: valid-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container valid-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid-pod9.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod valid-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid-pod9.yaml:8-14
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: kubernetes-serve-hostname
  10 │     image: k8s.gcr.io/serve_hostname
  11 │     resources:
  12 │       limits:
  13 │         cpu: "1"
  14 └         memory: 512Mi
────────────────────────────────────────



valid4.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Pod 'valid-nginx' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 valid4.yaml:14-17
────────────────────────────────────────
  14 ┌     - name: nginx
  15 │       image: nginx:1.14.2
  16 │       ports:
  17 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Pod 'valid-nginx' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 valid4.yaml:14-17
────────────────────────────────────────
  14 ┌     - name: nginx
  15 │       image: nginx:1.14.2
  16 │       ports:
  17 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'pod' 'valid-nginx' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 valid4.yaml:14-17
────────────────────────────────────────
  14 ┌     - name: nginx
  15 │       image: nginx:1.14.2
  16 │       ports:
  17 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Pod 'valid-nginx' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 valid4.yaml:14-17
────────────────────────────────────────
  14 ┌     - name: nginx
  15 │       image: nginx:1.14.2
  16 │       ports:
  17 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Pod 'valid-nginx' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 valid4.yaml:14-17
────────────────────────────────────────
  14 ┌     - name: nginx
  15 │       image: nginx:1.14.2
  16 │       ports:
  17 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Pod 'valid-nginx' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 valid4.yaml:14-17
────────────────────────────────────────
  14 ┌     - name: nginx
  15 │       image: nginx:1.14.2
  16 │       ports:
  17 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Pod 'valid-nginx' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 valid4.yaml:14-17
────────────────────────────────────────
  14 ┌     - name: nginx
  15 │       image: nginx:1.14.2
  16 │       ports:
  17 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Pod 'valid-nginx' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 valid4.yaml:14-17
────────────────────────────────────────
  14 ┌     - name: nginx
  15 │       image: nginx:1.14.2
  16 │       ports:
  17 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Pod 'valid-nginx' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 valid4.yaml:14-17
────────────────────────────────────────
  14 ┌     - name: nginx
  15 │       image: nginx:1.14.2
  16 │       ports:
  17 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Pod 'valid-nginx' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 valid4.yaml:14-17
────────────────────────────────────────
  14 ┌     - name: nginx
  15 │       image: nginx:1.14.2
  16 │       ports:
  17 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Pod 'valid-nginx' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 valid4.yaml:14-17
────────────────────────────────────────
  14 ┌     - name: nginx
  15 │       image: nginx:1.14.2
  16 │       ports:
  17 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 valid4.yaml:14-17
────────────────────────────────────────
  14 ┌     - name: nginx
  15 │       image: nginx:1.14.2
  16 │       ports:
  17 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of pod "valid-nginx" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 valid4.yaml:14-17
────────────────────────────────────────
  14 ┌     - name: nginx
  15 │       image: nginx:1.14.2
  16 │       ports:
  17 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 valid4.yaml:14-17
────────────────────────────────────────
  14 ┌     - name: nginx
  15 │       image: nginx:1.14.2
  16 │       ports:
  17 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod valid-nginx in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 valid4.yaml:4-11
────────────────────────────────────────
   4 ┌   name: valid-nginx
   5 │   labels:
   6 │     app.kubernetes.io/name: test-name
   7 │     app.kubernetes.io/instance: test-instance
   8 │     app.kubernetes.io/version: test-version
   9 │     app.kubernetes.io/component: test-component
  10 │     app.kubernetes.io/part-of: test-part-of
  11 └     app.kubernetes.io/managed-by: test-managed-by
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod valid-nginx in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container valid-nginx in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid4.yaml:14-17
────────────────────────────────────────
  14 ┌     - name: nginx
  15 │       image: nginx:1.14.2
  16 │       ports:
  17 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod valid-nginx in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valid4.yaml:13-17
────────────────────────────────────────
  13 ┌   containers:
  14 │     - name: nginx
  15 │       image: nginx:1.14.2
  16 │       ports:
  17 └         - containerPort: 80
────────────────────────────────────────



validPod.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 validPod.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'master' of Pod 'name' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 validPod.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'master' of 'pod' 'name' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 validPod.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 validPod.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 validPod.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'master' of Pod 'name' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 validPod.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 validPod.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 validPod.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 validPod.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 validPod.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 validPod.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 validPod.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "master" of pod "name" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 validPod.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 validPod.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod name in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 validPod.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: redis-master
   6 └   name: name
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container name in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod name in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod.yaml:8-16
────────────────────────────────────────
   8 ┌   containers:
   9 │   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────



validPod1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 validPod1.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'master' of Pod 'name' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 validPod1.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'master' of 'pod' 'name' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 validPod1.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 validPod1.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 validPod1.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'master' of Pod 'name' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 validPod1.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 validPod1.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 validPod1.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 validPod1.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 validPod1.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 validPod1.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 validPod1.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "master" of pod "name" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 validPod1.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 validPod1.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod name in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 validPod1.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: redis-master
   6 └   name: name
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container name in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod1.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod name in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod1.yaml:8-16
────────────────────────────────────────
   8 ┌   containers:
   9 │   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────



validPod10.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 validPod10.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'master' of Pod 'name' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 validPod10.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'master' of 'pod' 'name' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 validPod10.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 validPod10.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 validPod10.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'master' of Pod 'name' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 validPod10.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 validPod10.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 validPod10.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 validPod10.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 validPod10.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 validPod10.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 validPod10.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "master" of pod "name" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 validPod10.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 validPod10.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod name in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 validPod10.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: redis-master
   6 └   name: name
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container name in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod10.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod name in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod10.yaml:8-16
────────────────────────────────────────
   8 ┌   containers:
   9 │   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────



validPod11.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 validPod11.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'master' of Pod 'name' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 validPod11.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'master' of 'pod' 'name' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 validPod11.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 validPod11.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 validPod11.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'master' of Pod 'name' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 validPod11.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 validPod11.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 validPod11.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 validPod11.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 validPod11.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 validPod11.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 validPod11.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "master" of pod "name" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 validPod11.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 validPod11.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod name in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 validPod11.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: redis-master
   6 └   name: name
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container name in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod11.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod name in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod11.yaml:8-16
────────────────────────────────────────
   8 ┌   containers:
   9 │   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────



validPod12.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 validPod12.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'master' of Pod 'name' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 validPod12.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'master' of 'pod' 'name' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 validPod12.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 validPod12.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 validPod12.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'master' of Pod 'name' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 validPod12.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 validPod12.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 validPod12.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 validPod12.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 validPod12.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 validPod12.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 validPod12.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "master" of pod "name" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 validPod12.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 validPod12.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod name in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 validPod12.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: redis-master
   6 └   name: name
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container name in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod12.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod name in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod12.yaml:8-16
────────────────────────────────────────
   8 ┌   containers:
   9 │   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────



validPod13.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 validPod13.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'master' of Pod 'name' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 validPod13.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'master' of 'pod' 'name' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 validPod13.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 validPod13.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 validPod13.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'master' of Pod 'name' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 validPod13.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 validPod13.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 validPod13.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 validPod13.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 validPod13.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 validPod13.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 validPod13.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "master" of pod "name" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 validPod13.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 validPod13.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod name in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 validPod13.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: redis-master
   6 └   name: name
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container name in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod13.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod name in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod13.yaml:8-16
────────────────────────────────────────
   8 ┌   containers:
   9 │   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────



validPod14.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 validPod14.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'master' of Pod 'name' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 validPod14.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'master' of 'pod' 'name' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 validPod14.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 validPod14.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 validPod14.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'master' of Pod 'name' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 validPod14.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 validPod14.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 validPod14.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 validPod14.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 validPod14.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 validPod14.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 validPod14.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "master" of pod "name" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 validPod14.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 validPod14.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod name in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 validPod14.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: redis-master
   6 └   name: name
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container name in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod14.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod name in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod14.yaml:8-16
────────────────────────────────────────
   8 ┌   containers:
   9 │   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────



validPod15.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 validPod15.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'master' of Pod 'name' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 validPod15.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'master' of 'pod' 'name' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 validPod15.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 validPod15.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 validPod15.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'master' of Pod 'name' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 validPod15.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 validPod15.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 validPod15.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 validPod15.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 validPod15.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 validPod15.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 validPod15.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "master" of pod "name" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 validPod15.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 validPod15.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod name in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 validPod15.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: redis-master
   6 └   name: name
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container name in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod15.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod name in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod15.yaml:8-16
────────────────────────────────────────
   8 ┌   containers:
   9 │   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────



validPod16.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 validPod16.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'master' of Pod 'name' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 validPod16.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'master' of 'pod' 'name' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 validPod16.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 validPod16.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 validPod16.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'master' of Pod 'name' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 validPod16.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 validPod16.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 validPod16.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 validPod16.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 validPod16.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 validPod16.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 validPod16.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "master" of pod "name" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 validPod16.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 validPod16.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod name in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 validPod16.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: redis-master
   6 └   name: name
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container name in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod16.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod name in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod16.yaml:8-16
────────────────────────────────────────
   8 ┌   containers:
   9 │   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────



validPod17.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 validPod17.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'master' of Pod 'name' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 validPod17.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'master' of 'pod' 'name' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 validPod17.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 validPod17.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 validPod17.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'master' of Pod 'name' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 validPod17.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 validPod17.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 validPod17.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 validPod17.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 validPod17.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 validPod17.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 validPod17.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "master" of pod "name" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 validPod17.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 validPod17.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod name in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 validPod17.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: redis-master
   6 └   name: name
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container name in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod17.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod name in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod17.yaml:8-16
────────────────────────────────────────
   8 ┌   containers:
   9 │   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────



validPod2.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 validPod2.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'master' of Pod 'name' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 validPod2.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'master' of 'pod' 'name' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 validPod2.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 validPod2.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 validPod2.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'master' of Pod 'name' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 validPod2.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 validPod2.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 validPod2.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 validPod2.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 validPod2.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 validPod2.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 validPod2.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "master" of pod "name" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 validPod2.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 validPod2.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod name in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 validPod2.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: redis-master
   6 └   name: name
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container name in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod2.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod name in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod2.yaml:8-16
────────────────────────────────────────
   8 ┌   containers:
   9 │   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────



validPod20.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 validPod20.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'master' of Pod 'name' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 validPod20.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'master' of 'pod' 'name' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 validPod20.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 validPod20.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 validPod20.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'master' of Pod 'name' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 validPod20.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 validPod20.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 validPod20.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 validPod20.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 validPod20.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 validPod20.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 validPod20.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "master" of pod "name" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 validPod20.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 validPod20.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod name in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 validPod20.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: redis-master
   6 └   name: name
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container name in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod20.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod name in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod20.yaml:8-16
────────────────────────────────────────
   8 ┌   containers:
   9 │   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────



validPod21.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 validPod21.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'master' of Pod 'name' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 validPod21.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'master' of 'pod' 'name' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 validPod21.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 validPod21.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 validPod21.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'master' of Pod 'name' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 validPod21.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 validPod21.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 validPod21.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 validPod21.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 validPod21.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 validPod21.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 validPod21.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "master" of pod "name" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 validPod21.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 validPod21.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod name in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 validPod21.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: redis-master
   6 └   name: name
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container name in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod21.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod name in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod21.yaml:8-16
────────────────────────────────────────
   8 ┌   containers:
   9 │   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────



validPod22.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 validPod22.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'master' of Pod 'name' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 validPod22.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'master' of 'pod' 'name' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 validPod22.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 validPod22.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 validPod22.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'master' of Pod 'name' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 validPod22.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 validPod22.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 validPod22.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 validPod22.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 validPod22.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 validPod22.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 validPod22.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "master" of pod "name" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 validPod22.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 validPod22.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod name in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 validPod22.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: redis-master
   6 └   name: name
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container name in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod22.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod name in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod22.yaml:8-16
────────────────────────────────────────
   8 ┌   containers:
   9 │   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────



validPod23.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 validPod23.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'master' of Pod 'name' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 validPod23.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'master' of 'pod' 'name' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 validPod23.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 validPod23.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 validPod23.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'master' of Pod 'name' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 validPod23.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 validPod23.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 validPod23.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 validPod23.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 validPod23.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 validPod23.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 validPod23.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "master" of pod "name" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 validPod23.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 validPod23.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod name in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 validPod23.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: redis-master
   6 └   name: name
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container name in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod23.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod name in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod23.yaml:8-16
────────────────────────────────────────
   8 ┌   containers:
   9 │   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────



validPod24.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 validPod24.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'master' of Pod 'name' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 validPod24.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'master' of 'pod' 'name' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 validPod24.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 validPod24.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 validPod24.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'master' of Pod 'name' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 validPod24.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 validPod24.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 validPod24.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 validPod24.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 validPod24.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 validPod24.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 validPod24.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "master" of pod "name" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 validPod24.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 validPod24.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod name in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 validPod24.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: redis-master
   6 └   name: name
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container name in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod24.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod name in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod24.yaml:8-16
────────────────────────────────────────
   8 ┌   containers:
   9 │   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────



validPod25.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 validPod25.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'master' of Pod 'name' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 validPod25.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'master' of 'pod' 'name' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 validPod25.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 validPod25.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 validPod25.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'master' of Pod 'name' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 validPod25.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 validPod25.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 validPod25.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 validPod25.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 validPod25.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 validPod25.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 validPod25.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "master" of pod "name" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 validPod25.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 validPod25.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod name in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 validPod25.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: redis-master
   6 └   name: name
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container name in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod25.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod name in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod25.yaml:8-16
────────────────────────────────────────
   8 ┌   containers:
   9 │   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────



validPod26.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 validPod26.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'master' of Pod 'name' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 validPod26.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'master' of 'pod' 'name' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 validPod26.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 validPod26.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 validPod26.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'master' of Pod 'name' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 validPod26.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 validPod26.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 validPod26.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 validPod26.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 validPod26.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 validPod26.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 validPod26.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "master" of pod "name" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 validPod26.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 validPod26.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod name in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 validPod26.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: redis-master
   6 └   name: name
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container name in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod26.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod name in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod26.yaml:8-16
────────────────────────────────────────
   8 ┌   containers:
   9 │   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────



validPod3.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 validPod3.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'master' of Pod 'name' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 validPod3.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'master' of 'pod' 'name' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 validPod3.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 validPod3.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 validPod3.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'master' of Pod 'name' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 validPod3.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 validPod3.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 validPod3.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 validPod3.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 validPod3.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 validPod3.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 validPod3.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "master" of pod "name" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 validPod3.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 validPod3.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod name in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 validPod3.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: redis-master
   6 └   name: name
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container name in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod3.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod name in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod3.yaml:8-16
────────────────────────────────────────
   8 ┌   containers:
   9 │   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────



validPod4.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 validPod4.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'master' of Pod 'name' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 validPod4.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'master' of 'pod' 'name' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 validPod4.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 validPod4.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 validPod4.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'master' of Pod 'name' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 validPod4.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 validPod4.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 validPod4.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 validPod4.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 validPod4.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 validPod4.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 validPod4.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "master" of pod "name" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 validPod4.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 validPod4.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod name in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 validPod4.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: redis-master
   6 └   name: name
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container name in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod4.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod name in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod4.yaml:8-16
────────────────────────────────────────
   8 ┌   containers:
   9 │   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────



validPod5.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 validPod5.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'master' of Pod 'name' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 validPod5.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'master' of 'pod' 'name' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 validPod5.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 validPod5.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 validPod5.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'master' of Pod 'name' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 validPod5.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 validPod5.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 validPod5.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 validPod5.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 validPod5.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 validPod5.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 validPod5.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "master" of pod "name" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 validPod5.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 validPod5.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod name in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 validPod5.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: redis-master
   6 └   name: name
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container name in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod5.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod name in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod5.yaml:8-16
────────────────────────────────────────
   8 ┌   containers:
   9 │   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────



validPod6.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 validPod6.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'master' of Pod 'name' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 validPod6.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'master' of 'pod' 'name' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 validPod6.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 validPod6.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 validPod6.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'master' of Pod 'name' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 validPod6.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 validPod6.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 validPod6.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 validPod6.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 validPod6.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 validPod6.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 validPod6.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "master" of pod "name" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 validPod6.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 validPod6.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod name in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 validPod6.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: redis-master
   6 └   name: name
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container name in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod6.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod name in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod6.yaml:8-16
────────────────────────────────────────
   8 ┌   containers:
   9 │   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────



validPod7.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 validPod7.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'master' of Pod 'name' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 validPod7.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'master' of 'pod' 'name' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 validPod7.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 validPod7.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 validPod7.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'master' of Pod 'name' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 validPod7.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 validPod7.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 validPod7.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 validPod7.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 validPod7.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 validPod7.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 validPod7.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "master" of pod "name" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 validPod7.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 validPod7.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod name in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 validPod7.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: redis-master
   6 └   name: name
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container name in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod7.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod name in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod7.yaml:8-16
────────────────────────────────────────
   8 ┌   containers:
   9 │   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────



validPod8.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 validPod8.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'master' of Pod 'name' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 validPod8.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'master' of 'pod' 'name' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 validPod8.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 validPod8.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 validPod8.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'master' of Pod 'name' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 validPod8.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 validPod8.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 validPod8.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 validPod8.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 validPod8.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 validPod8.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 validPod8.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "master" of pod "name" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 validPod8.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 validPod8.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod name in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 validPod8.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: redis-master
   6 └   name: name
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container name in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod8.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod name in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod8.yaml:8-16
────────────────────────────────────────
   8 ┌   containers:
   9 │   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────



validPod9.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 validPod9.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'master' of Pod 'name' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 validPod9.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'master' of 'pod' 'name' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 validPod9.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 validPod9.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'master' of Pod 'name' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 validPod9.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'master' of Pod 'name' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 validPod9.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 validPod9.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'master' of Pod 'name' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 validPod9.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'master' of Pod 'name' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 validPod9.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 validPod9.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'master' of Pod 'name' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 validPod9.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 validPod9.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "master" of pod "name" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 validPod9.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 validPod9.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod name in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 validPod9.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: redis-master
   6 └   name: name
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container name in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod9.yaml:9-16
────────────────────────────────────────
   9 ┌   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod name in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validPod9.yaml:8-16
────────────────────────────────────────
   8 ┌   containers:
   9 │   - args:
  10 │     - this
  11 │     - is
  12 │     - an
  13 │     - ok
  14 │     - command
  15 │     image: gcr.io/fake_project/fake_image:fake_tag
  16 └     name: master
────────────────────────────────────────



validatingwebhook_7.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 101, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'vsphere-webhook' of Deployment 'vsphere-csi-webhook' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 validatingwebhook_7.yaml:29-52
────────────────────────────────────────
  29 ┌       - name: vsphere-webhook
  30 │         image: gcr.io/cloud-provider-vsphere/csi/ci/syncer:latest
  31 │         args:
  32 │         - --operation-mode=WEBHOOK_SERVER
  33 │         - --fss-name=internal-feature-states.csi.vsphere.vmware.com
  34 │         - --fss-namespace=$(CSI_NAMESPACE)
  35 │         imagePullPolicy: Always
  36 │         env:
  37 └         - name: WEBHOOK_CONFIG_PATH
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vsphere-webhook' of Deployment 'vsphere-csi-webhook' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 validatingwebhook_7.yaml:29-52
────────────────────────────────────────
  29 ┌       - name: vsphere-webhook
  30 │         image: gcr.io/cloud-provider-vsphere/csi/ci/syncer:latest
  31 │         args:
  32 │         - --operation-mode=WEBHOOK_SERVER
  33 │         - --fss-name=internal-feature-states.csi.vsphere.vmware.com
  34 │         - --fss-namespace=$(CSI_NAMESPACE)
  35 │         imagePullPolicy: Always
  36 │         env:
  37 └         - name: WEBHOOK_CONFIG_PATH
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vsphere-webhook' of 'deployment' 'vsphere-csi-webhook' in 'vmware-system-csi' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 validatingwebhook_7.yaml:29-52
────────────────────────────────────────
  29 ┌       - name: vsphere-webhook
  30 │         image: gcr.io/cloud-provider-vsphere/csi/ci/syncer:latest
  31 │         args:
  32 │         - --operation-mode=WEBHOOK_SERVER
  33 │         - --fss-name=internal-feature-states.csi.vsphere.vmware.com
  34 │         - --fss-namespace=$(CSI_NAMESPACE)
  35 │         imagePullPolicy: Always
  36 │         env:
  37 └         - name: WEBHOOK_CONFIG_PATH
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vsphere-webhook' of Deployment 'vsphere-csi-webhook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 validatingwebhook_7.yaml:29-52
────────────────────────────────────────
  29 ┌       - name: vsphere-webhook
  30 │         image: gcr.io/cloud-provider-vsphere/csi/ci/syncer:latest
  31 │         args:
  32 │         - --operation-mode=WEBHOOK_SERVER
  33 │         - --fss-name=internal-feature-states.csi.vsphere.vmware.com
  34 │         - --fss-namespace=$(CSI_NAMESPACE)
  35 │         imagePullPolicy: Always
  36 │         env:
  37 └         - name: WEBHOOK_CONFIG_PATH
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vsphere-webhook' of Deployment 'vsphere-csi-webhook' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 validatingwebhook_7.yaml:29-52
────────────────────────────────────────
  29 ┌       - name: vsphere-webhook
  30 │         image: gcr.io/cloud-provider-vsphere/csi/ci/syncer:latest
  31 │         args:
  32 │         - --operation-mode=WEBHOOK_SERVER
  33 │         - --fss-name=internal-feature-states.csi.vsphere.vmware.com
  34 │         - --fss-namespace=$(CSI_NAMESPACE)
  35 │         imagePullPolicy: Always
  36 │         env:
  37 └         - name: WEBHOOK_CONFIG_PATH
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vsphere-webhook' of Deployment 'vsphere-csi-webhook' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 validatingwebhook_7.yaml:29-52
────────────────────────────────────────
  29 ┌       - name: vsphere-webhook
  30 │         image: gcr.io/cloud-provider-vsphere/csi/ci/syncer:latest
  31 │         args:
  32 │         - --operation-mode=WEBHOOK_SERVER
  33 │         - --fss-name=internal-feature-states.csi.vsphere.vmware.com
  34 │         - --fss-namespace=$(CSI_NAMESPACE)
  35 │         imagePullPolicy: Always
  36 │         env:
  37 └         - name: WEBHOOK_CONFIG_PATH
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vsphere-webhook' of Deployment 'vsphere-csi-webhook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 validatingwebhook_7.yaml:29-52
────────────────────────────────────────
  29 ┌       - name: vsphere-webhook
  30 │         image: gcr.io/cloud-provider-vsphere/csi/ci/syncer:latest
  31 │         args:
  32 │         - --operation-mode=WEBHOOK_SERVER
  33 │         - --fss-name=internal-feature-states.csi.vsphere.vmware.com
  34 │         - --fss-namespace=$(CSI_NAMESPACE)
  35 │         imagePullPolicy: Always
  36 │         env:
  37 └         - name: WEBHOOK_CONFIG_PATH
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vsphere-webhook' of Deployment 'vsphere-csi-webhook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 validatingwebhook_7.yaml:29-52
────────────────────────────────────────
  29 ┌       - name: vsphere-webhook
  30 │         image: gcr.io/cloud-provider-vsphere/csi/ci/syncer:latest
  31 │         args:
  32 │         - --operation-mode=WEBHOOK_SERVER
  33 │         - --fss-name=internal-feature-states.csi.vsphere.vmware.com
  34 │         - --fss-namespace=$(CSI_NAMESPACE)
  35 │         imagePullPolicy: Always
  36 │         env:
  37 └         - name: WEBHOOK_CONFIG_PATH
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vsphere-webhook' of Deployment 'vsphere-csi-webhook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 validatingwebhook_7.yaml:29-52
────────────────────────────────────────
  29 ┌       - name: vsphere-webhook
  30 │         image: gcr.io/cloud-provider-vsphere/csi/ci/syncer:latest
  31 │         args:
  32 │         - --operation-mode=WEBHOOK_SERVER
  33 │         - --fss-name=internal-feature-states.csi.vsphere.vmware.com
  34 │         - --fss-namespace=$(CSI_NAMESPACE)
  35 │         imagePullPolicy: Always
  36 │         env:
  37 └         - name: WEBHOOK_CONFIG_PATH
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 validatingwebhook_7.yaml:29-52
────────────────────────────────────────
  29 ┌       - name: vsphere-webhook
  30 │         image: gcr.io/cloud-provider-vsphere/csi/ci/syncer:latest
  31 │         args:
  32 │         - --operation-mode=WEBHOOK_SERVER
  33 │         - --fss-name=internal-feature-states.csi.vsphere.vmware.com
  34 │         - --fss-namespace=$(CSI_NAMESPACE)
  35 │         imagePullPolicy: Always
  36 │         env:
  37 └         - name: WEBHOOK_CONFIG_PATH
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vsphere-webhook" of deployment "vsphere-csi-webhook" in "vmware-system-csi" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 validatingwebhook_7.yaml:29-52
────────────────────────────────────────
  29 ┌       - name: vsphere-webhook
  30 │         image: gcr.io/cloud-provider-vsphere/csi/ci/syncer:latest
  31 │         args:
  32 │         - --operation-mode=WEBHOOK_SERVER
  33 │         - --fss-name=internal-feature-states.csi.vsphere.vmware.com
  34 │         - --fss-namespace=$(CSI_NAMESPACE)
  35 │         imagePullPolicy: Always
  36 │         env:
  37 └         - name: WEBHOOK_CONFIG_PATH
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 validatingwebhook_7.yaml:29-52
────────────────────────────────────────
  29 ┌       - name: vsphere-webhook
  30 │         image: gcr.io/cloud-provider-vsphere/csi/ci/syncer:latest
  31 │         args:
  32 │         - --operation-mode=WEBHOOK_SERVER
  33 │         - --fss-name=internal-feature-states.csi.vsphere.vmware.com
  34 │         - --fss-namespace=$(CSI_NAMESPACE)
  35 │         imagePullPolicy: Always
  36 │         env:
  37 └         - name: WEBHOOK_CONFIG_PATH
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vsphere-csi-webhook in vmware-system-csi namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 validatingwebhook_7.yaml:17-58
────────────────────────────────────────
  17 ┌       serviceAccountName: vsphere-csi-webhook
  18 │       nodeSelector:
  19 │         node-role.kubernetes.io/control-plane: __ANNOTE_MASTER__
  20 │       tolerations:
  21 │       - key: node-role.kubernetes.io/master
  22 │         operator: Exists
  23 │         effect: NoSchedule
  24 │       - key: node-role.kubernetes.io/control-plane
  25 └         operator: Exists
  ..   
────────────────────────────────────────



valkey-client.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'valkey-client' in 'valkey' namespace stores sensitive contents in key(s) or value(s) '{"                                username"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────


AVD-KSV-0109 (HIGH): ConfigMap 'valkey-client' in 'valkey' namespace stores secrets in key(s) or value(s) '{"                                password", "        self.password "}'
════════════════════════════════════════
Storing secrets in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-0109
────────────────────────────────────────



valkey-client_1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'valkey-client' of StatefulSet 'valkey-client' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 valkey-client_1.yaml:20-58
────────────────────────────────────────
  20 ┌       - name: valkey-client
  21 │         image: python:3.10-slim-bullseye
  22 │         workingDir: /locust
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - '# shutdown() {
  27 │ 
  28 └           #   kill -TERM "$pid"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'valkey-client' of StatefulSet 'valkey-client' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 valkey-client_1.yaml:20-58
────────────────────────────────────────
  20 ┌       - name: valkey-client
  21 │         image: python:3.10-slim-bullseye
  22 │         workingDir: /locust
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - '# shutdown() {
  27 │ 
  28 └           #   kill -TERM "$pid"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'valkey-client' of 'statefulset' 'valkey-client' in 'valkey' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 valkey-client_1.yaml:20-58
────────────────────────────────────────
  20 ┌       - name: valkey-client
  21 │         image: python:3.10-slim-bullseye
  22 │         workingDir: /locust
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - '# shutdown() {
  27 │ 
  28 └           #   kill -TERM "$pid"
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'valkey-client' of StatefulSet 'valkey-client' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 valkey-client_1.yaml:20-58
────────────────────────────────────────
  20 ┌       - name: valkey-client
  21 │         image: python:3.10-slim-bullseye
  22 │         workingDir: /locust
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - '# shutdown() {
  27 │ 
  28 └           #   kill -TERM "$pid"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'valkey-client' of StatefulSet 'valkey-client' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 valkey-client_1.yaml:20-58
────────────────────────────────────────
  20 ┌       - name: valkey-client
  21 │         image: python:3.10-slim-bullseye
  22 │         workingDir: /locust
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - '# shutdown() {
  27 │ 
  28 └           #   kill -TERM "$pid"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'valkey-client' of StatefulSet 'valkey-client' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 valkey-client_1.yaml:20-58
────────────────────────────────────────
  20 ┌       - name: valkey-client
  21 │         image: python:3.10-slim-bullseye
  22 │         workingDir: /locust
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - '# shutdown() {
  27 │ 
  28 └           #   kill -TERM "$pid"
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'valkey-client' of StatefulSet 'valkey-client' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 valkey-client_1.yaml:20-58
────────────────────────────────────────
  20 ┌       - name: valkey-client
  21 │         image: python:3.10-slim-bullseye
  22 │         workingDir: /locust
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - '# shutdown() {
  27 │ 
  28 └           #   kill -TERM "$pid"
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'valkey-client' of StatefulSet 'valkey-client' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 valkey-client_1.yaml:20-58
────────────────────────────────────────
  20 ┌       - name: valkey-client
  21 │         image: python:3.10-slim-bullseye
  22 │         workingDir: /locust
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - '# shutdown() {
  27 │ 
  28 └           #   kill -TERM "$pid"
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'valkey-client' of StatefulSet 'valkey-client' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 valkey-client_1.yaml:20-58
────────────────────────────────────────
  20 ┌       - name: valkey-client
  21 │         image: python:3.10-slim-bullseye
  22 │         workingDir: /locust
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - '# shutdown() {
  27 │ 
  28 └           #   kill -TERM "$pid"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'valkey-client' of StatefulSet 'valkey-client' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 valkey-client_1.yaml:20-58
────────────────────────────────────────
  20 ┌       - name: valkey-client
  21 │         image: python:3.10-slim-bullseye
  22 │         workingDir: /locust
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - '# shutdown() {
  27 │ 
  28 └           #   kill -TERM "$pid"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'valkey-client' of StatefulSet 'valkey-client' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 valkey-client_1.yaml:20-58
────────────────────────────────────────
  20 ┌       - name: valkey-client
  21 │         image: python:3.10-slim-bullseye
  22 │         workingDir: /locust
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - '# shutdown() {
  27 │ 
  28 └           #   kill -TERM "$pid"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 valkey-client_1.yaml:20-58
────────────────────────────────────────
  20 ┌       - name: valkey-client
  21 │         image: python:3.10-slim-bullseye
  22 │         workingDir: /locust
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - '# shutdown() {
  27 │ 
  28 └           #   kill -TERM "$pid"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "valkey-client" of statefulset "valkey-client" in "valkey" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 valkey-client_1.yaml:20-58
────────────────────────────────────────
  20 ┌       - name: valkey-client
  21 │         image: python:3.10-slim-bullseye
  22 │         workingDir: /locust
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - '# shutdown() {
  27 │ 
  28 └           #   kill -TERM "$pid"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 valkey-client_1.yaml:20-58
────────────────────────────────────────
  20 ┌       - name: valkey-client
  21 │         image: python:3.10-slim-bullseye
  22 │         workingDir: /locust
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - '# shutdown() {
  27 │ 
  28 └           #   kill -TERM "$pid"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container valkey-client in valkey namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valkey-client_1.yaml:20-58
────────────────────────────────────────
  20 ┌       - name: valkey-client
  21 │         image: python:3.10-slim-bullseye
  22 │         workingDir: /locust
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 │         - '# shutdown() {
  27 │ 
  28 └           #   kill -TERM "$pid"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset valkey-client in valkey namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valkey-client_1.yaml:18-62
────────────────────────────────────────
  18 ┌       terminationGracePeriodSeconds: 20
  19 │       containers:
  20 │       - name: valkey-client
  21 │         image: python:3.10-slim-bullseye
  22 │         workingDir: /locust
  23 │         command:
  24 │         - sh
  25 │         - -c
  26 └         - '# shutdown() {
  ..   
────────────────────────────────────────



valkey-cluster_1.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'valkey' of StatefulSet 'valkey-masters' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 valkey-cluster_1.yaml:35-143
────────────────────────────────────────
  35 ┌       - name: valkey
  36 │         image: valkey/valkey:7-alpine
  37 │         envFrom:
  38 │         - secretRef:
  39 │             name: valkey-pass
  40 │         env:
  41 │         - name: TZ
  42 │           value: America/Sao_Paulo
  43 └         - name: POD_IP
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'valkey' of StatefulSet 'valkey-masters' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 valkey-cluster_1.yaml:35-143
────────────────────────────────────────
  35 ┌       - name: valkey
  36 │         image: valkey/valkey:7-alpine
  37 │         envFrom:
  38 │         - secretRef:
  39 │             name: valkey-pass
  40 │         env:
  41 │         - name: TZ
  42 │           value: America/Sao_Paulo
  43 └         - name: POD_IP
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'valkey' of 'statefulset' 'valkey-masters' in 'valkey' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 valkey-cluster_1.yaml:35-143
────────────────────────────────────────
  35 ┌       - name: valkey
  36 │         image: valkey/valkey:7-alpine
  37 │         envFrom:
  38 │         - secretRef:
  39 │             name: valkey-pass
  40 │         env:
  41 │         - name: TZ
  42 │           value: America/Sao_Paulo
  43 └         - name: POD_IP
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'valkey' of StatefulSet 'valkey-masters' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 valkey-cluster_1.yaml:35-143
────────────────────────────────────────
  35 ┌       - name: valkey
  36 │         image: valkey/valkey:7-alpine
  37 │         envFrom:
  38 │         - secretRef:
  39 │             name: valkey-pass
  40 │         env:
  41 │         - name: TZ
  42 │           value: America/Sao_Paulo
  43 └         - name: POD_IP
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'valkey' of StatefulSet 'valkey-masters' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 valkey-cluster_1.yaml:35-143
────────────────────────────────────────
  35 ┌       - name: valkey
  36 │         image: valkey/valkey:7-alpine
  37 │         envFrom:
  38 │         - secretRef:
  39 │             name: valkey-pass
  40 │         env:
  41 │         - name: TZ
  42 │           value: America/Sao_Paulo
  43 └         - name: POD_IP
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'valkey' of StatefulSet 'valkey-masters' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 valkey-cluster_1.yaml:35-143
────────────────────────────────────────
  35 ┌       - name: valkey
  36 │         image: valkey/valkey:7-alpine
  37 │         envFrom:
  38 │         - secretRef:
  39 │             name: valkey-pass
  40 │         env:
  41 │         - name: TZ
  42 │           value: America/Sao_Paulo
  43 └         - name: POD_IP
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'valkey' of StatefulSet 'valkey-masters' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 valkey-cluster_1.yaml:35-143
────────────────────────────────────────
  35 ┌       - name: valkey
  36 │         image: valkey/valkey:7-alpine
  37 │         envFrom:
  38 │         - secretRef:
  39 │             name: valkey-pass
  40 │         env:
  41 │         - name: TZ
  42 │           value: America/Sao_Paulo
  43 └         - name: POD_IP
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'valkey' of StatefulSet 'valkey-masters' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 valkey-cluster_1.yaml:35-143
────────────────────────────────────────
  35 ┌       - name: valkey
  36 │         image: valkey/valkey:7-alpine
  37 │         envFrom:
  38 │         - secretRef:
  39 │             name: valkey-pass
  40 │         env:
  41 │         - name: TZ
  42 │           value: America/Sao_Paulo
  43 └         - name: POD_IP
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'valkey' of StatefulSet 'valkey-masters' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 valkey-cluster_1.yaml:35-143
────────────────────────────────────────
  35 ┌       - name: valkey
  36 │         image: valkey/valkey:7-alpine
  37 │         envFrom:
  38 │         - secretRef:
  39 │             name: valkey-pass
  40 │         env:
  41 │         - name: TZ
  42 │           value: America/Sao_Paulo
  43 └         - name: POD_IP
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 valkey-cluster_1.yaml:35-143
────────────────────────────────────────
  35 ┌       - name: valkey
  36 │         image: valkey/valkey:7-alpine
  37 │         envFrom:
  38 │         - secretRef:
  39 │             name: valkey-pass
  40 │         env:
  41 │         - name: TZ
  42 │           value: America/Sao_Paulo
  43 └         - name: POD_IP
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "valkey" of statefulset "valkey-masters" in "valkey" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 valkey-cluster_1.yaml:35-143
────────────────────────────────────────
  35 ┌       - name: valkey
  36 │         image: valkey/valkey:7-alpine
  37 │         envFrom:
  38 │         - secretRef:
  39 │             name: valkey-pass
  40 │         env:
  41 │         - name: TZ
  42 │           value: America/Sao_Paulo
  43 └         - name: POD_IP
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 valkey-cluster_1.yaml:35-143
────────────────────────────────────────
  35 ┌       - name: valkey
  36 │         image: valkey/valkey:7-alpine
  37 │         envFrom:
  38 │         - secretRef:
  39 │             name: valkey-pass
  40 │         env:
  41 │         - name: TZ
  42 │           value: America/Sao_Paulo
  43 └         - name: POD_IP
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container valkey-masters in valkey namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valkey-cluster_1.yaml:35-143
────────────────────────────────────────
  35 ┌       - name: valkey
  36 │         image: valkey/valkey:7-alpine
  37 │         envFrom:
  38 │         - secretRef:
  39 │             name: valkey-pass
  40 │         env:
  41 │         - name: TZ
  42 │           value: America/Sao_Paulo
  43 └         - name: POD_IP
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset valkey-masters in valkey namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valkey-cluster_1.yaml:20-143
────────────────────────────────────────
  20 ┌       terminationGracePeriodSeconds: 20
  21 │       affinity:
  22 │         podAntiAffinity:
  23 │           preferredDuringSchedulingIgnoredDuringExecution:
  24 │           - podAffinityTerm:
  25 │               labelSelector:
  26 │                 matchLabels:
  27 │                   appCluster: valkey-masters
  28 └               topologyKey: kubernetes.io/hostname
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container valkey in statefulset valkey-masters (namespace: valkey) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 valkey-cluster_1.yaml:35-143
────────────────────────────────────────
  35 ┌       - name: valkey
  36 │         image: valkey/valkey:7-alpine
  37 │         envFrom:
  38 │         - secretRef:
  39 │             name: valkey-pass
  40 │         env:
  41 │         - name: TZ
  42 │           value: America/Sao_Paulo
  43 └         - name: POD_IP
  ..   
────────────────────────────────────────



valkey-cluster_2.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'valkey' of StatefulSet 'valkey-replicas' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 valkey-cluster_2.yaml:35-117
────────────────────────────────────────
  35 ┌       - name: valkey
  36 │         image: valkey/valkey:7-alpine
  37 │         envFrom:
  38 │         - secretRef:
  39 │             name: valkey-pass
  40 │         env:
  41 │         - name: TZ
  42 │           value: America/Sao_Paulo
  43 └         - name: POD_IP
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'valkey' of StatefulSet 'valkey-replicas' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 valkey-cluster_2.yaml:35-117
────────────────────────────────────────
  35 ┌       - name: valkey
  36 │         image: valkey/valkey:7-alpine
  37 │         envFrom:
  38 │         - secretRef:
  39 │             name: valkey-pass
  40 │         env:
  41 │         - name: TZ
  42 │           value: America/Sao_Paulo
  43 └         - name: POD_IP
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'valkey' of 'statefulset' 'valkey-replicas' in 'valkey' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 valkey-cluster_2.yaml:35-117
────────────────────────────────────────
  35 ┌       - name: valkey
  36 │         image: valkey/valkey:7-alpine
  37 │         envFrom:
  38 │         - secretRef:
  39 │             name: valkey-pass
  40 │         env:
  41 │         - name: TZ
  42 │           value: America/Sao_Paulo
  43 └         - name: POD_IP
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'valkey' of StatefulSet 'valkey-replicas' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 valkey-cluster_2.yaml:35-117
────────────────────────────────────────
  35 ┌       - name: valkey
  36 │         image: valkey/valkey:7-alpine
  37 │         envFrom:
  38 │         - secretRef:
  39 │             name: valkey-pass
  40 │         env:
  41 │         - name: TZ
  42 │           value: America/Sao_Paulo
  43 └         - name: POD_IP
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'valkey' of StatefulSet 'valkey-replicas' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 valkey-cluster_2.yaml:35-117
────────────────────────────────────────
  35 ┌       - name: valkey
  36 │         image: valkey/valkey:7-alpine
  37 │         envFrom:
  38 │         - secretRef:
  39 │             name: valkey-pass
  40 │         env:
  41 │         - name: TZ
  42 │           value: America/Sao_Paulo
  43 └         - name: POD_IP
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'valkey' of StatefulSet 'valkey-replicas' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 valkey-cluster_2.yaml:35-117
────────────────────────────────────────
  35 ┌       - name: valkey
  36 │         image: valkey/valkey:7-alpine
  37 │         envFrom:
  38 │         - secretRef:
  39 │             name: valkey-pass
  40 │         env:
  41 │         - name: TZ
  42 │           value: America/Sao_Paulo
  43 └         - name: POD_IP
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'valkey' of StatefulSet 'valkey-replicas' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 valkey-cluster_2.yaml:35-117
────────────────────────────────────────
  35 ┌       - name: valkey
  36 │         image: valkey/valkey:7-alpine
  37 │         envFrom:
  38 │         - secretRef:
  39 │             name: valkey-pass
  40 │         env:
  41 │         - name: TZ
  42 │           value: America/Sao_Paulo
  43 └         - name: POD_IP
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'valkey' of StatefulSet 'valkey-replicas' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 valkey-cluster_2.yaml:35-117
────────────────────────────────────────
  35 ┌       - name: valkey
  36 │         image: valkey/valkey:7-alpine
  37 │         envFrom:
  38 │         - secretRef:
  39 │             name: valkey-pass
  40 │         env:
  41 │         - name: TZ
  42 │           value: America/Sao_Paulo
  43 └         - name: POD_IP
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'valkey' of StatefulSet 'valkey-replicas' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 valkey-cluster_2.yaml:35-117
────────────────────────────────────────
  35 ┌       - name: valkey
  36 │         image: valkey/valkey:7-alpine
  37 │         envFrom:
  38 │         - secretRef:
  39 │             name: valkey-pass
  40 │         env:
  41 │         - name: TZ
  42 │           value: America/Sao_Paulo
  43 └         - name: POD_IP
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 valkey-cluster_2.yaml:35-117
────────────────────────────────────────
  35 ┌       - name: valkey
  36 │         image: valkey/valkey:7-alpine
  37 │         envFrom:
  38 │         - secretRef:
  39 │             name: valkey-pass
  40 │         env:
  41 │         - name: TZ
  42 │           value: America/Sao_Paulo
  43 └         - name: POD_IP
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "valkey" of statefulset "valkey-replicas" in "valkey" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 valkey-cluster_2.yaml:35-117
────────────────────────────────────────
  35 ┌       - name: valkey
  36 │         image: valkey/valkey:7-alpine
  37 │         envFrom:
  38 │         - secretRef:
  39 │             name: valkey-pass
  40 │         env:
  41 │         - name: TZ
  42 │           value: America/Sao_Paulo
  43 └         - name: POD_IP
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 valkey-cluster_2.yaml:35-117
────────────────────────────────────────
  35 ┌       - name: valkey
  36 │         image: valkey/valkey:7-alpine
  37 │         envFrom:
  38 │         - secretRef:
  39 │             name: valkey-pass
  40 │         env:
  41 │         - name: TZ
  42 │           value: America/Sao_Paulo
  43 └         - name: POD_IP
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container valkey-replicas in valkey namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valkey-cluster_2.yaml:35-117
────────────────────────────────────────
  35 ┌       - name: valkey
  36 │         image: valkey/valkey:7-alpine
  37 │         envFrom:
  38 │         - secretRef:
  39 │             name: valkey-pass
  40 │         env:
  41 │         - name: TZ
  42 │           value: America/Sao_Paulo
  43 └         - name: POD_IP
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset valkey-replicas in valkey namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 valkey-cluster_2.yaml:20-117
────────────────────────────────────────
  20 ┌       terminationGracePeriodSeconds: 20
  21 │       affinity:
  22 │         podAntiAffinity:
  23 │           preferredDuringSchedulingIgnoredDuringExecution:
  24 │           - podAffinityTerm:
  25 │               labelSelector:
  26 │                 matchLabels:
  27 │                   appCluster: valkey-replicas
  28 └               topologyKey: kubernetes.io/hostname
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container valkey in statefulset valkey-replicas (namespace: valkey) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 valkey-cluster_2.yaml:35-117
────────────────────────────────────────
  35 ┌       - name: valkey
  36 │         image: valkey/valkey:7-alpine
  37 │         envFrom:
  38 │         - secretRef:
  39 │             name: valkey-pass
  40 │         env:
  41 │         - name: TZ
  42 │           value: America/Sao_Paulo
  43 └         - name: POD_IP
  ..   
────────────────────────────────────────



values1684_10.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-cainjector' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 values1684_10.yaml:20-27
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - secrets
  24 │   verbs:
  25 │   - get
  26 │   - list
  27 └   - watch
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'cert-manager-cainjector' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 values1684_10.yaml:37-47
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - admissionregistration.k8s.io
  39 │   resources:
  40 │   - validatingwebhookconfigurations
  41 │   - mutatingwebhookconfigurations
  42 │   verbs:
  43 │   - get
  44 │   - list
  45 └   - watch
  ..   
────────────────────────────────────────



values1684_11.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-issuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 values1684_11.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



values1684_12.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-clusterissuers' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 values1684_12.yaml:28-38
────────────────────────────────────────
  28 ┌ - apiGroups:
  29 │   - ''
  30 │   resources:
  31 │   - secrets
  32 │   verbs:
  33 │   - get
  34 │   - list
  35 │   - watch
  36 └   - create
  ..   
────────────────────────────────────────



values1684_13.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-certificates' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 values1684_13.yaml:50-61
────────────────────────────────────────
  50 ┌ - apiGroups:
  51 │   - ''
  52 │   resources:
  53 │   - secrets
  54 │   verbs:
  55 │   - get
  56 │   - list
  57 │   - watch
  58 └   - create
  ..   
────────────────────────────────────────



values1684_14.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-orders' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 values1684_14.yaml:51-58
────────────────────────────────────────
  51 ┌ - apiGroups:
  52 │   - ''
  53 │   resources:
  54 │   - secrets
  55 │   verbs:
  56 │   - get
  57 │   - list
  58 └   - watch
────────────────────────────────────────



values1684_15.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 111, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 2, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 values1684_15.yaml:37-44
────────────────────────────────────────
  37 ┌ - apiGroups:
  38 │   - ''
  39 │   resources:
  40 │   - secrets
  41 │   verbs:
  42 │   - get
  43 │   - list
  44 └   - watch
────────────────────────────────────────


AVD-KSV-0041 (CRITICAL): ClusterRole 'cert-manager-controller-challenges' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 values1684_15.yaml:97-104
────────────────────────────────────────
  97 ┌ - apiGroups:
  98 │   - ''
  99 │   resources:
 100 │   - secrets
 101 │   verbs:
 102 │   - get
 103 │   - list
 104 └   - watch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 values1684_15.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 values1684_15.yaml:52-62
────────────────────────────────────────
  52 ┌ - apiGroups:
  53 │   - ''
  54 │   resources:
  55 │   - pods
  56 │   - services
  57 │   verbs:
  58 │   - get
  59 │   - list
  60 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'cert-manager-controller-challenges' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 values1684_15.yaml:63-73
────────────────────────────────────────
  63 ┌ - apiGroups:
  64 │   - networking.k8s.io
  65 │   resources:
  66 │   - ingresses
  67 │   verbs:
  68 │   - get
  69 │   - list
  70 │   - watch
  71 └   - create
  ..   
────────────────────────────────────────



values1684_35.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 values1684_35.yaml:13-23
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   resourceNames:
  18 │   - cert-manager-webhook-ca
  19 │   verbs:
  20 │   - get
  21 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'cert-manager-webhook:dynamic-serving' shouldn't have access to manage secrets in namespace 'cert-manager'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 values1684_35.yaml:24-29
────────────────────────────────────────
  24 ┌ - apiGroups:
  25 │   - ''
  26 │   resources:
  27 │   - secrets
  28 │   verbs:
  29 └   - create
────────────────────────────────────────



values1684_41.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 values1684_41.yaml:36-52
────────────────────────────────────────
  36 ┌       - name: cert-manager-cainjector
  37 │         image: quay.io/jetstack/cert-manager-cainjector:v1.16.2
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --leader-election-namespace=kube-system
  42 │         env:
  43 │         - name: POD_NAMESPACE
  44 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 values1684_41.yaml:36-52
────────────────────────────────────────
  36 ┌       - name: cert-manager-cainjector
  37 │         image: quay.io/jetstack/cert-manager-cainjector:v1.16.2
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --leader-election-namespace=kube-system
  42 │         env:
  43 │         - name: POD_NAMESPACE
  44 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 values1684_41.yaml:36-52
────────────────────────────────────────
  36 ┌       - name: cert-manager-cainjector
  37 │         image: quay.io/jetstack/cert-manager-cainjector:v1.16.2
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --leader-election-namespace=kube-system
  42 │         env:
  43 │         - name: POD_NAMESPACE
  44 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 values1684_41.yaml:36-52
────────────────────────────────────────
  36 ┌       - name: cert-manager-cainjector
  37 │         image: quay.io/jetstack/cert-manager-cainjector:v1.16.2
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --leader-election-namespace=kube-system
  42 │         env:
  43 │         - name: POD_NAMESPACE
  44 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 values1684_41.yaml:36-52
────────────────────────────────────────
  36 ┌       - name: cert-manager-cainjector
  37 │         image: quay.io/jetstack/cert-manager-cainjector:v1.16.2
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --leader-election-namespace=kube-system
  42 │         env:
  43 │         - name: POD_NAMESPACE
  44 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-cainjector' of Deployment 'cert-manager-cainjector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 values1684_41.yaml:36-52
────────────────────────────────────────
  36 ┌       - name: cert-manager-cainjector
  37 │         image: quay.io/jetstack/cert-manager-cainjector:v1.16.2
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --leader-election-namespace=kube-system
  42 │         env:
  43 │         - name: POD_NAMESPACE
  44 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-cainjector in deployment cert-manager-cainjector (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 values1684_41.yaml:36-52
────────────────────────────────────────
  36 ┌       - name: cert-manager-cainjector
  37 │         image: quay.io/jetstack/cert-manager-cainjector:v1.16.2
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --leader-election-namespace=kube-system
  42 │         env:
  43 │         - name: POD_NAMESPACE
  44 └           valueFrom:
  ..   
────────────────────────────────────────



values1684_42.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 values1684_42.yaml:40-77
────────────────────────────────────────
  40 ┌       - name: cert-manager-controller
  41 │         image: quay.io/jetstack/cert-manager-controller:v1.16.2
  42 │         imagePullPolicy: IfNotPresent
  43 │         args:
  44 │         - --v=2
  45 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  46 │         - --leader-election-namespace=kube-system
  47 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.1
  48 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 values1684_42.yaml:40-77
────────────────────────────────────────
  40 ┌       - name: cert-manager-controller
  41 │         image: quay.io/jetstack/cert-manager-controller:v1.16.2
  42 │         imagePullPolicy: IfNotPresent
  43 │         args:
  44 │         - --v=2
  45 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  46 │         - --leader-election-namespace=kube-system
  47 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.1
  48 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 values1684_42.yaml:40-77
────────────────────────────────────────
  40 ┌       - name: cert-manager-controller
  41 │         image: quay.io/jetstack/cert-manager-controller:v1.16.2
  42 │         imagePullPolicy: IfNotPresent
  43 │         args:
  44 │         - --v=2
  45 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  46 │         - --leader-election-namespace=kube-system
  47 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.1
  48 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 values1684_42.yaml:40-77
────────────────────────────────────────
  40 ┌       - name: cert-manager-controller
  41 │         image: quay.io/jetstack/cert-manager-controller:v1.16.2
  42 │         imagePullPolicy: IfNotPresent
  43 │         args:
  44 │         - --v=2
  45 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  46 │         - --leader-election-namespace=kube-system
  47 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.1
  48 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 values1684_42.yaml:40-77
────────────────────────────────────────
  40 ┌       - name: cert-manager-controller
  41 │         image: quay.io/jetstack/cert-manager-controller:v1.16.2
  42 │         imagePullPolicy: IfNotPresent
  43 │         args:
  44 │         - --v=2
  45 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  46 │         - --leader-election-namespace=kube-system
  47 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.1
  48 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-controller' of Deployment 'cert-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 values1684_42.yaml:40-77
────────────────────────────────────────
  40 ┌       - name: cert-manager-controller
  41 │         image: quay.io/jetstack/cert-manager-controller:v1.16.2
  42 │         imagePullPolicy: IfNotPresent
  43 │         args:
  44 │         - --v=2
  45 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  46 │         - --leader-election-namespace=kube-system
  47 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.1
  48 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-controller in deployment cert-manager (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 values1684_42.yaml:40-77
────────────────────────────────────────
  40 ┌       - name: cert-manager-controller
  41 │         image: quay.io/jetstack/cert-manager-controller:v1.16.2
  42 │         imagePullPolicy: IfNotPresent
  43 │         args:
  44 │         - --v=2
  45 │         - --cluster-resource-namespace=$(POD_NAMESPACE)
  46 │         - --leader-election-namespace=kube-system
  47 │         - --acme-http01-solver-image=quay.io/jetstack/cert-manager-acmesolver:v1.14.1
  48 └         - --max-concurrent-challenges=60
  ..   
────────────────────────────────────────



values1684_43.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 107, FAILURES: 7)
Failures: 7 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 values1684_43.yaml:36-84
────────────────────────────────────────
  36 ┌       - name: cert-manager-webhook
  37 │         image: quay.io/jetstack/cert-manager-webhook:v1.16.2
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --secure-port=10250
  42 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  43 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  44 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 values1684_43.yaml:36-84
────────────────────────────────────────
  36 ┌       - name: cert-manager-webhook
  37 │         image: quay.io/jetstack/cert-manager-webhook:v1.16.2
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --secure-port=10250
  42 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  43 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  44 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 values1684_43.yaml:36-84
────────────────────────────────────────
  36 ┌       - name: cert-manager-webhook
  37 │         image: quay.io/jetstack/cert-manager-webhook:v1.16.2
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --secure-port=10250
  42 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  43 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  44 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 values1684_43.yaml:36-84
────────────────────────────────────────
  36 ┌       - name: cert-manager-webhook
  37 │         image: quay.io/jetstack/cert-manager-webhook:v1.16.2
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --secure-port=10250
  42 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  43 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  44 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 values1684_43.yaml:36-84
────────────────────────────────────────
  36 ┌       - name: cert-manager-webhook
  37 │         image: quay.io/jetstack/cert-manager-webhook:v1.16.2
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --secure-port=10250
  42 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  43 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  44 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cert-manager-webhook' of Deployment 'cert-manager-webhook' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 values1684_43.yaml:36-84
────────────────────────────────────────
  36 ┌       - name: cert-manager-webhook
  37 │         image: quay.io/jetstack/cert-manager-webhook:v1.16.2
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --secure-port=10250
  42 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  43 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  44 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cert-manager-webhook in deployment cert-manager-webhook (namespace: cert-manager) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 values1684_43.yaml:36-84
────────────────────────────────────────
  36 ┌       - name: cert-manager-webhook
  37 │         image: quay.io/jetstack/cert-manager-webhook:v1.16.2
  38 │         imagePullPolicy: IfNotPresent
  39 │         args:
  40 │         - --v=2
  41 │         - --secure-port=10250
  42 │         - --dynamic-serving-ca-secret-namespace=$(POD_NAMESPACE)
  43 │         - --dynamic-serving-ca-secret-name=cert-manager-webhook-ca
  44 └         - --dynamic-serving-dns-names=cert-manager-webhook
  ..   
────────────────────────────────────────



values3274_1.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'coupon' of Deployment 'coupon' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 values3274_1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: coupon
  19 │         image: keyval/odigos-demo-coupon:v0.1
  20 │         imagePullPolicy: Always
  21 │         env:
  22 │         - name: MEMBERSHIP_SERVICE_URL
  23 │           value: membership:8080
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'coupon' of Deployment 'coupon' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 values3274_1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: coupon
  19 │         image: keyval/odigos-demo-coupon:v0.1
  20 │         imagePullPolicy: Always
  21 │         env:
  22 │         - name: MEMBERSHIP_SERVICE_URL
  23 │           value: membership:8080
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'coupon' of 'deployment' 'coupon' in 'odigos-labs' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 values3274_1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: coupon
  19 │         image: keyval/odigos-demo-coupon:v0.1
  20 │         imagePullPolicy: Always
  21 │         env:
  22 │         - name: MEMBERSHIP_SERVICE_URL
  23 │           value: membership:8080
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'coupon' of Deployment 'coupon' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 values3274_1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: coupon
  19 │         image: keyval/odigos-demo-coupon:v0.1
  20 │         imagePullPolicy: Always
  21 │         env:
  22 │         - name: MEMBERSHIP_SERVICE_URL
  23 │           value: membership:8080
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'coupon' of Deployment 'coupon' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 values3274_1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: coupon
  19 │         image: keyval/odigos-demo-coupon:v0.1
  20 │         imagePullPolicy: Always
  21 │         env:
  22 │         - name: MEMBERSHIP_SERVICE_URL
  23 │           value: membership:8080
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'coupon' of Deployment 'coupon' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 values3274_1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: coupon
  19 │         image: keyval/odigos-demo-coupon:v0.1
  20 │         imagePullPolicy: Always
  21 │         env:
  22 │         - name: MEMBERSHIP_SERVICE_URL
  23 │           value: membership:8080
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'coupon' of Deployment 'coupon' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 values3274_1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: coupon
  19 │         image: keyval/odigos-demo-coupon:v0.1
  20 │         imagePullPolicy: Always
  21 │         env:
  22 │         - name: MEMBERSHIP_SERVICE_URL
  23 │           value: membership:8080
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'coupon' of Deployment 'coupon' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 values3274_1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: coupon
  19 │         image: keyval/odigos-demo-coupon:v0.1
  20 │         imagePullPolicy: Always
  21 │         env:
  22 │         - name: MEMBERSHIP_SERVICE_URL
  23 │           value: membership:8080
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'coupon' of Deployment 'coupon' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 values3274_1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: coupon
  19 │         image: keyval/odigos-demo-coupon:v0.1
  20 │         imagePullPolicy: Always
  21 │         env:
  22 │         - name: MEMBERSHIP_SERVICE_URL
  23 │           value: membership:8080
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'coupon' of Deployment 'coupon' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 values3274_1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: coupon
  19 │         image: keyval/odigos-demo-coupon:v0.1
  20 │         imagePullPolicy: Always
  21 │         env:
  22 │         - name: MEMBERSHIP_SERVICE_URL
  23 │           value: membership:8080
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'coupon' of Deployment 'coupon' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 values3274_1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: coupon
  19 │         image: keyval/odigos-demo-coupon:v0.1
  20 │         imagePullPolicy: Always
  21 │         env:
  22 │         - name: MEMBERSHIP_SERVICE_URL
  23 │           value: membership:8080
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 values3274_1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: coupon
  19 │         image: keyval/odigos-demo-coupon:v0.1
  20 │         imagePullPolicy: Always
  21 │         env:
  22 │         - name: MEMBERSHIP_SERVICE_URL
  23 │           value: membership:8080
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "coupon" of deployment "coupon" in "odigos-labs" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 values3274_1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: coupon
  19 │         image: keyval/odigos-demo-coupon:v0.1
  20 │         imagePullPolicy: Always
  21 │         env:
  22 │         - name: MEMBERSHIP_SERVICE_URL
  23 │           value: membership:8080
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 values3274_1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: coupon
  19 │         image: keyval/odigos-demo-coupon:v0.1
  20 │         imagePullPolicy: Always
  21 │         env:
  22 │         - name: MEMBERSHIP_SERVICE_URL
  23 │           value: membership:8080
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container coupon in odigos-labs namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 values3274_1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: coupon
  19 │         image: keyval/odigos-demo-coupon:v0.1
  20 │         imagePullPolicy: Always
  21 │         env:
  22 │         - name: MEMBERSHIP_SERVICE_URL
  23 │           value: membership:8080
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment coupon in odigos-labs namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 values3274_1.yaml:17-25
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: coupon
  19 │         image: keyval/odigos-demo-coupon:v0.1
  20 │         imagePullPolicy: Always
  21 │         env:
  22 │         - name: MEMBERSHIP_SERVICE_URL
  23 │           value: membership:8080
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container coupon in deployment coupon (namespace: odigos-labs) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 values3274_1.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: coupon
  19 │         image: keyval/odigos-demo-coupon:v0.1
  20 │         imagePullPolicy: Always
  21 │         env:
  22 │         - name: MEMBERSHIP_SERVICE_URL
  23 │           value: membership:8080
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────



values3274_3.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 98, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'frontend' of Deployment 'frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 values3274_3.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: keyval/odigos-demo-frontend:v0.1
  20 │         imagePullPolicy: Always
  21 │         securityContext:
  22 │           runAsUser: 1000
  23 │         env:
  24 │         - name: INVENTORY_SERVICE_HOST
  25 │           value: inventory:8080
  26 └         - name: PRICING_SERVICE_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'frontend' of Deployment 'frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 values3274_3.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: keyval/odigos-demo-frontend:v0.1
  20 │         imagePullPolicy: Always
  21 │         securityContext:
  22 │           runAsUser: 1000
  23 │         env:
  24 │         - name: INVENTORY_SERVICE_HOST
  25 │           value: inventory:8080
  26 └         - name: PRICING_SERVICE_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'frontend' of 'deployment' 'frontend' in 'odigos-labs' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 values3274_3.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: keyval/odigos-demo-frontend:v0.1
  20 │         imagePullPolicy: Always
  21 │         securityContext:
  22 │           runAsUser: 1000
  23 │         env:
  24 │         - name: INVENTORY_SERVICE_HOST
  25 │           value: inventory:8080
  26 └         - name: PRICING_SERVICE_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'frontend' of Deployment 'frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 values3274_3.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: keyval/odigos-demo-frontend:v0.1
  20 │         imagePullPolicy: Always
  21 │         securityContext:
  22 │           runAsUser: 1000
  23 │         env:
  24 │         - name: INVENTORY_SERVICE_HOST
  25 │           value: inventory:8080
  26 └         - name: PRICING_SERVICE_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'frontend' of Deployment 'frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 values3274_3.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: keyval/odigos-demo-frontend:v0.1
  20 │         imagePullPolicy: Always
  21 │         securityContext:
  22 │           runAsUser: 1000
  23 │         env:
  24 │         - name: INVENTORY_SERVICE_HOST
  25 │           value: inventory:8080
  26 └         - name: PRICING_SERVICE_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'frontend' of Deployment 'frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 values3274_3.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: keyval/odigos-demo-frontend:v0.1
  20 │         imagePullPolicy: Always
  21 │         securityContext:
  22 │           runAsUser: 1000
  23 │         env:
  24 │         - name: INVENTORY_SERVICE_HOST
  25 │           value: inventory:8080
  26 └         - name: PRICING_SERVICE_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'frontend' of Deployment 'frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 values3274_3.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: keyval/odigos-demo-frontend:v0.1
  20 │         imagePullPolicy: Always
  21 │         securityContext:
  22 │           runAsUser: 1000
  23 │         env:
  24 │         - name: INVENTORY_SERVICE_HOST
  25 │           value: inventory:8080
  26 └         - name: PRICING_SERVICE_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'frontend' of Deployment 'frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 values3274_3.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: keyval/odigos-demo-frontend:v0.1
  20 │         imagePullPolicy: Always
  21 │         securityContext:
  22 │           runAsUser: 1000
  23 │         env:
  24 │         - name: INVENTORY_SERVICE_HOST
  25 │           value: inventory:8080
  26 └         - name: PRICING_SERVICE_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'frontend' of Deployment 'frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 values3274_3.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: keyval/odigos-demo-frontend:v0.1
  20 │         imagePullPolicy: Always
  21 │         securityContext:
  22 │           runAsUser: 1000
  23 │         env:
  24 │         - name: INVENTORY_SERVICE_HOST
  25 │           value: inventory:8080
  26 └         - name: PRICING_SERVICE_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'frontend' of Deployment 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 values3274_3.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: keyval/odigos-demo-frontend:v0.1
  20 │         imagePullPolicy: Always
  21 │         securityContext:
  22 │           runAsUser: 1000
  23 │         env:
  24 │         - name: INVENTORY_SERVICE_HOST
  25 │           value: inventory:8080
  26 └         - name: PRICING_SERVICE_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'frontend' of Deployment 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 values3274_3.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: keyval/odigos-demo-frontend:v0.1
  20 │         imagePullPolicy: Always
  21 │         securityContext:
  22 │           runAsUser: 1000
  23 │         env:
  24 │         - name: INVENTORY_SERVICE_HOST
  25 │           value: inventory:8080
  26 └         - name: PRICING_SERVICE_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 values3274_3.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: keyval/odigos-demo-frontend:v0.1
  20 │         imagePullPolicy: Always
  21 │         securityContext:
  22 │           runAsUser: 1000
  23 │         env:
  24 │         - name: INVENTORY_SERVICE_HOST
  25 │           value: inventory:8080
  26 └         - name: PRICING_SERVICE_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "frontend" of deployment "frontend" in "odigos-labs" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 values3274_3.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: keyval/odigos-demo-frontend:v0.1
  20 │         imagePullPolicy: Always
  21 │         securityContext:
  22 │           runAsUser: 1000
  23 │         env:
  24 │         - name: INVENTORY_SERVICE_HOST
  25 │           value: inventory:8080
  26 └         - name: PRICING_SERVICE_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 values3274_3.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: keyval/odigos-demo-frontend:v0.1
  20 │         imagePullPolicy: Always
  21 │         securityContext:
  22 │           runAsUser: 1000
  23 │         env:
  24 │         - name: INVENTORY_SERVICE_HOST
  25 │           value: inventory:8080
  26 └         - name: PRICING_SERVICE_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment frontend in odigos-labs namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 values3274_3.yaml:17-31
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: frontend
  19 │         image: keyval/odigos-demo-frontend:v0.1
  20 │         imagePullPolicy: Always
  21 │         securityContext:
  22 │           runAsUser: 1000
  23 │         env:
  24 │         - name: INVENTORY_SERVICE_HOST
  25 └           value: inventory:8080
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container frontend in deployment frontend (namespace: odigos-labs) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 values3274_3.yaml:18-31
────────────────────────────────────────
  18 ┌       - name: frontend
  19 │         image: keyval/odigos-demo-frontend:v0.1
  20 │         imagePullPolicy: Always
  21 │         securityContext:
  22 │           runAsUser: 1000
  23 │         env:
  24 │         - name: INVENTORY_SERVICE_HOST
  25 │           value: inventory:8080
  26 └         - name: PRICING_SERVICE_HOST
  ..   
────────────────────────────────────────



values3274_5.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'inventory' of Deployment 'inventory' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 values3274_5.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: inventory
  19 │         image: keyval/odigos-demo-inventory:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'inventory' of Deployment 'inventory' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 values3274_5.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: inventory
  19 │         image: keyval/odigos-demo-inventory:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'inventory' of 'deployment' 'inventory' in 'odigos-labs' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 values3274_5.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: inventory
  19 │         image: keyval/odigos-demo-inventory:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'inventory' of Deployment 'inventory' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 values3274_5.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: inventory
  19 │         image: keyval/odigos-demo-inventory:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'inventory' of Deployment 'inventory' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 values3274_5.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: inventory
  19 │         image: keyval/odigos-demo-inventory:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'inventory' of Deployment 'inventory' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 values3274_5.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: inventory
  19 │         image: keyval/odigos-demo-inventory:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'inventory' of Deployment 'inventory' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 values3274_5.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: inventory
  19 │         image: keyval/odigos-demo-inventory:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'inventory' of Deployment 'inventory' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 values3274_5.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: inventory
  19 │         image: keyval/odigos-demo-inventory:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'inventory' of Deployment 'inventory' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 values3274_5.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: inventory
  19 │         image: keyval/odigos-demo-inventory:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'inventory' of Deployment 'inventory' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 values3274_5.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: inventory
  19 │         image: keyval/odigos-demo-inventory:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'inventory' of Deployment 'inventory' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 values3274_5.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: inventory
  19 │         image: keyval/odigos-demo-inventory:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 values3274_5.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: inventory
  19 │         image: keyval/odigos-demo-inventory:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "inventory" of deployment "inventory" in "odigos-labs" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 values3274_5.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: inventory
  19 │         image: keyval/odigos-demo-inventory:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 values3274_5.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: inventory
  19 │         image: keyval/odigos-demo-inventory:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container inventory in odigos-labs namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 values3274_5.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: inventory
  19 │         image: keyval/odigos-demo-inventory:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment inventory in odigos-labs namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 values3274_5.yaml:17-22
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: inventory
  19 │         image: keyval/odigos-demo-inventory:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container inventory in deployment inventory (namespace: odigos-labs) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 values3274_5.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: inventory
  19 │         image: keyval/odigos-demo-inventory:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────



values3274_7.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'membership' of Deployment 'membership' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 values3274_7.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: membership
  19 │         image: keyval/odigos-demo-membership:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'membership' of Deployment 'membership' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 values3274_7.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: membership
  19 │         image: keyval/odigos-demo-membership:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'membership' of 'deployment' 'membership' in 'odigos-labs' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 values3274_7.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: membership
  19 │         image: keyval/odigos-demo-membership:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'membership' of Deployment 'membership' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 values3274_7.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: membership
  19 │         image: keyval/odigos-demo-membership:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'membership' of Deployment 'membership' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 values3274_7.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: membership
  19 │         image: keyval/odigos-demo-membership:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'membership' of Deployment 'membership' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 values3274_7.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: membership
  19 │         image: keyval/odigos-demo-membership:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'membership' of Deployment 'membership' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 values3274_7.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: membership
  19 │         image: keyval/odigos-demo-membership:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'membership' of Deployment 'membership' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 values3274_7.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: membership
  19 │         image: keyval/odigos-demo-membership:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'membership' of Deployment 'membership' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 values3274_7.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: membership
  19 │         image: keyval/odigos-demo-membership:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'membership' of Deployment 'membership' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 values3274_7.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: membership
  19 │         image: keyval/odigos-demo-membership:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'membership' of Deployment 'membership' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 values3274_7.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: membership
  19 │         image: keyval/odigos-demo-membership:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 values3274_7.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: membership
  19 │         image: keyval/odigos-demo-membership:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "membership" of deployment "membership" in "odigos-labs" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 values3274_7.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: membership
  19 │         image: keyval/odigos-demo-membership:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 values3274_7.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: membership
  19 │         image: keyval/odigos-demo-membership:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container membership in odigos-labs namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 values3274_7.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: membership
  19 │         image: keyval/odigos-demo-membership:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment membership in odigos-labs namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 values3274_7.yaml:17-22
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: membership
  19 │         image: keyval/odigos-demo-membership:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container membership in deployment membership (namespace: odigos-labs) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 values3274_7.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: membership
  19 │         image: keyval/odigos-demo-membership:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────



values3274_9.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pricing' of Deployment 'pricing' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 values3274_9.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: pricing
  19 │         image: keyval/odigos-demo-pricing:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pricing' of Deployment 'pricing' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 values3274_9.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: pricing
  19 │         image: keyval/odigos-demo-pricing:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pricing' of 'deployment' 'pricing' in 'odigos-labs' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 values3274_9.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: pricing
  19 │         image: keyval/odigos-demo-pricing:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pricing' of Deployment 'pricing' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 values3274_9.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: pricing
  19 │         image: keyval/odigos-demo-pricing:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pricing' of Deployment 'pricing' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 values3274_9.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: pricing
  19 │         image: keyval/odigos-demo-pricing:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pricing' of Deployment 'pricing' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 values3274_9.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: pricing
  19 │         image: keyval/odigos-demo-pricing:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pricing' of Deployment 'pricing' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 values3274_9.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: pricing
  19 │         image: keyval/odigos-demo-pricing:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pricing' of Deployment 'pricing' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 values3274_9.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: pricing
  19 │         image: keyval/odigos-demo-pricing:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pricing' of Deployment 'pricing' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 values3274_9.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: pricing
  19 │         image: keyval/odigos-demo-pricing:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pricing' of Deployment 'pricing' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 values3274_9.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: pricing
  19 │         image: keyval/odigos-demo-pricing:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pricing' of Deployment 'pricing' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 values3274_9.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: pricing
  19 │         image: keyval/odigos-demo-pricing:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 values3274_9.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: pricing
  19 │         image: keyval/odigos-demo-pricing:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pricing" of deployment "pricing" in "odigos-labs" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 values3274_9.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: pricing
  19 │         image: keyval/odigos-demo-pricing:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 values3274_9.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: pricing
  19 │         image: keyval/odigos-demo-pricing:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pricing in odigos-labs namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 values3274_9.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: pricing
  19 │         image: keyval/odigos-demo-pricing:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment pricing in odigos-labs namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 values3274_9.yaml:17-22
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: pricing
  19 │         image: keyval/odigos-demo-pricing:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container pricing in deployment pricing (namespace: odigos-labs) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 values3274_9.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: pricing
  19 │         image: keyval/odigos-demo-pricing:v0.1
  20 │         imagePullPolicy: Always
  21 │         ports:
  22 └         - containerPort: 8080
────────────────────────────────────────



values3276_1.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'all-in-one' of Deployment 'jaeger' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 values3276_1.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: jaegertracing/all-in-one:latest
  20 └         name: all-in-one
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'all-in-one' of Deployment 'jaeger' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 values3276_1.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: jaegertracing/all-in-one:latest
  20 └         name: all-in-one
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'all-in-one' of 'deployment' 'jaeger' in 'jaeger' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 values3276_1.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: jaegertracing/all-in-one:latest
  20 └         name: all-in-one
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'all-in-one' of Deployment 'jaeger' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 values3276_1.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: jaegertracing/all-in-one:latest
  20 └         name: all-in-one
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'all-in-one' of Deployment 'jaeger' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 values3276_1.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: jaegertracing/all-in-one:latest
  20 └         name: all-in-one
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'all-in-one' of Deployment 'jaeger' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 values3276_1.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: jaegertracing/all-in-one:latest
  20 └         name: all-in-one
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'all-in-one' of Deployment 'jaeger' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 values3276_1.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: jaegertracing/all-in-one:latest
  20 └         name: all-in-one
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'all-in-one' of Deployment 'jaeger' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 values3276_1.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: jaegertracing/all-in-one:latest
  20 └         name: all-in-one
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'all-in-one' of Deployment 'jaeger' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 values3276_1.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: jaegertracing/all-in-one:latest
  20 └         name: all-in-one
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'all-in-one' of Deployment 'jaeger' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 values3276_1.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: jaegertracing/all-in-one:latest
  20 └         name: all-in-one
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'all-in-one' of Deployment 'jaeger' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 values3276_1.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: jaegertracing/all-in-one:latest
  20 └         name: all-in-one
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'all-in-one' of Deployment 'jaeger' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 values3276_1.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: jaegertracing/all-in-one:latest
  20 └         name: all-in-one
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 values3276_1.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: jaegertracing/all-in-one:latest
  20 └         name: all-in-one
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "all-in-one" of deployment "jaeger" in "jaeger" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 values3276_1.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: jaegertracing/all-in-one:latest
  20 └         name: all-in-one
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 values3276_1.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: jaegertracing/all-in-one:latest
  20 └         name: all-in-one
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container jaeger in jaeger namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 values3276_1.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: jaegertracing/all-in-one:latest
  20 └         name: all-in-one
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment jaeger in jaeger namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 values3276_1.yaml:18-20
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: jaegertracing/all-in-one:latest
  20 └         name: all-in-one
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container all-in-one in deployment jaeger (namespace: jaeger) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 values3276_1.yaml:19-20
────────────────────────────────────────
  19 ┌       - image: jaegertracing/all-in-one:latest
  20 └         name: all-in-one
────────────────────────────────────────



var1.yaml (kubernetes)
======================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'contenedor-variables' of Pod 'var-ejemplo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 var1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: contenedor-variables
  10 │     image: gcr.io/google-samples/node-hello:1.0
  11 │     env:
  12 │     - name: NOMBRE
  13 │       value: "CURSO DE KUBERNETES"
  14 │     - name: PROPIETARIO
  15 └       value: "Apasoft Training"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'contenedor-variables' of Pod 'var-ejemplo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 var1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: contenedor-variables
  10 │     image: gcr.io/google-samples/node-hello:1.0
  11 │     env:
  12 │     - name: NOMBRE
  13 │       value: "CURSO DE KUBERNETES"
  14 │     - name: PROPIETARIO
  15 └       value: "Apasoft Training"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'contenedor-variables' of 'pod' 'var-ejemplo' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 var1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: contenedor-variables
  10 │     image: gcr.io/google-samples/node-hello:1.0
  11 │     env:
  12 │     - name: NOMBRE
  13 │       value: "CURSO DE KUBERNETES"
  14 │     - name: PROPIETARIO
  15 └       value: "Apasoft Training"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'contenedor-variables' of Pod 'var-ejemplo' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 var1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: contenedor-variables
  10 │     image: gcr.io/google-samples/node-hello:1.0
  11 │     env:
  12 │     - name: NOMBRE
  13 │       value: "CURSO DE KUBERNETES"
  14 │     - name: PROPIETARIO
  15 └       value: "Apasoft Training"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'contenedor-variables' of Pod 'var-ejemplo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 var1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: contenedor-variables
  10 │     image: gcr.io/google-samples/node-hello:1.0
  11 │     env:
  12 │     - name: NOMBRE
  13 │       value: "CURSO DE KUBERNETES"
  14 │     - name: PROPIETARIO
  15 └       value: "Apasoft Training"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'contenedor-variables' of Pod 'var-ejemplo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 var1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: contenedor-variables
  10 │     image: gcr.io/google-samples/node-hello:1.0
  11 │     env:
  12 │     - name: NOMBRE
  13 │       value: "CURSO DE KUBERNETES"
  14 │     - name: PROPIETARIO
  15 └       value: "Apasoft Training"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'contenedor-variables' of Pod 'var-ejemplo' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 var1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: contenedor-variables
  10 │     image: gcr.io/google-samples/node-hello:1.0
  11 │     env:
  12 │     - name: NOMBRE
  13 │       value: "CURSO DE KUBERNETES"
  14 │     - name: PROPIETARIO
  15 └       value: "Apasoft Training"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'contenedor-variables' of Pod 'var-ejemplo' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 var1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: contenedor-variables
  10 │     image: gcr.io/google-samples/node-hello:1.0
  11 │     env:
  12 │     - name: NOMBRE
  13 │       value: "CURSO DE KUBERNETES"
  14 │     - name: PROPIETARIO
  15 └       value: "Apasoft Training"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'contenedor-variables' of Pod 'var-ejemplo' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 var1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: contenedor-variables
  10 │     image: gcr.io/google-samples/node-hello:1.0
  11 │     env:
  12 │     - name: NOMBRE
  13 │       value: "CURSO DE KUBERNETES"
  14 │     - name: PROPIETARIO
  15 └       value: "Apasoft Training"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'contenedor-variables' of Pod 'var-ejemplo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 var1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: contenedor-variables
  10 │     image: gcr.io/google-samples/node-hello:1.0
  11 │     env:
  12 │     - name: NOMBRE
  13 │       value: "CURSO DE KUBERNETES"
  14 │     - name: PROPIETARIO
  15 └       value: "Apasoft Training"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'contenedor-variables' of Pod 'var-ejemplo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 var1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: contenedor-variables
  10 │     image: gcr.io/google-samples/node-hello:1.0
  11 │     env:
  12 │     - name: NOMBRE
  13 │       value: "CURSO DE KUBERNETES"
  14 │     - name: PROPIETARIO
  15 └       value: "Apasoft Training"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 var1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: contenedor-variables
  10 │     image: gcr.io/google-samples/node-hello:1.0
  11 │     env:
  12 │     - name: NOMBRE
  13 │       value: "CURSO DE KUBERNETES"
  14 │     - name: PROPIETARIO
  15 └       value: "Apasoft Training"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "contenedor-variables" of pod "var-ejemplo" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 var1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: contenedor-variables
  10 │     image: gcr.io/google-samples/node-hello:1.0
  11 │     env:
  12 │     - name: NOMBRE
  13 │       value: "CURSO DE KUBERNETES"
  14 │     - name: PROPIETARIO
  15 └       value: "Apasoft Training"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 var1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: contenedor-variables
  10 │     image: gcr.io/google-samples/node-hello:1.0
  11 │     env:
  12 │     - name: NOMBRE
  13 │       value: "CURSO DE KUBERNETES"
  14 │     - name: PROPIETARIO
  15 └       value: "Apasoft Training"
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod var-ejemplo in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 var1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: var-ejemplo
   5 │   labels:
   6 └     app: variables 
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container var-ejemplo in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 var1.yaml:9-15
────────────────────────────────────────
   9 ┌   - name: contenedor-variables
  10 │     image: gcr.io/google-samples/node-hello:1.0
  11 │     env:
  12 │     - name: NOMBRE
  13 │       value: "CURSO DE KUBERNETES"
  14 │     - name: PROPIETARIO
  15 └       value: "Apasoft Training"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod var-ejemplo in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 var1.yaml:8-15
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: contenedor-variables
  10 │     image: gcr.io/google-samples/node-hello:1.0
  11 │     env:
  12 │     - name: NOMBRE
  13 │       value: "CURSO DE KUBERNETES"
  14 │     - name: PROPIETARIO
  15 └       value: "Apasoft Training"
────────────────────────────────────────



variable-explorer.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'spin-app-cfg' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"logLevel"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



vaulRole.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'vault-auth-role' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 vaulRole.yaml:10-12
────────────────────────────────────────
  10 ┌ - apiGroups: [""]
  11 │   resources: ["serviceaccounts", "configmaps", "persistentvolumeclaims", "secrets"]
  12 └   verbs: ["list"]
────────────────────────────────────────



vault-autounseal.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'vault-autounseal' of Deployment 'vault-autounseal' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vault-autounseal.yaml:16-30
────────────────────────────────────────
  16 ┌         - name: vault-autounseal
  17 │           image: kotdimos/vault-autounseal:latest
  18 │           args:
  19 │             - --config
  20 │             - /etc/vault-autounseal/vault-autounseal.yaml
  21 │           resources:
  22 │             requests:
  23 │               memory: "10Mi"
  24 └               cpu: "10m"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vault-autounseal' of Deployment 'vault-autounseal' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vault-autounseal.yaml:16-30
────────────────────────────────────────
  16 ┌         - name: vault-autounseal
  17 │           image: kotdimos/vault-autounseal:latest
  18 │           args:
  19 │             - --config
  20 │             - /etc/vault-autounseal/vault-autounseal.yaml
  21 │           resources:
  22 │             requests:
  23 │               memory: "10Mi"
  24 └               cpu: "10m"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vault-autounseal' of 'deployment' 'vault-autounseal' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vault-autounseal.yaml:16-30
────────────────────────────────────────
  16 ┌         - name: vault-autounseal
  17 │           image: kotdimos/vault-autounseal:latest
  18 │           args:
  19 │             - --config
  20 │             - /etc/vault-autounseal/vault-autounseal.yaml
  21 │           resources:
  22 │             requests:
  23 │               memory: "10Mi"
  24 └               cpu: "10m"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vault-autounseal' of Deployment 'vault-autounseal' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vault-autounseal.yaml:16-30
────────────────────────────────────────
  16 ┌         - name: vault-autounseal
  17 │           image: kotdimos/vault-autounseal:latest
  18 │           args:
  19 │             - --config
  20 │             - /etc/vault-autounseal/vault-autounseal.yaml
  21 │           resources:
  22 │             requests:
  23 │               memory: "10Mi"
  24 └               cpu: "10m"
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vault-autounseal' of Deployment 'vault-autounseal' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 vault-autounseal.yaml:16-30
────────────────────────────────────────
  16 ┌         - name: vault-autounseal
  17 │           image: kotdimos/vault-autounseal:latest
  18 │           args:
  19 │             - --config
  20 │             - /etc/vault-autounseal/vault-autounseal.yaml
  21 │           resources:
  22 │             requests:
  23 │               memory: "10Mi"
  24 └               cpu: "10m"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vault-autounseal' of Deployment 'vault-autounseal' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vault-autounseal.yaml:16-30
────────────────────────────────────────
  16 ┌         - name: vault-autounseal
  17 │           image: kotdimos/vault-autounseal:latest
  18 │           args:
  19 │             - --config
  20 │             - /etc/vault-autounseal/vault-autounseal.yaml
  21 │           resources:
  22 │             requests:
  23 │               memory: "10Mi"
  24 └               cpu: "10m"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vault-autounseal' of Deployment 'vault-autounseal' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vault-autounseal.yaml:16-30
────────────────────────────────────────
  16 ┌         - name: vault-autounseal
  17 │           image: kotdimos/vault-autounseal:latest
  18 │           args:
  19 │             - --config
  20 │             - /etc/vault-autounseal/vault-autounseal.yaml
  21 │           resources:
  22 │             requests:
  23 │               memory: "10Mi"
  24 └               cpu: "10m"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vault-autounseal' of Deployment 'vault-autounseal' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vault-autounseal.yaml:16-30
────────────────────────────────────────
  16 ┌         - name: vault-autounseal
  17 │           image: kotdimos/vault-autounseal:latest
  18 │           args:
  19 │             - --config
  20 │             - /etc/vault-autounseal/vault-autounseal.yaml
  21 │           resources:
  22 │             requests:
  23 │               memory: "10Mi"
  24 └               cpu: "10m"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vault-autounseal.yaml:16-30
────────────────────────────────────────
  16 ┌         - name: vault-autounseal
  17 │           image: kotdimos/vault-autounseal:latest
  18 │           args:
  19 │             - --config
  20 │             - /etc/vault-autounseal/vault-autounseal.yaml
  21 │           resources:
  22 │             requests:
  23 │               memory: "10Mi"
  24 └               cpu: "10m"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vault-autounseal" of deployment "vault-autounseal" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vault-autounseal.yaml:16-30
────────────────────────────────────────
  16 ┌         - name: vault-autounseal
  17 │           image: kotdimos/vault-autounseal:latest
  18 │           args:
  19 │             - --config
  20 │             - /etc/vault-autounseal/vault-autounseal.yaml
  21 │           resources:
  22 │             requests:
  23 │               memory: "10Mi"
  24 └               cpu: "10m"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vault-autounseal.yaml:16-30
────────────────────────────────────────
  16 ┌         - name: vault-autounseal
  17 │           image: kotdimos/vault-autounseal:latest
  18 │           args:
  19 │             - --config
  20 │             - /etc/vault-autounseal/vault-autounseal.yaml
  21 │           resources:
  22 │             requests:
  23 │               memory: "10Mi"
  24 └               cpu: "10m"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vault-autounseal in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 vault-autounseal.yaml:5
────────────────────────────────────────
   5 [   name: vault-autounseal
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vault-autounseal in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vault-autounseal.yaml:16-30
────────────────────────────────────────
  16 ┌         - name: vault-autounseal
  17 │           image: kotdimos/vault-autounseal:latest
  18 │           args:
  19 │             - --config
  20 │             - /etc/vault-autounseal/vault-autounseal.yaml
  21 │           resources:
  22 │             requests:
  23 │               memory: "10Mi"
  24 └               cpu: "10m"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vault-autounseal in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vault-autounseal.yaml:15-34
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: vault-autounseal
  17 │           image: kotdimos/vault-autounseal:latest
  18 │           args:
  19 │             - --config
  20 │             - /etc/vault-autounseal/vault-autounseal.yaml
  21 │           resources:
  22 │             requests:
  23 └               memory: "10Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vault-autounseal in deployment vault-autounseal (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vault-autounseal.yaml:16-30
────────────────────────────────────────
  16 ┌         - name: vault-autounseal
  17 │           image: kotdimos/vault-autounseal:latest
  18 │           args:
  19 │             - --config
  20 │             - /etc/vault-autounseal/vault-autounseal.yaml
  21 │           resources:
  22 │             requests:
  23 │               memory: "10Mi"
  24 └               cpu: "10m"
  ..   
────────────────────────────────────────



vault-kms-provider.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 2, CRITICAL: 0)

AVD-KSV-0009 (HIGH): Pod 'static-vault-kms-provider' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 vault-kms-provider.yaml:8-59
────────────────────────────────────────
   8 ┌   hostNetwork: true
   9 │   priorityClassName: system-cluster-critical
  10 │   volumes:
  11 │     - name: tls-certs
  12 │       hostPath:
  13 │         path: /home/circleci/project/test_files/certs
  14 │         type: Directory
  15 │     - name: vault-kms-provider-socket-volume
  16 └       hostPath:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vault-kms-provider' of Pod 'static-vault-kms-provider' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vault-kms-provider.yaml:20-59
────────────────────────────────────────
  20 ┌     - name: vault-kms-provider
  21 │       image: "ruddickmg/vault-kms-provider:latest"
  22 │       imagePullPolicy: Always
  23 │       securityContext:
  24 │         allowPrivilegeEscalation: false
  25 │         readOnlyRootFilesystem: true
  26 │         runAsNonRoot: true
  27 │         capabilities:
  28 └           drop:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vault-kms-provider' of Pod 'static-vault-kms-provider' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 vault-kms-provider.yaml:20-59
────────────────────────────────────────
  20 ┌     - name: vault-kms-provider
  21 │       image: "ruddickmg/vault-kms-provider:latest"
  22 │       imagePullPolicy: Always
  23 │       securityContext:
  24 │         allowPrivilegeEscalation: false
  25 │         readOnlyRootFilesystem: true
  26 │         runAsNonRoot: true
  27 │         capabilities:
  28 └           drop:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vault-kms-provider' of Pod 'static-vault-kms-provider' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vault-kms-provider.yaml:20-59
────────────────────────────────────────
  20 ┌     - name: vault-kms-provider
  21 │       image: "ruddickmg/vault-kms-provider:latest"
  22 │       imagePullPolicy: Always
  23 │       securityContext:
  24 │         allowPrivilegeEscalation: false
  25 │         readOnlyRootFilesystem: true
  26 │         runAsNonRoot: true
  27 │         capabilities:
  28 └           drop:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vault-kms-provider' of Pod 'static-vault-kms-provider' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vault-kms-provider.yaml:20-59
────────────────────────────────────────
  20 ┌     - name: vault-kms-provider
  21 │       image: "ruddickmg/vault-kms-provider:latest"
  22 │       imagePullPolicy: Always
  23 │       securityContext:
  24 │         allowPrivilegeEscalation: false
  25 │         readOnlyRootFilesystem: true
  26 │         runAsNonRoot: true
  27 │         capabilities:
  28 └           drop:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vault-kms-provider' of Pod 'static-vault-kms-provider' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vault-kms-provider.yaml:20-59
────────────────────────────────────────
  20 ┌     - name: vault-kms-provider
  21 │       image: "ruddickmg/vault-kms-provider:latest"
  22 │       imagePullPolicy: Always
  23 │       securityContext:
  24 │         allowPrivilegeEscalation: false
  25 │         readOnlyRootFilesystem: true
  26 │         runAsNonRoot: true
  27 │         capabilities:
  28 └           drop:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vault-kms-provider' of Pod 'static-vault-kms-provider' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vault-kms-provider.yaml:20-59
────────────────────────────────────────
  20 ┌     - name: vault-kms-provider
  21 │       image: "ruddickmg/vault-kms-provider:latest"
  22 │       imagePullPolicy: Always
  23 │       securityContext:
  24 │         allowPrivilegeEscalation: false
  25 │         readOnlyRootFilesystem: true
  26 │         runAsNonRoot: true
  27 │         capabilities:
  28 └           drop:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vault-kms-provider' of Pod 'static-vault-kms-provider' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vault-kms-provider.yaml:20-59
────────────────────────────────────────
  20 ┌     - name: vault-kms-provider
  21 │       image: "ruddickmg/vault-kms-provider:latest"
  22 │       imagePullPolicy: Always
  23 │       securityContext:
  24 │         allowPrivilegeEscalation: false
  25 │         readOnlyRootFilesystem: true
  26 │         runAsNonRoot: true
  27 │         capabilities:
  28 └           drop:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'static-vault-kms-provider' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 vault-kms-provider.yaml:8-59
────────────────────────────────────────
   8 ┌   hostNetwork: true
   9 │   priorityClassName: system-cluster-critical
  10 │   volumes:
  11 │     - name: tls-certs
  12 │       hostPath:
  13 │         path: /home/circleci/project/test_files/certs
  14 │         type: Directory
  15 │     - name: vault-kms-provider-socket-volume
  16 └       hostPath:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vault-kms-provider.yaml:20-59
────────────────────────────────────────
  20 ┌     - name: vault-kms-provider
  21 │       image: "ruddickmg/vault-kms-provider:latest"
  22 │       imagePullPolicy: Always
  23 │       securityContext:
  24 │         allowPrivilegeEscalation: false
  25 │         readOnlyRootFilesystem: true
  26 │         runAsNonRoot: true
  27 │         capabilities:
  28 └           drop:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vault-kms-provider" of pod "static-vault-kms-provider" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vault-kms-provider.yaml:20-59
────────────────────────────────────────
  20 ┌     - name: vault-kms-provider
  21 │       image: "ruddickmg/vault-kms-provider:latest"
  22 │       imagePullPolicy: Always
  23 │       securityContext:
  24 │         allowPrivilegeEscalation: false
  25 │         readOnlyRootFilesystem: true
  26 │         runAsNonRoot: true
  27 │         capabilities:
  28 └           drop:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod static-vault-kms-provider in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 vault-kms-provider.yaml:4-6
────────────────────────────────────────
   4 ┌   name: static-vault-kms-provider
   5 │   labels:
   6 └     app: static-vault-kms-provider
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod static-vault-kms-provider in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vault-kms-provider.yaml:8-59
────────────────────────────────────────
   8 ┌   hostNetwork: true
   9 │   priorityClassName: system-cluster-critical
  10 │   volumes:
  11 │     - name: tls-certs
  12 │       hostPath:
  13 │         path: /home/circleci/project/test_files/certs
  14 │         type: Directory
  15 │     - name: vault-kms-provider-socket-volume
  16 └       hostPath:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vault-kms-provider in pod static-vault-kms-provider (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vault-kms-provider.yaml:20-59
────────────────────────────────────────
  20 ┌     - name: vault-kms-provider
  21 │       image: "ruddickmg/vault-kms-provider:latest"
  22 │       imagePullPolicy: Always
  23 │       securityContext:
  24 │         allowPrivilegeEscalation: false
  25 │         readOnlyRootFilesystem: true
  26 │         runAsNonRoot: true
  27 │         capabilities:
  28 └           drop:
  ..   
────────────────────────────────────────



vault-pipeline-feature.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'alpine' of Deployment 'hello-secrets' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vault-pipeline-feature.yaml:19-28
────────────────────────────────────────
  19 ┌         - name: alpine
  20 │           image: alpine
  21 │           command: ["sh", "-c", "echo DOCKER_USERNAME: ${DOCKER_USERNAME} && echo going to sleep... && sleep 10000"]
  22 │           env:
  23 │             - name: DOCKER_USERNAME
  24 │               value: "vault:secret/data/orgs/36/a89460009bc034452ac1b28937c5063b295b5fc163f314d384aeb66eb067d2de#My username on DockerHub is: ${.value.values.username}"
  25 │           resources:
  26 │             limits:
  27 │               memory: "128Mi"
  28 └               cpu: "100m"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'alpine' of Deployment 'hello-secrets' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vault-pipeline-feature.yaml:19-28
────────────────────────────────────────
  19 ┌         - name: alpine
  20 │           image: alpine
  21 │           command: ["sh", "-c", "echo DOCKER_USERNAME: ${DOCKER_USERNAME} && echo going to sleep... && sleep 10000"]
  22 │           env:
  23 │             - name: DOCKER_USERNAME
  24 │               value: "vault:secret/data/orgs/36/a89460009bc034452ac1b28937c5063b295b5fc163f314d384aeb66eb067d2de#My username on DockerHub is: ${.value.values.username}"
  25 │           resources:
  26 │             limits:
  27 │               memory: "128Mi"
  28 └               cpu: "100m"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'alpine' of 'deployment' 'hello-secrets' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vault-pipeline-feature.yaml:19-28
────────────────────────────────────────
  19 ┌         - name: alpine
  20 │           image: alpine
  21 │           command: ["sh", "-c", "echo DOCKER_USERNAME: ${DOCKER_USERNAME} && echo going to sleep... && sleep 10000"]
  22 │           env:
  23 │             - name: DOCKER_USERNAME
  24 │               value: "vault:secret/data/orgs/36/a89460009bc034452ac1b28937c5063b295b5fc163f314d384aeb66eb067d2de#My username on DockerHub is: ${.value.values.username}"
  25 │           resources:
  26 │             limits:
  27 │               memory: "128Mi"
  28 └               cpu: "100m"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'alpine' of Deployment 'hello-secrets' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vault-pipeline-feature.yaml:19-28
────────────────────────────────────────
  19 ┌         - name: alpine
  20 │           image: alpine
  21 │           command: ["sh", "-c", "echo DOCKER_USERNAME: ${DOCKER_USERNAME} && echo going to sleep... && sleep 10000"]
  22 │           env:
  23 │             - name: DOCKER_USERNAME
  24 │               value: "vault:secret/data/orgs/36/a89460009bc034452ac1b28937c5063b295b5fc163f314d384aeb66eb067d2de#My username on DockerHub is: ${.value.values.username}"
  25 │           resources:
  26 │             limits:
  27 │               memory: "128Mi"
  28 └               cpu: "100m"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'alpine' of Deployment 'hello-secrets' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 vault-pipeline-feature.yaml:19-28
────────────────────────────────────────
  19 ┌         - name: alpine
  20 │           image: alpine
  21 │           command: ["sh", "-c", "echo DOCKER_USERNAME: ${DOCKER_USERNAME} && echo going to sleep... && sleep 10000"]
  22 │           env:
  23 │             - name: DOCKER_USERNAME
  24 │               value: "vault:secret/data/orgs/36/a89460009bc034452ac1b28937c5063b295b5fc163f314d384aeb66eb067d2de#My username on DockerHub is: ${.value.values.username}"
  25 │           resources:
  26 │             limits:
  27 │               memory: "128Mi"
  28 └               cpu: "100m"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'alpine' of Deployment 'hello-secrets' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vault-pipeline-feature.yaml:19-28
────────────────────────────────────────
  19 ┌         - name: alpine
  20 │           image: alpine
  21 │           command: ["sh", "-c", "echo DOCKER_USERNAME: ${DOCKER_USERNAME} && echo going to sleep... && sleep 10000"]
  22 │           env:
  23 │             - name: DOCKER_USERNAME
  24 │               value: "vault:secret/data/orgs/36/a89460009bc034452ac1b28937c5063b295b5fc163f314d384aeb66eb067d2de#My username on DockerHub is: ${.value.values.username}"
  25 │           resources:
  26 │             limits:
  27 │               memory: "128Mi"
  28 └               cpu: "100m"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'alpine' of Deployment 'hello-secrets' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vault-pipeline-feature.yaml:19-28
────────────────────────────────────────
  19 ┌         - name: alpine
  20 │           image: alpine
  21 │           command: ["sh", "-c", "echo DOCKER_USERNAME: ${DOCKER_USERNAME} && echo going to sleep... && sleep 10000"]
  22 │           env:
  23 │             - name: DOCKER_USERNAME
  24 │               value: "vault:secret/data/orgs/36/a89460009bc034452ac1b28937c5063b295b5fc163f314d384aeb66eb067d2de#My username on DockerHub is: ${.value.values.username}"
  25 │           resources:
  26 │             limits:
  27 │               memory: "128Mi"
  28 └               cpu: "100m"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'alpine' of Deployment 'hello-secrets' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vault-pipeline-feature.yaml:19-28
────────────────────────────────────────
  19 ┌         - name: alpine
  20 │           image: alpine
  21 │           command: ["sh", "-c", "echo DOCKER_USERNAME: ${DOCKER_USERNAME} && echo going to sleep... && sleep 10000"]
  22 │           env:
  23 │             - name: DOCKER_USERNAME
  24 │               value: "vault:secret/data/orgs/36/a89460009bc034452ac1b28937c5063b295b5fc163f314d384aeb66eb067d2de#My username on DockerHub is: ${.value.values.username}"
  25 │           resources:
  26 │             limits:
  27 │               memory: "128Mi"
  28 └               cpu: "100m"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'alpine' of Deployment 'hello-secrets' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vault-pipeline-feature.yaml:19-28
────────────────────────────────────────
  19 ┌         - name: alpine
  20 │           image: alpine
  21 │           command: ["sh", "-c", "echo DOCKER_USERNAME: ${DOCKER_USERNAME} && echo going to sleep... && sleep 10000"]
  22 │           env:
  23 │             - name: DOCKER_USERNAME
  24 │               value: "vault:secret/data/orgs/36/a89460009bc034452ac1b28937c5063b295b5fc163f314d384aeb66eb067d2de#My username on DockerHub is: ${.value.values.username}"
  25 │           resources:
  26 │             limits:
  27 │               memory: "128Mi"
  28 └               cpu: "100m"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'alpine' of Deployment 'hello-secrets' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vault-pipeline-feature.yaml:19-28
────────────────────────────────────────
  19 ┌         - name: alpine
  20 │           image: alpine
  21 │           command: ["sh", "-c", "echo DOCKER_USERNAME: ${DOCKER_USERNAME} && echo going to sleep... && sleep 10000"]
  22 │           env:
  23 │             - name: DOCKER_USERNAME
  24 │               value: "vault:secret/data/orgs/36/a89460009bc034452ac1b28937c5063b295b5fc163f314d384aeb66eb067d2de#My username on DockerHub is: ${.value.values.username}"
  25 │           resources:
  26 │             limits:
  27 │               memory: "128Mi"
  28 └               cpu: "100m"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vault-pipeline-feature.yaml:19-28
────────────────────────────────────────
  19 ┌         - name: alpine
  20 │           image: alpine
  21 │           command: ["sh", "-c", "echo DOCKER_USERNAME: ${DOCKER_USERNAME} && echo going to sleep... && sleep 10000"]
  22 │           env:
  23 │             - name: DOCKER_USERNAME
  24 │               value: "vault:secret/data/orgs/36/a89460009bc034452ac1b28937c5063b295b5fc163f314d384aeb66eb067d2de#My username on DockerHub is: ${.value.values.username}"
  25 │           resources:
  26 │             limits:
  27 │               memory: "128Mi"
  28 └               cpu: "100m"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "alpine" of deployment "hello-secrets" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vault-pipeline-feature.yaml:19-28
────────────────────────────────────────
  19 ┌         - name: alpine
  20 │           image: alpine
  21 │           command: ["sh", "-c", "echo DOCKER_USERNAME: ${DOCKER_USERNAME} && echo going to sleep... && sleep 10000"]
  22 │           env:
  23 │             - name: DOCKER_USERNAME
  24 │               value: "vault:secret/data/orgs/36/a89460009bc034452ac1b28937c5063b295b5fc163f314d384aeb66eb067d2de#My username on DockerHub is: ${.value.values.username}"
  25 │           resources:
  26 │             limits:
  27 │               memory: "128Mi"
  28 └               cpu: "100m"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vault-pipeline-feature.yaml:19-28
────────────────────────────────────────
  19 ┌         - name: alpine
  20 │           image: alpine
  21 │           command: ["sh", "-c", "echo DOCKER_USERNAME: ${DOCKER_USERNAME} && echo going to sleep... && sleep 10000"]
  22 │           env:
  23 │             - name: DOCKER_USERNAME
  24 │               value: "vault:secret/data/orgs/36/a89460009bc034452ac1b28937c5063b295b5fc163f314d384aeb66eb067d2de#My username on DockerHub is: ${.value.values.username}"
  25 │           resources:
  26 │             limits:
  27 │               memory: "128Mi"
  28 └               cpu: "100m"
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment hello-secrets in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 vault-pipeline-feature.yaml:4
────────────────────────────────────────
   4 [   name: hello-secrets
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hello-secrets in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vault-pipeline-feature.yaml:19-28
────────────────────────────────────────
  19 ┌         - name: alpine
  20 │           image: alpine
  21 │           command: ["sh", "-c", "echo DOCKER_USERNAME: ${DOCKER_USERNAME} && echo going to sleep... && sleep 10000"]
  22 │           env:
  23 │             - name: DOCKER_USERNAME
  24 │               value: "vault:secret/data/orgs/36/a89460009bc034452ac1b28937c5063b295b5fc163f314d384aeb66eb067d2de#My username on DockerHub is: ${.value.values.username}"
  25 │           resources:
  26 │             limits:
  27 │               memory: "128Mi"
  28 └               cpu: "100m"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment hello-secrets in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vault-pipeline-feature.yaml:18-28
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: alpine
  20 │           image: alpine
  21 │           command: ["sh", "-c", "echo DOCKER_USERNAME: ${DOCKER_USERNAME} && echo going to sleep... && sleep 10000"]
  22 │           env:
  23 │             - name: DOCKER_USERNAME
  24 │               value: "vault:secret/data/orgs/36/a89460009bc034452ac1b28937c5063b295b5fc163f314d384aeb66eb067d2de#My username on DockerHub is: ${.value.values.username}"
  25 │           resources:
  26 └             limits:
  ..   
────────────────────────────────────────



vault-raft-storage_15.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 108, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 3, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0014 (HIGH): Container 'sidecar-injector' of Deployment 'vault-agent-injector' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vault-raft-storage_15.yaml:42-124
────────────────────────────────────────
  42 ┌       - name: sidecar-injector
  43 │         resources:
  44 │           limits:
  45 │             cpu: 250m
  46 │             memory: 256Mi
  47 │           requests:
  48 │             cpu: 250m
  49 │             memory: 256Mi
  50 └         image: hashicorp/vault-k8s:1.3.1
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sidecar-injector' of Deployment 'vault-agent-injector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vault-raft-storage_15.yaml:42-124
────────────────────────────────────────
  42 ┌       - name: sidecar-injector
  43 │         resources:
  44 │           limits:
  45 │             cpu: 250m
  46 │             memory: 256Mi
  47 │           requests:
  48 │             cpu: 250m
  49 │             memory: 256Mi
  50 └         image: hashicorp/vault-k8s:1.3.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sidecar-injector' of Deployment 'vault-agent-injector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vault-raft-storage_15.yaml:42-124
────────────────────────────────────────
  42 ┌       - name: sidecar-injector
  43 │         resources:
  44 │           limits:
  45 │             cpu: 250m
  46 │             memory: 256Mi
  47 │           requests:
  48 │             cpu: 250m
  49 │             memory: 256Mi
  50 └         image: hashicorp/vault-k8s:1.3.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vault-raft-storage_15.yaml:42-124
────────────────────────────────────────
  42 ┌       - name: sidecar-injector
  43 │         resources:
  44 │           limits:
  45 │             cpu: 250m
  46 │             memory: 256Mi
  47 │           requests:
  48 │             cpu: 250m
  49 │             memory: 256Mi
  50 └         image: hashicorp/vault-k8s:1.3.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sidecar-injector" of deployment "vault-agent-injector" in "vault" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vault-raft-storage_15.yaml:42-124
────────────────────────────────────────
  42 ┌       - name: sidecar-injector
  43 │         resources:
  44 │           limits:
  45 │             cpu: 250m
  46 │             memory: 256Mi
  47 │           requests:
  48 │             cpu: 250m
  49 │             memory: 256Mi
  50 └         image: hashicorp/vault-k8s:1.3.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container sidecar-injector in deployment vault-agent-injector (namespace: vault) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vault-raft-storage_15.yaml:42-124
────────────────────────────────────────
  42 ┌       - name: sidecar-injector
  43 │         resources:
  44 │           limits:
  45 │             cpu: 250m
  46 │             memory: 256Mi
  47 │           requests:
  48 │             cpu: 250m
  49 │             memory: 256Mi
  50 └         image: hashicorp/vault-k8s:1.3.1
  ..   
────────────────────────────────────────



vault-raft-storage_16.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 6, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'vault' of StatefulSet 'vault' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vault-raft-storage_16.yaml:48-159
────────────────────────────────────────
  48 ┌       - name: vault
  49 │         resources:
  50 │           limits:
  51 │             cpu: 250m
  52 │             memory: 256Mi
  53 │           requests:
  54 │             cpu: 250m
  55 │             memory: 256Mi
  56 └         image: hashicorp/vault:1.15.2
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vault' of 'statefulset' 'vault' in 'vault' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vault-raft-storage_16.yaml:48-159
────────────────────────────────────────
  48 ┌       - name: vault
  49 │         resources:
  50 │           limits:
  51 │             cpu: 250m
  52 │             memory: 256Mi
  53 │           requests:
  54 │             cpu: 250m
  55 │             memory: 256Mi
  56 └         image: hashicorp/vault:1.15.2
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vault' of StatefulSet 'vault' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vault-raft-storage_16.yaml:48-159
────────────────────────────────────────
  48 ┌       - name: vault
  49 │         resources:
  50 │           limits:
  51 │             cpu: 250m
  52 │             memory: 256Mi
  53 │           requests:
  54 │             cpu: 250m
  55 │             memory: 256Mi
  56 └         image: hashicorp/vault:1.15.2
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vault' of StatefulSet 'vault' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vault-raft-storage_16.yaml:48-159
────────────────────────────────────────
  48 ┌       - name: vault
  49 │         resources:
  50 │           limits:
  51 │             cpu: 250m
  52 │             memory: 256Mi
  53 │           requests:
  54 │             cpu: 250m
  55 │             memory: 256Mi
  56 └         image: hashicorp/vault:1.15.2
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vault' of StatefulSet 'vault' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vault-raft-storage_16.yaml:48-159
────────────────────────────────────────
  48 ┌       - name: vault
  49 │         resources:
  50 │           limits:
  51 │             cpu: 250m
  52 │             memory: 256Mi
  53 │           requests:
  54 │             cpu: 250m
  55 │             memory: 256Mi
  56 └         image: hashicorp/vault:1.15.2
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vault-raft-storage_16.yaml:48-159
────────────────────────────────────────
  48 ┌       - name: vault
  49 │         resources:
  50 │           limits:
  51 │             cpu: 250m
  52 │             memory: 256Mi
  53 │           requests:
  54 │             cpu: 250m
  55 │             memory: 256Mi
  56 └         image: hashicorp/vault:1.15.2
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vault" of statefulset "vault" in "vault" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vault-raft-storage_16.yaml:48-159
────────────────────────────────────────
  48 ┌       - name: vault
  49 │         resources:
  50 │           limits:
  51 │             cpu: 250m
  52 │             memory: 256Mi
  53 │           requests:
  54 │             cpu: 250m
  55 │             memory: 256Mi
  56 └         image: hashicorp/vault:1.15.2
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vault-raft-storage_16.yaml:48-159
────────────────────────────────────────
  48 ┌       - name: vault
  49 │         resources:
  50 │           limits:
  51 │             cpu: 250m
  52 │             memory: 256Mi
  53 │           requests:
  54 │             cpu: 250m
  55 │             memory: 256Mi
  56 └         image: hashicorp/vault:1.15.2
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vault in statefulset vault (namespace: vault) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vault-raft-storage_16.yaml:48-159
────────────────────────────────────────
  48 ┌       - name: vault
  49 │         resources:
  50 │           limits:
  51 │             cpu: 250m
  52 │             memory: 256Mi
  53 │           requests:
  54 │             cpu: 250m
  55 │             memory: 256Mi
  56 └         image: hashicorp/vault:1.15.2
  ..   
────────────────────────────────────────



vault-raft-storage_18.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'vault-server-test' of Pod 'vault-server-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vault-raft-storage_18.yaml:10-33
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.15.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/vault-ha-tls/vault.ca
  18 └     - name: VAULT_TLSCERT
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vault-raft-storage_18.yaml:10-33
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.15.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/vault-ha-tls/vault.ca
  18 └     - name: VAULT_TLSCERT
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vault-server-test' of 'pod' 'vault-server-test' in 'vault' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vault-raft-storage_18.yaml:10-33
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.15.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/vault-ha-tls/vault.ca
  18 └     - name: VAULT_TLSCERT
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vault-raft-storage_18.yaml:10-33
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.15.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/vault-ha-tls/vault.ca
  18 └     - name: VAULT_TLSCERT
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vault-server-test' of Pod 'vault-server-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vault-raft-storage_18.yaml:10-33
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.15.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/vault-ha-tls/vault.ca
  18 └     - name: VAULT_TLSCERT
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vault-server-test' of Pod 'vault-server-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vault-raft-storage_18.yaml:10-33
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.15.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/vault-ha-tls/vault.ca
  18 └     - name: VAULT_TLSCERT
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vault-raft-storage_18.yaml:10-33
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.15.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/vault-ha-tls/vault.ca
  18 └     - name: VAULT_TLSCERT
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vault-raft-storage_18.yaml:10-33
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.15.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/vault-ha-tls/vault.ca
  18 └     - name: VAULT_TLSCERT
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vault-raft-storage_18.yaml:10-33
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.15.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/vault-ha-tls/vault.ca
  18 └     - name: VAULT_TLSCERT
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vault-raft-storage_18.yaml:10-33
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.15.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/vault-ha-tls/vault.ca
  18 └     - name: VAULT_TLSCERT
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vault-raft-storage_18.yaml:10-33
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.15.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/vault-ha-tls/vault.ca
  18 └     - name: VAULT_TLSCERT
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vault-raft-storage_18.yaml:10-33
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.15.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/vault-ha-tls/vault.ca
  18 └     - name: VAULT_TLSCERT
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vault-server-test" of pod "vault-server-test" in "vault" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vault-raft-storage_18.yaml:10-33
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.15.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/vault-ha-tls/vault.ca
  18 └     - name: VAULT_TLSCERT
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vault-raft-storage_18.yaml:10-33
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.15.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/vault-ha-tls/vault.ca
  18 └     - name: VAULT_TLSCERT
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vault-server-test in vault namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vault-raft-storage_18.yaml:10-33
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.15.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/vault-ha-tls/vault.ca
  18 └     - name: VAULT_TLSCERT
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod vault-server-test in vault namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vault-raft-storage_18.yaml:9-39
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: vault-server-test
  11 │     image: hashicorp/vault:1.15.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 └       value: /vault/userconfig/vault-ha-tls/vault.ca
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vault-server-test in pod vault-server-test (namespace: vault) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vault-raft-storage_18.yaml:10-33
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.15.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/vault-ha-tls/vault.ca
  18 └     - name: VAULT_TLSCERT
  ..   
────────────────────────────────────────



vault-raft-storage_4.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'vault-agent-injector-clusterrole' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 vault-raft-storage_4.yaml:10-18
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - admissionregistration.k8s.io
  12 │   resources:
  13 │   - mutatingwebhookconfigurations
  14 │   verbs:
  15 │   - get
  16 │   - list
  17 │   - watch
  18 └   - patch
────────────────────────────────────────



vault-raft-storage_7.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'vault-discovery-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 vault-raft-storage_7.yaml:12-21
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - pods
  16 │   verbs:
  17 │   - get
  18 │   - watch
  19 │   - list
  20 │   - update
  21 └   - patch
────────────────────────────────────────



vault-unseal-role.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 111, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'vault-unseal-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 vault-unseal-role.yaml:7-9
────────────────────────────────────────
   7 ┌ - apiGroups: [""]
   8 │   resources: ["pods", "pods/log", "secrets"]
   9 └   verbs: ["get", "list", "create", "watch"]
────────────────────────────────────────


AVD-KSV-0053 (HIGH): Role 'vault-unseal-role' should not have access to resource '["pods/exec"]' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to exec into a container with privileged access to the host or with an attached SA with higher RBAC permissions is a common escalation path to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv053
────────────────────────────────────────
 vault-unseal-role.yaml:10-12
────────────────────────────────────────
  10 ┌ - apiGroups: [""]
  11 │   resources: ["pods/exec"]
  12 └   verbs: ["create", "get"]
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'vault-unseal-role' shouldn't have access to manage secrets in namespace '${NAMESPACE}'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 vault-unseal-role.yaml:7-9
────────────────────────────────────────
   7 ┌ - apiGroups: [""]
   8 │   resources: ["pods", "pods/log", "secrets"]
   9 └   verbs: ["get", "list", "create", "watch"]
────────────────────────────────────────



vault10_1.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0053 (HIGH): Role 'vault-reloader' should not have access to resource '["pods/exec"]' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to exec into a container with privileged access to the host or with an attached SA with higher RBAC permissions is a common escalation path to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv053
────────────────────────────────────────
 vault10_1.yaml:17-22
────────────────────────────────────────
  17 ┌ - apiGroups:
  18 │   - ''
  19 │   resources:
  20 │   - pods/exec
  21 │   verbs:
  22 └   - create
────────────────────────────────────────



vault10_8.yaml (kubernetes)
===========================
Tests: 131 (SUCCESSES: 96, FAILURES: 35)
Failures: 35 (UNKNOWN: 0, LOW: 21, MEDIUM: 9, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'loop' of Deployment 'vault-reloader' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vault10_8.yaml:33-39
────────────────────────────────────────
  33 ┌       - name: loop
  34 │         image: alpine:latest
  35 │         command:
  36 │         - tail
  37 │         - -f
  38 │         - /dev/null
  39 └         resources: {}
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'reloader' of Deployment 'vault-reloader' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vault10_8.yaml:24-31
────────────────────────────────────────
  24 ┌       - name: reloader
  25 │         image: alpine/k8s:latest
  26 │         command:
  27 │         - /bin/bash
  28 │         - -c
  29 │         - --
  30 │         args:
  31 └         - sleep 120; kubectl exec -it vault-0 -- pkill -SIGHUP vault;
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'loop' of Deployment 'vault-reloader' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vault10_8.yaml:33-39
────────────────────────────────────────
  33 ┌       - name: loop
  34 │         image: alpine:latest
  35 │         command:
  36 │         - tail
  37 │         - -f
  38 │         - /dev/null
  39 └         resources: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'reloader' of Deployment 'vault-reloader' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vault10_8.yaml:24-31
────────────────────────────────────────
  24 ┌       - name: reloader
  25 │         image: alpine/k8s:latest
  26 │         command:
  27 │         - /bin/bash
  28 │         - -c
  29 │         - --
  30 │         args:
  31 └         - sleep 120; kubectl exec -it vault-0 -- pkill -SIGHUP vault;
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'loop' of 'deployment' 'vault-reloader' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vault10_8.yaml:33-39
────────────────────────────────────────
  33 ┌       - name: loop
  34 │         image: alpine:latest
  35 │         command:
  36 │         - tail
  37 │         - -f
  38 │         - /dev/null
  39 └         resources: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'reloader' of 'deployment' 'vault-reloader' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vault10_8.yaml:24-31
────────────────────────────────────────
  24 ┌       - name: reloader
  25 │         image: alpine/k8s:latest
  26 │         command:
  27 │         - /bin/bash
  28 │         - -c
  29 │         - --
  30 │         args:
  31 └         - sleep 120; kubectl exec -it vault-0 -- pkill -SIGHUP vault;
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'loop' of Deployment 'vault-reloader' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vault10_8.yaml:33-39
────────────────────────────────────────
  33 ┌       - name: loop
  34 │         image: alpine:latest
  35 │         command:
  36 │         - tail
  37 │         - -f
  38 │         - /dev/null
  39 └         resources: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'reloader' of Deployment 'vault-reloader' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vault10_8.yaml:24-31
────────────────────────────────────────
  24 ┌       - name: reloader
  25 │         image: alpine/k8s:latest
  26 │         command:
  27 │         - /bin/bash
  28 │         - -c
  29 │         - --
  30 │         args:
  31 └         - sleep 120; kubectl exec -it vault-0 -- pkill -SIGHUP vault;
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'loop' of Deployment 'vault-reloader' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vault10_8.yaml:33-39
────────────────────────────────────────
  33 ┌       - name: loop
  34 │         image: alpine:latest
  35 │         command:
  36 │         - tail
  37 │         - -f
  38 │         - /dev/null
  39 └         resources: {}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'reloader' of Deployment 'vault-reloader' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vault10_8.yaml:24-31
────────────────────────────────────────
  24 ┌       - name: reloader
  25 │         image: alpine/k8s:latest
  26 │         command:
  27 │         - /bin/bash
  28 │         - -c
  29 │         - --
  30 │         args:
  31 └         - sleep 120; kubectl exec -it vault-0 -- pkill -SIGHUP vault;
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'loop' of Deployment 'vault-reloader' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 vault10_8.yaml:33-39
────────────────────────────────────────
  33 ┌       - name: loop
  34 │         image: alpine:latest
  35 │         command:
  36 │         - tail
  37 │         - -f
  38 │         - /dev/null
  39 └         resources: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'reloader' of Deployment 'vault-reloader' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 vault10_8.yaml:24-31
────────────────────────────────────────
  24 ┌       - name: reloader
  25 │         image: alpine/k8s:latest
  26 │         command:
  27 │         - /bin/bash
  28 │         - -c
  29 │         - --
  30 │         args:
  31 └         - sleep 120; kubectl exec -it vault-0 -- pkill -SIGHUP vault;
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'loop' of Deployment 'vault-reloader' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vault10_8.yaml:33-39
────────────────────────────────────────
  33 ┌       - name: loop
  34 │         image: alpine:latest
  35 │         command:
  36 │         - tail
  37 │         - -f
  38 │         - /dev/null
  39 └         resources: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'reloader' of Deployment 'vault-reloader' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vault10_8.yaml:24-31
────────────────────────────────────────
  24 ┌       - name: reloader
  25 │         image: alpine/k8s:latest
  26 │         command:
  27 │         - /bin/bash
  28 │         - -c
  29 │         - --
  30 │         args:
  31 └         - sleep 120; kubectl exec -it vault-0 -- pkill -SIGHUP vault;
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'loop' of Deployment 'vault-reloader' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vault10_8.yaml:33-39
────────────────────────────────────────
  33 ┌       - name: loop
  34 │         image: alpine:latest
  35 │         command:
  36 │         - tail
  37 │         - -f
  38 │         - /dev/null
  39 └         resources: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'reloader' of Deployment 'vault-reloader' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vault10_8.yaml:24-31
────────────────────────────────────────
  24 ┌       - name: reloader
  25 │         image: alpine/k8s:latest
  26 │         command:
  27 │         - /bin/bash
  28 │         - -c
  29 │         - --
  30 │         args:
  31 └         - sleep 120; kubectl exec -it vault-0 -- pkill -SIGHUP vault;
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'loop' of Deployment 'vault-reloader' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vault10_8.yaml:33-39
────────────────────────────────────────
  33 ┌       - name: loop
  34 │         image: alpine:latest
  35 │         command:
  36 │         - tail
  37 │         - -f
  38 │         - /dev/null
  39 └         resources: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'reloader' of Deployment 'vault-reloader' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vault10_8.yaml:24-31
────────────────────────────────────────
  24 ┌       - name: reloader
  25 │         image: alpine/k8s:latest
  26 │         command:
  27 │         - /bin/bash
  28 │         - -c
  29 │         - --
  30 │         args:
  31 └         - sleep 120; kubectl exec -it vault-0 -- pkill -SIGHUP vault;
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'loop' of Deployment 'vault-reloader' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vault10_8.yaml:33-39
────────────────────────────────────────
  33 ┌       - name: loop
  34 │         image: alpine:latest
  35 │         command:
  36 │         - tail
  37 │         - -f
  38 │         - /dev/null
  39 └         resources: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'reloader' of Deployment 'vault-reloader' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vault10_8.yaml:24-31
────────────────────────────────────────
  24 ┌       - name: reloader
  25 │         image: alpine/k8s:latest
  26 │         command:
  27 │         - /bin/bash
  28 │         - -c
  29 │         - --
  30 │         args:
  31 └         - sleep 120; kubectl exec -it vault-0 -- pkill -SIGHUP vault;
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'loop' of Deployment 'vault-reloader' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vault10_8.yaml:33-39
────────────────────────────────────────
  33 ┌       - name: loop
  34 │         image: alpine:latest
  35 │         command:
  36 │         - tail
  37 │         - -f
  38 │         - /dev/null
  39 └         resources: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'reloader' of Deployment 'vault-reloader' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vault10_8.yaml:24-31
────────────────────────────────────────
  24 ┌       - name: reloader
  25 │         image: alpine/k8s:latest
  26 │         command:
  27 │         - /bin/bash
  28 │         - -c
  29 │         - --
  30 │         args:
  31 └         - sleep 120; kubectl exec -it vault-0 -- pkill -SIGHUP vault;
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'loop' of Deployment 'vault-reloader' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vault10_8.yaml:33-39
────────────────────────────────────────
  33 ┌       - name: loop
  34 │         image: alpine:latest
  35 │         command:
  36 │         - tail
  37 │         - -f
  38 │         - /dev/null
  39 └         resources: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'reloader' of Deployment 'vault-reloader' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vault10_8.yaml:24-31
────────────────────────────────────────
  24 ┌       - name: reloader
  25 │         image: alpine/k8s:latest
  26 │         command:
  27 │         - /bin/bash
  28 │         - -c
  29 │         - --
  30 │         args:
  31 └         - sleep 120; kubectl exec -it vault-0 -- pkill -SIGHUP vault;
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vault10_8.yaml:24-31
────────────────────────────────────────
  24 ┌       - name: reloader
  25 │         image: alpine/k8s:latest
  26 │         command:
  27 │         - /bin/bash
  28 │         - -c
  29 │         - --
  30 │         args:
  31 └         - sleep 120; kubectl exec -it vault-0 -- pkill -SIGHUP vault;
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vault10_8.yaml:33-39
────────────────────────────────────────
  33 ┌       - name: loop
  34 │         image: alpine:latest
  35 │         command:
  36 │         - tail
  37 │         - -f
  38 │         - /dev/null
  39 └         resources: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "loop" of deployment "vault-reloader" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vault10_8.yaml:33-39
────────────────────────────────────────
  33 ┌       - name: loop
  34 │         image: alpine:latest
  35 │         command:
  36 │         - tail
  37 │         - -f
  38 │         - /dev/null
  39 └         resources: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "reloader" of deployment "vault-reloader" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vault10_8.yaml:24-31
────────────────────────────────────────
  24 ┌       - name: reloader
  25 │         image: alpine/k8s:latest
  26 │         command:
  27 │         - /bin/bash
  28 │         - -c
  29 │         - --
  30 │         args:
  31 └         - sleep 120; kubectl exec -it vault-0 -- pkill -SIGHUP vault;
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vault10_8.yaml:33-39
────────────────────────────────────────
  33 ┌       - name: loop
  34 │         image: alpine:latest
  35 │         command:
  36 │         - tail
  37 │         - -f
  38 │         - /dev/null
  39 └         resources: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vault10_8.yaml:24-31
────────────────────────────────────────
  24 ┌       - name: reloader
  25 │         image: alpine/k8s:latest
  26 │         command:
  27 │         - /bin/bash
  28 │         - -c
  29 │         - --
  30 │         args:
  31 └         - sleep 120; kubectl exec -it vault-0 -- pkill -SIGHUP vault;
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vault-reloader in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 vault10_8.yaml:4-9
────────────────────────────────────────
   4 ┌   name: vault-reloader
   5 │   labels:
   6 │     app.kubernetes.io/name: vault-reloader
   7 │     app.kubernetes.io/instance: vault
   8 │   annotations:
   9 └     secret.reloader.stakater.com/reload: vault-tls
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vault-reloader in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vault10_8.yaml:33-39
────────────────────────────────────────
  33 ┌       - name: loop
  34 │         image: alpine:latest
  35 │         command:
  36 │         - tail
  37 │         - -f
  38 │         - /dev/null
  39 └         resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vault-reloader in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vault10_8.yaml:24-31
────────────────────────────────────────
  24 ┌       - name: reloader
  25 │         image: alpine/k8s:latest
  26 │         command:
  27 │         - /bin/bash
  28 │         - -c
  29 │         - --
  30 │         args:
  31 └         - sleep 120; kubectl exec -it vault-0 -- pkill -SIGHUP vault;
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vault-reloader in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vault10_8.yaml:22-39
────────────────────────────────────────
  22 ┌       serviceAccountName: vault
  23 │       initContainers:
  24 │       - name: reloader
  25 │         image: alpine/k8s:latest
  26 │         command:
  27 │         - /bin/bash
  28 │         - -c
  29 │         - --
  30 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container reloader in deployment vault-reloader (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vault10_8.yaml:24-31
────────────────────────────────────────
  24 ┌       - name: reloader
  25 │         image: alpine/k8s:latest
  26 │         command:
  27 │         - /bin/bash
  28 │         - -c
  29 │         - --
  30 │         args:
  31 └         - sleep 120; kubectl exec -it vault-0 -- pkill -SIGHUP vault;
────────────────────────────────────────



vault10_9.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'vault' of StatefulSet 'vault' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vault10_9.yaml:61-148
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         image: hashicorp/vault:1.18.4
  63 │         command:
  64 │         - /bin/sh
  65 │         - -ec
  66 │         args:
  67 │         - "cp /vault/config/extraconfig-from-values.hcl /tmp/storageconfig.hcl;\n\
  68 │           [ -n \"${HOST_IP}\" ] && sed -Ei \"s|HOST_IP|${HOST_IP?}|g\" /tmp/storageconfig.hcl;\n\
  69 └           [ -n \"${POD_IP}\" ] && sed -Ei \"s|POD_IP|${POD_IP?}|g\" /tmp/storageconfig.hcl;\n\
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vault' of 'statefulset' 'vault' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vault10_9.yaml:61-148
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         image: hashicorp/vault:1.18.4
  63 │         command:
  64 │         - /bin/sh
  65 │         - -ec
  66 │         args:
  67 │         - "cp /vault/config/extraconfig-from-values.hcl /tmp/storageconfig.hcl;\n\
  68 │           [ -n \"${HOST_IP}\" ] && sed -Ei \"s|HOST_IP|${HOST_IP?}|g\" /tmp/storageconfig.hcl;\n\
  69 └           [ -n \"${POD_IP}\" ] && sed -Ei \"s|POD_IP|${POD_IP?}|g\" /tmp/storageconfig.hcl;\n\
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vault' of StatefulSet 'vault' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vault10_9.yaml:61-148
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         image: hashicorp/vault:1.18.4
  63 │         command:
  64 │         - /bin/sh
  65 │         - -ec
  66 │         args:
  67 │         - "cp /vault/config/extraconfig-from-values.hcl /tmp/storageconfig.hcl;\n\
  68 │           [ -n \"${HOST_IP}\" ] && sed -Ei \"s|HOST_IP|${HOST_IP?}|g\" /tmp/storageconfig.hcl;\n\
  69 └           [ -n \"${POD_IP}\" ] && sed -Ei \"s|POD_IP|${POD_IP?}|g\" /tmp/storageconfig.hcl;\n\
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vault' of StatefulSet 'vault' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vault10_9.yaml:61-148
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         image: hashicorp/vault:1.18.4
  63 │         command:
  64 │         - /bin/sh
  65 │         - -ec
  66 │         args:
  67 │         - "cp /vault/config/extraconfig-from-values.hcl /tmp/storageconfig.hcl;\n\
  68 │           [ -n \"${HOST_IP}\" ] && sed -Ei \"s|HOST_IP|${HOST_IP?}|g\" /tmp/storageconfig.hcl;\n\
  69 └           [ -n \"${POD_IP}\" ] && sed -Ei \"s|POD_IP|${POD_IP?}|g\" /tmp/storageconfig.hcl;\n\
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vault' of StatefulSet 'vault' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vault10_9.yaml:61-148
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         image: hashicorp/vault:1.18.4
  63 │         command:
  64 │         - /bin/sh
  65 │         - -ec
  66 │         args:
  67 │         - "cp /vault/config/extraconfig-from-values.hcl /tmp/storageconfig.hcl;\n\
  68 │           [ -n \"${HOST_IP}\" ] && sed -Ei \"s|HOST_IP|${HOST_IP?}|g\" /tmp/storageconfig.hcl;\n\
  69 └           [ -n \"${POD_IP}\" ] && sed -Ei \"s|POD_IP|${POD_IP?}|g\" /tmp/storageconfig.hcl;\n\
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vault' of StatefulSet 'vault' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vault10_9.yaml:61-148
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         image: hashicorp/vault:1.18.4
  63 │         command:
  64 │         - /bin/sh
  65 │         - -ec
  66 │         args:
  67 │         - "cp /vault/config/extraconfig-from-values.hcl /tmp/storageconfig.hcl;\n\
  68 │           [ -n \"${HOST_IP}\" ] && sed -Ei \"s|HOST_IP|${HOST_IP?}|g\" /tmp/storageconfig.hcl;\n\
  69 └           [ -n \"${POD_IP}\" ] && sed -Ei \"s|POD_IP|${POD_IP?}|g\" /tmp/storageconfig.hcl;\n\
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vault' of StatefulSet 'vault' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vault10_9.yaml:61-148
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         image: hashicorp/vault:1.18.4
  63 │         command:
  64 │         - /bin/sh
  65 │         - -ec
  66 │         args:
  67 │         - "cp /vault/config/extraconfig-from-values.hcl /tmp/storageconfig.hcl;\n\
  68 │           [ -n \"${HOST_IP}\" ] && sed -Ei \"s|HOST_IP|${HOST_IP?}|g\" /tmp/storageconfig.hcl;\n\
  69 └           [ -n \"${POD_IP}\" ] && sed -Ei \"s|POD_IP|${POD_IP?}|g\" /tmp/storageconfig.hcl;\n\
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vault' of StatefulSet 'vault' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vault10_9.yaml:61-148
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         image: hashicorp/vault:1.18.4
  63 │         command:
  64 │         - /bin/sh
  65 │         - -ec
  66 │         args:
  67 │         - "cp /vault/config/extraconfig-from-values.hcl /tmp/storageconfig.hcl;\n\
  68 │           [ -n \"${HOST_IP}\" ] && sed -Ei \"s|HOST_IP|${HOST_IP?}|g\" /tmp/storageconfig.hcl;\n\
  69 └           [ -n \"${POD_IP}\" ] && sed -Ei \"s|POD_IP|${POD_IP?}|g\" /tmp/storageconfig.hcl;\n\
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vault' of StatefulSet 'vault' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vault10_9.yaml:61-148
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         image: hashicorp/vault:1.18.4
  63 │         command:
  64 │         - /bin/sh
  65 │         - -ec
  66 │         args:
  67 │         - "cp /vault/config/extraconfig-from-values.hcl /tmp/storageconfig.hcl;\n\
  68 │           [ -n \"${HOST_IP}\" ] && sed -Ei \"s|HOST_IP|${HOST_IP?}|g\" /tmp/storageconfig.hcl;\n\
  69 └           [ -n \"${POD_IP}\" ] && sed -Ei \"s|POD_IP|${POD_IP?}|g\" /tmp/storageconfig.hcl;\n\
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vault10_9.yaml:61-148
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         image: hashicorp/vault:1.18.4
  63 │         command:
  64 │         - /bin/sh
  65 │         - -ec
  66 │         args:
  67 │         - "cp /vault/config/extraconfig-from-values.hcl /tmp/storageconfig.hcl;\n\
  68 │           [ -n \"${HOST_IP}\" ] && sed -Ei \"s|HOST_IP|${HOST_IP?}|g\" /tmp/storageconfig.hcl;\n\
  69 └           [ -n \"${POD_IP}\" ] && sed -Ei \"s|POD_IP|${POD_IP?}|g\" /tmp/storageconfig.hcl;\n\
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vault" of statefulset "vault" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vault10_9.yaml:61-148
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         image: hashicorp/vault:1.18.4
  63 │         command:
  64 │         - /bin/sh
  65 │         - -ec
  66 │         args:
  67 │         - "cp /vault/config/extraconfig-from-values.hcl /tmp/storageconfig.hcl;\n\
  68 │           [ -n \"${HOST_IP}\" ] && sed -Ei \"s|HOST_IP|${HOST_IP?}|g\" /tmp/storageconfig.hcl;\n\
  69 └           [ -n \"${POD_IP}\" ] && sed -Ei \"s|POD_IP|${POD_IP?}|g\" /tmp/storageconfig.hcl;\n\
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vault10_9.yaml:61-148
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         image: hashicorp/vault:1.18.4
  63 │         command:
  64 │         - /bin/sh
  65 │         - -ec
  66 │         args:
  67 │         - "cp /vault/config/extraconfig-from-values.hcl /tmp/storageconfig.hcl;\n\
  68 │           [ -n \"${HOST_IP}\" ] && sed -Ei \"s|HOST_IP|${HOST_IP?}|g\" /tmp/storageconfig.hcl;\n\
  69 └           [ -n \"${POD_IP}\" ] && sed -Ei \"s|POD_IP|${POD_IP?}|g\" /tmp/storageconfig.hcl;\n\
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset vault in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 vault10_9.yaml:4-7
────────────────────────────────────────
   4 ┌   name: vault
   5 │   labels:
   6 │     app.kubernetes.io/name: vault
   7 └     app.kubernetes.io/instance: vault
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vault in statefulset vault (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vault10_9.yaml:61-148
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         image: hashicorp/vault:1.18.4
  63 │         command:
  64 │         - /bin/sh
  65 │         - -ec
  66 │         args:
  67 │         - "cp /vault/config/extraconfig-from-values.hcl /tmp/storageconfig.hcl;\n\
  68 │           [ -n \"${HOST_IP}\" ] && sed -Ei \"s|HOST_IP|${HOST_IP?}|g\" /tmp/storageconfig.hcl;\n\
  69 └           [ -n \"${POD_IP}\" ] && sed -Ei \"s|POD_IP|${POD_IP?}|g\" /tmp/storageconfig.hcl;\n\
  ..   
────────────────────────────────────────



vault11_15.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 6, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'sidecar-injector' of Deployment 'vault-agent-injector' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vault11_15.yaml:41-110
────────────────────────────────────────
  41 ┌       - name: sidecar-injector
  42 │         resources:
  43 │           limits:
  44 │             cpu: 250m
  45 │             memory: 256Mi
  46 │           requests:
  47 │             cpu: 50m
  48 │             memory: 50Mi
  49 └         image: hashicorp/vault-k8s:0.14.1
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sidecar-injector' of 'deployment' 'vault-agent-injector' in 'vault' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vault11_15.yaml:41-110
────────────────────────────────────────
  41 ┌       - name: sidecar-injector
  42 │         resources:
  43 │           limits:
  44 │             cpu: 250m
  45 │             memory: 256Mi
  46 │           requests:
  47 │             cpu: 50m
  48 │             memory: 50Mi
  49 └         image: hashicorp/vault-k8s:0.14.1
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sidecar-injector' of Deployment 'vault-agent-injector' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vault11_15.yaml:41-110
────────────────────────────────────────
  41 ┌       - name: sidecar-injector
  42 │         resources:
  43 │           limits:
  44 │             cpu: 250m
  45 │             memory: 256Mi
  46 │           requests:
  47 │             cpu: 50m
  48 │             memory: 50Mi
  49 └         image: hashicorp/vault-k8s:0.14.1
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sidecar-injector' of Deployment 'vault-agent-injector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vault11_15.yaml:41-110
────────────────────────────────────────
  41 ┌       - name: sidecar-injector
  42 │         resources:
  43 │           limits:
  44 │             cpu: 250m
  45 │             memory: 256Mi
  46 │           requests:
  47 │             cpu: 50m
  48 │             memory: 50Mi
  49 └         image: hashicorp/vault-k8s:0.14.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sidecar-injector' of Deployment 'vault-agent-injector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vault11_15.yaml:41-110
────────────────────────────────────────
  41 ┌       - name: sidecar-injector
  42 │         resources:
  43 │           limits:
  44 │             cpu: 250m
  45 │             memory: 256Mi
  46 │           requests:
  47 │             cpu: 50m
  48 │             memory: 50Mi
  49 └         image: hashicorp/vault-k8s:0.14.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vault11_15.yaml:41-110
────────────────────────────────────────
  41 ┌       - name: sidecar-injector
  42 │         resources:
  43 │           limits:
  44 │             cpu: 250m
  45 │             memory: 256Mi
  46 │           requests:
  47 │             cpu: 50m
  48 │             memory: 50Mi
  49 └         image: hashicorp/vault-k8s:0.14.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sidecar-injector" of deployment "vault-agent-injector" in "vault" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vault11_15.yaml:41-110
────────────────────────────────────────
  41 ┌       - name: sidecar-injector
  42 │         resources:
  43 │           limits:
  44 │             cpu: 250m
  45 │             memory: 256Mi
  46 │           requests:
  47 │             cpu: 50m
  48 │             memory: 50Mi
  49 └         image: hashicorp/vault-k8s:0.14.1
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vault11_15.yaml:41-110
────────────────────────────────────────
  41 ┌       - name: sidecar-injector
  42 │         resources:
  43 │           limits:
  44 │             cpu: 250m
  45 │             memory: 256Mi
  46 │           requests:
  47 │             cpu: 50m
  48 │             memory: 50Mi
  49 └         image: hashicorp/vault-k8s:0.14.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container sidecar-injector in deployment vault-agent-injector (namespace: vault) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vault11_15.yaml:41-110
────────────────────────────────────────
  41 ┌       - name: sidecar-injector
  42 │         resources:
  43 │           limits:
  44 │             cpu: 250m
  45 │             memory: 256Mi
  46 │           requests:
  47 │             cpu: 50m
  48 │             memory: 50Mi
  49 └         image: hashicorp/vault-k8s:0.14.1
  ..   
────────────────────────────────────────



vault11_16.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 6, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'vault' of StatefulSet 'vault' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vault11_16.yaml:60-164
────────────────────────────────────────
  60 ┌       - name: vault
  61 │         resources:
  62 │           limits:
  63 │             cpu: 2000m
  64 │             memory: 16Gi
  65 │           requests:
  66 │             cpu: 500m
  67 │             memory: 50Mi
  68 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vault' of 'statefulset' 'vault' in 'vault' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vault11_16.yaml:60-164
────────────────────────────────────────
  60 ┌       - name: vault
  61 │         resources:
  62 │           limits:
  63 │             cpu: 2000m
  64 │             memory: 16Gi
  65 │           requests:
  66 │             cpu: 500m
  67 │             memory: 50Mi
  68 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vault' of StatefulSet 'vault' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vault11_16.yaml:60-164
────────────────────────────────────────
  60 ┌       - name: vault
  61 │         resources:
  62 │           limits:
  63 │             cpu: 2000m
  64 │             memory: 16Gi
  65 │           requests:
  66 │             cpu: 500m
  67 │             memory: 50Mi
  68 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vault' of StatefulSet 'vault' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vault11_16.yaml:60-164
────────────────────────────────────────
  60 ┌       - name: vault
  61 │         resources:
  62 │           limits:
  63 │             cpu: 2000m
  64 │             memory: 16Gi
  65 │           requests:
  66 │             cpu: 500m
  67 │             memory: 50Mi
  68 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vault' of StatefulSet 'vault' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vault11_16.yaml:60-164
────────────────────────────────────────
  60 ┌       - name: vault
  61 │         resources:
  62 │           limits:
  63 │             cpu: 2000m
  64 │             memory: 16Gi
  65 │           requests:
  66 │             cpu: 500m
  67 │             memory: 50Mi
  68 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vault11_16.yaml:60-164
────────────────────────────────────────
  60 ┌       - name: vault
  61 │         resources:
  62 │           limits:
  63 │             cpu: 2000m
  64 │             memory: 16Gi
  65 │           requests:
  66 │             cpu: 500m
  67 │             memory: 50Mi
  68 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vault" of statefulset "vault" in "vault" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vault11_16.yaml:60-164
────────────────────────────────────────
  60 ┌       - name: vault
  61 │         resources:
  62 │           limits:
  63 │             cpu: 2000m
  64 │             memory: 16Gi
  65 │           requests:
  66 │             cpu: 500m
  67 │             memory: 50Mi
  68 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vault11_16.yaml:60-164
────────────────────────────────────────
  60 ┌       - name: vault
  61 │         resources:
  62 │           limits:
  63 │             cpu: 2000m
  64 │             memory: 16Gi
  65 │           requests:
  66 │             cpu: 500m
  67 │             memory: 50Mi
  68 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vault in statefulset vault (namespace: vault) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vault11_16.yaml:60-164
────────────────────────────────────────
  60 ┌       - name: vault
  61 │         resources:
  62 │           limits:
  63 │             cpu: 2000m
  64 │             memory: 16Gi
  65 │           requests:
  66 │             cpu: 500m
  67 │             memory: 50Mi
  68 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────



vault11_18.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'vault-server-test' of Pod 'vault-server-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vault11_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vault11_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vault-server-test' of 'pod' 'vault-server-test' in 'vault' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vault11_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vault11_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vault-server-test' of Pod 'vault-server-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vault11_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vault-server-test' of Pod 'vault-server-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vault11_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vault11_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vault11_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vault11_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vault11_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vault11_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vault11_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vault-server-test" of pod "vault-server-test" in "vault" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vault11_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vault11_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vault-server-test in vault namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vault11_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod vault-server-test in vault namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vault11_18.yaml:9-28
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 └       value: /vault/userconfig/tls-ca/tls.crt
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vault-server-test in pod vault-server-test (namespace: vault) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vault11_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────



vault11_4.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'vault-agent-injector-clusterrole' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 vault11_4.yaml:10-18
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - admissionregistration.k8s.io
  12 │   resources:
  13 │   - mutatingwebhookconfigurations
  14 │   verbs:
  15 │   - get
  16 │   - list
  17 │   - watch
  18 └   - patch
────────────────────────────────────────



vault11_7.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'vault-discovery-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 vault11_7.yaml:12-21
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - pods
  16 │   verbs:
  17 │   - get
  18 │   - watch
  19 │   - list
  20 │   - update
  21 └   - patch
────────────────────────────────────────



vault13_15.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 108, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 3, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0014 (HIGH): Container 'sidecar-injector' of Deployment 'vault-agent-injector' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vault13_15.yaml:42-124
────────────────────────────────────────
  42 ┌       - name: sidecar-injector
  43 │         resources:
  44 │           limits:
  45 │             cpu: 250m
  46 │             memory: 256Mi
  47 │           requests:
  48 │             cpu: 50m
  49 │             memory: 50Mi
  50 └         image: hashicorp/vault-k8s:0.14.1
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sidecar-injector' of Deployment 'vault-agent-injector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vault13_15.yaml:42-124
────────────────────────────────────────
  42 ┌       - name: sidecar-injector
  43 │         resources:
  44 │           limits:
  45 │             cpu: 250m
  46 │             memory: 256Mi
  47 │           requests:
  48 │             cpu: 50m
  49 │             memory: 50Mi
  50 └         image: hashicorp/vault-k8s:0.14.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sidecar-injector' of Deployment 'vault-agent-injector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vault13_15.yaml:42-124
────────────────────────────────────────
  42 ┌       - name: sidecar-injector
  43 │         resources:
  44 │           limits:
  45 │             cpu: 250m
  46 │             memory: 256Mi
  47 │           requests:
  48 │             cpu: 50m
  49 │             memory: 50Mi
  50 └         image: hashicorp/vault-k8s:0.14.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vault13_15.yaml:42-124
────────────────────────────────────────
  42 ┌       - name: sidecar-injector
  43 │         resources:
  44 │           limits:
  45 │             cpu: 250m
  46 │             memory: 256Mi
  47 │           requests:
  48 │             cpu: 50m
  49 │             memory: 50Mi
  50 └         image: hashicorp/vault-k8s:0.14.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sidecar-injector" of deployment "vault-agent-injector" in "vault" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vault13_15.yaml:42-124
────────────────────────────────────────
  42 ┌       - name: sidecar-injector
  43 │         resources:
  44 │           limits:
  45 │             cpu: 250m
  46 │             memory: 256Mi
  47 │           requests:
  48 │             cpu: 50m
  49 │             memory: 50Mi
  50 └         image: hashicorp/vault-k8s:0.14.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container sidecar-injector in deployment vault-agent-injector (namespace: vault) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vault13_15.yaml:42-124
────────────────────────────────────────
  42 ┌       - name: sidecar-injector
  43 │         resources:
  44 │           limits:
  45 │             cpu: 250m
  46 │             memory: 256Mi
  47 │           requests:
  48 │             cpu: 50m
  49 │             memory: 50Mi
  50 └         image: hashicorp/vault-k8s:0.14.1
  ..   
────────────────────────────────────────



vault13_16.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 6, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'vault' of StatefulSet 'vault' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vault13_16.yaml:61-174
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         resources:
  63 │           limits:
  64 │             cpu: 2000m
  65 │             memory: 16Gi
  66 │           requests:
  67 │             cpu: 500m
  68 │             memory: 50Mi
  69 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vault' of 'statefulset' 'vault' in 'vault' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vault13_16.yaml:61-174
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         resources:
  63 │           limits:
  64 │             cpu: 2000m
  65 │             memory: 16Gi
  66 │           requests:
  67 │             cpu: 500m
  68 │             memory: 50Mi
  69 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vault' of StatefulSet 'vault' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vault13_16.yaml:61-174
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         resources:
  63 │           limits:
  64 │             cpu: 2000m
  65 │             memory: 16Gi
  66 │           requests:
  67 │             cpu: 500m
  68 │             memory: 50Mi
  69 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vault' of StatefulSet 'vault' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vault13_16.yaml:61-174
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         resources:
  63 │           limits:
  64 │             cpu: 2000m
  65 │             memory: 16Gi
  66 │           requests:
  67 │             cpu: 500m
  68 │             memory: 50Mi
  69 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vault' of StatefulSet 'vault' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vault13_16.yaml:61-174
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         resources:
  63 │           limits:
  64 │             cpu: 2000m
  65 │             memory: 16Gi
  66 │           requests:
  67 │             cpu: 500m
  68 │             memory: 50Mi
  69 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vault13_16.yaml:61-174
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         resources:
  63 │           limits:
  64 │             cpu: 2000m
  65 │             memory: 16Gi
  66 │           requests:
  67 │             cpu: 500m
  68 │             memory: 50Mi
  69 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vault" of statefulset "vault" in "vault" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vault13_16.yaml:61-174
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         resources:
  63 │           limits:
  64 │             cpu: 2000m
  65 │             memory: 16Gi
  66 │           requests:
  67 │             cpu: 500m
  68 │             memory: 50Mi
  69 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vault13_16.yaml:61-174
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         resources:
  63 │           limits:
  64 │             cpu: 2000m
  65 │             memory: 16Gi
  66 │           requests:
  67 │             cpu: 500m
  68 │             memory: 50Mi
  69 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vault in statefulset vault (namespace: vault) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vault13_16.yaml:61-174
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         resources:
  63 │           limits:
  64 │             cpu: 2000m
  65 │             memory: 16Gi
  66 │           requests:
  67 │             cpu: 500m
  68 │             memory: 50Mi
  69 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────



vault13_18.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'vault-server-test' of Pod 'vault-server-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vault13_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vault13_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vault-server-test' of 'pod' 'vault-server-test' in 'vault' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vault13_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vault13_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vault-server-test' of Pod 'vault-server-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vault13_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vault-server-test' of Pod 'vault-server-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vault13_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vault13_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vault13_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vault13_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vault13_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vault13_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vault13_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vault-server-test" of pod "vault-server-test" in "vault" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vault13_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vault13_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vault-server-test in vault namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vault13_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod vault-server-test in vault namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vault13_18.yaml:9-28
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 └       value: /vault/userconfig/tls-ca/tls.crt
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vault-server-test in pod vault-server-test (namespace: vault) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vault13_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────



vault13_4.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'vault-agent-injector-clusterrole' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 vault13_4.yaml:10-18
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - admissionregistration.k8s.io
  12 │   resources:
  13 │   - mutatingwebhookconfigurations
  14 │   verbs:
  15 │   - get
  16 │   - list
  17 │   - watch
  18 └   - patch
────────────────────────────────────────



vault13_7.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'vault-discovery-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 vault13_7.yaml:12-21
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - pods
  16 │   verbs:
  17 │   - get
  18 │   - watch
  19 │   - list
  20 │   - update
  21 └   - patch
────────────────────────────────────────



vault20_15.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 108, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 3, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0014 (HIGH): Container 'sidecar-injector' of Deployment 'vault-agent-injector' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vault20_15.yaml:42-124
────────────────────────────────────────
  42 ┌       - name: sidecar-injector
  43 │         resources:
  44 │           limits:
  45 │             cpu: 250m
  46 │             memory: 256Mi
  47 │           requests:
  48 │             cpu: 50m
  49 │             memory: 50Mi
  50 └         image: hashicorp/vault-k8s:0.14.1
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sidecar-injector' of Deployment 'vault-agent-injector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vault20_15.yaml:42-124
────────────────────────────────────────
  42 ┌       - name: sidecar-injector
  43 │         resources:
  44 │           limits:
  45 │             cpu: 250m
  46 │             memory: 256Mi
  47 │           requests:
  48 │             cpu: 50m
  49 │             memory: 50Mi
  50 └         image: hashicorp/vault-k8s:0.14.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sidecar-injector' of Deployment 'vault-agent-injector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vault20_15.yaml:42-124
────────────────────────────────────────
  42 ┌       - name: sidecar-injector
  43 │         resources:
  44 │           limits:
  45 │             cpu: 250m
  46 │             memory: 256Mi
  47 │           requests:
  48 │             cpu: 50m
  49 │             memory: 50Mi
  50 └         image: hashicorp/vault-k8s:0.14.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vault20_15.yaml:42-124
────────────────────────────────────────
  42 ┌       - name: sidecar-injector
  43 │         resources:
  44 │           limits:
  45 │             cpu: 250m
  46 │             memory: 256Mi
  47 │           requests:
  48 │             cpu: 50m
  49 │             memory: 50Mi
  50 └         image: hashicorp/vault-k8s:0.14.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sidecar-injector" of deployment "vault-agent-injector" in "vault" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vault20_15.yaml:42-124
────────────────────────────────────────
  42 ┌       - name: sidecar-injector
  43 │         resources:
  44 │           limits:
  45 │             cpu: 250m
  46 │             memory: 256Mi
  47 │           requests:
  48 │             cpu: 50m
  49 │             memory: 50Mi
  50 └         image: hashicorp/vault-k8s:0.14.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container sidecar-injector in deployment vault-agent-injector (namespace: vault) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vault20_15.yaml:42-124
────────────────────────────────────────
  42 ┌       - name: sidecar-injector
  43 │         resources:
  44 │           limits:
  45 │             cpu: 250m
  46 │             memory: 256Mi
  47 │           requests:
  48 │             cpu: 50m
  49 │             memory: 50Mi
  50 └         image: hashicorp/vault-k8s:0.14.1
  ..   
────────────────────────────────────────



vault20_16.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 6, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'vault' of StatefulSet 'vault' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vault20_16.yaml:62-157
────────────────────────────────────────
  62 ┌       - name: vault
  63 │         resources:
  64 │           limits:
  65 │             cpu: 2000m
  66 │             memory: 16Gi
  67 │           requests:
  68 │             cpu: 500m
  69 │             memory: 50Mi
  70 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vault' of 'statefulset' 'vault' in 'vault' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vault20_16.yaml:62-157
────────────────────────────────────────
  62 ┌       - name: vault
  63 │         resources:
  64 │           limits:
  65 │             cpu: 2000m
  66 │             memory: 16Gi
  67 │           requests:
  68 │             cpu: 500m
  69 │             memory: 50Mi
  70 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vault' of StatefulSet 'vault' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vault20_16.yaml:62-157
────────────────────────────────────────
  62 ┌       - name: vault
  63 │         resources:
  64 │           limits:
  65 │             cpu: 2000m
  66 │             memory: 16Gi
  67 │           requests:
  68 │             cpu: 500m
  69 │             memory: 50Mi
  70 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vault' of StatefulSet 'vault' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vault20_16.yaml:62-157
────────────────────────────────────────
  62 ┌       - name: vault
  63 │         resources:
  64 │           limits:
  65 │             cpu: 2000m
  66 │             memory: 16Gi
  67 │           requests:
  68 │             cpu: 500m
  69 │             memory: 50Mi
  70 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vault' of StatefulSet 'vault' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vault20_16.yaml:62-157
────────────────────────────────────────
  62 ┌       - name: vault
  63 │         resources:
  64 │           limits:
  65 │             cpu: 2000m
  66 │             memory: 16Gi
  67 │           requests:
  68 │             cpu: 500m
  69 │             memory: 50Mi
  70 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vault20_16.yaml:62-157
────────────────────────────────────────
  62 ┌       - name: vault
  63 │         resources:
  64 │           limits:
  65 │             cpu: 2000m
  66 │             memory: 16Gi
  67 │           requests:
  68 │             cpu: 500m
  69 │             memory: 50Mi
  70 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vault" of statefulset "vault" in "vault" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vault20_16.yaml:62-157
────────────────────────────────────────
  62 ┌       - name: vault
  63 │         resources:
  64 │           limits:
  65 │             cpu: 2000m
  66 │             memory: 16Gi
  67 │           requests:
  68 │             cpu: 500m
  69 │             memory: 50Mi
  70 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vault20_16.yaml:62-157
────────────────────────────────────────
  62 ┌       - name: vault
  63 │         resources:
  64 │           limits:
  65 │             cpu: 2000m
  66 │             memory: 16Gi
  67 │           requests:
  68 │             cpu: 500m
  69 │             memory: 50Mi
  70 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vault in statefulset vault (namespace: vault) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vault20_16.yaml:62-157
────────────────────────────────────────
  62 ┌       - name: vault
  63 │         resources:
  64 │           limits:
  65 │             cpu: 2000m
  66 │             memory: 16Gi
  67 │           requests:
  68 │             cpu: 500m
  69 │             memory: 50Mi
  70 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────



vault20_18.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'vault-server-test' of Pod 'vault-server-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vault20_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vault20_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vault-server-test' of 'pod' 'vault-server-test' in 'vault' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vault20_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vault20_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vault-server-test' of Pod 'vault-server-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vault20_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vault-server-test' of Pod 'vault-server-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vault20_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vault20_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vault20_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vault20_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vault20_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vault20_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vault20_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vault-server-test" of pod "vault-server-test" in "vault" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vault20_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vault20_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vault-server-test in vault namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vault20_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod vault-server-test in vault namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vault20_18.yaml:9-28
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 └       value: /vault/userconfig/tls-ca/tls.crt
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vault-server-test in pod vault-server-test (namespace: vault) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vault20_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────



vault20_4.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'vault-agent-injector-clusterrole' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 vault20_4.yaml:10-18
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - admissionregistration.k8s.io
  12 │   resources:
  13 │   - mutatingwebhookconfigurations
  14 │   verbs:
  15 │   - get
  16 │   - list
  17 │   - watch
  18 └   - patch
────────────────────────────────────────



vault20_7.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'vault-discovery-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 vault20_7.yaml:12-21
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - pods
  16 │   verbs:
  17 │   - get
  18 │   - watch
  19 │   - list
  20 │   - update
  21 └   - patch
────────────────────────────────────────



vault22.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'vault' of Deployment 'vault' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vault22.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: vault
  19 │         image: vault
  20 │         args: ["server", "-dev", "-dev-root-token-id=root"]
  21 │         ports:
  22 └         - containerPort: 8200
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vault' of Deployment 'vault' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vault22.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: vault
  19 │         image: vault
  20 │         args: ["server", "-dev", "-dev-root-token-id=root"]
  21 │         ports:
  22 └         - containerPort: 8200
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vault' of 'deployment' 'vault' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vault22.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: vault
  19 │         image: vault
  20 │         args: ["server", "-dev", "-dev-root-token-id=root"]
  21 │         ports:
  22 └         - containerPort: 8200
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vault' of Deployment 'vault' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vault22.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: vault
  19 │         image: vault
  20 │         args: ["server", "-dev", "-dev-root-token-id=root"]
  21 │         ports:
  22 └         - containerPort: 8200
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vault' of Deployment 'vault' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vault22.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: vault
  19 │         image: vault
  20 │         args: ["server", "-dev", "-dev-root-token-id=root"]
  21 │         ports:
  22 └         - containerPort: 8200
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vault' of Deployment 'vault' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 vault22.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: vault
  19 │         image: vault
  20 │         args: ["server", "-dev", "-dev-root-token-id=root"]
  21 │         ports:
  22 └         - containerPort: 8200
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vault' of Deployment 'vault' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vault22.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: vault
  19 │         image: vault
  20 │         args: ["server", "-dev", "-dev-root-token-id=root"]
  21 │         ports:
  22 └         - containerPort: 8200
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vault' of Deployment 'vault' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vault22.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: vault
  19 │         image: vault
  20 │         args: ["server", "-dev", "-dev-root-token-id=root"]
  21 │         ports:
  22 └         - containerPort: 8200
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vault' of Deployment 'vault' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vault22.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: vault
  19 │         image: vault
  20 │         args: ["server", "-dev", "-dev-root-token-id=root"]
  21 │         ports:
  22 └         - containerPort: 8200
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vault' of Deployment 'vault' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vault22.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: vault
  19 │         image: vault
  20 │         args: ["server", "-dev", "-dev-root-token-id=root"]
  21 │         ports:
  22 └         - containerPort: 8200
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vault' of Deployment 'vault' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vault22.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: vault
  19 │         image: vault
  20 │         args: ["server", "-dev", "-dev-root-token-id=root"]
  21 │         ports:
  22 └         - containerPort: 8200
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vault' of Deployment 'vault' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vault22.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: vault
  19 │         image: vault
  20 │         args: ["server", "-dev", "-dev-root-token-id=root"]
  21 │         ports:
  22 └         - containerPort: 8200
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vault22.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: vault
  19 │         image: vault
  20 │         args: ["server", "-dev", "-dev-root-token-id=root"]
  21 │         ports:
  22 └         - containerPort: 8200
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vault" of deployment "vault" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vault22.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: vault
  19 │         image: vault
  20 │         args: ["server", "-dev", "-dev-root-token-id=root"]
  21 │         ports:
  22 └         - containerPort: 8200
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vault22.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: vault
  19 │         image: vault
  20 │         args: ["server", "-dev", "-dev-root-token-id=root"]
  21 │         ports:
  22 └         - containerPort: 8200
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vault in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 vault22.yaml:4-6
────────────────────────────────────────
   4 ┌   name: vault
   5 │   labels:
   6 └     app: vault
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vault in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vault22.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: vault
  19 │         image: vault
  20 │         args: ["server", "-dev", "-dev-root-token-id=root"]
  21 │         ports:
  22 └         - containerPort: 8200
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vault in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vault22.yaml:17-22
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: vault
  19 │         image: vault
  20 │         args: ["server", "-dev", "-dev-root-token-id=root"]
  21 │         ports:
  22 └         - containerPort: 8200
────────────────────────────────────────



vault23.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'vault' of Deployment 'vault' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vault23.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: vault
  19 │         image: vault
  20 │         args: ["server", "-dev", "-dev-root-token-id=root"]
  21 │         ports:
  22 └         - containerPort: 8200
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vault' of Deployment 'vault' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vault23.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: vault
  19 │         image: vault
  20 │         args: ["server", "-dev", "-dev-root-token-id=root"]
  21 │         ports:
  22 └         - containerPort: 8200
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vault' of 'deployment' 'vault' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vault23.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: vault
  19 │         image: vault
  20 │         args: ["server", "-dev", "-dev-root-token-id=root"]
  21 │         ports:
  22 └         - containerPort: 8200
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vault' of Deployment 'vault' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vault23.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: vault
  19 │         image: vault
  20 │         args: ["server", "-dev", "-dev-root-token-id=root"]
  21 │         ports:
  22 └         - containerPort: 8200
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vault' of Deployment 'vault' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vault23.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: vault
  19 │         image: vault
  20 │         args: ["server", "-dev", "-dev-root-token-id=root"]
  21 │         ports:
  22 └         - containerPort: 8200
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vault' of Deployment 'vault' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 vault23.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: vault
  19 │         image: vault
  20 │         args: ["server", "-dev", "-dev-root-token-id=root"]
  21 │         ports:
  22 └         - containerPort: 8200
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vault' of Deployment 'vault' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vault23.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: vault
  19 │         image: vault
  20 │         args: ["server", "-dev", "-dev-root-token-id=root"]
  21 │         ports:
  22 └         - containerPort: 8200
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vault' of Deployment 'vault' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vault23.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: vault
  19 │         image: vault
  20 │         args: ["server", "-dev", "-dev-root-token-id=root"]
  21 │         ports:
  22 └         - containerPort: 8200
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vault' of Deployment 'vault' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vault23.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: vault
  19 │         image: vault
  20 │         args: ["server", "-dev", "-dev-root-token-id=root"]
  21 │         ports:
  22 └         - containerPort: 8200
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vault' of Deployment 'vault' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vault23.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: vault
  19 │         image: vault
  20 │         args: ["server", "-dev", "-dev-root-token-id=root"]
  21 │         ports:
  22 └         - containerPort: 8200
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vault' of Deployment 'vault' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vault23.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: vault
  19 │         image: vault
  20 │         args: ["server", "-dev", "-dev-root-token-id=root"]
  21 │         ports:
  22 └         - containerPort: 8200
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vault' of Deployment 'vault' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vault23.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: vault
  19 │         image: vault
  20 │         args: ["server", "-dev", "-dev-root-token-id=root"]
  21 │         ports:
  22 └         - containerPort: 8200
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vault23.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: vault
  19 │         image: vault
  20 │         args: ["server", "-dev", "-dev-root-token-id=root"]
  21 │         ports:
  22 └         - containerPort: 8200
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vault" of deployment "vault" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vault23.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: vault
  19 │         image: vault
  20 │         args: ["server", "-dev", "-dev-root-token-id=root"]
  21 │         ports:
  22 └         - containerPort: 8200
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vault23.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: vault
  19 │         image: vault
  20 │         args: ["server", "-dev", "-dev-root-token-id=root"]
  21 │         ports:
  22 └         - containerPort: 8200
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vault in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 vault23.yaml:4-6
────────────────────────────────────────
   4 ┌   name: vault
   5 │   labels:
   6 └     app: vault
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vault in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vault23.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: vault
  19 │         image: vault
  20 │         args: ["server", "-dev", "-dev-root-token-id=root"]
  21 │         ports:
  22 └         - containerPort: 8200
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vault in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vault23.yaml:17-22
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: vault
  19 │         image: vault
  20 │         args: ["server", "-dev", "-dev-root-token-id=root"]
  21 │         ports:
  22 └         - containerPort: 8200
────────────────────────────────────────



vault31_15.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 108, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 3, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0014 (HIGH): Container 'sidecar-injector' of Deployment 'vault-agent-injector' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vault31_15.yaml:42-124
────────────────────────────────────────
  42 ┌       - name: sidecar-injector
  43 │         resources:
  44 │           limits:
  45 │             cpu: 250m
  46 │             memory: 256Mi
  47 │           requests:
  48 │             cpu: 50m
  49 │             memory: 50Mi
  50 └         image: hashicorp/vault-k8s:0.14.1
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sidecar-injector' of Deployment 'vault-agent-injector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vault31_15.yaml:42-124
────────────────────────────────────────
  42 ┌       - name: sidecar-injector
  43 │         resources:
  44 │           limits:
  45 │             cpu: 250m
  46 │             memory: 256Mi
  47 │           requests:
  48 │             cpu: 50m
  49 │             memory: 50Mi
  50 └         image: hashicorp/vault-k8s:0.14.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sidecar-injector' of Deployment 'vault-agent-injector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vault31_15.yaml:42-124
────────────────────────────────────────
  42 ┌       - name: sidecar-injector
  43 │         resources:
  44 │           limits:
  45 │             cpu: 250m
  46 │             memory: 256Mi
  47 │           requests:
  48 │             cpu: 50m
  49 │             memory: 50Mi
  50 └         image: hashicorp/vault-k8s:0.14.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vault31_15.yaml:42-124
────────────────────────────────────────
  42 ┌       - name: sidecar-injector
  43 │         resources:
  44 │           limits:
  45 │             cpu: 250m
  46 │             memory: 256Mi
  47 │           requests:
  48 │             cpu: 50m
  49 │             memory: 50Mi
  50 └         image: hashicorp/vault-k8s:0.14.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sidecar-injector" of deployment "vault-agent-injector" in "vault" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vault31_15.yaml:42-124
────────────────────────────────────────
  42 ┌       - name: sidecar-injector
  43 │         resources:
  44 │           limits:
  45 │             cpu: 250m
  46 │             memory: 256Mi
  47 │           requests:
  48 │             cpu: 50m
  49 │             memory: 50Mi
  50 └         image: hashicorp/vault-k8s:0.14.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container sidecar-injector in deployment vault-agent-injector (namespace: vault) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vault31_15.yaml:42-124
────────────────────────────────────────
  42 ┌       - name: sidecar-injector
  43 │         resources:
  44 │           limits:
  45 │             cpu: 250m
  46 │             memory: 256Mi
  47 │           requests:
  48 │             cpu: 50m
  49 │             memory: 50Mi
  50 └         image: hashicorp/vault-k8s:0.14.1
  ..   
────────────────────────────────────────



vault31_16.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 6, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'vault' of StatefulSet 'vault' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vault31_16.yaml:61-165
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         resources:
  63 │           limits:
  64 │             cpu: 2000m
  65 │             memory: 16Gi
  66 │           requests:
  67 │             cpu: 500m
  68 │             memory: 50Mi
  69 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vault' of 'statefulset' 'vault' in 'vault' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vault31_16.yaml:61-165
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         resources:
  63 │           limits:
  64 │             cpu: 2000m
  65 │             memory: 16Gi
  66 │           requests:
  67 │             cpu: 500m
  68 │             memory: 50Mi
  69 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vault' of StatefulSet 'vault' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vault31_16.yaml:61-165
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         resources:
  63 │           limits:
  64 │             cpu: 2000m
  65 │             memory: 16Gi
  66 │           requests:
  67 │             cpu: 500m
  68 │             memory: 50Mi
  69 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vault' of StatefulSet 'vault' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vault31_16.yaml:61-165
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         resources:
  63 │           limits:
  64 │             cpu: 2000m
  65 │             memory: 16Gi
  66 │           requests:
  67 │             cpu: 500m
  68 │             memory: 50Mi
  69 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vault' of StatefulSet 'vault' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vault31_16.yaml:61-165
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         resources:
  63 │           limits:
  64 │             cpu: 2000m
  65 │             memory: 16Gi
  66 │           requests:
  67 │             cpu: 500m
  68 │             memory: 50Mi
  69 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vault31_16.yaml:61-165
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         resources:
  63 │           limits:
  64 │             cpu: 2000m
  65 │             memory: 16Gi
  66 │           requests:
  67 │             cpu: 500m
  68 │             memory: 50Mi
  69 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vault" of statefulset "vault" in "vault" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vault31_16.yaml:61-165
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         resources:
  63 │           limits:
  64 │             cpu: 2000m
  65 │             memory: 16Gi
  66 │           requests:
  67 │             cpu: 500m
  68 │             memory: 50Mi
  69 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vault31_16.yaml:61-165
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         resources:
  63 │           limits:
  64 │             cpu: 2000m
  65 │             memory: 16Gi
  66 │           requests:
  67 │             cpu: 500m
  68 │             memory: 50Mi
  69 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vault in statefulset vault (namespace: vault) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vault31_16.yaml:61-165
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         resources:
  63 │           limits:
  64 │             cpu: 2000m
  65 │             memory: 16Gi
  66 │           requests:
  67 │             cpu: 500m
  68 │             memory: 50Mi
  69 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────



vault31_18.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'vault-server-test' of Pod 'vault-server-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vault31_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vault31_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vault-server-test' of 'pod' 'vault-server-test' in 'vault' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vault31_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vault31_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vault-server-test' of Pod 'vault-server-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vault31_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vault-server-test' of Pod 'vault-server-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vault31_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vault31_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vault31_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vault31_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vault31_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vault31_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vault31_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vault-server-test" of pod "vault-server-test" in "vault" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vault31_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vault31_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vault-server-test in vault namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vault31_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod vault-server-test in vault namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vault31_18.yaml:9-28
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 └       value: /vault/userconfig/tls-ca/tls.crt
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vault-server-test in pod vault-server-test (namespace: vault) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vault31_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────



vault31_4.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'vault-agent-injector-clusterrole' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 vault31_4.yaml:10-18
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - admissionregistration.k8s.io
  12 │   resources:
  13 │   - mutatingwebhookconfigurations
  14 │   verbs:
  15 │   - get
  16 │   - list
  17 │   - watch
  18 └   - patch
────────────────────────────────────────



vault31_7.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'vault-discovery-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 vault31_7.yaml:12-21
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - pods
  16 │   verbs:
  17 │   - get
  18 │   - watch
  19 │   - list
  20 │   - update
  21 └   - patch
────────────────────────────────────────



vault4_1.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0053 (HIGH): Role 'vault-reloader' should not have access to resource '["pods/exec"]' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to exec into a container with privileged access to the host or with an attached SA with higher RBAC permissions is a common escalation path to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv053
────────────────────────────────────────
 vault4_1.yaml:17-22
────────────────────────────────────────
  17 ┌ - apiGroups:
  18 │   - ''
  19 │   resources:
  20 │   - pods/exec
  21 │   verbs:
  22 └   - create
────────────────────────────────────────



vault4_8.yaml (kubernetes)
==========================
Tests: 131 (SUCCESSES: 96, FAILURES: 35)
Failures: 35 (UNKNOWN: 0, LOW: 21, MEDIUM: 9, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'loop' of Deployment 'vault-reloader' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vault4_8.yaml:33-39
────────────────────────────────────────
  33 ┌       - name: loop
  34 │         image: alpine:latest
  35 │         command:
  36 │         - tail
  37 │         - -f
  38 │         - /dev/null
  39 └         resources: {}
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'reloader' of Deployment 'vault-reloader' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vault4_8.yaml:24-31
────────────────────────────────────────
  24 ┌       - name: reloader
  25 │         image: alpine/k8s:latest
  26 │         command:
  27 │         - /bin/bash
  28 │         - -c
  29 │         - --
  30 │         args:
  31 └         - sleep 120; kubectl exec -it vault-0 -- pkill -SIGHUP vault;
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'loop' of Deployment 'vault-reloader' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vault4_8.yaml:33-39
────────────────────────────────────────
  33 ┌       - name: loop
  34 │         image: alpine:latest
  35 │         command:
  36 │         - tail
  37 │         - -f
  38 │         - /dev/null
  39 └         resources: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'reloader' of Deployment 'vault-reloader' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vault4_8.yaml:24-31
────────────────────────────────────────
  24 ┌       - name: reloader
  25 │         image: alpine/k8s:latest
  26 │         command:
  27 │         - /bin/bash
  28 │         - -c
  29 │         - --
  30 │         args:
  31 └         - sleep 120; kubectl exec -it vault-0 -- pkill -SIGHUP vault;
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'loop' of 'deployment' 'vault-reloader' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vault4_8.yaml:33-39
────────────────────────────────────────
  33 ┌       - name: loop
  34 │         image: alpine:latest
  35 │         command:
  36 │         - tail
  37 │         - -f
  38 │         - /dev/null
  39 └         resources: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'reloader' of 'deployment' 'vault-reloader' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vault4_8.yaml:24-31
────────────────────────────────────────
  24 ┌       - name: reloader
  25 │         image: alpine/k8s:latest
  26 │         command:
  27 │         - /bin/bash
  28 │         - -c
  29 │         - --
  30 │         args:
  31 └         - sleep 120; kubectl exec -it vault-0 -- pkill -SIGHUP vault;
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'loop' of Deployment 'vault-reloader' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vault4_8.yaml:33-39
────────────────────────────────────────
  33 ┌       - name: loop
  34 │         image: alpine:latest
  35 │         command:
  36 │         - tail
  37 │         - -f
  38 │         - /dev/null
  39 └         resources: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'reloader' of Deployment 'vault-reloader' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vault4_8.yaml:24-31
────────────────────────────────────────
  24 ┌       - name: reloader
  25 │         image: alpine/k8s:latest
  26 │         command:
  27 │         - /bin/bash
  28 │         - -c
  29 │         - --
  30 │         args:
  31 └         - sleep 120; kubectl exec -it vault-0 -- pkill -SIGHUP vault;
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'loop' of Deployment 'vault-reloader' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vault4_8.yaml:33-39
────────────────────────────────────────
  33 ┌       - name: loop
  34 │         image: alpine:latest
  35 │         command:
  36 │         - tail
  37 │         - -f
  38 │         - /dev/null
  39 └         resources: {}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'reloader' of Deployment 'vault-reloader' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vault4_8.yaml:24-31
────────────────────────────────────────
  24 ┌       - name: reloader
  25 │         image: alpine/k8s:latest
  26 │         command:
  27 │         - /bin/bash
  28 │         - -c
  29 │         - --
  30 │         args:
  31 └         - sleep 120; kubectl exec -it vault-0 -- pkill -SIGHUP vault;
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'loop' of Deployment 'vault-reloader' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 vault4_8.yaml:33-39
────────────────────────────────────────
  33 ┌       - name: loop
  34 │         image: alpine:latest
  35 │         command:
  36 │         - tail
  37 │         - -f
  38 │         - /dev/null
  39 └         resources: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'reloader' of Deployment 'vault-reloader' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 vault4_8.yaml:24-31
────────────────────────────────────────
  24 ┌       - name: reloader
  25 │         image: alpine/k8s:latest
  26 │         command:
  27 │         - /bin/bash
  28 │         - -c
  29 │         - --
  30 │         args:
  31 └         - sleep 120; kubectl exec -it vault-0 -- pkill -SIGHUP vault;
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'loop' of Deployment 'vault-reloader' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vault4_8.yaml:33-39
────────────────────────────────────────
  33 ┌       - name: loop
  34 │         image: alpine:latest
  35 │         command:
  36 │         - tail
  37 │         - -f
  38 │         - /dev/null
  39 └         resources: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'reloader' of Deployment 'vault-reloader' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vault4_8.yaml:24-31
────────────────────────────────────────
  24 ┌       - name: reloader
  25 │         image: alpine/k8s:latest
  26 │         command:
  27 │         - /bin/bash
  28 │         - -c
  29 │         - --
  30 │         args:
  31 └         - sleep 120; kubectl exec -it vault-0 -- pkill -SIGHUP vault;
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'loop' of Deployment 'vault-reloader' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vault4_8.yaml:33-39
────────────────────────────────────────
  33 ┌       - name: loop
  34 │         image: alpine:latest
  35 │         command:
  36 │         - tail
  37 │         - -f
  38 │         - /dev/null
  39 └         resources: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'reloader' of Deployment 'vault-reloader' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vault4_8.yaml:24-31
────────────────────────────────────────
  24 ┌       - name: reloader
  25 │         image: alpine/k8s:latest
  26 │         command:
  27 │         - /bin/bash
  28 │         - -c
  29 │         - --
  30 │         args:
  31 └         - sleep 120; kubectl exec -it vault-0 -- pkill -SIGHUP vault;
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'loop' of Deployment 'vault-reloader' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vault4_8.yaml:33-39
────────────────────────────────────────
  33 ┌       - name: loop
  34 │         image: alpine:latest
  35 │         command:
  36 │         - tail
  37 │         - -f
  38 │         - /dev/null
  39 └         resources: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'reloader' of Deployment 'vault-reloader' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vault4_8.yaml:24-31
────────────────────────────────────────
  24 ┌       - name: reloader
  25 │         image: alpine/k8s:latest
  26 │         command:
  27 │         - /bin/bash
  28 │         - -c
  29 │         - --
  30 │         args:
  31 └         - sleep 120; kubectl exec -it vault-0 -- pkill -SIGHUP vault;
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'loop' of Deployment 'vault-reloader' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vault4_8.yaml:33-39
────────────────────────────────────────
  33 ┌       - name: loop
  34 │         image: alpine:latest
  35 │         command:
  36 │         - tail
  37 │         - -f
  38 │         - /dev/null
  39 └         resources: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'reloader' of Deployment 'vault-reloader' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vault4_8.yaml:24-31
────────────────────────────────────────
  24 ┌       - name: reloader
  25 │         image: alpine/k8s:latest
  26 │         command:
  27 │         - /bin/bash
  28 │         - -c
  29 │         - --
  30 │         args:
  31 └         - sleep 120; kubectl exec -it vault-0 -- pkill -SIGHUP vault;
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'loop' of Deployment 'vault-reloader' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vault4_8.yaml:33-39
────────────────────────────────────────
  33 ┌       - name: loop
  34 │         image: alpine:latest
  35 │         command:
  36 │         - tail
  37 │         - -f
  38 │         - /dev/null
  39 └         resources: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'reloader' of Deployment 'vault-reloader' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vault4_8.yaml:24-31
────────────────────────────────────────
  24 ┌       - name: reloader
  25 │         image: alpine/k8s:latest
  26 │         command:
  27 │         - /bin/bash
  28 │         - -c
  29 │         - --
  30 │         args:
  31 └         - sleep 120; kubectl exec -it vault-0 -- pkill -SIGHUP vault;
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'loop' of Deployment 'vault-reloader' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vault4_8.yaml:33-39
────────────────────────────────────────
  33 ┌       - name: loop
  34 │         image: alpine:latest
  35 │         command:
  36 │         - tail
  37 │         - -f
  38 │         - /dev/null
  39 └         resources: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'reloader' of Deployment 'vault-reloader' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vault4_8.yaml:24-31
────────────────────────────────────────
  24 ┌       - name: reloader
  25 │         image: alpine/k8s:latest
  26 │         command:
  27 │         - /bin/bash
  28 │         - -c
  29 │         - --
  30 │         args:
  31 └         - sleep 120; kubectl exec -it vault-0 -- pkill -SIGHUP vault;
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vault4_8.yaml:24-31
────────────────────────────────────────
  24 ┌       - name: reloader
  25 │         image: alpine/k8s:latest
  26 │         command:
  27 │         - /bin/bash
  28 │         - -c
  29 │         - --
  30 │         args:
  31 └         - sleep 120; kubectl exec -it vault-0 -- pkill -SIGHUP vault;
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vault4_8.yaml:33-39
────────────────────────────────────────
  33 ┌       - name: loop
  34 │         image: alpine:latest
  35 │         command:
  36 │         - tail
  37 │         - -f
  38 │         - /dev/null
  39 └         resources: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "loop" of deployment "vault-reloader" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vault4_8.yaml:33-39
────────────────────────────────────────
  33 ┌       - name: loop
  34 │         image: alpine:latest
  35 │         command:
  36 │         - tail
  37 │         - -f
  38 │         - /dev/null
  39 └         resources: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "reloader" of deployment "vault-reloader" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vault4_8.yaml:24-31
────────────────────────────────────────
  24 ┌       - name: reloader
  25 │         image: alpine/k8s:latest
  26 │         command:
  27 │         - /bin/bash
  28 │         - -c
  29 │         - --
  30 │         args:
  31 └         - sleep 120; kubectl exec -it vault-0 -- pkill -SIGHUP vault;
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vault4_8.yaml:33-39
────────────────────────────────────────
  33 ┌       - name: loop
  34 │         image: alpine:latest
  35 │         command:
  36 │         - tail
  37 │         - -f
  38 │         - /dev/null
  39 └         resources: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vault4_8.yaml:24-31
────────────────────────────────────────
  24 ┌       - name: reloader
  25 │         image: alpine/k8s:latest
  26 │         command:
  27 │         - /bin/bash
  28 │         - -c
  29 │         - --
  30 │         args:
  31 └         - sleep 120; kubectl exec -it vault-0 -- pkill -SIGHUP vault;
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vault-reloader in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 vault4_8.yaml:4-9
────────────────────────────────────────
   4 ┌   name: vault-reloader
   5 │   labels:
   6 │     app.kubernetes.io/name: vault-reloader
   7 │     app.kubernetes.io/instance: vault
   8 │   annotations:
   9 └     secret.reloader.stakater.com/reload: vault-tls
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vault-reloader in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vault4_8.yaml:33-39
────────────────────────────────────────
  33 ┌       - name: loop
  34 │         image: alpine:latest
  35 │         command:
  36 │         - tail
  37 │         - -f
  38 │         - /dev/null
  39 └         resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vault-reloader in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vault4_8.yaml:24-31
────────────────────────────────────────
  24 ┌       - name: reloader
  25 │         image: alpine/k8s:latest
  26 │         command:
  27 │         - /bin/bash
  28 │         - -c
  29 │         - --
  30 │         args:
  31 └         - sleep 120; kubectl exec -it vault-0 -- pkill -SIGHUP vault;
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vault-reloader in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vault4_8.yaml:22-39
────────────────────────────────────────
  22 ┌       serviceAccountName: vault
  23 │       initContainers:
  24 │       - name: reloader
  25 │         image: alpine/k8s:latest
  26 │         command:
  27 │         - /bin/bash
  28 │         - -c
  29 │         - --
  30 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container reloader in deployment vault-reloader (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vault4_8.yaml:24-31
────────────────────────────────────────
  24 ┌       - name: reloader
  25 │         image: alpine/k8s:latest
  26 │         command:
  27 │         - /bin/bash
  28 │         - -c
  29 │         - --
  30 │         args:
  31 └         - sleep 120; kubectl exec -it vault-0 -- pkill -SIGHUP vault;
────────────────────────────────────────



vault4_9.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 100, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'vault' of StatefulSet 'vault' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vault4_9.yaml:61-148
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         image: hashicorp/vault:1.18.4
  63 │         command:
  64 │         - /bin/sh
  65 │         - -ec
  66 │         args:
  67 │         - "cp /vault/config/extraconfig-from-values.hcl /tmp/storageconfig.hcl;\n\
  68 │           [ -n \"${HOST_IP}\" ] && sed -Ei \"s|HOST_IP|${HOST_IP?}|g\" /tmp/storageconfig.hcl;\n\
  69 └           [ -n \"${POD_IP}\" ] && sed -Ei \"s|POD_IP|${POD_IP?}|g\" /tmp/storageconfig.hcl;\n\
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vault' of 'statefulset' 'vault' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vault4_9.yaml:61-148
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         image: hashicorp/vault:1.18.4
  63 │         command:
  64 │         - /bin/sh
  65 │         - -ec
  66 │         args:
  67 │         - "cp /vault/config/extraconfig-from-values.hcl /tmp/storageconfig.hcl;\n\
  68 │           [ -n \"${HOST_IP}\" ] && sed -Ei \"s|HOST_IP|${HOST_IP?}|g\" /tmp/storageconfig.hcl;\n\
  69 └           [ -n \"${POD_IP}\" ] && sed -Ei \"s|POD_IP|${POD_IP?}|g\" /tmp/storageconfig.hcl;\n\
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vault' of StatefulSet 'vault' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vault4_9.yaml:61-148
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         image: hashicorp/vault:1.18.4
  63 │         command:
  64 │         - /bin/sh
  65 │         - -ec
  66 │         args:
  67 │         - "cp /vault/config/extraconfig-from-values.hcl /tmp/storageconfig.hcl;\n\
  68 │           [ -n \"${HOST_IP}\" ] && sed -Ei \"s|HOST_IP|${HOST_IP?}|g\" /tmp/storageconfig.hcl;\n\
  69 └           [ -n \"${POD_IP}\" ] && sed -Ei \"s|POD_IP|${POD_IP?}|g\" /tmp/storageconfig.hcl;\n\
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vault' of StatefulSet 'vault' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vault4_9.yaml:61-148
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         image: hashicorp/vault:1.18.4
  63 │         command:
  64 │         - /bin/sh
  65 │         - -ec
  66 │         args:
  67 │         - "cp /vault/config/extraconfig-from-values.hcl /tmp/storageconfig.hcl;\n\
  68 │           [ -n \"${HOST_IP}\" ] && sed -Ei \"s|HOST_IP|${HOST_IP?}|g\" /tmp/storageconfig.hcl;\n\
  69 └           [ -n \"${POD_IP}\" ] && sed -Ei \"s|POD_IP|${POD_IP?}|g\" /tmp/storageconfig.hcl;\n\
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vault' of StatefulSet 'vault' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vault4_9.yaml:61-148
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         image: hashicorp/vault:1.18.4
  63 │         command:
  64 │         - /bin/sh
  65 │         - -ec
  66 │         args:
  67 │         - "cp /vault/config/extraconfig-from-values.hcl /tmp/storageconfig.hcl;\n\
  68 │           [ -n \"${HOST_IP}\" ] && sed -Ei \"s|HOST_IP|${HOST_IP?}|g\" /tmp/storageconfig.hcl;\n\
  69 └           [ -n \"${POD_IP}\" ] && sed -Ei \"s|POD_IP|${POD_IP?}|g\" /tmp/storageconfig.hcl;\n\
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vault' of StatefulSet 'vault' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vault4_9.yaml:61-148
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         image: hashicorp/vault:1.18.4
  63 │         command:
  64 │         - /bin/sh
  65 │         - -ec
  66 │         args:
  67 │         - "cp /vault/config/extraconfig-from-values.hcl /tmp/storageconfig.hcl;\n\
  68 │           [ -n \"${HOST_IP}\" ] && sed -Ei \"s|HOST_IP|${HOST_IP?}|g\" /tmp/storageconfig.hcl;\n\
  69 └           [ -n \"${POD_IP}\" ] && sed -Ei \"s|POD_IP|${POD_IP?}|g\" /tmp/storageconfig.hcl;\n\
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vault' of StatefulSet 'vault' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vault4_9.yaml:61-148
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         image: hashicorp/vault:1.18.4
  63 │         command:
  64 │         - /bin/sh
  65 │         - -ec
  66 │         args:
  67 │         - "cp /vault/config/extraconfig-from-values.hcl /tmp/storageconfig.hcl;\n\
  68 │           [ -n \"${HOST_IP}\" ] && sed -Ei \"s|HOST_IP|${HOST_IP?}|g\" /tmp/storageconfig.hcl;\n\
  69 └           [ -n \"${POD_IP}\" ] && sed -Ei \"s|POD_IP|${POD_IP?}|g\" /tmp/storageconfig.hcl;\n\
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vault' of StatefulSet 'vault' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vault4_9.yaml:61-148
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         image: hashicorp/vault:1.18.4
  63 │         command:
  64 │         - /bin/sh
  65 │         - -ec
  66 │         args:
  67 │         - "cp /vault/config/extraconfig-from-values.hcl /tmp/storageconfig.hcl;\n\
  68 │           [ -n \"${HOST_IP}\" ] && sed -Ei \"s|HOST_IP|${HOST_IP?}|g\" /tmp/storageconfig.hcl;\n\
  69 └           [ -n \"${POD_IP}\" ] && sed -Ei \"s|POD_IP|${POD_IP?}|g\" /tmp/storageconfig.hcl;\n\
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vault' of StatefulSet 'vault' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vault4_9.yaml:61-148
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         image: hashicorp/vault:1.18.4
  63 │         command:
  64 │         - /bin/sh
  65 │         - -ec
  66 │         args:
  67 │         - "cp /vault/config/extraconfig-from-values.hcl /tmp/storageconfig.hcl;\n\
  68 │           [ -n \"${HOST_IP}\" ] && sed -Ei \"s|HOST_IP|${HOST_IP?}|g\" /tmp/storageconfig.hcl;\n\
  69 └           [ -n \"${POD_IP}\" ] && sed -Ei \"s|POD_IP|${POD_IP?}|g\" /tmp/storageconfig.hcl;\n\
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vault4_9.yaml:61-148
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         image: hashicorp/vault:1.18.4
  63 │         command:
  64 │         - /bin/sh
  65 │         - -ec
  66 │         args:
  67 │         - "cp /vault/config/extraconfig-from-values.hcl /tmp/storageconfig.hcl;\n\
  68 │           [ -n \"${HOST_IP}\" ] && sed -Ei \"s|HOST_IP|${HOST_IP?}|g\" /tmp/storageconfig.hcl;\n\
  69 └           [ -n \"${POD_IP}\" ] && sed -Ei \"s|POD_IP|${POD_IP?}|g\" /tmp/storageconfig.hcl;\n\
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vault" of statefulset "vault" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vault4_9.yaml:61-148
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         image: hashicorp/vault:1.18.4
  63 │         command:
  64 │         - /bin/sh
  65 │         - -ec
  66 │         args:
  67 │         - "cp /vault/config/extraconfig-from-values.hcl /tmp/storageconfig.hcl;\n\
  68 │           [ -n \"${HOST_IP}\" ] && sed -Ei \"s|HOST_IP|${HOST_IP?}|g\" /tmp/storageconfig.hcl;\n\
  69 └           [ -n \"${POD_IP}\" ] && sed -Ei \"s|POD_IP|${POD_IP?}|g\" /tmp/storageconfig.hcl;\n\
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vault4_9.yaml:61-148
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         image: hashicorp/vault:1.18.4
  63 │         command:
  64 │         - /bin/sh
  65 │         - -ec
  66 │         args:
  67 │         - "cp /vault/config/extraconfig-from-values.hcl /tmp/storageconfig.hcl;\n\
  68 │           [ -n \"${HOST_IP}\" ] && sed -Ei \"s|HOST_IP|${HOST_IP?}|g\" /tmp/storageconfig.hcl;\n\
  69 └           [ -n \"${POD_IP}\" ] && sed -Ei \"s|POD_IP|${POD_IP?}|g\" /tmp/storageconfig.hcl;\n\
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset vault in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 vault4_9.yaml:4-7
────────────────────────────────────────
   4 ┌   name: vault
   5 │   labels:
   6 │     app.kubernetes.io/name: vault
   7 └     app.kubernetes.io/instance: vault
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vault in statefulset vault (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vault4_9.yaml:61-148
────────────────────────────────────────
  61 ┌       - name: vault
  62 │         image: hashicorp/vault:1.18.4
  63 │         command:
  64 │         - /bin/sh
  65 │         - -ec
  66 │         args:
  67 │         - "cp /vault/config/extraconfig-from-values.hcl /tmp/storageconfig.hcl;\n\
  68 │           [ -n \"${HOST_IP}\" ] && sed -Ei \"s|HOST_IP|${HOST_IP?}|g\" /tmp/storageconfig.hcl;\n\
  69 └           [ -n \"${POD_IP}\" ] && sed -Ei \"s|POD_IP|${POD_IP?}|g\" /tmp/storageconfig.hcl;\n\
  ..   
────────────────────────────────────────



vault5_15.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 6, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'sidecar-injector' of Deployment 'vault-agent-injector' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vault5_15.yaml:41-110
────────────────────────────────────────
  41 ┌       - name: sidecar-injector
  42 │         resources:
  43 │           limits:
  44 │             cpu: 250m
  45 │             memory: 256Mi
  46 │           requests:
  47 │             cpu: 50m
  48 │             memory: 50Mi
  49 └         image: hashicorp/vault-k8s:0.14.1
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sidecar-injector' of 'deployment' 'vault-agent-injector' in 'vault' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vault5_15.yaml:41-110
────────────────────────────────────────
  41 ┌       - name: sidecar-injector
  42 │         resources:
  43 │           limits:
  44 │             cpu: 250m
  45 │             memory: 256Mi
  46 │           requests:
  47 │             cpu: 50m
  48 │             memory: 50Mi
  49 └         image: hashicorp/vault-k8s:0.14.1
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sidecar-injector' of Deployment 'vault-agent-injector' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vault5_15.yaml:41-110
────────────────────────────────────────
  41 ┌       - name: sidecar-injector
  42 │         resources:
  43 │           limits:
  44 │             cpu: 250m
  45 │             memory: 256Mi
  46 │           requests:
  47 │             cpu: 50m
  48 │             memory: 50Mi
  49 └         image: hashicorp/vault-k8s:0.14.1
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sidecar-injector' of Deployment 'vault-agent-injector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vault5_15.yaml:41-110
────────────────────────────────────────
  41 ┌       - name: sidecar-injector
  42 │         resources:
  43 │           limits:
  44 │             cpu: 250m
  45 │             memory: 256Mi
  46 │           requests:
  47 │             cpu: 50m
  48 │             memory: 50Mi
  49 └         image: hashicorp/vault-k8s:0.14.1
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sidecar-injector' of Deployment 'vault-agent-injector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vault5_15.yaml:41-110
────────────────────────────────────────
  41 ┌       - name: sidecar-injector
  42 │         resources:
  43 │           limits:
  44 │             cpu: 250m
  45 │             memory: 256Mi
  46 │           requests:
  47 │             cpu: 50m
  48 │             memory: 50Mi
  49 └         image: hashicorp/vault-k8s:0.14.1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vault5_15.yaml:41-110
────────────────────────────────────────
  41 ┌       - name: sidecar-injector
  42 │         resources:
  43 │           limits:
  44 │             cpu: 250m
  45 │             memory: 256Mi
  46 │           requests:
  47 │             cpu: 50m
  48 │             memory: 50Mi
  49 └         image: hashicorp/vault-k8s:0.14.1
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sidecar-injector" of deployment "vault-agent-injector" in "vault" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vault5_15.yaml:41-110
────────────────────────────────────────
  41 ┌       - name: sidecar-injector
  42 │         resources:
  43 │           limits:
  44 │             cpu: 250m
  45 │             memory: 256Mi
  46 │           requests:
  47 │             cpu: 50m
  48 │             memory: 50Mi
  49 └         image: hashicorp/vault-k8s:0.14.1
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vault5_15.yaml:41-110
────────────────────────────────────────
  41 ┌       - name: sidecar-injector
  42 │         resources:
  43 │           limits:
  44 │             cpu: 250m
  45 │             memory: 256Mi
  46 │           requests:
  47 │             cpu: 50m
  48 │             memory: 50Mi
  49 └         image: hashicorp/vault-k8s:0.14.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container sidecar-injector in deployment vault-agent-injector (namespace: vault) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vault5_15.yaml:41-110
────────────────────────────────────────
  41 ┌       - name: sidecar-injector
  42 │         resources:
  43 │           limits:
  44 │             cpu: 250m
  45 │             memory: 256Mi
  46 │           requests:
  47 │             cpu: 50m
  48 │             memory: 50Mi
  49 └         image: hashicorp/vault-k8s:0.14.1
  ..   
────────────────────────────────────────



vault5_16.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 6, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'vault' of StatefulSet 'vault' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vault5_16.yaml:60-164
────────────────────────────────────────
  60 ┌       - name: vault
  61 │         resources:
  62 │           limits:
  63 │             cpu: 2000m
  64 │             memory: 16Gi
  65 │           requests:
  66 │             cpu: 500m
  67 │             memory: 50Mi
  68 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vault' of 'statefulset' 'vault' in 'vault' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vault5_16.yaml:60-164
────────────────────────────────────────
  60 ┌       - name: vault
  61 │         resources:
  62 │           limits:
  63 │             cpu: 2000m
  64 │             memory: 16Gi
  65 │           requests:
  66 │             cpu: 500m
  67 │             memory: 50Mi
  68 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vault' of StatefulSet 'vault' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vault5_16.yaml:60-164
────────────────────────────────────────
  60 ┌       - name: vault
  61 │         resources:
  62 │           limits:
  63 │             cpu: 2000m
  64 │             memory: 16Gi
  65 │           requests:
  66 │             cpu: 500m
  67 │             memory: 50Mi
  68 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vault' of StatefulSet 'vault' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vault5_16.yaml:60-164
────────────────────────────────────────
  60 ┌       - name: vault
  61 │         resources:
  62 │           limits:
  63 │             cpu: 2000m
  64 │             memory: 16Gi
  65 │           requests:
  66 │             cpu: 500m
  67 │             memory: 50Mi
  68 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vault' of StatefulSet 'vault' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vault5_16.yaml:60-164
────────────────────────────────────────
  60 ┌       - name: vault
  61 │         resources:
  62 │           limits:
  63 │             cpu: 2000m
  64 │             memory: 16Gi
  65 │           requests:
  66 │             cpu: 500m
  67 │             memory: 50Mi
  68 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vault5_16.yaml:60-164
────────────────────────────────────────
  60 ┌       - name: vault
  61 │         resources:
  62 │           limits:
  63 │             cpu: 2000m
  64 │             memory: 16Gi
  65 │           requests:
  66 │             cpu: 500m
  67 │             memory: 50Mi
  68 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vault" of statefulset "vault" in "vault" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vault5_16.yaml:60-164
────────────────────────────────────────
  60 ┌       - name: vault
  61 │         resources:
  62 │           limits:
  63 │             cpu: 2000m
  64 │             memory: 16Gi
  65 │           requests:
  66 │             cpu: 500m
  67 │             memory: 50Mi
  68 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vault5_16.yaml:60-164
────────────────────────────────────────
  60 ┌       - name: vault
  61 │         resources:
  62 │           limits:
  63 │             cpu: 2000m
  64 │             memory: 16Gi
  65 │           requests:
  66 │             cpu: 500m
  67 │             memory: 50Mi
  68 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vault in statefulset vault (namespace: vault) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vault5_16.yaml:60-164
────────────────────────────────────────
  60 ┌       - name: vault
  61 │         resources:
  62 │           limits:
  63 │             cpu: 2000m
  64 │             memory: 16Gi
  65 │           requests:
  66 │             cpu: 500m
  67 │             memory: 50Mi
  68 └         image: hashicorp/vault:1.9.2
  ..   
────────────────────────────────────────



vault5_18.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'vault-server-test' of Pod 'vault-server-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vault5_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vault5_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vault-server-test' of 'pod' 'vault-server-test' in 'vault' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vault5_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vault5_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vault-server-test' of Pod 'vault-server-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vault5_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vault-server-test' of Pod 'vault-server-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vault5_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vault5_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vault5_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vault5_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vault5_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vault-server-test' of Pod 'vault-server-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vault5_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vault5_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vault-server-test" of pod "vault-server-test" in "vault" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vault5_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vault5_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vault-server-test in vault namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vault5_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod vault-server-test in vault namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vault5_18.yaml:9-28
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 └       value: /vault/userconfig/tls-ca/tls.crt
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vault-server-test in pod vault-server-test (namespace: vault) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vault5_18.yaml:10-21
────────────────────────────────────────
  10 ┌   - name: vault-server-test
  11 │     image: hashicorp/vault:1.9.2
  12 │     imagePullPolicy: IfNotPresent
  13 │     env:
  14 │     - name: VAULT_ADDR
  15 │       value: https://vault.vault.svc:8200
  16 │     - name: VAULT_CACERT
  17 │       value: /vault/userconfig/tls-ca/tls.crt
  18 └     command:
  ..   
────────────────────────────────────────



vault5_4.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'vault-agent-injector-clusterrole' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 vault5_4.yaml:10-18
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - admissionregistration.k8s.io
  12 │   resources:
  13 │   - mutatingwebhookconfigurations
  14 │   verbs:
  15 │   - get
  16 │   - list
  17 │   - watch
  18 └   - patch
────────────────────────────────────────



vault5_7.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'vault-discovery-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 vault5_7.yaml:12-21
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - pods
  16 │   verbs:
  17 │   - get
  18 │   - watch
  19 │   - list
  20 │   - update
  21 └   - patch
────────────────────────────────────────



vaultwarden-cloudflare-tunnel.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'vaultwarden-cloudflare-tunnel' of Deployment 'vaultwarden-cloudflare-tunnel' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vaultwarden-cloudflare-tunnel.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: vaultwarden-cloudflare-tunnel
  18 │           image: cloudflare/cloudflared:latest
  19 │           env:
  20 │             - name: token
  21 │               valueFrom:
  22 │                 secretKeyRef:
  23 │                   key: "tunnel_token"
  24 │                   name: "cloudflare-token"
  25 └           command: ["cloudflared"]
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vaultwarden-cloudflare-tunnel' of Deployment 'vaultwarden-cloudflare-tunnel' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vaultwarden-cloudflare-tunnel.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: vaultwarden-cloudflare-tunnel
  18 │           image: cloudflare/cloudflared:latest
  19 │           env:
  20 │             - name: token
  21 │               valueFrom:
  22 │                 secretKeyRef:
  23 │                   key: "tunnel_token"
  24 │                   name: "cloudflare-token"
  25 └           command: ["cloudflared"]
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vaultwarden-cloudflare-tunnel' of 'deployment' 'vaultwarden-cloudflare-tunnel' in 'vaultwarden' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vaultwarden-cloudflare-tunnel.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: vaultwarden-cloudflare-tunnel
  18 │           image: cloudflare/cloudflared:latest
  19 │           env:
  20 │             - name: token
  21 │               valueFrom:
  22 │                 secretKeyRef:
  23 │                   key: "tunnel_token"
  24 │                   name: "cloudflare-token"
  25 └           command: ["cloudflared"]
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vaultwarden-cloudflare-tunnel' of Deployment 'vaultwarden-cloudflare-tunnel' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vaultwarden-cloudflare-tunnel.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: vaultwarden-cloudflare-tunnel
  18 │           image: cloudflare/cloudflared:latest
  19 │           env:
  20 │             - name: token
  21 │               valueFrom:
  22 │                 secretKeyRef:
  23 │                   key: "tunnel_token"
  24 │                   name: "cloudflare-token"
  25 └           command: ["cloudflared"]
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vaultwarden-cloudflare-tunnel' of Deployment 'vaultwarden-cloudflare-tunnel' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 vaultwarden-cloudflare-tunnel.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: vaultwarden-cloudflare-tunnel
  18 │           image: cloudflare/cloudflared:latest
  19 │           env:
  20 │             - name: token
  21 │               valueFrom:
  22 │                 secretKeyRef:
  23 │                   key: "tunnel_token"
  24 │                   name: "cloudflare-token"
  25 └           command: ["cloudflared"]
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vaultwarden-cloudflare-tunnel' of Deployment 'vaultwarden-cloudflare-tunnel' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vaultwarden-cloudflare-tunnel.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: vaultwarden-cloudflare-tunnel
  18 │           image: cloudflare/cloudflared:latest
  19 │           env:
  20 │             - name: token
  21 │               valueFrom:
  22 │                 secretKeyRef:
  23 │                   key: "tunnel_token"
  24 │                   name: "cloudflare-token"
  25 └           command: ["cloudflared"]
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vaultwarden-cloudflare-tunnel' of Deployment 'vaultwarden-cloudflare-tunnel' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vaultwarden-cloudflare-tunnel.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: vaultwarden-cloudflare-tunnel
  18 │           image: cloudflare/cloudflared:latest
  19 │           env:
  20 │             - name: token
  21 │               valueFrom:
  22 │                 secretKeyRef:
  23 │                   key: "tunnel_token"
  24 │                   name: "cloudflare-token"
  25 └           command: ["cloudflared"]
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vaultwarden-cloudflare-tunnel' of Deployment 'vaultwarden-cloudflare-tunnel' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vaultwarden-cloudflare-tunnel.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: vaultwarden-cloudflare-tunnel
  18 │           image: cloudflare/cloudflared:latest
  19 │           env:
  20 │             - name: token
  21 │               valueFrom:
  22 │                 secretKeyRef:
  23 │                   key: "tunnel_token"
  24 │                   name: "cloudflare-token"
  25 └           command: ["cloudflared"]
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vaultwarden-cloudflare-tunnel.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: vaultwarden-cloudflare-tunnel
  18 │           image: cloudflare/cloudflared:latest
  19 │           env:
  20 │             - name: token
  21 │               valueFrom:
  22 │                 secretKeyRef:
  23 │                   key: "tunnel_token"
  24 │                   name: "cloudflare-token"
  25 └           command: ["cloudflared"]
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vaultwarden-cloudflare-tunnel" of deployment "vaultwarden-cloudflare-tunnel" in "vaultwarden" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vaultwarden-cloudflare-tunnel.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: vaultwarden-cloudflare-tunnel
  18 │           image: cloudflare/cloudflared:latest
  19 │           env:
  20 │             - name: token
  21 │               valueFrom:
  22 │                 secretKeyRef:
  23 │                   key: "tunnel_token"
  24 │                   name: "cloudflare-token"
  25 └           command: ["cloudflared"]
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vaultwarden-cloudflare-tunnel.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: vaultwarden-cloudflare-tunnel
  18 │           image: cloudflare/cloudflared:latest
  19 │           env:
  20 │             - name: token
  21 │               valueFrom:
  22 │                 secretKeyRef:
  23 │                   key: "tunnel_token"
  24 │                   name: "cloudflare-token"
  25 └           command: ["cloudflared"]
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vaultwarden-cloudflare-tunnel in vaultwarden namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vaultwarden-cloudflare-tunnel.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: vaultwarden-cloudflare-tunnel
  18 │           image: cloudflare/cloudflared:latest
  19 │           env:
  20 │             - name: token
  21 │               valueFrom:
  22 │                 secretKeyRef:
  23 │                   key: "tunnel_token"
  24 │                   name: "cloudflare-token"
  25 └           command: ["cloudflared"]
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vaultwarden-cloudflare-tunnel in vaultwarden namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vaultwarden-cloudflare-tunnel.yaml:16-33
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: vaultwarden-cloudflare-tunnel
  18 │           image: cloudflare/cloudflared:latest
  19 │           env:
  20 │             - name: token
  21 │               valueFrom:
  22 │                 secretKeyRef:
  23 │                   key: "tunnel_token"
  24 └                   name: "cloudflare-token"
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vaultwarden-cloudflare-tunnel in deployment vaultwarden-cloudflare-tunnel (namespace: vaultwarden) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vaultwarden-cloudflare-tunnel.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: vaultwarden-cloudflare-tunnel
  18 │           image: cloudflare/cloudflared:latest
  19 │           env:
  20 │             - name: token
  21 │               valueFrom:
  22 │                 secretKeyRef:
  23 │                   key: "tunnel_token"
  24 │                   name: "cloudflare-token"
  25 └           command: ["cloudflared"]
  ..   
────────────────────────────────────────



vaultwarden-deployment.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'vaultwarden' of Deployment 'vaultwarden' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vaultwarden-deployment.yaml:29-43
────────────────────────────────────────
  29 ┌         - env:
  30 │             # - name: ADMIN_TOKEN
  31 │             #   value: 
  32 │             # - name: DOMAIN
  33 │             #   value: https://
  34 │             # - name: SIGNUPS_ALLOWED
  35 │             #   value: 
  36 │             - name: WEBSOCKET_ENABLED
  37 └               value: "true"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vaultwarden' of Deployment 'vaultwarden' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vaultwarden-deployment.yaml:29-43
────────────────────────────────────────
  29 ┌         - env:
  30 │             # - name: ADMIN_TOKEN
  31 │             #   value: 
  32 │             # - name: DOMAIN
  33 │             #   value: https://
  34 │             # - name: SIGNUPS_ALLOWED
  35 │             #   value: 
  36 │             - name: WEBSOCKET_ENABLED
  37 └               value: "true"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vaultwarden' of 'deployment' 'vaultwarden' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vaultwarden-deployment.yaml:29-43
────────────────────────────────────────
  29 ┌         - env:
  30 │             # - name: ADMIN_TOKEN
  31 │             #   value: 
  32 │             # - name: DOMAIN
  33 │             #   value: https://
  34 │             # - name: SIGNUPS_ALLOWED
  35 │             #   value: 
  36 │             - name: WEBSOCKET_ENABLED
  37 └               value: "true"
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vaultwarden' of Deployment 'vaultwarden' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vaultwarden-deployment.yaml:29-43
────────────────────────────────────────
  29 ┌         - env:
  30 │             # - name: ADMIN_TOKEN
  31 │             #   value: 
  32 │             # - name: DOMAIN
  33 │             #   value: https://
  34 │             # - name: SIGNUPS_ALLOWED
  35 │             #   value: 
  36 │             - name: WEBSOCKET_ENABLED
  37 └               value: "true"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vaultwarden' of Deployment 'vaultwarden' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vaultwarden-deployment.yaml:29-43
────────────────────────────────────────
  29 ┌         - env:
  30 │             # - name: ADMIN_TOKEN
  31 │             #   value: 
  32 │             # - name: DOMAIN
  33 │             #   value: https://
  34 │             # - name: SIGNUPS_ALLOWED
  35 │             #   value: 
  36 │             - name: WEBSOCKET_ENABLED
  37 └               value: "true"
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vaultwarden' of Deployment 'vaultwarden' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 vaultwarden-deployment.yaml:29-43
────────────────────────────────────────
  29 ┌         - env:
  30 │             # - name: ADMIN_TOKEN
  31 │             #   value: 
  32 │             # - name: DOMAIN
  33 │             #   value: https://
  34 │             # - name: SIGNUPS_ALLOWED
  35 │             #   value: 
  36 │             - name: WEBSOCKET_ENABLED
  37 └               value: "true"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vaultwarden' of Deployment 'vaultwarden' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vaultwarden-deployment.yaml:29-43
────────────────────────────────────────
  29 ┌         - env:
  30 │             # - name: ADMIN_TOKEN
  31 │             #   value: 
  32 │             # - name: DOMAIN
  33 │             #   value: https://
  34 │             # - name: SIGNUPS_ALLOWED
  35 │             #   value: 
  36 │             - name: WEBSOCKET_ENABLED
  37 └               value: "true"
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vaultwarden' of Deployment 'vaultwarden' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vaultwarden-deployment.yaml:29-43
────────────────────────────────────────
  29 ┌         - env:
  30 │             # - name: ADMIN_TOKEN
  31 │             #   value: 
  32 │             # - name: DOMAIN
  33 │             #   value: https://
  34 │             # - name: SIGNUPS_ALLOWED
  35 │             #   value: 
  36 │             - name: WEBSOCKET_ENABLED
  37 └               value: "true"
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vaultwarden' of Deployment 'vaultwarden' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vaultwarden-deployment.yaml:29-43
────────────────────────────────────────
  29 ┌         - env:
  30 │             # - name: ADMIN_TOKEN
  31 │             #   value: 
  32 │             # - name: DOMAIN
  33 │             #   value: https://
  34 │             # - name: SIGNUPS_ALLOWED
  35 │             #   value: 
  36 │             - name: WEBSOCKET_ENABLED
  37 └               value: "true"
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vaultwarden' of Deployment 'vaultwarden' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vaultwarden-deployment.yaml:29-43
────────────────────────────────────────
  29 ┌         - env:
  30 │             # - name: ADMIN_TOKEN
  31 │             #   value: 
  32 │             # - name: DOMAIN
  33 │             #   value: https://
  34 │             # - name: SIGNUPS_ALLOWED
  35 │             #   value: 
  36 │             - name: WEBSOCKET_ENABLED
  37 └               value: "true"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vaultwarden' of Deployment 'vaultwarden' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vaultwarden-deployment.yaml:29-43
────────────────────────────────────────
  29 ┌         - env:
  30 │             # - name: ADMIN_TOKEN
  31 │             #   value: 
  32 │             # - name: DOMAIN
  33 │             #   value: https://
  34 │             # - name: SIGNUPS_ALLOWED
  35 │             #   value: 
  36 │             - name: WEBSOCKET_ENABLED
  37 └               value: "true"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vaultwarden' of Deployment 'vaultwarden' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vaultwarden-deployment.yaml:29-43
────────────────────────────────────────
  29 ┌         - env:
  30 │             # - name: ADMIN_TOKEN
  31 │             #   value: 
  32 │             # - name: DOMAIN
  33 │             #   value: https://
  34 │             # - name: SIGNUPS_ALLOWED
  35 │             #   value: 
  36 │             - name: WEBSOCKET_ENABLED
  37 └               value: "true"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vaultwarden-deployment.yaml:29-43
────────────────────────────────────────
  29 ┌         - env:
  30 │             # - name: ADMIN_TOKEN
  31 │             #   value: 
  32 │             # - name: DOMAIN
  33 │             #   value: https://
  34 │             # - name: SIGNUPS_ALLOWED
  35 │             #   value: 
  36 │             - name: WEBSOCKET_ENABLED
  37 └               value: "true"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vaultwarden" of deployment "vaultwarden" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vaultwarden-deployment.yaml:29-43
────────────────────────────────────────
  29 ┌         - env:
  30 │             # - name: ADMIN_TOKEN
  31 │             #   value: 
  32 │             # - name: DOMAIN
  33 │             #   value: https://
  34 │             # - name: SIGNUPS_ALLOWED
  35 │             #   value: 
  36 │             - name: WEBSOCKET_ENABLED
  37 └               value: "true"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vaultwarden-deployment.yaml:29-43
────────────────────────────────────────
  29 ┌         - env:
  30 │             # - name: ADMIN_TOKEN
  31 │             #   value: 
  32 │             # - name: DOMAIN
  33 │             #   value: https://
  34 │             # - name: SIGNUPS_ALLOWED
  35 │             #   value: 
  36 │             - name: WEBSOCKET_ENABLED
  37 └               value: "true"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vaultwarden in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 vaultwarden-deployment.yaml:4-10
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: kompose convert
   6 │     kompose.version: 1.22.0 (955b78124)
   7 │   creationTimestamp: null
   8 │   labels:
   9 │     io.kompose.service: vaultwarden
  10 └   name: vaultwarden
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vaultwarden in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vaultwarden-deployment.yaml:29-43
────────────────────────────────────────
  29 ┌         - env:
  30 │             # - name: ADMIN_TOKEN
  31 │             #   value: 
  32 │             # - name: DOMAIN
  33 │             #   value: https://
  34 │             # - name: SIGNUPS_ALLOWED
  35 │             #   value: 
  36 │             - name: WEBSOCKET_ENABLED
  37 └               value: "true"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vaultwarden in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vaultwarden-deployment.yaml:28-48
────────────────────────────────────────
  28 ┌       containers:
  29 │         - env:
  30 │             # - name: ADMIN_TOKEN
  31 │             #   value: 
  32 │             # - name: DOMAIN
  33 │             #   value: https://
  34 │             # - name: SIGNUPS_ALLOWED
  35 │             #   value: 
  36 └             - name: WEBSOCKET_ENABLED
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vaultwarden in deployment vaultwarden (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vaultwarden-deployment.yaml:29-43
────────────────────────────────────────
  29 ┌         - env:
  30 │             # - name: ADMIN_TOKEN
  31 │             #   value: 
  32 │             # - name: DOMAIN
  33 │             #   value: https://
  34 │             # - name: SIGNUPS_ALLOWED
  35 │             #   value: 
  36 │             - name: WEBSOCKET_ENABLED
  37 └               value: "true"
  ..   
────────────────────────────────────────



vector-add-2.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cuda-vector-add' of Pod 'gpu-operator-test-2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vector-add-2.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: cuda-vector-add
   9 │       #image: "nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubuntu20.04"
  10 │       image: "nvidia/cuda:12.3.1-runtime-ubuntu22.04"
  11 │       command: ["/bin/sh"]
  12 │       args: ["-c", "tail -f /dev/null"]
  13 │       resources:
  14 │         limits:
  15 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cuda-vector-add' of Pod 'gpu-operator-test-2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vector-add-2.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: cuda-vector-add
   9 │       #image: "nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubuntu20.04"
  10 │       image: "nvidia/cuda:12.3.1-runtime-ubuntu22.04"
  11 │       command: ["/bin/sh"]
  12 │       args: ["-c", "tail -f /dev/null"]
  13 │       resources:
  14 │         limits:
  15 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cuda-vector-add' of 'pod' 'gpu-operator-test-2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vector-add-2.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: cuda-vector-add
   9 │       #image: "nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubuntu20.04"
  10 │       image: "nvidia/cuda:12.3.1-runtime-ubuntu22.04"
  11 │       command: ["/bin/sh"]
  12 │       args: ["-c", "tail -f /dev/null"]
  13 │       resources:
  14 │         limits:
  15 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cuda-vector-add' of Pod 'gpu-operator-test-2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vector-add-2.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: cuda-vector-add
   9 │       #image: "nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubuntu20.04"
  10 │       image: "nvidia/cuda:12.3.1-runtime-ubuntu22.04"
  11 │       command: ["/bin/sh"]
  12 │       args: ["-c", "tail -f /dev/null"]
  13 │       resources:
  14 │         limits:
  15 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cuda-vector-add' of Pod 'gpu-operator-test-2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vector-add-2.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: cuda-vector-add
   9 │       #image: "nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubuntu20.04"
  10 │       image: "nvidia/cuda:12.3.1-runtime-ubuntu22.04"
  11 │       command: ["/bin/sh"]
  12 │       args: ["-c", "tail -f /dev/null"]
  13 │       resources:
  14 │         limits:
  15 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cuda-vector-add' of Pod 'gpu-operator-test-2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vector-add-2.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: cuda-vector-add
   9 │       #image: "nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubuntu20.04"
  10 │       image: "nvidia/cuda:12.3.1-runtime-ubuntu22.04"
  11 │       command: ["/bin/sh"]
  12 │       args: ["-c", "tail -f /dev/null"]
  13 │       resources:
  14 │         limits:
  15 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cuda-vector-add' of Pod 'gpu-operator-test-2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vector-add-2.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: cuda-vector-add
   9 │       #image: "nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubuntu20.04"
  10 │       image: "nvidia/cuda:12.3.1-runtime-ubuntu22.04"
  11 │       command: ["/bin/sh"]
  12 │       args: ["-c", "tail -f /dev/null"]
  13 │       resources:
  14 │         limits:
  15 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cuda-vector-add' of Pod 'gpu-operator-test-2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vector-add-2.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: cuda-vector-add
   9 │       #image: "nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubuntu20.04"
  10 │       image: "nvidia/cuda:12.3.1-runtime-ubuntu22.04"
  11 │       command: ["/bin/sh"]
  12 │       args: ["-c", "tail -f /dev/null"]
  13 │       resources:
  14 │         limits:
  15 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cuda-vector-add' of Pod 'gpu-operator-test-2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vector-add-2.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: cuda-vector-add
   9 │       #image: "nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubuntu20.04"
  10 │       image: "nvidia/cuda:12.3.1-runtime-ubuntu22.04"
  11 │       command: ["/bin/sh"]
  12 │       args: ["-c", "tail -f /dev/null"]
  13 │       resources:
  14 │         limits:
  15 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cuda-vector-add' of Pod 'gpu-operator-test-2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vector-add-2.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: cuda-vector-add
   9 │       #image: "nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubuntu20.04"
  10 │       image: "nvidia/cuda:12.3.1-runtime-ubuntu22.04"
  11 │       command: ["/bin/sh"]
  12 │       args: ["-c", "tail -f /dev/null"]
  13 │       resources:
  14 │         limits:
  15 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cuda-vector-add' of Pod 'gpu-operator-test-2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vector-add-2.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: cuda-vector-add
   9 │       #image: "nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubuntu20.04"
  10 │       image: "nvidia/cuda:12.3.1-runtime-ubuntu22.04"
  11 │       command: ["/bin/sh"]
  12 │       args: ["-c", "tail -f /dev/null"]
  13 │       resources:
  14 │         limits:
  15 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vector-add-2.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: cuda-vector-add
   9 │       #image: "nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubuntu20.04"
  10 │       image: "nvidia/cuda:12.3.1-runtime-ubuntu22.04"
  11 │       command: ["/bin/sh"]
  12 │       args: ["-c", "tail -f /dev/null"]
  13 │       resources:
  14 │         limits:
  15 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cuda-vector-add" of pod "gpu-operator-test-2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vector-add-2.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: cuda-vector-add
   9 │       #image: "nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubuntu20.04"
  10 │       image: "nvidia/cuda:12.3.1-runtime-ubuntu22.04"
  11 │       command: ["/bin/sh"]
  12 │       args: ["-c", "tail -f /dev/null"]
  13 │       resources:
  14 │         limits:
  15 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vector-add-2.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: cuda-vector-add
   9 │       #image: "nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubuntu20.04"
  10 │       image: "nvidia/cuda:12.3.1-runtime-ubuntu22.04"
  11 │       command: ["/bin/sh"]
  12 │       args: ["-c", "tail -f /dev/null"]
  13 │       resources:
  14 │         limits:
  15 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod gpu-operator-test-2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 vector-add-2.yaml:4
────────────────────────────────────────
   4 [   name: gpu-operator-test-2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container gpu-operator-test-2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vector-add-2.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: cuda-vector-add
   9 │       #image: "nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubuntu20.04"
  10 │       image: "nvidia/cuda:12.3.1-runtime-ubuntu22.04"
  11 │       command: ["/bin/sh"]
  12 │       args: ["-c", "tail -f /dev/null"]
  13 │       resources:
  14 │         limits:
  15 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod gpu-operator-test-2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vector-add-2.yaml:6-19
────────────────────────────────────────
   6 ┌   restartPolicy: OnFailure
   7 │   containers:
   8 │     - name: cuda-vector-add
   9 │       #image: "nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubuntu20.04"
  10 │       image: "nvidia/cuda:12.3.1-runtime-ubuntu22.04"
  11 │       command: ["/bin/sh"]
  12 │       args: ["-c", "tail -f /dev/null"]
  13 │       resources:
  14 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cuda-vector-add in pod gpu-operator-test-2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vector-add-2.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: cuda-vector-add
   9 │       #image: "nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubuntu20.04"
  10 │       image: "nvidia/cuda:12.3.1-runtime-ubuntu22.04"
  11 │       command: ["/bin/sh"]
  12 │       args: ["-c", "tail -f /dev/null"]
  13 │       resources:
  14 │         limits:
  15 └           nvidia.com/gpu: 1
────────────────────────────────────────



vector-add-3.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cuda-vector-add' of Pod 'gpu-operator-test-3' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vector-add-3.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cuda-vector-add
   9 │     image: nvidia/cuda:12.3.1-runtime-ubuntu22.04
  10 │     command:
  11 │     - /bin/sh
  12 │     args:
  13 │     - -c
  14 │     - tail -f /dev/null
  15 │     resources:
  16 │       limits:
  17 └         nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cuda-vector-add' of Pod 'gpu-operator-test-3' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vector-add-3.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cuda-vector-add
   9 │     image: nvidia/cuda:12.3.1-runtime-ubuntu22.04
  10 │     command:
  11 │     - /bin/sh
  12 │     args:
  13 │     - -c
  14 │     - tail -f /dev/null
  15 │     resources:
  16 │       limits:
  17 └         nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cuda-vector-add' of 'pod' 'gpu-operator-test-3' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vector-add-3.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cuda-vector-add
   9 │     image: nvidia/cuda:12.3.1-runtime-ubuntu22.04
  10 │     command:
  11 │     - /bin/sh
  12 │     args:
  13 │     - -c
  14 │     - tail -f /dev/null
  15 │     resources:
  16 │       limits:
  17 └         nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cuda-vector-add' of Pod 'gpu-operator-test-3' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vector-add-3.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cuda-vector-add
   9 │     image: nvidia/cuda:12.3.1-runtime-ubuntu22.04
  10 │     command:
  11 │     - /bin/sh
  12 │     args:
  13 │     - -c
  14 │     - tail -f /dev/null
  15 │     resources:
  16 │       limits:
  17 └         nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cuda-vector-add' of Pod 'gpu-operator-test-3' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vector-add-3.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cuda-vector-add
   9 │     image: nvidia/cuda:12.3.1-runtime-ubuntu22.04
  10 │     command:
  11 │     - /bin/sh
  12 │     args:
  13 │     - -c
  14 │     - tail -f /dev/null
  15 │     resources:
  16 │       limits:
  17 └         nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cuda-vector-add' of Pod 'gpu-operator-test-3' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vector-add-3.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cuda-vector-add
   9 │     image: nvidia/cuda:12.3.1-runtime-ubuntu22.04
  10 │     command:
  11 │     - /bin/sh
  12 │     args:
  13 │     - -c
  14 │     - tail -f /dev/null
  15 │     resources:
  16 │       limits:
  17 └         nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cuda-vector-add' of Pod 'gpu-operator-test-3' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vector-add-3.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cuda-vector-add
   9 │     image: nvidia/cuda:12.3.1-runtime-ubuntu22.04
  10 │     command:
  11 │     - /bin/sh
  12 │     args:
  13 │     - -c
  14 │     - tail -f /dev/null
  15 │     resources:
  16 │       limits:
  17 └         nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cuda-vector-add' of Pod 'gpu-operator-test-3' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vector-add-3.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cuda-vector-add
   9 │     image: nvidia/cuda:12.3.1-runtime-ubuntu22.04
  10 │     command:
  11 │     - /bin/sh
  12 │     args:
  13 │     - -c
  14 │     - tail -f /dev/null
  15 │     resources:
  16 │       limits:
  17 └         nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cuda-vector-add' of Pod 'gpu-operator-test-3' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vector-add-3.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cuda-vector-add
   9 │     image: nvidia/cuda:12.3.1-runtime-ubuntu22.04
  10 │     command:
  11 │     - /bin/sh
  12 │     args:
  13 │     - -c
  14 │     - tail -f /dev/null
  15 │     resources:
  16 │       limits:
  17 └         nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cuda-vector-add' of Pod 'gpu-operator-test-3' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vector-add-3.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cuda-vector-add
   9 │     image: nvidia/cuda:12.3.1-runtime-ubuntu22.04
  10 │     command:
  11 │     - /bin/sh
  12 │     args:
  13 │     - -c
  14 │     - tail -f /dev/null
  15 │     resources:
  16 │       limits:
  17 └         nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cuda-vector-add' of Pod 'gpu-operator-test-3' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vector-add-3.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cuda-vector-add
   9 │     image: nvidia/cuda:12.3.1-runtime-ubuntu22.04
  10 │     command:
  11 │     - /bin/sh
  12 │     args:
  13 │     - -c
  14 │     - tail -f /dev/null
  15 │     resources:
  16 │       limits:
  17 └         nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vector-add-3.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cuda-vector-add
   9 │     image: nvidia/cuda:12.3.1-runtime-ubuntu22.04
  10 │     command:
  11 │     - /bin/sh
  12 │     args:
  13 │     - -c
  14 │     - tail -f /dev/null
  15 │     resources:
  16 │       limits:
  17 └         nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cuda-vector-add" of pod "gpu-operator-test-3" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vector-add-3.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cuda-vector-add
   9 │     image: nvidia/cuda:12.3.1-runtime-ubuntu22.04
  10 │     command:
  11 │     - /bin/sh
  12 │     args:
  13 │     - -c
  14 │     - tail -f /dev/null
  15 │     resources:
  16 │       limits:
  17 └         nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vector-add-3.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cuda-vector-add
   9 │     image: nvidia/cuda:12.3.1-runtime-ubuntu22.04
  10 │     command:
  11 │     - /bin/sh
  12 │     args:
  13 │     - -c
  14 │     - tail -f /dev/null
  15 │     resources:
  16 │       limits:
  17 └         nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod gpu-operator-test-3 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 vector-add-3.yaml:4
────────────────────────────────────────
   4 [   name: gpu-operator-test-3
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container gpu-operator-test-3 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vector-add-3.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cuda-vector-add
   9 │     image: nvidia/cuda:12.3.1-runtime-ubuntu22.04
  10 │     command:
  11 │     - /bin/sh
  12 │     args:
  13 │     - -c
  14 │     - tail -f /dev/null
  15 │     resources:
  16 │       limits:
  17 └         nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod gpu-operator-test-3 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vector-add-3.yaml:6-21
────────────────────────────────────────
   6 ┌   restartPolicy: OnFailure
   7 │   containers:
   8 │   - name: cuda-vector-add
   9 │     image: nvidia/cuda:12.3.1-runtime-ubuntu22.04
  10 │     command:
  11 │     - /bin/sh
  12 │     args:
  13 │     - -c
  14 └     - tail -f /dev/null
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cuda-vector-add in pod gpu-operator-test-3 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vector-add-3.yaml:8-17
────────────────────────────────────────
   8 ┌   - name: cuda-vector-add
   9 │     image: nvidia/cuda:12.3.1-runtime-ubuntu22.04
  10 │     command:
  11 │     - /bin/sh
  12 │     args:
  13 │     - -c
  14 │     - tail -f /dev/null
  15 │     resources:
  16 │       limits:
  17 └         nvidia.com/gpu: 1
────────────────────────────────────────



vector-add.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cuda-vector-add' of Pod 'gpu-operator-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vector-add.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: cuda-vector-add
   9 │       #image: "nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubuntu20.04"
  10 │       image: "nvidia/cuda:12.3.1-runtime-ubuntu22.04"
  11 │       command: ["/bin/sh"]
  12 │       args: ["-c", "tail -f /dev/null"]
  13 │       resources:
  14 │         limits:
  15 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cuda-vector-add' of Pod 'gpu-operator-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vector-add.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: cuda-vector-add
   9 │       #image: "nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubuntu20.04"
  10 │       image: "nvidia/cuda:12.3.1-runtime-ubuntu22.04"
  11 │       command: ["/bin/sh"]
  12 │       args: ["-c", "tail -f /dev/null"]
  13 │       resources:
  14 │         limits:
  15 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cuda-vector-add' of 'pod' 'gpu-operator-test' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vector-add.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: cuda-vector-add
   9 │       #image: "nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubuntu20.04"
  10 │       image: "nvidia/cuda:12.3.1-runtime-ubuntu22.04"
  11 │       command: ["/bin/sh"]
  12 │       args: ["-c", "tail -f /dev/null"]
  13 │       resources:
  14 │         limits:
  15 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cuda-vector-add' of Pod 'gpu-operator-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vector-add.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: cuda-vector-add
   9 │       #image: "nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubuntu20.04"
  10 │       image: "nvidia/cuda:12.3.1-runtime-ubuntu22.04"
  11 │       command: ["/bin/sh"]
  12 │       args: ["-c", "tail -f /dev/null"]
  13 │       resources:
  14 │         limits:
  15 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cuda-vector-add' of Pod 'gpu-operator-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vector-add.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: cuda-vector-add
   9 │       #image: "nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubuntu20.04"
  10 │       image: "nvidia/cuda:12.3.1-runtime-ubuntu22.04"
  11 │       command: ["/bin/sh"]
  12 │       args: ["-c", "tail -f /dev/null"]
  13 │       resources:
  14 │         limits:
  15 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cuda-vector-add' of Pod 'gpu-operator-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vector-add.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: cuda-vector-add
   9 │       #image: "nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubuntu20.04"
  10 │       image: "nvidia/cuda:12.3.1-runtime-ubuntu22.04"
  11 │       command: ["/bin/sh"]
  12 │       args: ["-c", "tail -f /dev/null"]
  13 │       resources:
  14 │         limits:
  15 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cuda-vector-add' of Pod 'gpu-operator-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vector-add.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: cuda-vector-add
   9 │       #image: "nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubuntu20.04"
  10 │       image: "nvidia/cuda:12.3.1-runtime-ubuntu22.04"
  11 │       command: ["/bin/sh"]
  12 │       args: ["-c", "tail -f /dev/null"]
  13 │       resources:
  14 │         limits:
  15 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cuda-vector-add' of Pod 'gpu-operator-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vector-add.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: cuda-vector-add
   9 │       #image: "nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubuntu20.04"
  10 │       image: "nvidia/cuda:12.3.1-runtime-ubuntu22.04"
  11 │       command: ["/bin/sh"]
  12 │       args: ["-c", "tail -f /dev/null"]
  13 │       resources:
  14 │         limits:
  15 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cuda-vector-add' of Pod 'gpu-operator-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vector-add.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: cuda-vector-add
   9 │       #image: "nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubuntu20.04"
  10 │       image: "nvidia/cuda:12.3.1-runtime-ubuntu22.04"
  11 │       command: ["/bin/sh"]
  12 │       args: ["-c", "tail -f /dev/null"]
  13 │       resources:
  14 │         limits:
  15 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cuda-vector-add' of Pod 'gpu-operator-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vector-add.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: cuda-vector-add
   9 │       #image: "nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubuntu20.04"
  10 │       image: "nvidia/cuda:12.3.1-runtime-ubuntu22.04"
  11 │       command: ["/bin/sh"]
  12 │       args: ["-c", "tail -f /dev/null"]
  13 │       resources:
  14 │         limits:
  15 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cuda-vector-add' of Pod 'gpu-operator-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vector-add.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: cuda-vector-add
   9 │       #image: "nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubuntu20.04"
  10 │       image: "nvidia/cuda:12.3.1-runtime-ubuntu22.04"
  11 │       command: ["/bin/sh"]
  12 │       args: ["-c", "tail -f /dev/null"]
  13 │       resources:
  14 │         limits:
  15 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vector-add.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: cuda-vector-add
   9 │       #image: "nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubuntu20.04"
  10 │       image: "nvidia/cuda:12.3.1-runtime-ubuntu22.04"
  11 │       command: ["/bin/sh"]
  12 │       args: ["-c", "tail -f /dev/null"]
  13 │       resources:
  14 │         limits:
  15 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cuda-vector-add" of pod "gpu-operator-test" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vector-add.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: cuda-vector-add
   9 │       #image: "nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubuntu20.04"
  10 │       image: "nvidia/cuda:12.3.1-runtime-ubuntu22.04"
  11 │       command: ["/bin/sh"]
  12 │       args: ["-c", "tail -f /dev/null"]
  13 │       resources:
  14 │         limits:
  15 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vector-add.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: cuda-vector-add
   9 │       #image: "nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubuntu20.04"
  10 │       image: "nvidia/cuda:12.3.1-runtime-ubuntu22.04"
  11 │       command: ["/bin/sh"]
  12 │       args: ["-c", "tail -f /dev/null"]
  13 │       resources:
  14 │         limits:
  15 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod gpu-operator-test in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 vector-add.yaml:4
────────────────────────────────────────
   4 [   name: gpu-operator-test
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container gpu-operator-test in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vector-add.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: cuda-vector-add
   9 │       #image: "nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubuntu20.04"
  10 │       image: "nvidia/cuda:12.3.1-runtime-ubuntu22.04"
  11 │       command: ["/bin/sh"]
  12 │       args: ["-c", "tail -f /dev/null"]
  13 │       resources:
  14 │         limits:
  15 └           nvidia.com/gpu: 1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod gpu-operator-test in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vector-add.yaml:6-19
────────────────────────────────────────
   6 ┌   restartPolicy: OnFailure
   7 │   containers:
   8 │     - name: cuda-vector-add
   9 │       #image: "nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubuntu20.04"
  10 │       image: "nvidia/cuda:12.3.1-runtime-ubuntu22.04"
  11 │       command: ["/bin/sh"]
  12 │       args: ["-c", "tail -f /dev/null"]
  13 │       resources:
  14 └         limits:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container cuda-vector-add in pod gpu-operator-test (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vector-add.yaml:8-15
────────────────────────────────────────
   8 ┌     - name: cuda-vector-add
   9 │       #image: "nvcr.io/nvidia/k8s/cuda-sample:vectoradd-cuda11.7.1-ubuntu20.04"
  10 │       image: "nvidia/cuda:12.3.1-runtime-ubuntu22.04"
  11 │       command: ["/bin/sh"]
  12 │       args: ["-c", "tail -f /dev/null"]
  13 │       resources:
  14 │         limits:
  15 └           nvidia.com/gpu: 1
────────────────────────────────────────



vector-aggregator-assert.yaml (kubernetes)
==========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): statefulset vector-aggregator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 vector-aggregator-assert.yaml:4
────────────────────────────────────────
   4 [   name: vector-aggregator
────────────────────────────────────────



vector-aggregator-assert1.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): statefulset vector-aggregator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 vector-aggregator-assert1.yaml:4
────────────────────────────────────────
   4 [   name: vector-aggregator
────────────────────────────────────────



vector-aggregator-assert2.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): statefulset vector-aggregator in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 vector-aggregator-assert2.yaml:4
────────────────────────────────────────
   4 [   name: vector-aggregator
────────────────────────────────────────



vector15.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'supabase-vector' of Deployment 'supabase-vector' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vector15.yaml:17-50
────────────────────────────────────────
  17 ┌         - name: supabase-vector
  18 │           image: timberio/vector:0.28.1-alpine
  19 │           command: ["/bin/sh"]
  20 │           args: ["/scripts/wrapper.sh"]
  21 │           ports:
  22 │             - containerPort: 9001
  23 │           env:
  24 │             - name: LOGFLARE_API_KEY
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'supabase-vector' of Deployment 'supabase-vector' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vector15.yaml:17-50
────────────────────────────────────────
  17 ┌         - name: supabase-vector
  18 │           image: timberio/vector:0.28.1-alpine
  19 │           command: ["/bin/sh"]
  20 │           args: ["/scripts/wrapper.sh"]
  21 │           ports:
  22 │             - containerPort: 9001
  23 │           env:
  24 │             - name: LOGFLARE_API_KEY
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'supabase-vector' of 'deployment' 'supabase-vector' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vector15.yaml:17-50
────────────────────────────────────────
  17 ┌         - name: supabase-vector
  18 │           image: timberio/vector:0.28.1-alpine
  19 │           command: ["/bin/sh"]
  20 │           args: ["/scripts/wrapper.sh"]
  21 │           ports:
  22 │             - containerPort: 9001
  23 │           env:
  24 │             - name: LOGFLARE_API_KEY
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'supabase-vector' of Deployment 'supabase-vector' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vector15.yaml:17-50
────────────────────────────────────────
  17 ┌         - name: supabase-vector
  18 │           image: timberio/vector:0.28.1-alpine
  19 │           command: ["/bin/sh"]
  20 │           args: ["/scripts/wrapper.sh"]
  21 │           ports:
  22 │             - containerPort: 9001
  23 │           env:
  24 │             - name: LOGFLARE_API_KEY
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'supabase-vector' of Deployment 'supabase-vector' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vector15.yaml:17-50
────────────────────────────────────────
  17 ┌         - name: supabase-vector
  18 │           image: timberio/vector:0.28.1-alpine
  19 │           command: ["/bin/sh"]
  20 │           args: ["/scripts/wrapper.sh"]
  21 │           ports:
  22 │             - containerPort: 9001
  23 │           env:
  24 │             - name: LOGFLARE_API_KEY
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'supabase-vector' of Deployment 'supabase-vector' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vector15.yaml:17-50
────────────────────────────────────────
  17 ┌         - name: supabase-vector
  18 │           image: timberio/vector:0.28.1-alpine
  19 │           command: ["/bin/sh"]
  20 │           args: ["/scripts/wrapper.sh"]
  21 │           ports:
  22 │             - containerPort: 9001
  23 │           env:
  24 │             - name: LOGFLARE_API_KEY
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'supabase-vector' of Deployment 'supabase-vector' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vector15.yaml:17-50
────────────────────────────────────────
  17 ┌         - name: supabase-vector
  18 │           image: timberio/vector:0.28.1-alpine
  19 │           command: ["/bin/sh"]
  20 │           args: ["/scripts/wrapper.sh"]
  21 │           ports:
  22 │             - containerPort: 9001
  23 │           env:
  24 │             - name: LOGFLARE_API_KEY
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'supabase-vector' of Deployment 'supabase-vector' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vector15.yaml:17-50
────────────────────────────────────────
  17 ┌         - name: supabase-vector
  18 │           image: timberio/vector:0.28.1-alpine
  19 │           command: ["/bin/sh"]
  20 │           args: ["/scripts/wrapper.sh"]
  21 │           ports:
  22 │             - containerPort: 9001
  23 │           env:
  24 │             - name: LOGFLARE_API_KEY
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'supabase-vector' of Deployment 'supabase-vector' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vector15.yaml:17-50
────────────────────────────────────────
  17 ┌         - name: supabase-vector
  18 │           image: timberio/vector:0.28.1-alpine
  19 │           command: ["/bin/sh"]
  20 │           args: ["/scripts/wrapper.sh"]
  21 │           ports:
  22 │             - containerPort: 9001
  23 │           env:
  24 │             - name: LOGFLARE_API_KEY
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'supabase-vector' of Deployment 'supabase-vector' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vector15.yaml:17-50
────────────────────────────────────────
  17 ┌         - name: supabase-vector
  18 │           image: timberio/vector:0.28.1-alpine
  19 │           command: ["/bin/sh"]
  20 │           args: ["/scripts/wrapper.sh"]
  21 │           ports:
  22 │             - containerPort: 9001
  23 │           env:
  24 │             - name: LOGFLARE_API_KEY
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'supabase-vector' of Deployment 'supabase-vector' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vector15.yaml:17-50
────────────────────────────────────────
  17 ┌         - name: supabase-vector
  18 │           image: timberio/vector:0.28.1-alpine
  19 │           command: ["/bin/sh"]
  20 │           args: ["/scripts/wrapper.sh"]
  21 │           ports:
  22 │             - containerPort: 9001
  23 │           env:
  24 │             - name: LOGFLARE_API_KEY
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'supabase-vector' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 vector15.yaml:6-69
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: supabase-vector
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: supabase-vector
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vector15.yaml:17-50
────────────────────────────────────────
  17 ┌         - name: supabase-vector
  18 │           image: timberio/vector:0.28.1-alpine
  19 │           command: ["/bin/sh"]
  20 │           args: ["/scripts/wrapper.sh"]
  21 │           ports:
  22 │             - containerPort: 9001
  23 │           env:
  24 │             - name: LOGFLARE_API_KEY
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "supabase-vector" of deployment "supabase-vector" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vector15.yaml:17-50
────────────────────────────────────────
  17 ┌         - name: supabase-vector
  18 │           image: timberio/vector:0.28.1-alpine
  19 │           command: ["/bin/sh"]
  20 │           args: ["/scripts/wrapper.sh"]
  21 │           ports:
  22 │             - containerPort: 9001
  23 │           env:
  24 │             - name: LOGFLARE_API_KEY
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vector15.yaml:17-50
────────────────────────────────────────
  17 ┌         - name: supabase-vector
  18 │           image: timberio/vector:0.28.1-alpine
  19 │           command: ["/bin/sh"]
  20 │           args: ["/scripts/wrapper.sh"]
  21 │           ports:
  22 │             - containerPort: 9001
  23 │           env:
  24 │             - name: LOGFLARE_API_KEY
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment supabase-vector in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 vector15.yaml:4
────────────────────────────────────────
   4 [   name: supabase-vector
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container supabase-vector in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vector15.yaml:17-50
────────────────────────────────────────
  17 ┌         - name: supabase-vector
  18 │           image: timberio/vector:0.28.1-alpine
  19 │           command: ["/bin/sh"]
  20 │           args: ["/scripts/wrapper.sh"]
  21 │           ports:
  22 │             - containerPort: 9001
  23 │           env:
  24 │             - name: LOGFLARE_API_KEY
  25 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment supabase-vector in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vector15.yaml:15-69
────────────────────────────────────────
  15 ┌       serviceAccountName: vector
  16 │       containers:
  17 │         - name: supabase-vector
  18 │           image: timberio/vector:0.28.1-alpine
  19 │           command: ["/bin/sh"]
  20 │           args: ["/scripts/wrapper.sh"]
  21 │           ports:
  22 │             - containerPort: 9001
  23 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container supabase-vector in deployment supabase-vector (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vector15.yaml:17-50
────────────────────────────────────────
  17 ┌         - name: supabase-vector
  18 │           image: timberio/vector:0.28.1-alpine
  19 │           command: ["/bin/sh"]
  20 │           args: ["/scripts/wrapper.sh"]
  21 │           ports:
  22 │             - containerPort: 9001
  23 │           env:
  24 │             - name: LOGFLARE_API_KEY
  25 └               valueFrom:
  ..   
────────────────────────────────────────



velero9_1.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'velero-server' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 velero9_1.yaml:4-10
────────────────────────────────────────
   4 ┌   name: velero-server
   5 │   labels:
   6 │     app.kubernetes.io/component: server
   7 │     app.kubernetes.io/name: velero
   8 │     app.kubernetes.io/instance: velero
   9 │     app.kubernetes.io/managed-by: Helm
  10 └     helm.sh/chart: velero-5.0.2
────────────────────────────────────────



velero9_2.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0044 (CRITICAL): Role permits wildcard verb on wildcard resource
════════════════════════════════════════
Check whether role permits wildcard verb on wildcard resource

See https://avd.aquasec.com/misconfig/ksv044
────────────────────────────────────────
 velero9_2.yaml:13-18
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - '*'
  15 │   resources:
  16 │   - '*'
  17 │   verbs:
  18 └   - '*'
────────────────────────────────────────


AVD-KSV-0112 (CRITICAL): Role 'velero-server' shouldn't manage all resources at the namespace 'velero'
════════════════════════════════════════
Full control of the resources within a namespace.  In some cluster configurations, this is excessive. In others, this is normal (a gitops deployment operator like flux)

See https://avd.aquasec.com/misconfig/ksv112
────────────────────────────────────────
 velero9_2.yaml:13-18
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - '*'
  15 │   resources:
  16 │   - '*'
  17 │   verbs:
  18 └   - '*'
────────────────────────────────────────



velero9_5.yaml (kubernetes)
===========================
Tests: 127 (SUCCESSES: 98, FAILURES: 29)
Failures: 29 (UNKNOWN: 0, LOW: 16, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'velero' of Deployment 'velero' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 velero9_5.yaml:37-89
────────────────────────────────────────
  37 ┌       - name: velero
  38 │         image: velero/velero:v1.11.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         ports:
  41 │         - name: http-monitoring
  42 │           containerPort: 8085
  43 │         command:
  44 │         - /velero
  45 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'velero-plugin-for-aws' of Deployment 'velero' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 velero9_5.yaml:92-96
────────────────────────────────────────
  92 ┌       - image: velero/velero-plugin-for-aws:v1.7.1
  93 │         name: velero-plugin-for-aws
  94 │         volumeMounts:
  95 │         - mountPath: /target
  96 └           name: plugins
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'velero' of Deployment 'velero' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 velero9_5.yaml:37-89
────────────────────────────────────────
  37 ┌       - name: velero
  38 │         image: velero/velero:v1.11.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         ports:
  41 │         - name: http-monitoring
  42 │           containerPort: 8085
  43 │         command:
  44 │         - /velero
  45 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'velero-plugin-for-aws' of Deployment 'velero' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 velero9_5.yaml:92-96
────────────────────────────────────────
  92 ┌       - image: velero/velero-plugin-for-aws:v1.7.1
  93 │         name: velero-plugin-for-aws
  94 │         volumeMounts:
  95 │         - mountPath: /target
  96 └           name: plugins
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'velero' of 'deployment' 'velero' in 'velero' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 velero9_5.yaml:37-89
────────────────────────────────────────
  37 ┌       - name: velero
  38 │         image: velero/velero:v1.11.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         ports:
  41 │         - name: http-monitoring
  42 │           containerPort: 8085
  43 │         command:
  44 │         - /velero
  45 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'velero-plugin-for-aws' of 'deployment' 'velero' in 'velero' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 velero9_5.yaml:92-96
────────────────────────────────────────
  92 ┌       - image: velero/velero-plugin-for-aws:v1.7.1
  93 │         name: velero-plugin-for-aws
  94 │         volumeMounts:
  95 │         - mountPath: /target
  96 └           name: plugins
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'velero-plugin-for-aws' of Deployment 'velero' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 velero9_5.yaml:92-96
────────────────────────────────────────
  92 ┌       - image: velero/velero-plugin-for-aws:v1.7.1
  93 │         name: velero-plugin-for-aws
  94 │         volumeMounts:
  95 │         - mountPath: /target
  96 └           name: plugins
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'velero' of Deployment 'velero' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 velero9_5.yaml:37-89
────────────────────────────────────────
  37 ┌       - name: velero
  38 │         image: velero/velero:v1.11.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         ports:
  41 │         - name: http-monitoring
  42 │           containerPort: 8085
  43 │         command:
  44 │         - /velero
  45 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'velero-plugin-for-aws' of Deployment 'velero' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 velero9_5.yaml:92-96
────────────────────────────────────────
  92 ┌       - image: velero/velero-plugin-for-aws:v1.7.1
  93 │         name: velero-plugin-for-aws
  94 │         volumeMounts:
  95 │         - mountPath: /target
  96 └           name: plugins
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'velero' of Deployment 'velero' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 velero9_5.yaml:37-89
────────────────────────────────────────
  37 ┌       - name: velero
  38 │         image: velero/velero:v1.11.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         ports:
  41 │         - name: http-monitoring
  42 │           containerPort: 8085
  43 │         command:
  44 │         - /velero
  45 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'velero-plugin-for-aws' of Deployment 'velero' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 velero9_5.yaml:92-96
────────────────────────────────────────
  92 ┌       - image: velero/velero-plugin-for-aws:v1.7.1
  93 │         name: velero-plugin-for-aws
  94 │         volumeMounts:
  95 │         - mountPath: /target
  96 └           name: plugins
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'velero-plugin-for-aws' of Deployment 'velero' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 velero9_5.yaml:92-96
────────────────────────────────────────
  92 ┌       - image: velero/velero-plugin-for-aws:v1.7.1
  93 │         name: velero-plugin-for-aws
  94 │         volumeMounts:
  95 │         - mountPath: /target
  96 └           name: plugins
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'velero-plugin-for-aws' of Deployment 'velero' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 velero9_5.yaml:92-96
────────────────────────────────────────
  92 ┌       - image: velero/velero-plugin-for-aws:v1.7.1
  93 │         name: velero-plugin-for-aws
  94 │         volumeMounts:
  95 │         - mountPath: /target
  96 └           name: plugins
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'velero-plugin-for-aws' of Deployment 'velero' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 velero9_5.yaml:92-96
────────────────────────────────────────
  92 ┌       - image: velero/velero-plugin-for-aws:v1.7.1
  93 │         name: velero-plugin-for-aws
  94 │         volumeMounts:
  95 │         - mountPath: /target
  96 └           name: plugins
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'velero' of Deployment 'velero' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 velero9_5.yaml:37-89
────────────────────────────────────────
  37 ┌       - name: velero
  38 │         image: velero/velero:v1.11.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         ports:
  41 │         - name: http-monitoring
  42 │           containerPort: 8085
  43 │         command:
  44 │         - /velero
  45 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'velero-plugin-for-aws' of Deployment 'velero' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 velero9_5.yaml:92-96
────────────────────────────────────────
  92 ┌       - image: velero/velero-plugin-for-aws:v1.7.1
  93 │         name: velero-plugin-for-aws
  94 │         volumeMounts:
  95 │         - mountPath: /target
  96 └           name: plugins
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'velero' of Deployment 'velero' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 velero9_5.yaml:37-89
────────────────────────────────────────
  37 ┌       - name: velero
  38 │         image: velero/velero:v1.11.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         ports:
  41 │         - name: http-monitoring
  42 │           containerPort: 8085
  43 │         command:
  44 │         - /velero
  45 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'velero-plugin-for-aws' of Deployment 'velero' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 velero9_5.yaml:92-96
────────────────────────────────────────
  92 ┌       - image: velero/velero-plugin-for-aws:v1.7.1
  93 │         name: velero-plugin-for-aws
  94 │         volumeMounts:
  95 │         - mountPath: /target
  96 └           name: plugins
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 velero9_5.yaml:92-96
────────────────────────────────────────
  92 ┌       - image: velero/velero-plugin-for-aws:v1.7.1
  93 │         name: velero-plugin-for-aws
  94 │         volumeMounts:
  95 │         - mountPath: /target
  96 └           name: plugins
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 velero9_5.yaml:37-89
────────────────────────────────────────
  37 ┌       - name: velero
  38 │         image: velero/velero:v1.11.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         ports:
  41 │         - name: http-monitoring
  42 │           containerPort: 8085
  43 │         command:
  44 │         - /velero
  45 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "velero" of deployment "velero" in "velero" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 velero9_5.yaml:37-89
────────────────────────────────────────
  37 ┌       - name: velero
  38 │         image: velero/velero:v1.11.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         ports:
  41 │         - name: http-monitoring
  42 │           containerPort: 8085
  43 │         command:
  44 │         - /velero
  45 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "velero-plugin-for-aws" of deployment "velero" in "velero" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 velero9_5.yaml:92-96
────────────────────────────────────────
  92 ┌       - image: velero/velero-plugin-for-aws:v1.7.1
  93 │         name: velero-plugin-for-aws
  94 │         volumeMounts:
  95 │         - mountPath: /target
  96 └           name: plugins
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 velero9_5.yaml:92-96
────────────────────────────────────────
  92 ┌       - image: velero/velero-plugin-for-aws:v1.7.1
  93 │         name: velero-plugin-for-aws
  94 │         volumeMounts:
  95 │         - mountPath: /target
  96 └           name: plugins
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 velero9_5.yaml:37-89
────────────────────────────────────────
  37 ┌       - name: velero
  38 │         image: velero/velero:v1.11.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         ports:
  41 │         - name: http-monitoring
  42 │           containerPort: 8085
  43 │         command:
  44 │         - /velero
  45 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container velero in velero namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 velero9_5.yaml:37-89
────────────────────────────────────────
  37 ┌       - name: velero
  38 │         image: velero/velero:v1.11.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         ports:
  41 │         - name: http-monitoring
  42 │           containerPort: 8085
  43 │         command:
  44 │         - /velero
  45 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container velero in velero namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 velero9_5.yaml:92-96
────────────────────────────────────────
  92 ┌       - image: velero/velero-plugin-for-aws:v1.7.1
  93 │         name: velero-plugin-for-aws
  94 │         volumeMounts:
  95 │         - mountPath: /target
  96 └           name: plugins
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment velero in velero namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 velero9_5.yaml:33-101
────────────────────────────────────────
  33 ┌       restartPolicy: Always
  34 │       serviceAccountName: velero-server
  35 │       terminationGracePeriodSeconds: 3600
  36 │       containers:
  37 │       - name: velero
  38 │         image: velero/velero:v1.11.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         ports:
  41 └         - name: http-monitoring
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container velero in deployment velero (namespace: velero) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 velero9_5.yaml:37-89
────────────────────────────────────────
  37 ┌       - name: velero
  38 │         image: velero/velero:v1.11.1
  39 │         imagePullPolicy: IfNotPresent
  40 │         ports:
  41 │         - name: http-monitoring
  42 │           containerPort: 8085
  43 │         command:
  44 │         - /velero
  45 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container velero-plugin-for-aws in deployment velero (namespace: velero) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 velero9_5.yaml:92-96
────────────────────────────────────────
  92 ┌       - image: velero/velero-plugin-for-aws:v1.7.1
  93 │         name: velero-plugin-for-aws
  94 │         volumeMounts:
  95 │         - mountPath: /target
  96 └           name: plugins
────────────────────────────────────────



verifica-liveness.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 verifica-liveness.yaml:19-35
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-probes' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 verifica-liveness.yaml:19-35
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-probes' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 verifica-liveness.yaml:19-35
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 verifica-liveness.yaml:19-35
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 verifica-liveness.yaml:19-35
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 verifica-liveness.yaml:19-35
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 verifica-liveness.yaml:19-35
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 verifica-liveness.yaml:19-35
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-probes" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 verifica-liveness.yaml:19-35
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 verifica-liveness.yaml:19-35
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-probes in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 verifica-liveness.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: nginx-deployment
   6 └   name: nginx-probes
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-probes in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 verifica-liveness.yaml:19-35
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-probes in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 verifica-liveness.yaml:18-35
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 └             cpu: "0.1"
  ..   
────────────────────────────────────────



verifica-liveness1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 verifica-liveness1.yaml:19-35
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-probes' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 verifica-liveness1.yaml:19-35
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-probes' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 verifica-liveness1.yaml:19-35
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 verifica-liveness1.yaml:19-35
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 verifica-liveness1.yaml:19-35
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 verifica-liveness1.yaml:19-35
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 verifica-liveness1.yaml:19-35
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 verifica-liveness1.yaml:19-35
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-probes" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 verifica-liveness1.yaml:19-35
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 verifica-liveness1.yaml:19-35
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-probes in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 verifica-liveness1.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: nginx-deployment
   6 └   name: nginx-probes
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-probes in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 verifica-liveness1.yaml:19-35
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-probes in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 verifica-liveness1.yaml:18-35
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 └             cpu: "0.1"
  ..   
────────────────────────────────────────



verifica-readiness.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 verifica-readiness.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-probes' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 verifica-readiness.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-probes' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 verifica-readiness.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 verifica-readiness.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 verifica-readiness.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 verifica-readiness.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 verifica-readiness.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 verifica-readiness.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-probes" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 verifica-readiness.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 verifica-readiness.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-probes in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 verifica-readiness.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: nginx-deployment
   6 └   name: nginx-probes
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-probes in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 verifica-readiness.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-probes in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 verifica-readiness.yaml:18-36
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 └             cpu: "0.1"
  ..   
────────────────────────────────────────



verifica-readiness1.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 verifica-readiness1.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-probes' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 verifica-readiness1.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-probes' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 verifica-readiness1.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 verifica-readiness1.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 verifica-readiness1.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 verifica-readiness1.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 verifica-readiness1.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 verifica-readiness1.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-probes" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 verifica-readiness1.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 verifica-readiness1.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-probes in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 verifica-readiness1.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: nginx-deployment
   6 └   name: nginx-probes
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-probes in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 verifica-readiness1.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-probes in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 verifica-readiness1.yaml:18-36
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 └             cpu: "0.1"
  ..   
────────────────────────────────────────



verifica-startup.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 verifica-startup.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-probes' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 verifica-startup.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-probes' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 verifica-startup.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 verifica-startup.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 verifica-startup.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 verifica-startup.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 verifica-startup.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 verifica-startup.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-probes" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 verifica-startup.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 verifica-startup.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-probes in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 verifica-startup.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: nginx-deployment
   6 └   name: nginx-probes
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-probes in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 verifica-startup.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-probes in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 verifica-startup.yaml:18-36
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 └             cpu: "0.1"
  ..   
────────────────────────────────────────



verifica-startup1.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 verifica-startup1.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-probes' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 verifica-startup1.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-probes' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 verifica-startup1.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 verifica-startup1.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 verifica-startup1.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 verifica-startup1.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 verifica-startup1.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 verifica-startup1.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-probes" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 verifica-startup1.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 verifica-startup1.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-probes in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 verifica-startup1.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: nginx-deployment
   6 └   name: nginx-probes
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-probes in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 verifica-startup1.yaml:19-36
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-probes in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 verifica-startup1.yaml:18-36
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 └             cpu: "0.1"
  ..   
────────────────────────────────────────



verifica-todos-aspectos.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 verifica-todos-aspectos.yaml:19-54
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-probes' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 verifica-todos-aspectos.yaml:19-54
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-probes' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 verifica-todos-aspectos.yaml:19-54
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 verifica-todos-aspectos.yaml:19-54
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 verifica-todos-aspectos.yaml:19-54
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 verifica-todos-aspectos.yaml:19-54
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 verifica-todos-aspectos.yaml:19-54
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 verifica-todos-aspectos.yaml:19-54
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-probes" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 verifica-todos-aspectos.yaml:19-54
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 verifica-todos-aspectos.yaml:19-54
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-probes in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 verifica-todos-aspectos.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: nginx-deployment
   6 └   name: nginx-probes
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-probes in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 verifica-todos-aspectos.yaml:19-54
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-probes in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 verifica-todos-aspectos.yaml:18-54
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 └             cpu: "0.1"
  ..   
────────────────────────────────────────



verifica-todos-aspectos1.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 7, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 verifica-todos-aspectos1.yaml:19-54
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-probes' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 verifica-todos-aspectos1.yaml:19-54
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-probes' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 verifica-todos-aspectos1.yaml:19-54
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 verifica-todos-aspectos1.yaml:19-54
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 verifica-todos-aspectos1.yaml:19-54
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 verifica-todos-aspectos1.yaml:19-54
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-probes' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 verifica-todos-aspectos1.yaml:19-54
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 verifica-todos-aspectos1.yaml:19-54
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-probes" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 verifica-todos-aspectos1.yaml:19-54
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 verifica-todos-aspectos1.yaml:19-54
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-probes in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 verifica-todos-aspectos1.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: nginx-deployment
   6 └   name: nginx-probes
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-probes in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 verifica-todos-aspectos1.yaml:19-54
────────────────────────────────────────
  19 ┌       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 │             cpu: "0.1"
  27 └             memory: "128Mi"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-probes in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 verifica-todos-aspectos1.yaml:18-54
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: nginx:1.19.2
  20 │         name: nginx
  21 │         resources:
  22 │           limits:
  23 │             cpu: "500m"
  24 │             memory: "265Mi"
  25 │           requests:
  26 └             cpu: "0.1"
  ..   
────────────────────────────────────────



verification-pod.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'box1' of Pod 'box1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 verification-pod.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: nginx:1.19.2
  11 │     name: box1
  12 └     resources: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'box1' of Pod 'box1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 verification-pod.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: nginx:1.19.2
  11 │     name: box1
  12 └     resources: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'box1' of 'pod' 'box1' in 'metadata-access' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 verification-pod.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: nginx:1.19.2
  11 │     name: box1
  12 └     resources: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'box1' of Pod 'box1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 verification-pod.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: nginx:1.19.2
  11 │     name: box1
  12 └     resources: {}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'box1' of Pod 'box1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 verification-pod.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: nginx:1.19.2
  11 │     name: box1
  12 └     resources: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'box1' of Pod 'box1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 verification-pod.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: nginx:1.19.2
  11 │     name: box1
  12 └     resources: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'box1' of Pod 'box1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 verification-pod.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: nginx:1.19.2
  11 │     name: box1
  12 └     resources: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'box1' of Pod 'box1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 verification-pod.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: nginx:1.19.2
  11 │     name: box1
  12 └     resources: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'box1' of Pod 'box1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 verification-pod.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: nginx:1.19.2
  11 │     name: box1
  12 └     resources: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'box1' of Pod 'box1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 verification-pod.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: nginx:1.19.2
  11 │     name: box1
  12 └     resources: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'box1' of Pod 'box1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 verification-pod.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: nginx:1.19.2
  11 │     name: box1
  12 └     resources: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 verification-pod.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: nginx:1.19.2
  11 │     name: box1
  12 └     resources: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "box1" of pod "box1" in "metadata-access" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 verification-pod.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: nginx:1.19.2
  11 │     name: box1
  12 └     resources: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 verification-pod.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: nginx:1.19.2
  11 │     name: box1
  12 └     resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container box1 in metadata-access namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 verification-pod.yaml:10-12
────────────────────────────────────────
  10 ┌   - image: nginx:1.19.2
  11 │     name: box1
  12 └     resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod box1 in metadata-access namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 verification-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   containers:
  10 │   - image: nginx:1.19.2
  11 │     name: box1
  12 │     resources: {}
  13 │   dnsPolicy: ClusterFirst
  14 └   restartPolicy: Always
────────────────────────────────────────



verification-pod_1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'box2' of Pod 'box2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 verification-pod_1.yaml:11-13
────────────────────────────────────────
  11 ┌   - image: nginx:1.19.2
  12 │     name: box2
  13 └     resources: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'box2' of Pod 'box2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 verification-pod_1.yaml:11-13
────────────────────────────────────────
  11 ┌   - image: nginx:1.19.2
  12 │     name: box2
  13 └     resources: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'box2' of 'pod' 'box2' in 'metadata-access' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 verification-pod_1.yaml:11-13
────────────────────────────────────────
  11 ┌   - image: nginx:1.19.2
  12 │     name: box2
  13 └     resources: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'box2' of Pod 'box2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 verification-pod_1.yaml:11-13
────────────────────────────────────────
  11 ┌   - image: nginx:1.19.2
  12 │     name: box2
  13 └     resources: {}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'box2' of Pod 'box2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 verification-pod_1.yaml:11-13
────────────────────────────────────────
  11 ┌   - image: nginx:1.19.2
  12 │     name: box2
  13 └     resources: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'box2' of Pod 'box2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 verification-pod_1.yaml:11-13
────────────────────────────────────────
  11 ┌   - image: nginx:1.19.2
  12 │     name: box2
  13 └     resources: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'box2' of Pod 'box2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 verification-pod_1.yaml:11-13
────────────────────────────────────────
  11 ┌   - image: nginx:1.19.2
  12 │     name: box2
  13 └     resources: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'box2' of Pod 'box2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 verification-pod_1.yaml:11-13
────────────────────────────────────────
  11 ┌   - image: nginx:1.19.2
  12 │     name: box2
  13 └     resources: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'box2' of Pod 'box2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 verification-pod_1.yaml:11-13
────────────────────────────────────────
  11 ┌   - image: nginx:1.19.2
  12 │     name: box2
  13 └     resources: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'box2' of Pod 'box2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 verification-pod_1.yaml:11-13
────────────────────────────────────────
  11 ┌   - image: nginx:1.19.2
  12 │     name: box2
  13 └     resources: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'box2' of Pod 'box2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 verification-pod_1.yaml:11-13
────────────────────────────────────────
  11 ┌   - image: nginx:1.19.2
  12 │     name: box2
  13 └     resources: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 verification-pod_1.yaml:11-13
────────────────────────────────────────
  11 ┌   - image: nginx:1.19.2
  12 │     name: box2
  13 └     resources: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "box2" of pod "box2" in "metadata-access" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 verification-pod_1.yaml:11-13
────────────────────────────────────────
  11 ┌   - image: nginx:1.19.2
  12 │     name: box2
  13 └     resources: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 verification-pod_1.yaml:11-13
────────────────────────────────────────
  11 ┌   - image: nginx:1.19.2
  12 │     name: box2
  13 └     resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container box2 in metadata-access namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 verification-pod_1.yaml:11-13
────────────────────────────────────────
  11 ┌   - image: nginx:1.19.2
  12 │     name: box2
  13 └     resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod box2 in metadata-access namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 verification-pod_1.yaml:10-15
────────────────────────────────────────
  10 ┌   containers:
  11 │   - image: nginx:1.19.2
  12 │     name: box2
  13 │     resources: {}
  14 │   dnsPolicy: ClusterFirst
  15 └   restartPolicy: Always
────────────────────────────────────────



verify-cleanup_1.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cleanup-admin' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 verify-cleanup_1.yaml:4
────────────────────────────────────────
   4 [   name: cleanup-admin
────────────────────────────────────────



verify-cleanup_2.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'verify' of Job 'verify-job' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 verify-cleanup_2.yaml:12-16
────────────────────────────────────────
  12 ┌       - name: verify
  13 │         image: rancher/rancher-cleanup:latest
  14 │         command:
  15 │         - verify.sh
  16 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'verify' of Job 'verify-job' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 verify-cleanup_2.yaml:12-16
────────────────────────────────────────
  12 ┌       - name: verify
  13 │         image: rancher/rancher-cleanup:latest
  14 │         command:
  15 │         - verify.sh
  16 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'verify' of 'job' 'verify-job' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 verify-cleanup_2.yaml:12-16
────────────────────────────────────────
  12 ┌       - name: verify
  13 │         image: rancher/rancher-cleanup:latest
  14 │         command:
  15 │         - verify.sh
  16 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'verify' of Job 'verify-job' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 verify-cleanup_2.yaml:12-16
────────────────────────────────────────
  12 ┌       - name: verify
  13 │         image: rancher/rancher-cleanup:latest
  14 │         command:
  15 │         - verify.sh
  16 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'verify' of Job 'verify-job' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 verify-cleanup_2.yaml:12-16
────────────────────────────────────────
  12 ┌       - name: verify
  13 │         image: rancher/rancher-cleanup:latest
  14 │         command:
  15 │         - verify.sh
  16 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'verify' of Job 'verify-job' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 verify-cleanup_2.yaml:12-16
────────────────────────────────────────
  12 ┌       - name: verify
  13 │         image: rancher/rancher-cleanup:latest
  14 │         command:
  15 │         - verify.sh
  16 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'verify' of Job 'verify-job' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 verify-cleanup_2.yaml:12-16
────────────────────────────────────────
  12 ┌       - name: verify
  13 │         image: rancher/rancher-cleanup:latest
  14 │         command:
  15 │         - verify.sh
  16 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'verify' of Job 'verify-job' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 verify-cleanup_2.yaml:12-16
────────────────────────────────────────
  12 ┌       - name: verify
  13 │         image: rancher/rancher-cleanup:latest
  14 │         command:
  15 │         - verify.sh
  16 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'verify' of Job 'verify-job' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 verify-cleanup_2.yaml:12-16
────────────────────────────────────────
  12 ┌       - name: verify
  13 │         image: rancher/rancher-cleanup:latest
  14 │         command:
  15 │         - verify.sh
  16 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'verify' of Job 'verify-job' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 verify-cleanup_2.yaml:12-16
────────────────────────────────────────
  12 ┌       - name: verify
  13 │         image: rancher/rancher-cleanup:latest
  14 │         command:
  15 │         - verify.sh
  16 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'verify' of Job 'verify-job' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 verify-cleanup_2.yaml:12-16
────────────────────────────────────────
  12 ┌       - name: verify
  13 │         image: rancher/rancher-cleanup:latest
  14 │         command:
  15 │         - verify.sh
  16 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'verify' of Job 'verify-job' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 verify-cleanup_2.yaml:12-16
────────────────────────────────────────
  12 ┌       - name: verify
  13 │         image: rancher/rancher-cleanup:latest
  14 │         command:
  15 │         - verify.sh
  16 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 verify-cleanup_2.yaml:12-16
────────────────────────────────────────
  12 ┌       - name: verify
  13 │         image: rancher/rancher-cleanup:latest
  14 │         command:
  15 │         - verify.sh
  16 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Job 'verify-job' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 verify-cleanup_2.yaml:9-19
────────────────────────────────────────
   9 ┌   template:
  10 │     spec:
  11 │       containers:
  12 │       - name: verify
  13 │         image: rancher/rancher-cleanup:latest
  14 │         command:
  15 │         - verify.sh
  16 │         imagePullPolicy: Always
  17 └       serviceAccountName: cleanup-service-account
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "verify" of job "verify-job" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 verify-cleanup_2.yaml:12-16
────────────────────────────────────────
  12 ┌       - name: verify
  13 │         image: rancher/rancher-cleanup:latest
  14 │         command:
  15 │         - verify.sh
  16 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 verify-cleanup_2.yaml:12-16
────────────────────────────────────────
  12 ┌       - name: verify
  13 │         image: rancher/rancher-cleanup:latest
  14 │         command:
  15 │         - verify.sh
  16 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container verify-job in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 verify-cleanup_2.yaml:12-16
────────────────────────────────────────
  12 ┌       - name: verify
  13 │         image: rancher/rancher-cleanup:latest
  14 │         command:
  15 │         - verify.sh
  16 └         imagePullPolicy: Always
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job verify-job in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 verify-cleanup_2.yaml:11-18
────────────────────────────────────────
  11 ┌       containers:
  12 │       - name: verify
  13 │         image: rancher/rancher-cleanup:latest
  14 │         command:
  15 │         - verify.sh
  16 │         imagePullPolicy: Always
  17 │       serviceAccountName: cleanup-service-account
  18 └       restartPolicy: Never
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container verify in job verify-job (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 verify-cleanup_2.yaml:12-16
────────────────────────────────────────
  12 ┌       - name: verify
  13 │         image: rancher/rancher-cleanup:latest
  14 │         command:
  15 │         - verify.sh
  16 └         imagePullPolicy: Always
────────────────────────────────────────



verify-pod.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 99, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 2, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'verify' of Pod 'verify' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 verify-pod.yaml:10-25
────────────────────────────────────────
  10 ┌   - image: curlimages/curl:8.1.2
  11 │     imagePullPolicy: IfNotPresent
  12 │     name: verify
  13 │     args:
  14 │     - -v
  15 │     - --fail
  16 │     - http://swagger-ui-test
  17 │     resources: {}
  18 └     securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'verify' of 'pod' 'verify' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 verify-pod.yaml:10-25
────────────────────────────────────────
  10 ┌   - image: curlimages/curl:8.1.2
  11 │     imagePullPolicy: IfNotPresent
  12 │     name: verify
  13 │     args:
  14 │     - -v
  15 │     - --fail
  16 │     - http://swagger-ui-test
  17 │     resources: {}
  18 └     securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'verify' of Pod 'verify' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 verify-pod.yaml:10-25
────────────────────────────────────────
  10 ┌   - image: curlimages/curl:8.1.2
  11 │     imagePullPolicy: IfNotPresent
  12 │     name: verify
  13 │     args:
  14 │     - -v
  15 │     - --fail
  16 │     - http://swagger-ui-test
  17 │     resources: {}
  18 └     securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'verify' of Pod 'verify' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 verify-pod.yaml:10-25
────────────────────────────────────────
  10 ┌   - image: curlimages/curl:8.1.2
  11 │     imagePullPolicy: IfNotPresent
  12 │     name: verify
  13 │     args:
  14 │     - -v
  15 │     - --fail
  16 │     - http://swagger-ui-test
  17 │     resources: {}
  18 └     securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'verify' of Pod 'verify' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 verify-pod.yaml:10-25
────────────────────────────────────────
  10 ┌   - image: curlimages/curl:8.1.2
  11 │     imagePullPolicy: IfNotPresent
  12 │     name: verify
  13 │     args:
  14 │     - -v
  15 │     - --fail
  16 │     - http://swagger-ui-test
  17 │     resources: {}
  18 └     securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'verify' of Pod 'verify' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 verify-pod.yaml:10-25
────────────────────────────────────────
  10 ┌   - image: curlimages/curl:8.1.2
  11 │     imagePullPolicy: IfNotPresent
  12 │     name: verify
  13 │     args:
  14 │     - -v
  15 │     - --fail
  16 │     - http://swagger-ui-test
  17 │     resources: {}
  18 └     securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'verify' of Pod 'verify' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 verify-pod.yaml:10-25
────────────────────────────────────────
  10 ┌   - image: curlimages/curl:8.1.2
  11 │     imagePullPolicy: IfNotPresent
  12 │     name: verify
  13 │     args:
  14 │     - -v
  15 │     - --fail
  16 │     - http://swagger-ui-test
  17 │     resources: {}
  18 └     securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'verify' of Pod 'verify' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 verify-pod.yaml:10-25
────────────────────────────────────────
  10 ┌   - image: curlimages/curl:8.1.2
  11 │     imagePullPolicy: IfNotPresent
  12 │     name: verify
  13 │     args:
  14 │     - -v
  15 │     - --fail
  16 │     - http://swagger-ui-test
  17 │     resources: {}
  18 └     securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'verify' of Pod 'verify' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 verify-pod.yaml:10-25
────────────────────────────────────────
  10 ┌   - image: curlimages/curl:8.1.2
  11 │     imagePullPolicy: IfNotPresent
  12 │     name: verify
  13 │     args:
  14 │     - -v
  15 │     - --fail
  16 │     - http://swagger-ui-test
  17 │     resources: {}
  18 └     securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 verify-pod.yaml:10-25
────────────────────────────────────────
  10 ┌   - image: curlimages/curl:8.1.2
  11 │     imagePullPolicy: IfNotPresent
  12 │     name: verify
  13 │     args:
  14 │     - -v
  15 │     - --fail
  16 │     - http://swagger-ui-test
  17 │     resources: {}
  18 └     securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "verify" of pod "verify" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 verify-pod.yaml:10-25
────────────────────────────────────────
  10 ┌   - image: curlimages/curl:8.1.2
  11 │     imagePullPolicy: IfNotPresent
  12 │     name: verify
  13 │     args:
  14 │     - -v
  15 │     - --fail
  16 │     - http://swagger-ui-test
  17 │     resources: {}
  18 └     securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 verify-pod.yaml:10-25
────────────────────────────────────────
  10 ┌   - image: curlimages/curl:8.1.2
  11 │     imagePullPolicy: IfNotPresent
  12 │     name: verify
  13 │     args:
  14 │     - -v
  15 │     - --fail
  16 │     - http://swagger-ui-test
  17 │     resources: {}
  18 └     securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod verify in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 verify-pod.yaml:4-6
────────────────────────────────────────
   4 ┌   name: verify
   5 │   labels:
   6 └     verify: yes
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod verify in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 verify-pod.yaml:8-25
────────────────────────────────────────
   8 ┌   restartPolicy: OnFailure
   9 │   containers:
  10 │   - image: curlimages/curl:8.1.2
  11 │     imagePullPolicy: IfNotPresent
  12 │     name: verify
  13 │     args:
  14 │     - -v
  15 │     - --fail
  16 └     - http://swagger-ui-test
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container verify in pod verify (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 verify-pod.yaml:10-25
────────────────────────────────────────
  10 ┌   - image: curlimages/curl:8.1.2
  11 │     imagePullPolicy: IfNotPresent
  12 │     name: verify
  13 │     args:
  14 │     - -v
  15 │     - --fail
  16 │     - http://swagger-ui-test
  17 │     resources: {}
  18 └     securityContext:
  ..   
────────────────────────────────────────



verify-secret-created.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'verify-secret-created' of Job 'verify-secret-created' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 verify-secret-created.yaml:11-12
────────────────────────────────────────
  11 ┌       - name: verify-secret-created
  12 └         image: ghcr.io/curium-rocks/wg-kubectl:main
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'verify-secret-created' of Job 'verify-secret-created' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 verify-secret-created.yaml:11-12
────────────────────────────────────────
  11 ┌       - name: verify-secret-created
  12 └         image: ghcr.io/curium-rocks/wg-kubectl:main
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'verify-secret-created' of 'job' 'verify-secret-created' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 verify-secret-created.yaml:11-12
────────────────────────────────────────
  11 ┌       - name: verify-secret-created
  12 └         image: ghcr.io/curium-rocks/wg-kubectl:main
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'verify-secret-created' of Job 'verify-secret-created' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 verify-secret-created.yaml:11-12
────────────────────────────────────────
  11 ┌       - name: verify-secret-created
  12 └         image: ghcr.io/curium-rocks/wg-kubectl:main
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'verify-secret-created' of Job 'verify-secret-created' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 verify-secret-created.yaml:11-12
────────────────────────────────────────
  11 ┌       - name: verify-secret-created
  12 └         image: ghcr.io/curium-rocks/wg-kubectl:main
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'verify-secret-created' of Job 'verify-secret-created' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 verify-secret-created.yaml:11-12
────────────────────────────────────────
  11 ┌       - name: verify-secret-created
  12 └         image: ghcr.io/curium-rocks/wg-kubectl:main
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'verify-secret-created' of Job 'verify-secret-created' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 verify-secret-created.yaml:11-12
────────────────────────────────────────
  11 ┌       - name: verify-secret-created
  12 └         image: ghcr.io/curium-rocks/wg-kubectl:main
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'verify-secret-created' of Job 'verify-secret-created' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 verify-secret-created.yaml:11-12
────────────────────────────────────────
  11 ┌       - name: verify-secret-created
  12 └         image: ghcr.io/curium-rocks/wg-kubectl:main
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'verify-secret-created' of Job 'verify-secret-created' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 verify-secret-created.yaml:11-12
────────────────────────────────────────
  11 ┌       - name: verify-secret-created
  12 └         image: ghcr.io/curium-rocks/wg-kubectl:main
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'verify-secret-created' of Job 'verify-secret-created' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 verify-secret-created.yaml:11-12
────────────────────────────────────────
  11 ┌       - name: verify-secret-created
  12 └         image: ghcr.io/curium-rocks/wg-kubectl:main
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'verify-secret-created' of Job 'verify-secret-created' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 verify-secret-created.yaml:11-12
────────────────────────────────────────
  11 ┌       - name: verify-secret-created
  12 └         image: ghcr.io/curium-rocks/wg-kubectl:main
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 verify-secret-created.yaml:11-12
────────────────────────────────────────
  11 ┌       - name: verify-secret-created
  12 └         image: ghcr.io/curium-rocks/wg-kubectl:main
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "verify-secret-created" of job "verify-secret-created" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 verify-secret-created.yaml:11-12
────────────────────────────────────────
  11 ┌       - name: verify-secret-created
  12 └         image: ghcr.io/curium-rocks/wg-kubectl:main
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 verify-secret-created.yaml:11-12
────────────────────────────────────────
  11 ┌       - name: verify-secret-created
  12 └         image: ghcr.io/curium-rocks/wg-kubectl:main
────────────────────────────────────────


AVD-KSV-0110 (LOW): job verify-secret-created in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 verify-secret-created.yaml:5
────────────────────────────────────────
   5 [   name: verify-secret-created
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container verify-secret-created in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 verify-secret-created.yaml:11-12
────────────────────────────────────────
  11 ┌       - name: verify-secret-created
  12 └         image: ghcr.io/curium-rocks/wg-kubectl:main
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job verify-secret-created in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 verify-secret-created.yaml:9-13
────────────────────────────────────────
   9 ┌       serviceAccountName: secret-mgr-sa
  10 │       containers:
  11 │       - name: verify-secret-created
  12 │         image: ghcr.io/curium-rocks/wg-kubectl:main
  13 └       restartPolicy: Never
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container verify-secret-created in job verify-secret-created (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 verify-secret-created.yaml:11-12
────────────────────────────────────────
  11 ┌       - name: verify-secret-created
  12 └         image: ghcr.io/curium-rocks/wg-kubectl:main
────────────────────────────────────────



verify-secret-works-with-wg.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'verify-secret-works' of Job 'verify-secret-works' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 verify-secret-works-with-wg.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: verify-secret-works
  20 │         image: ghcr.io/curium-rocks/wg-kubectl:main
  21 │         command: ["/bin/sh"]
  22 │         args: ["-c", "cat /wg/privatekey | tee /wg/privatekey | wg pubkey"]
  23 │         volumeMounts:
  24 │           - name: wg-privatekey-volume
  25 │             mountPath: /wg/privatekey
  26 └             subPath: privatekey
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'verify-secret-works' of Job 'verify-secret-works' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 verify-secret-works-with-wg.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: verify-secret-works
  20 │         image: ghcr.io/curium-rocks/wg-kubectl:main
  21 │         command: ["/bin/sh"]
  22 │         args: ["-c", "cat /wg/privatekey | tee /wg/privatekey | wg pubkey"]
  23 │         volumeMounts:
  24 │           - name: wg-privatekey-volume
  25 │             mountPath: /wg/privatekey
  26 └             subPath: privatekey
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'verify-secret-works' of 'job' 'verify-secret-works' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 verify-secret-works-with-wg.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: verify-secret-works
  20 │         image: ghcr.io/curium-rocks/wg-kubectl:main
  21 │         command: ["/bin/sh"]
  22 │         args: ["-c", "cat /wg/privatekey | tee /wg/privatekey | wg pubkey"]
  23 │         volumeMounts:
  24 │           - name: wg-privatekey-volume
  25 │             mountPath: /wg/privatekey
  26 └             subPath: privatekey
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'verify-secret-works' of Job 'verify-secret-works' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 verify-secret-works-with-wg.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: verify-secret-works
  20 │         image: ghcr.io/curium-rocks/wg-kubectl:main
  21 │         command: ["/bin/sh"]
  22 │         args: ["-c", "cat /wg/privatekey | tee /wg/privatekey | wg pubkey"]
  23 │         volumeMounts:
  24 │           - name: wg-privatekey-volume
  25 │             mountPath: /wg/privatekey
  26 └             subPath: privatekey
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'verify-secret-works' of Job 'verify-secret-works' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 verify-secret-works-with-wg.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: verify-secret-works
  20 │         image: ghcr.io/curium-rocks/wg-kubectl:main
  21 │         command: ["/bin/sh"]
  22 │         args: ["-c", "cat /wg/privatekey | tee /wg/privatekey | wg pubkey"]
  23 │         volumeMounts:
  24 │           - name: wg-privatekey-volume
  25 │             mountPath: /wg/privatekey
  26 └             subPath: privatekey
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'verify-secret-works' of Job 'verify-secret-works' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 verify-secret-works-with-wg.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: verify-secret-works
  20 │         image: ghcr.io/curium-rocks/wg-kubectl:main
  21 │         command: ["/bin/sh"]
  22 │         args: ["-c", "cat /wg/privatekey | tee /wg/privatekey | wg pubkey"]
  23 │         volumeMounts:
  24 │           - name: wg-privatekey-volume
  25 │             mountPath: /wg/privatekey
  26 └             subPath: privatekey
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'verify-secret-works' of Job 'verify-secret-works' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 verify-secret-works-with-wg.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: verify-secret-works
  20 │         image: ghcr.io/curium-rocks/wg-kubectl:main
  21 │         command: ["/bin/sh"]
  22 │         args: ["-c", "cat /wg/privatekey | tee /wg/privatekey | wg pubkey"]
  23 │         volumeMounts:
  24 │           - name: wg-privatekey-volume
  25 │             mountPath: /wg/privatekey
  26 └             subPath: privatekey
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'verify-secret-works' of Job 'verify-secret-works' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 verify-secret-works-with-wg.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: verify-secret-works
  20 │         image: ghcr.io/curium-rocks/wg-kubectl:main
  21 │         command: ["/bin/sh"]
  22 │         args: ["-c", "cat /wg/privatekey | tee /wg/privatekey | wg pubkey"]
  23 │         volumeMounts:
  24 │           - name: wg-privatekey-volume
  25 │             mountPath: /wg/privatekey
  26 └             subPath: privatekey
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'verify-secret-works' of Job 'verify-secret-works' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 verify-secret-works-with-wg.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: verify-secret-works
  20 │         image: ghcr.io/curium-rocks/wg-kubectl:main
  21 │         command: ["/bin/sh"]
  22 │         args: ["-c", "cat /wg/privatekey | tee /wg/privatekey | wg pubkey"]
  23 │         volumeMounts:
  24 │           - name: wg-privatekey-volume
  25 │             mountPath: /wg/privatekey
  26 └             subPath: privatekey
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'verify-secret-works' of Job 'verify-secret-works' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 verify-secret-works-with-wg.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: verify-secret-works
  20 │         image: ghcr.io/curium-rocks/wg-kubectl:main
  21 │         command: ["/bin/sh"]
  22 │         args: ["-c", "cat /wg/privatekey | tee /wg/privatekey | wg pubkey"]
  23 │         volumeMounts:
  24 │           - name: wg-privatekey-volume
  25 │             mountPath: /wg/privatekey
  26 └             subPath: privatekey
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'verify-secret-works' of Job 'verify-secret-works' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 verify-secret-works-with-wg.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: verify-secret-works
  20 │         image: ghcr.io/curium-rocks/wg-kubectl:main
  21 │         command: ["/bin/sh"]
  22 │         args: ["-c", "cat /wg/privatekey | tee /wg/privatekey | wg pubkey"]
  23 │         volumeMounts:
  24 │           - name: wg-privatekey-volume
  25 │             mountPath: /wg/privatekey
  26 └             subPath: privatekey
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 verify-secret-works-with-wg.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: verify-secret-works
  20 │         image: ghcr.io/curium-rocks/wg-kubectl:main
  21 │         command: ["/bin/sh"]
  22 │         args: ["-c", "cat /wg/privatekey | tee /wg/privatekey | wg pubkey"]
  23 │         volumeMounts:
  24 │           - name: wg-privatekey-volume
  25 │             mountPath: /wg/privatekey
  26 └             subPath: privatekey
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "verify-secret-works" of job "verify-secret-works" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 verify-secret-works-with-wg.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: verify-secret-works
  20 │         image: ghcr.io/curium-rocks/wg-kubectl:main
  21 │         command: ["/bin/sh"]
  22 │         args: ["-c", "cat /wg/privatekey | tee /wg/privatekey | wg pubkey"]
  23 │         volumeMounts:
  24 │           - name: wg-privatekey-volume
  25 │             mountPath: /wg/privatekey
  26 └             subPath: privatekey
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 verify-secret-works-with-wg.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: verify-secret-works
  20 │         image: ghcr.io/curium-rocks/wg-kubectl:main
  21 │         command: ["/bin/sh"]
  22 │         args: ["-c", "cat /wg/privatekey | tee /wg/privatekey | wg pubkey"]
  23 │         volumeMounts:
  24 │           - name: wg-privatekey-volume
  25 │             mountPath: /wg/privatekey
  26 └             subPath: privatekey
────────────────────────────────────────


AVD-KSV-0110 (LOW): job verify-secret-works in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 verify-secret-works-with-wg.yaml:6
────────────────────────────────────────
   6 [   name: verify-secret-works
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container verify-secret-works in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 verify-secret-works-with-wg.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: verify-secret-works
  20 │         image: ghcr.io/curium-rocks/wg-kubectl:main
  21 │         command: ["/bin/sh"]
  22 │         args: ["-c", "cat /wg/privatekey | tee /wg/privatekey | wg pubkey"]
  23 │         volumeMounts:
  24 │           - name: wg-privatekey-volume
  25 │             mountPath: /wg/privatekey
  26 └             subPath: privatekey
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job verify-secret-works in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 verify-secret-works-with-wg.yaml:10-27
────────────────────────────────────────
  10 ┌       serviceAccountName: secret-mgr-sa
  11 │       volumes:
  12 │         - name: wg-privatekey-volume
  13 │           secret:
  14 │             secretName: test-wg-secret
  15 │             items:
  16 │             - key: privatekey
  17 │               path: privatekey
  18 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container verify-secret-works in job verify-secret-works (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 verify-secret-works-with-wg.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: verify-secret-works
  20 │         image: ghcr.io/curium-rocks/wg-kubectl:main
  21 │         command: ["/bin/sh"]
  22 │         args: ["-c", "cat /wg/privatekey | tee /wg/privatekey | wg pubkey"]
  23 │         volumeMounts:
  24 │           - name: wg-privatekey-volume
  25 │             mountPath: /wg/privatekey
  26 └             subPath: privatekey
────────────────────────────────────────



verticalscaling_15.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'system:vpa-admission-controller' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 verticalscaling_15.yaml:17-25
────────────────────────────────────────
  17 ┌ - apiGroups:
  18 │   - admissionregistration.k8s.io
  19 │   resources:
  20 │   - mutatingwebhookconfigurations
  21 │   verbs:
  22 │   - create
  23 │   - delete
  24 │   - get
  25 └   - list
────────────────────────────────────────



vertx-create-span.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'vertx-create-span' of Pod 'vertx-create-span' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vertx-create-span.yaml:10-14
────────────────────────────────────────
  10 ┌     - name: vertx-create-span
  11 │       image: jaegertracing/vertx-create-span:operator-e2e-tests
  12 │       ports:
  13 │         - containerPort: 8080
  14 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vertx-create-span' of Pod 'vertx-create-span' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vertx-create-span.yaml:10-14
────────────────────────────────────────
  10 ┌     - name: vertx-create-span
  11 │       image: jaegertracing/vertx-create-span:operator-e2e-tests
  12 │       ports:
  13 │         - containerPort: 8080
  14 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vertx-create-span' of 'pod' 'vertx-create-span' in 'all-applications' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vertx-create-span.yaml:10-14
────────────────────────────────────────
  10 ┌     - name: vertx-create-span
  11 │       image: jaegertracing/vertx-create-span:operator-e2e-tests
  12 │       ports:
  13 │         - containerPort: 8080
  14 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vertx-create-span' of Pod 'vertx-create-span' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vertx-create-span.yaml:10-14
────────────────────────────────────────
  10 ┌     - name: vertx-create-span
  11 │       image: jaegertracing/vertx-create-span:operator-e2e-tests
  12 │       ports:
  13 │         - containerPort: 8080
  14 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vertx-create-span' of Pod 'vertx-create-span' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vertx-create-span.yaml:10-14
────────────────────────────────────────
  10 ┌     - name: vertx-create-span
  11 │       image: jaegertracing/vertx-create-span:operator-e2e-tests
  12 │       ports:
  13 │         - containerPort: 8080
  14 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vertx-create-span' of Pod 'vertx-create-span' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vertx-create-span.yaml:10-14
────────────────────────────────────────
  10 ┌     - name: vertx-create-span
  11 │       image: jaegertracing/vertx-create-span:operator-e2e-tests
  12 │       ports:
  13 │         - containerPort: 8080
  14 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vertx-create-span' of Pod 'vertx-create-span' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vertx-create-span.yaml:10-14
────────────────────────────────────────
  10 ┌     - name: vertx-create-span
  11 │       image: jaegertracing/vertx-create-span:operator-e2e-tests
  12 │       ports:
  13 │         - containerPort: 8080
  14 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vertx-create-span' of Pod 'vertx-create-span' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vertx-create-span.yaml:10-14
────────────────────────────────────────
  10 ┌     - name: vertx-create-span
  11 │       image: jaegertracing/vertx-create-span:operator-e2e-tests
  12 │       ports:
  13 │         - containerPort: 8080
  14 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vertx-create-span' of Pod 'vertx-create-span' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vertx-create-span.yaml:10-14
────────────────────────────────────────
  10 ┌     - name: vertx-create-span
  11 │       image: jaegertracing/vertx-create-span:operator-e2e-tests
  12 │       ports:
  13 │         - containerPort: 8080
  14 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vertx-create-span' of Pod 'vertx-create-span' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vertx-create-span.yaml:10-14
────────────────────────────────────────
  10 ┌     - name: vertx-create-span
  11 │       image: jaegertracing/vertx-create-span:operator-e2e-tests
  12 │       ports:
  13 │         - containerPort: 8080
  14 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vertx-create-span' of Pod 'vertx-create-span' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vertx-create-span.yaml:10-14
────────────────────────────────────────
  10 ┌     - name: vertx-create-span
  11 │       image: jaegertracing/vertx-create-span:operator-e2e-tests
  12 │       ports:
  13 │         - containerPort: 8080
  14 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vertx-create-span.yaml:10-14
────────────────────────────────────────
  10 ┌     - name: vertx-create-span
  11 │       image: jaegertracing/vertx-create-span:operator-e2e-tests
  12 │       ports:
  13 │         - containerPort: 8080
  14 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vertx-create-span" of pod "vertx-create-span" in "all-applications" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vertx-create-span.yaml:10-14
────────────────────────────────────────
  10 ┌     - name: vertx-create-span
  11 │       image: jaegertracing/vertx-create-span:operator-e2e-tests
  12 │       ports:
  13 │         - containerPort: 8080
  14 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vertx-create-span.yaml:10-14
────────────────────────────────────────
  10 ┌     - name: vertx-create-span
  11 │       image: jaegertracing/vertx-create-span:operator-e2e-tests
  12 │       ports:
  13 │         - containerPort: 8080
  14 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vertx-create-span in all-applications namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vertx-create-span.yaml:10-14
────────────────────────────────────────
  10 ┌     - name: vertx-create-span
  11 │       image: jaegertracing/vertx-create-span:operator-e2e-tests
  12 │       ports:
  13 │         - containerPort: 8080
  14 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod vertx-create-span in all-applications namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vertx-create-span.yaml:9-14
────────────────────────────────────────
   9 ┌   containers:
  10 │     - name: vertx-create-span
  11 │       image: jaegertracing/vertx-create-span:operator-e2e-tests
  12 │       ports:
  13 │         - containerPort: 8080
  14 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vertx-create-span in pod vertx-create-span (namespace: all-applications) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vertx-create-span.yaml:10-14
────────────────────────────────────────
  10 ┌     - name: vertx-create-span
  11 │       image: jaegertracing/vertx-create-span:operator-e2e-tests
  12 │       ports:
  13 │         - containerPort: 8080
  14 └           protocol: TCP
────────────────────────────────────────



viacep-api.yaml (kubernetes)
============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'cep' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



victim-pod.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'victim' of Pod 'victim' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 victim-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: victim
   8 │     image: victim-image
   9 │     imagePullPolicy: Never
  10 │     ports:
  11 └     - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'victim' of Pod 'victim' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 victim-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: victim
   8 │     image: victim-image
   9 │     imagePullPolicy: Never
  10 │     ports:
  11 └     - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'victim' of 'pod' 'victim' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 victim-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: victim
   8 │     image: victim-image
   9 │     imagePullPolicy: Never
  10 │     ports:
  11 └     - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'victim' of Pod 'victim' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 victim-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: victim
   8 │     image: victim-image
   9 │     imagePullPolicy: Never
  10 │     ports:
  11 └     - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'victim' of Pod 'victim' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 victim-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: victim
   8 │     image: victim-image
   9 │     imagePullPolicy: Never
  10 │     ports:
  11 └     - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'victim' of Pod 'victim' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 victim-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: victim
   8 │     image: victim-image
   9 │     imagePullPolicy: Never
  10 │     ports:
  11 └     - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'victim' of Pod 'victim' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 victim-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: victim
   8 │     image: victim-image
   9 │     imagePullPolicy: Never
  10 │     ports:
  11 └     - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'victim' of Pod 'victim' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 victim-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: victim
   8 │     image: victim-image
   9 │     imagePullPolicy: Never
  10 │     ports:
  11 └     - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'victim' of Pod 'victim' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 victim-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: victim
   8 │     image: victim-image
   9 │     imagePullPolicy: Never
  10 │     ports:
  11 └     - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'victim' of Pod 'victim' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 victim-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: victim
   8 │     image: victim-image
   9 │     imagePullPolicy: Never
  10 │     ports:
  11 └     - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'victim' of Pod 'victim' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 victim-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: victim
   8 │     image: victim-image
   9 │     imagePullPolicy: Never
  10 │     ports:
  11 └     - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'victim' of Pod 'victim' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 victim-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: victim
   8 │     image: victim-image
   9 │     imagePullPolicy: Never
  10 │     ports:
  11 └     - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 victim-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: victim
   8 │     image: victim-image
   9 │     imagePullPolicy: Never
  10 │     ports:
  11 └     - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "victim" of pod "victim" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 victim-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: victim
   8 │     image: victim-image
   9 │     imagePullPolicy: Never
  10 │     ports:
  11 └     - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 victim-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: victim
   8 │     image: victim-image
   9 │     imagePullPolicy: Never
  10 │     ports:
  11 └     - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod victim in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 victim-pod.yaml:4
────────────────────────────────────────
   4 [   name: victim
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container victim in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 victim-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: victim
   8 │     image: victim-image
   9 │     imagePullPolicy: Never
  10 │     ports:
  11 └     - containerPort: 3000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod victim in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 victim-pod.yaml:6-11
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: victim
   8 │     image: victim-image
   9 │     imagePullPolicy: Never
  10 │     ports:
  11 └     - containerPort: 3000
────────────────────────────────────────



victoria-deployment.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'otel-victoria' of Deployment 'victoria' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 victoria-deployment.yaml:25-30
────────────────────────────────────────
  25 ┌         - image: victoriametrics/victoria-metrics:v1.96.0
  26 │           name: otel-victoria
  27 │           ports:
  28 │             - containerPort: 8428
  29 │               hostPort: 8428
  30 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'otel-victoria' of Deployment 'victoria' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 victoria-deployment.yaml:25-30
────────────────────────────────────────
  25 ┌         - image: victoriametrics/victoria-metrics:v1.96.0
  26 │           name: otel-victoria
  27 │           ports:
  28 │             - containerPort: 8428
  29 │               hostPort: 8428
  30 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'otel-victoria' of 'deployment' 'victoria' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 victoria-deployment.yaml:25-30
────────────────────────────────────────
  25 ┌         - image: victoriametrics/victoria-metrics:v1.96.0
  26 │           name: otel-victoria
  27 │           ports:
  28 │             - containerPort: 8428
  29 │               hostPort: 8428
  30 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'otel-victoria' of Deployment 'victoria' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 victoria-deployment.yaml:25-30
────────────────────────────────────────
  25 ┌         - image: victoriametrics/victoria-metrics:v1.96.0
  26 │           name: otel-victoria
  27 │           ports:
  28 │             - containerPort: 8428
  29 │               hostPort: 8428
  30 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'otel-victoria' of Deployment 'victoria' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 victoria-deployment.yaml:25-30
────────────────────────────────────────
  25 ┌         - image: victoriametrics/victoria-metrics:v1.96.0
  26 │           name: otel-victoria
  27 │           ports:
  28 │             - containerPort: 8428
  29 │               hostPort: 8428
  30 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'otel-victoria' of Deployment 'victoria' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 victoria-deployment.yaml:25-30
────────────────────────────────────────
  25 ┌         - image: victoriametrics/victoria-metrics:v1.96.0
  26 │           name: otel-victoria
  27 │           ports:
  28 │             - containerPort: 8428
  29 │               hostPort: 8428
  30 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'otel-victoria' of Deployment 'victoria' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 victoria-deployment.yaml:25-30
────────────────────────────────────────
  25 ┌         - image: victoriametrics/victoria-metrics:v1.96.0
  26 │           name: otel-victoria
  27 │           ports:
  28 │             - containerPort: 8428
  29 │               hostPort: 8428
  30 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'otel-victoria' of Deployment 'victoria' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 victoria-deployment.yaml:25-30
────────────────────────────────────────
  25 ┌         - image: victoriametrics/victoria-metrics:v1.96.0
  26 │           name: otel-victoria
  27 │           ports:
  28 │             - containerPort: 8428
  29 │               hostPort: 8428
  30 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'otel-victoria' of Deployment 'victoria' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 victoria-deployment.yaml:25-30
────────────────────────────────────────
  25 ┌         - image: victoriametrics/victoria-metrics:v1.96.0
  26 │           name: otel-victoria
  27 │           ports:
  28 │             - containerPort: 8428
  29 │               hostPort: 8428
  30 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'otel-victoria' of Deployment 'victoria' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 victoria-deployment.yaml:25-30
────────────────────────────────────────
  25 ┌         - image: victoriametrics/victoria-metrics:v1.96.0
  26 │           name: otel-victoria
  27 │           ports:
  28 │             - containerPort: 8428
  29 │               hostPort: 8428
  30 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'otel-victoria' of Deployment 'victoria' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 victoria-deployment.yaml:25-30
────────────────────────────────────────
  25 ┌         - image: victoriametrics/victoria-metrics:v1.96.0
  26 │           name: otel-victoria
  27 │           ports:
  28 │             - containerPort: 8428
  29 │               hostPort: 8428
  30 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'otel-victoria' of Deployment 'victoria' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 victoria-deployment.yaml:25-30
────────────────────────────────────────
  25 ┌         - image: victoriametrics/victoria-metrics:v1.96.0
  26 │           name: otel-victoria
  27 │           ports:
  28 │             - containerPort: 8428
  29 │               hostPort: 8428
  30 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 victoria-deployment.yaml:25-30
────────────────────────────────────────
  25 ┌         - image: victoriametrics/victoria-metrics:v1.96.0
  26 │           name: otel-victoria
  27 │           ports:
  28 │             - containerPort: 8428
  29 │               hostPort: 8428
  30 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "otel-victoria" of deployment "victoria" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 victoria-deployment.yaml:25-30
────────────────────────────────────────
  25 ┌         - image: victoriametrics/victoria-metrics:v1.96.0
  26 │           name: otel-victoria
  27 │           ports:
  28 │             - containerPort: 8428
  29 │               hostPort: 8428
  30 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 victoria-deployment.yaml:25-30
────────────────────────────────────────
  25 ┌         - image: victoriametrics/victoria-metrics:v1.96.0
  26 │           name: otel-victoria
  27 │           ports:
  28 │             - containerPort: 8428
  29 │               hostPort: 8428
  30 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment victoria in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 victoria-deployment.yaml:4-9
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: kompose --file ../local-setup/local-dockercompose.yaml convert --profile all
   6 │     kompose.version: 1.32.0 (HEAD)
   7 │   labels:
   8 │     io.kompose.service: victoria
   9 └   name: victoria
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container victoria in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 victoria-deployment.yaml:25-30
────────────────────────────────────────
  25 ┌         - image: victoriametrics/victoria-metrics:v1.96.0
  26 │           name: otel-victoria
  27 │           ports:
  28 │             - containerPort: 8428
  29 │               hostPort: 8428
  30 └               protocol: TCP
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment victoria in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 victoria-deployment.yaml:24-31
────────────────────────────────────────
  24 ┌       containers:
  25 │         - image: victoriametrics/victoria-metrics:v1.96.0
  26 │           name: otel-victoria
  27 │           ports:
  28 │             - containerPort: 8428
  29 │               hostPort: 8428
  30 │               protocol: TCP
  31 └       restartPolicy: Always
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container otel-victoria in deployment victoria (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 victoria-deployment.yaml:25-30
────────────────────────────────────────
  25 ┌         - image: victoriametrics/victoria-metrics:v1.96.0
  26 │           name: otel-victoria
  27 │           ports:
  28 │             - containerPort: 8428
  29 │               hostPort: 8428
  30 └               protocol: TCP
────────────────────────────────────────



victoria-metrics2.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'victoria-metrics' of Deployment 'victoria-metrics' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 victoria-metrics2.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: victoria-metrics
  19 │         image: victoriametrics/victoria-metrics:v1.93.10
  20 │         args:
  21 │         - -httpListenAddr=0.0.0.0:8428
  22 │         ports:
  23 │         - name: http
  24 └           containerPort: 8428
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'victoria-metrics' of Deployment 'victoria-metrics' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 victoria-metrics2.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: victoria-metrics
  19 │         image: victoriametrics/victoria-metrics:v1.93.10
  20 │         args:
  21 │         - -httpListenAddr=0.0.0.0:8428
  22 │         ports:
  23 │         - name: http
  24 └           containerPort: 8428
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'victoria-metrics' of 'deployment' 'victoria-metrics' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 victoria-metrics2.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: victoria-metrics
  19 │         image: victoriametrics/victoria-metrics:v1.93.10
  20 │         args:
  21 │         - -httpListenAddr=0.0.0.0:8428
  22 │         ports:
  23 │         - name: http
  24 └           containerPort: 8428
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'victoria-metrics' of Deployment 'victoria-metrics' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 victoria-metrics2.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: victoria-metrics
  19 │         image: victoriametrics/victoria-metrics:v1.93.10
  20 │         args:
  21 │         - -httpListenAddr=0.0.0.0:8428
  22 │         ports:
  23 │         - name: http
  24 └           containerPort: 8428
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'victoria-metrics' of Deployment 'victoria-metrics' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 victoria-metrics2.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: victoria-metrics
  19 │         image: victoriametrics/victoria-metrics:v1.93.10
  20 │         args:
  21 │         - -httpListenAddr=0.0.0.0:8428
  22 │         ports:
  23 │         - name: http
  24 └           containerPort: 8428
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'victoria-metrics' of Deployment 'victoria-metrics' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 victoria-metrics2.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: victoria-metrics
  19 │         image: victoriametrics/victoria-metrics:v1.93.10
  20 │         args:
  21 │         - -httpListenAddr=0.0.0.0:8428
  22 │         ports:
  23 │         - name: http
  24 └           containerPort: 8428
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'victoria-metrics' of Deployment 'victoria-metrics' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 victoria-metrics2.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: victoria-metrics
  19 │         image: victoriametrics/victoria-metrics:v1.93.10
  20 │         args:
  21 │         - -httpListenAddr=0.0.0.0:8428
  22 │         ports:
  23 │         - name: http
  24 └           containerPort: 8428
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'victoria-metrics' of Deployment 'victoria-metrics' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 victoria-metrics2.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: victoria-metrics
  19 │         image: victoriametrics/victoria-metrics:v1.93.10
  20 │         args:
  21 │         - -httpListenAddr=0.0.0.0:8428
  22 │         ports:
  23 │         - name: http
  24 └           containerPort: 8428
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'victoria-metrics' of Deployment 'victoria-metrics' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 victoria-metrics2.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: victoria-metrics
  19 │         image: victoriametrics/victoria-metrics:v1.93.10
  20 │         args:
  21 │         - -httpListenAddr=0.0.0.0:8428
  22 │         ports:
  23 │         - name: http
  24 └           containerPort: 8428
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'victoria-metrics' of Deployment 'victoria-metrics' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 victoria-metrics2.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: victoria-metrics
  19 │         image: victoriametrics/victoria-metrics:v1.93.10
  20 │         args:
  21 │         - -httpListenAddr=0.0.0.0:8428
  22 │         ports:
  23 │         - name: http
  24 └           containerPort: 8428
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'victoria-metrics' of Deployment 'victoria-metrics' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 victoria-metrics2.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: victoria-metrics
  19 │         image: victoriametrics/victoria-metrics:v1.93.10
  20 │         args:
  21 │         - -httpListenAddr=0.0.0.0:8428
  22 │         ports:
  23 │         - name: http
  24 └           containerPort: 8428
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 victoria-metrics2.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: victoria-metrics
  19 │         image: victoriametrics/victoria-metrics:v1.93.10
  20 │         args:
  21 │         - -httpListenAddr=0.0.0.0:8428
  22 │         ports:
  23 │         - name: http
  24 └           containerPort: 8428
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "victoria-metrics" of deployment "victoria-metrics" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 victoria-metrics2.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: victoria-metrics
  19 │         image: victoriametrics/victoria-metrics:v1.93.10
  20 │         args:
  21 │         - -httpListenAddr=0.0.0.0:8428
  22 │         ports:
  23 │         - name: http
  24 └           containerPort: 8428
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 victoria-metrics2.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: victoria-metrics
  19 │         image: victoriametrics/victoria-metrics:v1.93.10
  20 │         args:
  21 │         - -httpListenAddr=0.0.0.0:8428
  22 │         ports:
  23 │         - name: http
  24 └           containerPort: 8428
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment victoria-metrics in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 victoria-metrics2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: victoria-metrics
   5 │   labels:
   6 └     app: victoria-metrics
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container victoria-metrics in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 victoria-metrics2.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: victoria-metrics
  19 │         image: victoriametrics/victoria-metrics:v1.93.10
  20 │         args:
  21 │         - -httpListenAddr=0.0.0.0:8428
  22 │         ports:
  23 │         - name: http
  24 └           containerPort: 8428
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment victoria-metrics in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 victoria-metrics2.yaml:17-24
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: victoria-metrics
  19 │         image: victoriametrics/victoria-metrics:v1.93.10
  20 │         args:
  21 │         - -httpListenAddr=0.0.0.0:8428
  22 │         ports:
  23 │         - name: http
  24 └           containerPort: 8428
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container victoria-metrics in deployment victoria-metrics (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 victoria-metrics2.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: victoria-metrics
  19 │         image: victoriametrics/victoria-metrics:v1.93.10
  20 │         args:
  21 │         - -httpListenAddr=0.0.0.0:8428
  22 │         ports:
  23 │         - name: http
  24 └           containerPort: 8428
────────────────────────────────────────



victoriametrics-statefulset.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'victoriametrics' of StatefulSet 'victoriametrics' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 victoriametrics-statefulset.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: victoriametrics
  18 │         image: victoriametrics/victoria-metrics
  19 │         ports:
  20 │         - containerPort: 8428
  21 │         volumeMounts:
  22 │         - name: storage
  23 │           mountPath: /victoria-metrics-data
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'victoriametrics' of StatefulSet 'victoriametrics' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 victoriametrics-statefulset.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: victoriametrics
  18 │         image: victoriametrics/victoria-metrics
  19 │         ports:
  20 │         - containerPort: 8428
  21 │         volumeMounts:
  22 │         - name: storage
  23 │           mountPath: /victoria-metrics-data
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'victoriametrics' of 'statefulset' 'victoriametrics' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 victoriametrics-statefulset.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: victoriametrics
  18 │         image: victoriametrics/victoria-metrics
  19 │         ports:
  20 │         - containerPort: 8428
  21 │         volumeMounts:
  22 │         - name: storage
  23 │           mountPath: /victoria-metrics-data
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'victoriametrics' of StatefulSet 'victoriametrics' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 victoriametrics-statefulset.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: victoriametrics
  18 │         image: victoriametrics/victoria-metrics
  19 │         ports:
  20 │         - containerPort: 8428
  21 │         volumeMounts:
  22 │         - name: storage
  23 │           mountPath: /victoria-metrics-data
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'victoriametrics' of StatefulSet 'victoriametrics' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 victoriametrics-statefulset.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: victoriametrics
  18 │         image: victoriametrics/victoria-metrics
  19 │         ports:
  20 │         - containerPort: 8428
  21 │         volumeMounts:
  22 │         - name: storage
  23 │           mountPath: /victoria-metrics-data
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'victoriametrics' of StatefulSet 'victoriametrics' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 victoriametrics-statefulset.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: victoriametrics
  18 │         image: victoriametrics/victoria-metrics
  19 │         ports:
  20 │         - containerPort: 8428
  21 │         volumeMounts:
  22 │         - name: storage
  23 │           mountPath: /victoria-metrics-data
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'victoriametrics' of StatefulSet 'victoriametrics' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 victoriametrics-statefulset.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: victoriametrics
  18 │         image: victoriametrics/victoria-metrics
  19 │         ports:
  20 │         - containerPort: 8428
  21 │         volumeMounts:
  22 │         - name: storage
  23 │           mountPath: /victoria-metrics-data
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'victoriametrics' of StatefulSet 'victoriametrics' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 victoriametrics-statefulset.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: victoriametrics
  18 │         image: victoriametrics/victoria-metrics
  19 │         ports:
  20 │         - containerPort: 8428
  21 │         volumeMounts:
  22 │         - name: storage
  23 │           mountPath: /victoria-metrics-data
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 victoriametrics-statefulset.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: victoriametrics
  18 │         image: victoriametrics/victoria-metrics
  19 │         ports:
  20 │         - containerPort: 8428
  21 │         volumeMounts:
  22 │         - name: storage
  23 │           mountPath: /victoria-metrics-data
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "victoriametrics" of statefulset "victoriametrics" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 victoriametrics-statefulset.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: victoriametrics
  18 │         image: victoriametrics/victoria-metrics
  19 │         ports:
  20 │         - containerPort: 8428
  21 │         volumeMounts:
  22 │         - name: storage
  23 │           mountPath: /victoria-metrics-data
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 victoriametrics-statefulset.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: victoriametrics
  18 │         image: victoriametrics/victoria-metrics
  19 │         ports:
  20 │         - containerPort: 8428
  21 │         volumeMounts:
  22 │         - name: storage
  23 │           mountPath: /victoria-metrics-data
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset victoriametrics in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 victoriametrics-statefulset.yaml:4
────────────────────────────────────────
   4 [   name: victoriametrics
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container victoriametrics in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 victoriametrics-statefulset.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: victoriametrics
  18 │         image: victoriametrics/victoria-metrics
  19 │         ports:
  20 │         - containerPort: 8428
  21 │         volumeMounts:
  22 │         - name: storage
  23 │           mountPath: /victoria-metrics-data
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset victoriametrics in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 victoriametrics-statefulset.yaml:16-34
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: victoriametrics
  18 │         image: victoriametrics/victoria-metrics
  19 │         ports:
  20 │         - containerPort: 8428
  21 │         volumeMounts:
  22 │         - name: storage
  23 │           mountPath: /victoria-metrics-data
  24 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container victoriametrics in statefulset victoriametrics (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 victoriametrics-statefulset.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: victoriametrics
  18 │         image: victoriametrics/victoria-metrics
  19 │         ports:
  20 │         - containerPort: 8428
  21 │         volumeMounts:
  22 │         - name: storage
  23 │           mountPath: /victoria-metrics-data
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────



victoriametrics-statefulset1.yaml (kubernetes)
==============================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'victoriametrics' of StatefulSet 'victoriametrics' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 victoriametrics-statefulset1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: victoriametrics
  18 │         image: victoriametrics/victoria-metrics
  19 │         ports:
  20 │         - containerPort: 8428
  21 │         volumeMounts:
  22 │         - name: storage
  23 │           mountPath: /victoria-metrics-data
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'victoriametrics' of StatefulSet 'victoriametrics' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 victoriametrics-statefulset1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: victoriametrics
  18 │         image: victoriametrics/victoria-metrics
  19 │         ports:
  20 │         - containerPort: 8428
  21 │         volumeMounts:
  22 │         - name: storage
  23 │           mountPath: /victoria-metrics-data
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'victoriametrics' of 'statefulset' 'victoriametrics' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 victoriametrics-statefulset1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: victoriametrics
  18 │         image: victoriametrics/victoria-metrics
  19 │         ports:
  20 │         - containerPort: 8428
  21 │         volumeMounts:
  22 │         - name: storage
  23 │           mountPath: /victoria-metrics-data
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'victoriametrics' of StatefulSet 'victoriametrics' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 victoriametrics-statefulset1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: victoriametrics
  18 │         image: victoriametrics/victoria-metrics
  19 │         ports:
  20 │         - containerPort: 8428
  21 │         volumeMounts:
  22 │         - name: storage
  23 │           mountPath: /victoria-metrics-data
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'victoriametrics' of StatefulSet 'victoriametrics' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 victoriametrics-statefulset1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: victoriametrics
  18 │         image: victoriametrics/victoria-metrics
  19 │         ports:
  20 │         - containerPort: 8428
  21 │         volumeMounts:
  22 │         - name: storage
  23 │           mountPath: /victoria-metrics-data
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'victoriametrics' of StatefulSet 'victoriametrics' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 victoriametrics-statefulset1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: victoriametrics
  18 │         image: victoriametrics/victoria-metrics
  19 │         ports:
  20 │         - containerPort: 8428
  21 │         volumeMounts:
  22 │         - name: storage
  23 │           mountPath: /victoria-metrics-data
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'victoriametrics' of StatefulSet 'victoriametrics' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 victoriametrics-statefulset1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: victoriametrics
  18 │         image: victoriametrics/victoria-metrics
  19 │         ports:
  20 │         - containerPort: 8428
  21 │         volumeMounts:
  22 │         - name: storage
  23 │           mountPath: /victoria-metrics-data
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'victoriametrics' of StatefulSet 'victoriametrics' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 victoriametrics-statefulset1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: victoriametrics
  18 │         image: victoriametrics/victoria-metrics
  19 │         ports:
  20 │         - containerPort: 8428
  21 │         volumeMounts:
  22 │         - name: storage
  23 │           mountPath: /victoria-metrics-data
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 victoriametrics-statefulset1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: victoriametrics
  18 │         image: victoriametrics/victoria-metrics
  19 │         ports:
  20 │         - containerPort: 8428
  21 │         volumeMounts:
  22 │         - name: storage
  23 │           mountPath: /victoria-metrics-data
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "victoriametrics" of statefulset "victoriametrics" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 victoriametrics-statefulset1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: victoriametrics
  18 │         image: victoriametrics/victoria-metrics
  19 │         ports:
  20 │         - containerPort: 8428
  21 │         volumeMounts:
  22 │         - name: storage
  23 │           mountPath: /victoria-metrics-data
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 victoriametrics-statefulset1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: victoriametrics
  18 │         image: victoriametrics/victoria-metrics
  19 │         ports:
  20 │         - containerPort: 8428
  21 │         volumeMounts:
  22 │         - name: storage
  23 │           mountPath: /victoria-metrics-data
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset victoriametrics in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 victoriametrics-statefulset1.yaml:4
────────────────────────────────────────
   4 [   name: victoriametrics
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container victoriametrics in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 victoriametrics-statefulset1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: victoriametrics
  18 │         image: victoriametrics/victoria-metrics
  19 │         ports:
  20 │         - containerPort: 8428
  21 │         volumeMounts:
  22 │         - name: storage
  23 │           mountPath: /victoria-metrics-data
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset victoriametrics in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 victoriametrics-statefulset1.yaml:16-34
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: victoriametrics
  18 │         image: victoriametrics/victoria-metrics
  19 │         ports:
  20 │         - containerPort: 8428
  21 │         volumeMounts:
  22 │         - name: storage
  23 │           mountPath: /victoria-metrics-data
  24 └         resources:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container victoriametrics in statefulset victoriametrics (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 victoriametrics-statefulset1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: victoriametrics
  18 │         image: victoriametrics/victoria-metrics
  19 │         ports:
  20 │         - containerPort: 8428
  21 │         volumeMounts:
  22 │         - name: storage
  23 │           mountPath: /victoria-metrics-data
  24 │         resources:
  25 └           limits:
  ..   
────────────────────────────────────────



video-deploy.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'video-webapp' of Deployment 'webapp-video' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 video-deploy.yaml:17-21
────────────────────────────────────────
  17 ┌       - image: kodekloud/ecommerce:video
  18 │         name: video-webapp
  19 │         ports:
  20 │         - containerPort: 8080
  21 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'video-webapp' of Deployment 'webapp-video' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 video-deploy.yaml:17-21
────────────────────────────────────────
  17 ┌       - image: kodekloud/ecommerce:video
  18 │         name: video-webapp
  19 │         ports:
  20 │         - containerPort: 8080
  21 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'video-webapp' of 'deployment' 'webapp-video' in 'app-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 video-deploy.yaml:17-21
────────────────────────────────────────
  17 ┌       - image: kodekloud/ecommerce:video
  18 │         name: video-webapp
  19 │         ports:
  20 │         - containerPort: 8080
  21 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'video-webapp' of Deployment 'webapp-video' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 video-deploy.yaml:17-21
────────────────────────────────────────
  17 ┌       - image: kodekloud/ecommerce:video
  18 │         name: video-webapp
  19 │         ports:
  20 │         - containerPort: 8080
  21 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'video-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 video-deploy.yaml:17-21
────────────────────────────────────────
  17 ┌       - image: kodekloud/ecommerce:video
  18 │         name: video-webapp
  19 │         ports:
  20 │         - containerPort: 8080
  21 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'video-webapp' of Deployment 'webapp-video' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 video-deploy.yaml:17-21
────────────────────────────────────────
  17 ┌       - image: kodekloud/ecommerce:video
  18 │         name: video-webapp
  19 │         ports:
  20 │         - containerPort: 8080
  21 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'video-webapp' of Deployment 'webapp-video' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 video-deploy.yaml:17-21
────────────────────────────────────────
  17 ┌       - image: kodekloud/ecommerce:video
  18 │         name: video-webapp
  19 │         ports:
  20 │         - containerPort: 8080
  21 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'video-webapp' of Deployment 'webapp-video' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 video-deploy.yaml:17-21
────────────────────────────────────────
  17 ┌       - image: kodekloud/ecommerce:video
  18 │         name: video-webapp
  19 │         ports:
  20 │         - containerPort: 8080
  21 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'video-webapp' of Deployment 'webapp-video' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 video-deploy.yaml:17-21
────────────────────────────────────────
  17 ┌       - image: kodekloud/ecommerce:video
  18 │         name: video-webapp
  19 │         ports:
  20 │         - containerPort: 8080
  21 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'video-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 video-deploy.yaml:17-21
────────────────────────────────────────
  17 ┌       - image: kodekloud/ecommerce:video
  18 │         name: video-webapp
  19 │         ports:
  20 │         - containerPort: 8080
  21 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'video-webapp' of Deployment 'webapp-video' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 video-deploy.yaml:17-21
────────────────────────────────────────
  17 ┌       - image: kodekloud/ecommerce:video
  18 │         name: video-webapp
  19 │         ports:
  20 │         - containerPort: 8080
  21 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 video-deploy.yaml:17-21
────────────────────────────────────────
  17 ┌       - image: kodekloud/ecommerce:video
  18 │         name: video-webapp
  19 │         ports:
  20 │         - containerPort: 8080
  21 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "video-webapp" of deployment "webapp-video" in "app-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 video-deploy.yaml:17-21
────────────────────────────────────────
  17 ┌       - image: kodekloud/ecommerce:video
  18 │         name: video-webapp
  19 │         ports:
  20 │         - containerPort: 8080
  21 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 video-deploy.yaml:17-21
────────────────────────────────────────
  17 ┌       - image: kodekloud/ecommerce:video
  18 │         name: video-webapp
  19 │         ports:
  20 │         - containerPort: 8080
  21 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container webapp-video in app-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 video-deploy.yaml:17-21
────────────────────────────────────────
  17 ┌       - image: kodekloud/ecommerce:video
  18 │         name: video-webapp
  19 │         ports:
  20 │         - containerPort: 8080
  21 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment webapp-video in app-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 video-deploy.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - image: kodekloud/ecommerce:video
  18 │         name: video-webapp
  19 │         ports:
  20 │         - containerPort: 8080
  21 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container video-webapp in deployment webapp-video (namespace: app-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 video-deploy.yaml:17-21
────────────────────────────────────────
  17 ┌       - image: kodekloud/ecommerce:video
  18 │         name: video-webapp
  19 │         ports:
  20 │         - containerPort: 8080
  21 └           protocol: TCP
────────────────────────────────────────



video-mongo-deployment.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mongo' of Deployment 'video-mongo-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 video-mongo-deployment.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: mongo
  17 │         image: mongo:latest
  18 │         ports:
  19 │         - containerPort: 27017
  20 │         env:
  21 │         - name: MONGO_INITDB_DATABASE
  22 │           value: video-service
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mongo' of Deployment 'video-mongo-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 video-mongo-deployment.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: mongo
  17 │         image: mongo:latest
  18 │         ports:
  19 │         - containerPort: 27017
  20 │         env:
  21 │         - name: MONGO_INITDB_DATABASE
  22 │           value: video-service
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mongo' of 'deployment' 'video-mongo-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 video-mongo-deployment.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: mongo
  17 │         image: mongo:latest
  18 │         ports:
  19 │         - containerPort: 27017
  20 │         env:
  21 │         - name: MONGO_INITDB_DATABASE
  22 │           value: video-service
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mongo' of Deployment 'video-mongo-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 video-mongo-deployment.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: mongo
  17 │         image: mongo:latest
  18 │         ports:
  19 │         - containerPort: 27017
  20 │         env:
  21 │         - name: MONGO_INITDB_DATABASE
  22 │           value: video-service
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mongo' of Deployment 'video-mongo-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 video-mongo-deployment.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: mongo
  17 │         image: mongo:latest
  18 │         ports:
  19 │         - containerPort: 27017
  20 │         env:
  21 │         - name: MONGO_INITDB_DATABASE
  22 │           value: video-service
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mongo' of Deployment 'video-mongo-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 video-mongo-deployment.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: mongo
  17 │         image: mongo:latest
  18 │         ports:
  19 │         - containerPort: 27017
  20 │         env:
  21 │         - name: MONGO_INITDB_DATABASE
  22 │           value: video-service
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mongo' of Deployment 'video-mongo-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 video-mongo-deployment.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: mongo
  17 │         image: mongo:latest
  18 │         ports:
  19 │         - containerPort: 27017
  20 │         env:
  21 │         - name: MONGO_INITDB_DATABASE
  22 │           value: video-service
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mongo' of Deployment 'video-mongo-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 video-mongo-deployment.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: mongo
  17 │         image: mongo:latest
  18 │         ports:
  19 │         - containerPort: 27017
  20 │         env:
  21 │         - name: MONGO_INITDB_DATABASE
  22 │           value: video-service
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 video-mongo-deployment.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: mongo
  17 │         image: mongo:latest
  18 │         ports:
  19 │         - containerPort: 27017
  20 │         env:
  21 │         - name: MONGO_INITDB_DATABASE
  22 │           value: video-service
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mongo" of deployment "video-mongo-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 video-mongo-deployment.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: mongo
  17 │         image: mongo:latest
  18 │         ports:
  19 │         - containerPort: 27017
  20 │         env:
  21 │         - name: MONGO_INITDB_DATABASE
  22 │           value: video-service
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 video-mongo-deployment.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: mongo
  17 │         image: mongo:latest
  18 │         ports:
  19 │         - containerPort: 27017
  20 │         env:
  21 │         - name: MONGO_INITDB_DATABASE
  22 │           value: video-service
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment video-mongo-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 video-mongo-deployment.yaml:4
────────────────────────────────────────
   4 [   name: video-mongo-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container video-mongo-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 video-mongo-deployment.yaml:16-32
────────────────────────────────────────
  16 ┌       - name: mongo
  17 │         image: mongo:latest
  18 │         ports:
  19 │         - containerPort: 27017
  20 │         env:
  21 │         - name: MONGO_INITDB_DATABASE
  22 │           value: video-service
  23 │         resources:
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment video-mongo-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 video-mongo-deployment.yaml:15-36
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: mongo
  17 │         image: mongo:latest
  18 │         ports:
  19 │         - containerPort: 27017
  20 │         env:
  21 │         - name: MONGO_INITDB_DATABASE
  22 │           value: video-service
  23 └         resources:
  ..   
────────────────────────────────────────



video-process.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 8, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'video-process' of Deployment 'video-process' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 video-process.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: video-process
  18 │         image: 192.168.56.10:5000/video-process
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 400m
  24 └             memory: 700Mi
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'video-process' of Deployment 'video-process' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 video-process.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: video-process
  18 │         image: 192.168.56.10:5000/video-process
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 400m
  24 └             memory: 700Mi
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'video-process' of 'deployment' 'video-process' in 'openfaas-fn' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 video-process.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: video-process
  18 │         image: 192.168.56.10:5000/video-process
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 400m
  24 └             memory: 700Mi
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'video-process' of Deployment 'video-process' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 video-process.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: video-process
  18 │         image: 192.168.56.10:5000/video-process
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 400m
  24 └             memory: 700Mi
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'video-process' of Deployment 'video-process' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 video-process.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: video-process
  18 │         image: 192.168.56.10:5000/video-process
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 400m
  24 └             memory: 700Mi
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'video-process' of Deployment 'video-process' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 video-process.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: video-process
  18 │         image: 192.168.56.10:5000/video-process
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 400m
  24 └             memory: 700Mi
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'video-process' of Deployment 'video-process' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 video-process.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: video-process
  18 │         image: 192.168.56.10:5000/video-process
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 400m
  24 └             memory: 700Mi
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'video-process' of Deployment 'video-process' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 video-process.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: video-process
  18 │         image: 192.168.56.10:5000/video-process
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 400m
  24 └             memory: 700Mi
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'video-process' of Deployment 'video-process' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 video-process.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: video-process
  18 │         image: 192.168.56.10:5000/video-process
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 400m
  24 └             memory: 700Mi
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 video-process.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: video-process
  18 │         image: 192.168.56.10:5000/video-process
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 400m
  24 └             memory: 700Mi
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "video-process" of deployment "video-process" in "openfaas-fn" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 video-process.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: video-process
  18 │         image: 192.168.56.10:5000/video-process
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 400m
  24 └             memory: 700Mi
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 video-process.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: video-process
  18 │         image: 192.168.56.10:5000/video-process
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 400m
  24 └             memory: 700Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container video-process in openfaas-fn namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 video-process.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: video-process
  18 │         image: 192.168.56.10:5000/video-process
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 400m
  24 └             memory: 700Mi
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment video-process in openfaas-fn namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 video-process.yaml:16-25
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: video-process
  18 │         image: 192.168.56.10:5000/video-process
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 400m
  24 │             memory: 700Mi
  25 └       schedulerName: rl-scheduler
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container video-process in deployment video-process (namespace: openfaas-fn) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 video-process.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: video-process
  18 │         image: 192.168.56.10:5000/video-process
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         resources:
  22 │           requests:
  23 │             cpu: 400m
  24 └             memory: 700Mi
────────────────────────────────────────



video-recommender.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'video-recommender' of Deployment 'video-recommender' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 video-recommender.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: video-recommender
  19 │         image: 21520623/video-recommender:latest
  20 │         ports:
  21 │         - containerPort: 5606
  22 │         resources:
  23 │           requests:
  24 │             cpu: '1'
  25 │             memory: 2Gi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'video-recommender' of Deployment 'video-recommender' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 video-recommender.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: video-recommender
  19 │         image: 21520623/video-recommender:latest
  20 │         ports:
  21 │         - containerPort: 5606
  22 │         resources:
  23 │           requests:
  24 │             cpu: '1'
  25 │             memory: 2Gi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'video-recommender' of 'deployment' 'video-recommender' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 video-recommender.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: video-recommender
  19 │         image: 21520623/video-recommender:latest
  20 │         ports:
  21 │         - containerPort: 5606
  22 │         resources:
  23 │           requests:
  24 │             cpu: '1'
  25 │             memory: 2Gi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'video-recommender' of Deployment 'video-recommender' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 video-recommender.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: video-recommender
  19 │         image: 21520623/video-recommender:latest
  20 │         ports:
  21 │         - containerPort: 5606
  22 │         resources:
  23 │           requests:
  24 │             cpu: '1'
  25 │             memory: 2Gi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'video-recommender' of Deployment 'video-recommender' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 video-recommender.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: video-recommender
  19 │         image: 21520623/video-recommender:latest
  20 │         ports:
  21 │         - containerPort: 5606
  22 │         resources:
  23 │           requests:
  24 │             cpu: '1'
  25 │             memory: 2Gi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'video-recommender' of Deployment 'video-recommender' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 video-recommender.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: video-recommender
  19 │         image: 21520623/video-recommender:latest
  20 │         ports:
  21 │         - containerPort: 5606
  22 │         resources:
  23 │           requests:
  24 │             cpu: '1'
  25 │             memory: 2Gi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'video-recommender' of Deployment 'video-recommender' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 video-recommender.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: video-recommender
  19 │         image: 21520623/video-recommender:latest
  20 │         ports:
  21 │         - containerPort: 5606
  22 │         resources:
  23 │           requests:
  24 │             cpu: '1'
  25 │             memory: 2Gi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'video-recommender' of Deployment 'video-recommender' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 video-recommender.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: video-recommender
  19 │         image: 21520623/video-recommender:latest
  20 │         ports:
  21 │         - containerPort: 5606
  22 │         resources:
  23 │           requests:
  24 │             cpu: '1'
  25 │             memory: 2Gi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 video-recommender.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: video-recommender
  19 │         image: 21520623/video-recommender:latest
  20 │         ports:
  21 │         - containerPort: 5606
  22 │         resources:
  23 │           requests:
  24 │             cpu: '1'
  25 │             memory: 2Gi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "video-recommender" of deployment "video-recommender" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 video-recommender.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: video-recommender
  19 │         image: 21520623/video-recommender:latest
  20 │         ports:
  21 │         - containerPort: 5606
  22 │         resources:
  23 │           requests:
  24 │             cpu: '1'
  25 │             memory: 2Gi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 video-recommender.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: video-recommender
  19 │         image: 21520623/video-recommender:latest
  20 │         ports:
  21 │         - containerPort: 5606
  22 │         resources:
  23 │           requests:
  24 │             cpu: '1'
  25 │             memory: 2Gi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment video-recommender in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 video-recommender.yaml:4-6
────────────────────────────────────────
   4 ┌   name: video-recommender
   5 │   labels:
   6 └     app: video-recommender
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container video-recommender in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 video-recommender.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: video-recommender
  19 │         image: 21520623/video-recommender:latest
  20 │         ports:
  21 │         - containerPort: 5606
  22 │         resources:
  23 │           requests:
  24 │             cpu: '1'
  25 │             memory: 2Gi
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment video-recommender in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 video-recommender.yaml:17-28
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: video-recommender
  19 │         image: 21520623/video-recommender:latest
  20 │         ports:
  21 │         - containerPort: 5606
  22 │         resources:
  23 │           requests:
  24 │             cpu: '1'
  25 └             memory: 2Gi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container video-recommender in deployment video-recommender (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 video-recommender.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: video-recommender
  19 │         image: 21520623/video-recommender:latest
  20 │         ports:
  21 │         - containerPort: 5606
  22 │         resources:
  23 │           requests:
  24 │             cpu: '1'
  25 │             memory: 2Gi
  26 └           limits:
  ..   
────────────────────────────────────────



video-service-deployment.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'video-service' of Deployment 'video-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 video-service-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: video-service
  19 │         image: datuits/devops-video-service:latest
  20 │         ports:
  21 │         - containerPort: 8083
  22 │         resources:
  23 │           requests:
  24 │             memory: 500Mi
  25 │             cpu: '1'
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'video-service' of Deployment 'video-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 video-service-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: video-service
  19 │         image: datuits/devops-video-service:latest
  20 │         ports:
  21 │         - containerPort: 8083
  22 │         resources:
  23 │           requests:
  24 │             memory: 500Mi
  25 │             cpu: '1'
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'video-service' of 'deployment' 'video-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 video-service-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: video-service
  19 │         image: datuits/devops-video-service:latest
  20 │         ports:
  21 │         - containerPort: 8083
  22 │         resources:
  23 │           requests:
  24 │             memory: 500Mi
  25 │             cpu: '1'
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'video-service' of Deployment 'video-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 video-service-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: video-service
  19 │         image: datuits/devops-video-service:latest
  20 │         ports:
  21 │         - containerPort: 8083
  22 │         resources:
  23 │           requests:
  24 │             memory: 500Mi
  25 │             cpu: '1'
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'video-service' of Deployment 'video-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 video-service-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: video-service
  19 │         image: datuits/devops-video-service:latest
  20 │         ports:
  21 │         - containerPort: 8083
  22 │         resources:
  23 │           requests:
  24 │             memory: 500Mi
  25 │             cpu: '1'
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'video-service' of Deployment 'video-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 video-service-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: video-service
  19 │         image: datuits/devops-video-service:latest
  20 │         ports:
  21 │         - containerPort: 8083
  22 │         resources:
  23 │           requests:
  24 │             memory: 500Mi
  25 │             cpu: '1'
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'video-service' of Deployment 'video-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 video-service-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: video-service
  19 │         image: datuits/devops-video-service:latest
  20 │         ports:
  21 │         - containerPort: 8083
  22 │         resources:
  23 │           requests:
  24 │             memory: 500Mi
  25 │             cpu: '1'
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'video-service' of Deployment 'video-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 video-service-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: video-service
  19 │         image: datuits/devops-video-service:latest
  20 │         ports:
  21 │         - containerPort: 8083
  22 │         resources:
  23 │           requests:
  24 │             memory: 500Mi
  25 │             cpu: '1'
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 video-service-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: video-service
  19 │         image: datuits/devops-video-service:latest
  20 │         ports:
  21 │         - containerPort: 8083
  22 │         resources:
  23 │           requests:
  24 │             memory: 500Mi
  25 │             cpu: '1'
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "video-service" of deployment "video-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 video-service-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: video-service
  19 │         image: datuits/devops-video-service:latest
  20 │         ports:
  21 │         - containerPort: 8083
  22 │         resources:
  23 │           requests:
  24 │             memory: 500Mi
  25 │             cpu: '1'
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 video-service-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: video-service
  19 │         image: datuits/devops-video-service:latest
  20 │         ports:
  21 │         - containerPort: 8083
  22 │         resources:
  23 │           requests:
  24 │             memory: 500Mi
  25 │             cpu: '1'
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment video-service in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 video-service-deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: video-service
   5 │   labels:
   6 └     app: video-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container video-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 video-service-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: video-service
  19 │         image: datuits/devops-video-service:latest
  20 │         ports:
  21 │         - containerPort: 8083
  22 │         resources:
  23 │           requests:
  24 │             memory: 500Mi
  25 │             cpu: '1'
  26 └           limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment video-service in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 video-service-deployment.yaml:17-28
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: video-service
  19 │         image: datuits/devops-video-service:latest
  20 │         ports:
  21 │         - containerPort: 8083
  22 │         resources:
  23 │           requests:
  24 │             memory: 500Mi
  25 └             cpu: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container video-service in deployment video-service (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 video-service-deployment.yaml:18-28
────────────────────────────────────────
  18 ┌       - name: video-service
  19 │         image: datuits/devops-video-service:latest
  20 │         ports:
  21 │         - containerPort: 8083
  22 │         resources:
  23 │           requests:
  24 │             memory: 500Mi
  25 │             cpu: '1'
  26 └           limits:
  ..   
────────────────────────────────────────



video-streaming-deployment.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'video-streaming' of Deployment 'video-streaming' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 video-streaming-deployment.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: video-streaming
  18 │         image: crazydanila/video-streaming:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: streaming-port
  22 │           containerPort: 4006
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4006'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'video-streaming' of Deployment 'video-streaming' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 video-streaming-deployment.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: video-streaming
  18 │         image: crazydanila/video-streaming:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: streaming-port
  22 │           containerPort: 4006
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4006'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'video-streaming' of 'deployment' 'video-streaming' in 'flixtube' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 video-streaming-deployment.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: video-streaming
  18 │         image: crazydanila/video-streaming:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: streaming-port
  22 │           containerPort: 4006
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4006'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'video-streaming' of Deployment 'video-streaming' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 video-streaming-deployment.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: video-streaming
  18 │         image: crazydanila/video-streaming:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: streaming-port
  22 │           containerPort: 4006
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4006'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'video-streaming' of Deployment 'video-streaming' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 video-streaming-deployment.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: video-streaming
  18 │         image: crazydanila/video-streaming:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: streaming-port
  22 │           containerPort: 4006
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4006'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'video-streaming' of Deployment 'video-streaming' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 video-streaming-deployment.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: video-streaming
  18 │         image: crazydanila/video-streaming:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: streaming-port
  22 │           containerPort: 4006
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4006'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'video-streaming' of Deployment 'video-streaming' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 video-streaming-deployment.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: video-streaming
  18 │         image: crazydanila/video-streaming:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: streaming-port
  22 │           containerPort: 4006
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4006'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 video-streaming-deployment.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: video-streaming
  18 │         image: crazydanila/video-streaming:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: streaming-port
  22 │           containerPort: 4006
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4006'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "video-streaming" of deployment "video-streaming" in "flixtube" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 video-streaming-deployment.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: video-streaming
  18 │         image: crazydanila/video-streaming:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: streaming-port
  22 │           containerPort: 4006
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4006'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 video-streaming-deployment.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: video-streaming
  18 │         image: crazydanila/video-streaming:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: streaming-port
  22 │           containerPort: 4006
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4006'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container video-streaming in flixtube namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 video-streaming-deployment.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: video-streaming
  18 │         image: crazydanila/video-streaming:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: streaming-port
  22 │           containerPort: 4006
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4006'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment video-streaming in flixtube namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 video-streaming-deployment.yaml:16-40
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: video-streaming
  18 │         image: crazydanila/video-streaming:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: streaming-port
  22 │           containerPort: 4006
  23 │         env:
  24 └         - name: PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container video-streaming in deployment video-streaming (namespace: flixtube) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 video-streaming-deployment.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: video-streaming
  18 │         image: crazydanila/video-streaming:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: streaming-port
  22 │           containerPort: 4006
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4006'
  ..   
────────────────────────────────────────



video-streaming.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'azure-vote-front' of Deployment 'onvif-camera-mocking' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 video-streaming.yaml:24-39
────────────────────────────────────────
  24 ┌       - name: azure-vote-front
  25 │         image: jumpstartprod.azurecr.io/onvif-camera-mocking
  26 │         ports:
  27 │         - containerPort: 8554
  28 │         - containerPort: 1000
  29 │         - containerPort: 3702
  30 │         env:
  31 │         - name: INTERFACE
  32 └           value: "eth0"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'azure-vote-front' of Deployment 'onvif-camera-mocking' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 video-streaming.yaml:24-39
────────────────────────────────────────
  24 ┌       - name: azure-vote-front
  25 │         image: jumpstartprod.azurecr.io/onvif-camera-mocking
  26 │         ports:
  27 │         - containerPort: 8554
  28 │         - containerPort: 1000
  29 │         - containerPort: 3702
  30 │         env:
  31 │         - name: INTERFACE
  32 └           value: "eth0"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'azure-vote-front' of 'deployment' 'onvif-camera-mocking' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 video-streaming.yaml:24-39
────────────────────────────────────────
  24 ┌       - name: azure-vote-front
  25 │         image: jumpstartprod.azurecr.io/onvif-camera-mocking
  26 │         ports:
  27 │         - containerPort: 8554
  28 │         - containerPort: 1000
  29 │         - containerPort: 3702
  30 │         env:
  31 │         - name: INTERFACE
  32 └           value: "eth0"
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'azure-vote-front' of Deployment 'onvif-camera-mocking' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 video-streaming.yaml:24-39
────────────────────────────────────────
  24 ┌       - name: azure-vote-front
  25 │         image: jumpstartprod.azurecr.io/onvif-camera-mocking
  26 │         ports:
  27 │         - containerPort: 8554
  28 │         - containerPort: 1000
  29 │         - containerPort: 3702
  30 │         env:
  31 │         - name: INTERFACE
  32 └           value: "eth0"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'azure-vote-front' of Deployment 'onvif-camera-mocking' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 video-streaming.yaml:24-39
────────────────────────────────────────
  24 ┌       - name: azure-vote-front
  25 │         image: jumpstartprod.azurecr.io/onvif-camera-mocking
  26 │         ports:
  27 │         - containerPort: 8554
  28 │         - containerPort: 1000
  29 │         - containerPort: 3702
  30 │         env:
  31 │         - name: INTERFACE
  32 └           value: "eth0"
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'azure-vote-front' of Deployment 'onvif-camera-mocking' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 video-streaming.yaml:24-39
────────────────────────────────────────
  24 ┌       - name: azure-vote-front
  25 │         image: jumpstartprod.azurecr.io/onvif-camera-mocking
  26 │         ports:
  27 │         - containerPort: 8554
  28 │         - containerPort: 1000
  29 │         - containerPort: 3702
  30 │         env:
  31 │         - name: INTERFACE
  32 └           value: "eth0"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'azure-vote-front' of Deployment 'onvif-camera-mocking' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 video-streaming.yaml:24-39
────────────────────────────────────────
  24 ┌       - name: azure-vote-front
  25 │         image: jumpstartprod.azurecr.io/onvif-camera-mocking
  26 │         ports:
  27 │         - containerPort: 8554
  28 │         - containerPort: 1000
  29 │         - containerPort: 3702
  30 │         env:
  31 │         - name: INTERFACE
  32 └           value: "eth0"
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'azure-vote-front' of Deployment 'onvif-camera-mocking' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 video-streaming.yaml:24-39
────────────────────────────────────────
  24 ┌       - name: azure-vote-front
  25 │         image: jumpstartprod.azurecr.io/onvif-camera-mocking
  26 │         ports:
  27 │         - containerPort: 8554
  28 │         - containerPort: 1000
  29 │         - containerPort: 3702
  30 │         env:
  31 │         - name: INTERFACE
  32 └           value: "eth0"
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'azure-vote-front' of Deployment 'onvif-camera-mocking' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 video-streaming.yaml:24-39
────────────────────────────────────────
  24 ┌       - name: azure-vote-front
  25 │         image: jumpstartprod.azurecr.io/onvif-camera-mocking
  26 │         ports:
  27 │         - containerPort: 8554
  28 │         - containerPort: 1000
  29 │         - containerPort: 3702
  30 │         env:
  31 │         - name: INTERFACE
  32 └           value: "eth0"
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'azure-vote-front' of Deployment 'onvif-camera-mocking' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 video-streaming.yaml:24-39
────────────────────────────────────────
  24 ┌       - name: azure-vote-front
  25 │         image: jumpstartprod.azurecr.io/onvif-camera-mocking
  26 │         ports:
  27 │         - containerPort: 8554
  28 │         - containerPort: 1000
  29 │         - containerPort: 3702
  30 │         env:
  31 │         - name: INTERFACE
  32 └           value: "eth0"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'azure-vote-front' of Deployment 'onvif-camera-mocking' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 video-streaming.yaml:24-39
────────────────────────────────────────
  24 ┌       - name: azure-vote-front
  25 │         image: jumpstartprod.azurecr.io/onvif-camera-mocking
  26 │         ports:
  27 │         - containerPort: 8554
  28 │         - containerPort: 1000
  29 │         - containerPort: 3702
  30 │         env:
  31 │         - name: INTERFACE
  32 └           value: "eth0"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'azure-vote-front' of Deployment 'onvif-camera-mocking' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 video-streaming.yaml:24-39
────────────────────────────────────────
  24 ┌       - name: azure-vote-front
  25 │         image: jumpstartprod.azurecr.io/onvif-camera-mocking
  26 │         ports:
  27 │         - containerPort: 8554
  28 │         - containerPort: 1000
  29 │         - containerPort: 3702
  30 │         env:
  31 │         - name: INTERFACE
  32 └           value: "eth0"
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'onvif-camera-mocking' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 video-streaming.yaml:6-44
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: onvif-camera-mocking
  10 │   strategy:
  11 │     type: RollingUpdate
  12 │     rollingUpdate:
  13 │       maxSurge: 1
  14 └       maxUnavailable: 1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 video-streaming.yaml:24-39
────────────────────────────────────────
  24 ┌       - name: azure-vote-front
  25 │         image: jumpstartprod.azurecr.io/onvif-camera-mocking
  26 │         ports:
  27 │         - containerPort: 8554
  28 │         - containerPort: 1000
  29 │         - containerPort: 3702
  30 │         env:
  31 │         - name: INTERFACE
  32 └           value: "eth0"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "azure-vote-front" of deployment "onvif-camera-mocking" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 video-streaming.yaml:24-39
────────────────────────────────────────
  24 ┌       - name: azure-vote-front
  25 │         image: jumpstartprod.azurecr.io/onvif-camera-mocking
  26 │         ports:
  27 │         - containerPort: 8554
  28 │         - containerPort: 1000
  29 │         - containerPort: 3702
  30 │         env:
  31 │         - name: INTERFACE
  32 └           value: "eth0"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 video-streaming.yaml:24-39
────────────────────────────────────────
  24 ┌       - name: azure-vote-front
  25 │         image: jumpstartprod.azurecr.io/onvif-camera-mocking
  26 │         ports:
  27 │         - containerPort: 8554
  28 │         - containerPort: 1000
  29 │         - containerPort: 3702
  30 │         env:
  31 │         - name: INTERFACE
  32 └           value: "eth0"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment onvif-camera-mocking in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 video-streaming.yaml:4
────────────────────────────────────────
   4 [   name: onvif-camera-mocking
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment onvif-camera-mocking in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container onvif-camera-mocking in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 video-streaming.yaml:24-39
────────────────────────────────────────
  24 ┌       - name: azure-vote-front
  25 │         image: jumpstartprod.azurecr.io/onvif-camera-mocking
  26 │         ports:
  27 │         - containerPort: 8554
  28 │         - containerPort: 1000
  29 │         - containerPort: 3702
  30 │         env:
  31 │         - name: INTERFACE
  32 └           value: "eth0"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment onvif-camera-mocking in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 video-streaming.yaml:21-44
────────────────────────────────────────
  21 ┌       nodeSelector:
  22 │         "kubernetes.io/os": linux
  23 │       containers:
  24 │       - name: azure-vote-front
  25 │         image: jumpstartprod.azurecr.io/onvif-camera-mocking
  26 │         ports:
  27 │         - containerPort: 8554
  28 │         - containerPort: 1000
  29 └         - containerPort: 3702
  ..   
────────────────────────────────────────



video-streaming1.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'azure-vote-front' of Deployment 'onvif-camera-mocking' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 video-streaming1.yaml:24-39
────────────────────────────────────────
  24 ┌       - name: azure-vote-front
  25 │         image: jumpstartprod.azurecr.io/onvif-camera-mocking
  26 │         ports:
  27 │         - containerPort: 8554
  28 │         - containerPort: 1000
  29 │         - containerPort: 3702
  30 │         env:
  31 │         - name: INTERFACE
  32 └           value: "eth0"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'azure-vote-front' of Deployment 'onvif-camera-mocking' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 video-streaming1.yaml:24-39
────────────────────────────────────────
  24 ┌       - name: azure-vote-front
  25 │         image: jumpstartprod.azurecr.io/onvif-camera-mocking
  26 │         ports:
  27 │         - containerPort: 8554
  28 │         - containerPort: 1000
  29 │         - containerPort: 3702
  30 │         env:
  31 │         - name: INTERFACE
  32 └           value: "eth0"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'azure-vote-front' of 'deployment' 'onvif-camera-mocking' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 video-streaming1.yaml:24-39
────────────────────────────────────────
  24 ┌       - name: azure-vote-front
  25 │         image: jumpstartprod.azurecr.io/onvif-camera-mocking
  26 │         ports:
  27 │         - containerPort: 8554
  28 │         - containerPort: 1000
  29 │         - containerPort: 3702
  30 │         env:
  31 │         - name: INTERFACE
  32 └           value: "eth0"
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'azure-vote-front' of Deployment 'onvif-camera-mocking' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 video-streaming1.yaml:24-39
────────────────────────────────────────
  24 ┌       - name: azure-vote-front
  25 │         image: jumpstartprod.azurecr.io/onvif-camera-mocking
  26 │         ports:
  27 │         - containerPort: 8554
  28 │         - containerPort: 1000
  29 │         - containerPort: 3702
  30 │         env:
  31 │         - name: INTERFACE
  32 └           value: "eth0"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'azure-vote-front' of Deployment 'onvif-camera-mocking' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 video-streaming1.yaml:24-39
────────────────────────────────────────
  24 ┌       - name: azure-vote-front
  25 │         image: jumpstartprod.azurecr.io/onvif-camera-mocking
  26 │         ports:
  27 │         - containerPort: 8554
  28 │         - containerPort: 1000
  29 │         - containerPort: 3702
  30 │         env:
  31 │         - name: INTERFACE
  32 └           value: "eth0"
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'azure-vote-front' of Deployment 'onvif-camera-mocking' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 video-streaming1.yaml:24-39
────────────────────────────────────────
  24 ┌       - name: azure-vote-front
  25 │         image: jumpstartprod.azurecr.io/onvif-camera-mocking
  26 │         ports:
  27 │         - containerPort: 8554
  28 │         - containerPort: 1000
  29 │         - containerPort: 3702
  30 │         env:
  31 │         - name: INTERFACE
  32 └           value: "eth0"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'azure-vote-front' of Deployment 'onvif-camera-mocking' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 video-streaming1.yaml:24-39
────────────────────────────────────────
  24 ┌       - name: azure-vote-front
  25 │         image: jumpstartprod.azurecr.io/onvif-camera-mocking
  26 │         ports:
  27 │         - containerPort: 8554
  28 │         - containerPort: 1000
  29 │         - containerPort: 3702
  30 │         env:
  31 │         - name: INTERFACE
  32 └           value: "eth0"
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'azure-vote-front' of Deployment 'onvif-camera-mocking' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 video-streaming1.yaml:24-39
────────────────────────────────────────
  24 ┌       - name: azure-vote-front
  25 │         image: jumpstartprod.azurecr.io/onvif-camera-mocking
  26 │         ports:
  27 │         - containerPort: 8554
  28 │         - containerPort: 1000
  29 │         - containerPort: 3702
  30 │         env:
  31 │         - name: INTERFACE
  32 └           value: "eth0"
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'azure-vote-front' of Deployment 'onvif-camera-mocking' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 video-streaming1.yaml:24-39
────────────────────────────────────────
  24 ┌       - name: azure-vote-front
  25 │         image: jumpstartprod.azurecr.io/onvif-camera-mocking
  26 │         ports:
  27 │         - containerPort: 8554
  28 │         - containerPort: 1000
  29 │         - containerPort: 3702
  30 │         env:
  31 │         - name: INTERFACE
  32 └           value: "eth0"
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'azure-vote-front' of Deployment 'onvif-camera-mocking' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 video-streaming1.yaml:24-39
────────────────────────────────────────
  24 ┌       - name: azure-vote-front
  25 │         image: jumpstartprod.azurecr.io/onvif-camera-mocking
  26 │         ports:
  27 │         - containerPort: 8554
  28 │         - containerPort: 1000
  29 │         - containerPort: 3702
  30 │         env:
  31 │         - name: INTERFACE
  32 └           value: "eth0"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'azure-vote-front' of Deployment 'onvif-camera-mocking' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 video-streaming1.yaml:24-39
────────────────────────────────────────
  24 ┌       - name: azure-vote-front
  25 │         image: jumpstartprod.azurecr.io/onvif-camera-mocking
  26 │         ports:
  27 │         - containerPort: 8554
  28 │         - containerPort: 1000
  29 │         - containerPort: 3702
  30 │         env:
  31 │         - name: INTERFACE
  32 └           value: "eth0"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'azure-vote-front' of Deployment 'onvif-camera-mocking' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 video-streaming1.yaml:24-39
────────────────────────────────────────
  24 ┌       - name: azure-vote-front
  25 │         image: jumpstartprod.azurecr.io/onvif-camera-mocking
  26 │         ports:
  27 │         - containerPort: 8554
  28 │         - containerPort: 1000
  29 │         - containerPort: 3702
  30 │         env:
  31 │         - name: INTERFACE
  32 └           value: "eth0"
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Deployment 'onvif-camera-mocking' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 video-streaming1.yaml:6-44
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       app: onvif-camera-mocking
  10 │   strategy:
  11 │     type: RollingUpdate
  12 │     rollingUpdate:
  13 │       maxSurge: 1
  14 └       maxUnavailable: 1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 video-streaming1.yaml:24-39
────────────────────────────────────────
  24 ┌       - name: azure-vote-front
  25 │         image: jumpstartprod.azurecr.io/onvif-camera-mocking
  26 │         ports:
  27 │         - containerPort: 8554
  28 │         - containerPort: 1000
  29 │         - containerPort: 3702
  30 │         env:
  31 │         - name: INTERFACE
  32 └           value: "eth0"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "azure-vote-front" of deployment "onvif-camera-mocking" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 video-streaming1.yaml:24-39
────────────────────────────────────────
  24 ┌       - name: azure-vote-front
  25 │         image: jumpstartprod.azurecr.io/onvif-camera-mocking
  26 │         ports:
  27 │         - containerPort: 8554
  28 │         - containerPort: 1000
  29 │         - containerPort: 3702
  30 │         env:
  31 │         - name: INTERFACE
  32 └           value: "eth0"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 video-streaming1.yaml:24-39
────────────────────────────────────────
  24 ┌       - name: azure-vote-front
  25 │         image: jumpstartprod.azurecr.io/onvif-camera-mocking
  26 │         ports:
  27 │         - containerPort: 8554
  28 │         - containerPort: 1000
  29 │         - containerPort: 3702
  30 │         env:
  31 │         - name: INTERFACE
  32 └           value: "eth0"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment onvif-camera-mocking in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 video-streaming1.yaml:4
────────────────────────────────────────
   4 [   name: onvif-camera-mocking
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment onvif-camera-mocking in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container onvif-camera-mocking in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 video-streaming1.yaml:24-39
────────────────────────────────────────
  24 ┌       - name: azure-vote-front
  25 │         image: jumpstartprod.azurecr.io/onvif-camera-mocking
  26 │         ports:
  27 │         - containerPort: 8554
  28 │         - containerPort: 1000
  29 │         - containerPort: 3702
  30 │         env:
  31 │         - name: INTERFACE
  32 └           value: "eth0"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment onvif-camera-mocking in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 video-streaming1.yaml:21-44
────────────────────────────────────────
  21 ┌       nodeSelector:
  22 │         "kubernetes.io/os": linux
  23 │       containers:
  24 │       - name: azure-vote-front
  25 │         image: jumpstartprod.azurecr.io/onvif-camera-mocking
  26 │         ports:
  27 │         - containerPort: 8554
  28 │         - containerPort: 1000
  29 └         - containerPort: 3702
  ..   
────────────────────────────────────────



video-uploader-deployment.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'video-uploader' of Deployment 'video-uploader' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 video-uploader-deployment.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: video-uploader
  18 │         image: crazydanila/video-uploader:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: uploader-port
  22 │           containerPort: 4005
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4005'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'video-uploader' of Deployment 'video-uploader' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 video-uploader-deployment.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: video-uploader
  18 │         image: crazydanila/video-uploader:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: uploader-port
  22 │           containerPort: 4005
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4005'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'video-uploader' of 'deployment' 'video-uploader' in 'flixtube' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 video-uploader-deployment.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: video-uploader
  18 │         image: crazydanila/video-uploader:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: uploader-port
  22 │           containerPort: 4005
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4005'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'video-uploader' of Deployment 'video-uploader' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 video-uploader-deployment.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: video-uploader
  18 │         image: crazydanila/video-uploader:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: uploader-port
  22 │           containerPort: 4005
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4005'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'video-uploader' of Deployment 'video-uploader' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 video-uploader-deployment.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: video-uploader
  18 │         image: crazydanila/video-uploader:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: uploader-port
  22 │           containerPort: 4005
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4005'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'video-uploader' of Deployment 'video-uploader' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 video-uploader-deployment.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: video-uploader
  18 │         image: crazydanila/video-uploader:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: uploader-port
  22 │           containerPort: 4005
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4005'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'video-uploader' of Deployment 'video-uploader' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 video-uploader-deployment.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: video-uploader
  18 │         image: crazydanila/video-uploader:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: uploader-port
  22 │           containerPort: 4005
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4005'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 video-uploader-deployment.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: video-uploader
  18 │         image: crazydanila/video-uploader:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: uploader-port
  22 │           containerPort: 4005
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4005'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "video-uploader" of deployment "video-uploader" in "flixtube" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 video-uploader-deployment.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: video-uploader
  18 │         image: crazydanila/video-uploader:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: uploader-port
  22 │           containerPort: 4005
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4005'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 video-uploader-deployment.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: video-uploader
  18 │         image: crazydanila/video-uploader:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: uploader-port
  22 │           containerPort: 4005
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4005'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container video-uploader in flixtube namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 video-uploader-deployment.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: video-uploader
  18 │         image: crazydanila/video-uploader:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: uploader-port
  22 │           containerPort: 4005
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4005'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment video-uploader in flixtube namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 video-uploader-deployment.yaml:16-40
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: video-uploader
  18 │         image: crazydanila/video-uploader:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: uploader-port
  22 │           containerPort: 4005
  23 │         env:
  24 └         - name: PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container video-uploader in deployment video-uploader (namespace: flixtube) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 video-uploader-deployment.yaml:17-40
────────────────────────────────────────
  17 ┌       - name: video-uploader
  18 │         image: crazydanila/video-uploader:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: uploader-port
  22 │           containerPort: 4005
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4005'
  ..   
────────────────────────────────────────



video_game_backend.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'videogamebackdb' of Deployment 'videogamebackdb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 video_game_backend.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: videogamebackdb
  17 │         image: acompletenoobsmoke/basedgamenode_dev
  18 │         resources:
  19 │           limits:
  20 │             memory: 1000Mi
  21 │             cpu: 1000m
  22 │         env:
  23 │         - name: MONGO_URL
  24 └           value: mongodb+srv://baseduser:basedpassword@cluster0.vpxaw.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'videogamebackdb' of Deployment 'videogamebackdb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 video_game_backend.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: videogamebackdb
  17 │         image: acompletenoobsmoke/basedgamenode_dev
  18 │         resources:
  19 │           limits:
  20 │             memory: 1000Mi
  21 │             cpu: 1000m
  22 │         env:
  23 │         - name: MONGO_URL
  24 └           value: mongodb+srv://baseduser:basedpassword@cluster0.vpxaw.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'videogamebackdb' of 'deployment' 'videogamebackdb' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 video_game_backend.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: videogamebackdb
  17 │         image: acompletenoobsmoke/basedgamenode_dev
  18 │         resources:
  19 │           limits:
  20 │             memory: 1000Mi
  21 │             cpu: 1000m
  22 │         env:
  23 │         - name: MONGO_URL
  24 └           value: mongodb+srv://baseduser:basedpassword@cluster0.vpxaw.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'videogamebackdb' of Deployment 'videogamebackdb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 video_game_backend.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: videogamebackdb
  17 │         image: acompletenoobsmoke/basedgamenode_dev
  18 │         resources:
  19 │           limits:
  20 │             memory: 1000Mi
  21 │             cpu: 1000m
  22 │         env:
  23 │         - name: MONGO_URL
  24 └           value: mongodb+srv://baseduser:basedpassword@cluster0.vpxaw.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'videogamebackdb' of Deployment 'videogamebackdb' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 video_game_backend.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: videogamebackdb
  17 │         image: acompletenoobsmoke/basedgamenode_dev
  18 │         resources:
  19 │           limits:
  20 │             memory: 1000Mi
  21 │             cpu: 1000m
  22 │         env:
  23 │         - name: MONGO_URL
  24 └           value: mongodb+srv://baseduser:basedpassword@cluster0.vpxaw.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'videogamebackdb' of Deployment 'videogamebackdb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 video_game_backend.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: videogamebackdb
  17 │         image: acompletenoobsmoke/basedgamenode_dev
  18 │         resources:
  19 │           limits:
  20 │             memory: 1000Mi
  21 │             cpu: 1000m
  22 │         env:
  23 │         - name: MONGO_URL
  24 └           value: mongodb+srv://baseduser:basedpassword@cluster0.vpxaw.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'videogamebackdb' of Deployment 'videogamebackdb' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 video_game_backend.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: videogamebackdb
  17 │         image: acompletenoobsmoke/basedgamenode_dev
  18 │         resources:
  19 │           limits:
  20 │             memory: 1000Mi
  21 │             cpu: 1000m
  22 │         env:
  23 │         - name: MONGO_URL
  24 └           value: mongodb+srv://baseduser:basedpassword@cluster0.vpxaw.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'videogamebackdb' of Deployment 'videogamebackdb' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 video_game_backend.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: videogamebackdb
  17 │         image: acompletenoobsmoke/basedgamenode_dev
  18 │         resources:
  19 │           limits:
  20 │             memory: 1000Mi
  21 │             cpu: 1000m
  22 │         env:
  23 │         - name: MONGO_URL
  24 └           value: mongodb+srv://baseduser:basedpassword@cluster0.vpxaw.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'videogamebackdb' of Deployment 'videogamebackdb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 video_game_backend.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: videogamebackdb
  17 │         image: acompletenoobsmoke/basedgamenode_dev
  18 │         resources:
  19 │           limits:
  20 │             memory: 1000Mi
  21 │             cpu: 1000m
  22 │         env:
  23 │         - name: MONGO_URL
  24 └           value: mongodb+srv://baseduser:basedpassword@cluster0.vpxaw.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'videogamebackdb' of Deployment 'videogamebackdb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 video_game_backend.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: videogamebackdb
  17 │         image: acompletenoobsmoke/basedgamenode_dev
  18 │         resources:
  19 │           limits:
  20 │             memory: 1000Mi
  21 │             cpu: 1000m
  22 │         env:
  23 │         - name: MONGO_URL
  24 └           value: mongodb+srv://baseduser:basedpassword@cluster0.vpxaw.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 video_game_backend.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: videogamebackdb
  17 │         image: acompletenoobsmoke/basedgamenode_dev
  18 │         resources:
  19 │           limits:
  20 │             memory: 1000Mi
  21 │             cpu: 1000m
  22 │         env:
  23 │         - name: MONGO_URL
  24 └           value: mongodb+srv://baseduser:basedpassword@cluster0.vpxaw.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "videogamebackdb" of deployment "videogamebackdb" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 video_game_backend.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: videogamebackdb
  17 │         image: acompletenoobsmoke/basedgamenode_dev
  18 │         resources:
  19 │           limits:
  20 │             memory: 1000Mi
  21 │             cpu: 1000m
  22 │         env:
  23 │         - name: MONGO_URL
  24 └           value: mongodb+srv://baseduser:basedpassword@cluster0.vpxaw.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 video_game_backend.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: videogamebackdb
  17 │         image: acompletenoobsmoke/basedgamenode_dev
  18 │         resources:
  19 │           limits:
  20 │             memory: 1000Mi
  21 │             cpu: 1000m
  22 │         env:
  23 │         - name: MONGO_URL
  24 └           value: mongodb+srv://baseduser:basedpassword@cluster0.vpxaw.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment videogamebackdb in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 video_game_backend.yaml:4
────────────────────────────────────────
   4 [   name: videogamebackdb
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container videogamebackdb in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 video_game_backend.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: videogamebackdb
  17 │         image: acompletenoobsmoke/basedgamenode_dev
  18 │         resources:
  19 │           limits:
  20 │             memory: 1000Mi
  21 │             cpu: 1000m
  22 │         env:
  23 │         - name: MONGO_URL
  24 └           value: mongodb+srv://baseduser:basedpassword@cluster0.vpxaw.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment videogamebackdb in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 video_game_backend.yaml:15-28
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: videogamebackdb
  17 │         image: acompletenoobsmoke/basedgamenode_dev
  18 │         resources:
  19 │           limits:
  20 │             memory: 1000Mi
  21 │             cpu: 1000m
  22 │         env:
  23 └         - name: MONGO_URL
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container videogamebackdb in deployment videogamebackdb (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 video_game_backend.yaml:16-28
────────────────────────────────────────
  16 ┌       - name: videogamebackdb
  17 │         image: acompletenoobsmoke/basedgamenode_dev
  18 │         resources:
  19 │           limits:
  20 │             memory: 1000Mi
  21 │             cpu: 1000m
  22 │         env:
  23 │         - name: MONGO_URL
  24 └           value: mongodb+srv://baseduser:basedpassword@cluster0.vpxaw.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0
  ..   
────────────────────────────────────────



video_game_frontend.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 9, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'videogamefrontdb' of Deployment 'videogamefrontdb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 video_game_frontend.yaml:15-25
────────────────────────────────────────
  15 ┌       - name: videogamefrontdb
  16 │         image: acompletenoobsmoke/videogamedbfrontend_dev_1:latest
  17 │         resources:
  18 │           limits:
  19 │             memory: 700Mi
  20 │             cpu: 500m
  21 │         env:
  22 │         - name: REACT_APP_SERVICE_URL
  23 └           value: acompletenoobsmokegamedb.com
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'videogamefrontdb' of Deployment 'videogamefrontdb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 video_game_frontend.yaml:15-25
────────────────────────────────────────
  15 ┌       - name: videogamefrontdb
  16 │         image: acompletenoobsmoke/videogamedbfrontend_dev_1:latest
  17 │         resources:
  18 │           limits:
  19 │             memory: 700Mi
  20 │             cpu: 500m
  21 │         env:
  22 │         - name: REACT_APP_SERVICE_URL
  23 └           value: acompletenoobsmokegamedb.com
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'videogamefrontdb' of 'deployment' 'videogamefrontdb' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 video_game_frontend.yaml:15-25
────────────────────────────────────────
  15 ┌       - name: videogamefrontdb
  16 │         image: acompletenoobsmoke/videogamedbfrontend_dev_1:latest
  17 │         resources:
  18 │           limits:
  19 │             memory: 700Mi
  20 │             cpu: 500m
  21 │         env:
  22 │         - name: REACT_APP_SERVICE_URL
  23 └           value: acompletenoobsmokegamedb.com
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'videogamefrontdb' of Deployment 'videogamefrontdb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 video_game_frontend.yaml:15-25
────────────────────────────────────────
  15 ┌       - name: videogamefrontdb
  16 │         image: acompletenoobsmoke/videogamedbfrontend_dev_1:latest
  17 │         resources:
  18 │           limits:
  19 │             memory: 700Mi
  20 │             cpu: 500m
  21 │         env:
  22 │         - name: REACT_APP_SERVICE_URL
  23 └           value: acompletenoobsmokegamedb.com
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'videogamefrontdb' of Deployment 'videogamefrontdb' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 video_game_frontend.yaml:15-25
────────────────────────────────────────
  15 ┌       - name: videogamefrontdb
  16 │         image: acompletenoobsmoke/videogamedbfrontend_dev_1:latest
  17 │         resources:
  18 │           limits:
  19 │             memory: 700Mi
  20 │             cpu: 500m
  21 │         env:
  22 │         - name: REACT_APP_SERVICE_URL
  23 └           value: acompletenoobsmokegamedb.com
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'videogamefrontdb' of Deployment 'videogamefrontdb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 video_game_frontend.yaml:15-25
────────────────────────────────────────
  15 ┌       - name: videogamefrontdb
  16 │         image: acompletenoobsmoke/videogamedbfrontend_dev_1:latest
  17 │         resources:
  18 │           limits:
  19 │             memory: 700Mi
  20 │             cpu: 500m
  21 │         env:
  22 │         - name: REACT_APP_SERVICE_URL
  23 └           value: acompletenoobsmokegamedb.com
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'videogamefrontdb' of Deployment 'videogamefrontdb' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 video_game_frontend.yaml:15-25
────────────────────────────────────────
  15 ┌       - name: videogamefrontdb
  16 │         image: acompletenoobsmoke/videogamedbfrontend_dev_1:latest
  17 │         resources:
  18 │           limits:
  19 │             memory: 700Mi
  20 │             cpu: 500m
  21 │         env:
  22 │         - name: REACT_APP_SERVICE_URL
  23 └           value: acompletenoobsmokegamedb.com
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'videogamefrontdb' of Deployment 'videogamefrontdb' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 video_game_frontend.yaml:15-25
────────────────────────────────────────
  15 ┌       - name: videogamefrontdb
  16 │         image: acompletenoobsmoke/videogamedbfrontend_dev_1:latest
  17 │         resources:
  18 │           limits:
  19 │             memory: 700Mi
  20 │             cpu: 500m
  21 │         env:
  22 │         - name: REACT_APP_SERVICE_URL
  23 └           value: acompletenoobsmokegamedb.com
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'videogamefrontdb' of Deployment 'videogamefrontdb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 video_game_frontend.yaml:15-25
────────────────────────────────────────
  15 ┌       - name: videogamefrontdb
  16 │         image: acompletenoobsmoke/videogamedbfrontend_dev_1:latest
  17 │         resources:
  18 │           limits:
  19 │             memory: 700Mi
  20 │             cpu: 500m
  21 │         env:
  22 │         - name: REACT_APP_SERVICE_URL
  23 └           value: acompletenoobsmokegamedb.com
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'videogamefrontdb' of Deployment 'videogamefrontdb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 video_game_frontend.yaml:15-25
────────────────────────────────────────
  15 ┌       - name: videogamefrontdb
  16 │         image: acompletenoobsmoke/videogamedbfrontend_dev_1:latest
  17 │         resources:
  18 │           limits:
  19 │             memory: 700Mi
  20 │             cpu: 500m
  21 │         env:
  22 │         - name: REACT_APP_SERVICE_URL
  23 └           value: acompletenoobsmokegamedb.com
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 video_game_frontend.yaml:15-25
────────────────────────────────────────
  15 ┌       - name: videogamefrontdb
  16 │         image: acompletenoobsmoke/videogamedbfrontend_dev_1:latest
  17 │         resources:
  18 │           limits:
  19 │             memory: 700Mi
  20 │             cpu: 500m
  21 │         env:
  22 │         - name: REACT_APP_SERVICE_URL
  23 └           value: acompletenoobsmokegamedb.com
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "videogamefrontdb" of deployment "videogamefrontdb" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 video_game_frontend.yaml:15-25
────────────────────────────────────────
  15 ┌       - name: videogamefrontdb
  16 │         image: acompletenoobsmoke/videogamedbfrontend_dev_1:latest
  17 │         resources:
  18 │           limits:
  19 │             memory: 700Mi
  20 │             cpu: 500m
  21 │         env:
  22 │         - name: REACT_APP_SERVICE_URL
  23 └           value: acompletenoobsmokegamedb.com
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 video_game_frontend.yaml:15-25
────────────────────────────────────────
  15 ┌       - name: videogamefrontdb
  16 │         image: acompletenoobsmoke/videogamedbfrontend_dev_1:latest
  17 │         resources:
  18 │           limits:
  19 │             memory: 700Mi
  20 │             cpu: 500m
  21 │         env:
  22 │         - name: REACT_APP_SERVICE_URL
  23 └           value: acompletenoobsmokegamedb.com
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment videogamefrontdb in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 video_game_frontend.yaml:4
────────────────────────────────────────
   4 [   name: videogamefrontdb
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container videogamefrontdb in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 video_game_frontend.yaml:15-25
────────────────────────────────────────
  15 ┌       - name: videogamefrontdb
  16 │         image: acompletenoobsmoke/videogamedbfrontend_dev_1:latest
  17 │         resources:
  18 │           limits:
  19 │             memory: 700Mi
  20 │             cpu: 500m
  21 │         env:
  22 │         - name: REACT_APP_SERVICE_URL
  23 └           value: acompletenoobsmokegamedb.com
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment videogamefrontdb in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 video_game_frontend.yaml:14-25
────────────────────────────────────────
  14 ┌       containers:
  15 │       - name: videogamefrontdb
  16 │         image: acompletenoobsmoke/videogamedbfrontend_dev_1:latest
  17 │         resources:
  18 │           limits:
  19 │             memory: 700Mi
  20 │             cpu: 500m
  21 │         env:
  22 └         - name: REACT_APP_SERVICE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container videogamefrontdb in deployment videogamefrontdb (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 video_game_frontend.yaml:15-25
────────────────────────────────────────
  15 ┌       - name: videogamefrontdb
  16 │         image: acompletenoobsmoke/videogamedbfrontend_dev_1:latest
  17 │         resources:
  18 │           limits:
  19 │             memory: 700Mi
  20 │             cpu: 500m
  21 │         env:
  22 │         - name: REACT_APP_SERVICE_URL
  23 └           value: acompletenoobsmokegamedb.com
  ..   
────────────────────────────────────────



videopacket-sample.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'videopacket-sample-server' of Deployment 'videopacket-sample-server-v1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 videopacket-sample.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: videopacket-sample-server
  24 │         image: ghcr.io/aeraki-mesh/videopacket-sample-server
  25 │         env:
  26 │         - name: version
  27 │           value: add
  28 │         ports:
  29 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'videopacket-sample-server' of Deployment 'videopacket-sample-server-v1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 videopacket-sample.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: videopacket-sample-server
  24 │         image: ghcr.io/aeraki-mesh/videopacket-sample-server
  25 │         env:
  26 │         - name: version
  27 │           value: add
  28 │         ports:
  29 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'videopacket-sample-server' of 'deployment' 'videopacket-sample-server-v1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 videopacket-sample.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: videopacket-sample-server
  24 │         image: ghcr.io/aeraki-mesh/videopacket-sample-server
  25 │         env:
  26 │         - name: version
  27 │           value: add
  28 │         ports:
  29 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'videopacket-sample-server' of Deployment 'videopacket-sample-server-v1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 videopacket-sample.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: videopacket-sample-server
  24 │         image: ghcr.io/aeraki-mesh/videopacket-sample-server
  25 │         env:
  26 │         - name: version
  27 │           value: add
  28 │         ports:
  29 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'videopacket-sample-server' of Deployment 'videopacket-sample-server-v1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 videopacket-sample.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: videopacket-sample-server
  24 │         image: ghcr.io/aeraki-mesh/videopacket-sample-server
  25 │         env:
  26 │         - name: version
  27 │           value: add
  28 │         ports:
  29 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'videopacket-sample-server' of Deployment 'videopacket-sample-server-v1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 videopacket-sample.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: videopacket-sample-server
  24 │         image: ghcr.io/aeraki-mesh/videopacket-sample-server
  25 │         env:
  26 │         - name: version
  27 │           value: add
  28 │         ports:
  29 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'videopacket-sample-server' of Deployment 'videopacket-sample-server-v1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 videopacket-sample.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: videopacket-sample-server
  24 │         image: ghcr.io/aeraki-mesh/videopacket-sample-server
  25 │         env:
  26 │         - name: version
  27 │           value: add
  28 │         ports:
  29 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'videopacket-sample-server' of Deployment 'videopacket-sample-server-v1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 videopacket-sample.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: videopacket-sample-server
  24 │         image: ghcr.io/aeraki-mesh/videopacket-sample-server
  25 │         env:
  26 │         - name: version
  27 │           value: add
  28 │         ports:
  29 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'videopacket-sample-server' of Deployment 'videopacket-sample-server-v1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 videopacket-sample.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: videopacket-sample-server
  24 │         image: ghcr.io/aeraki-mesh/videopacket-sample-server
  25 │         env:
  26 │         - name: version
  27 │           value: add
  28 │         ports:
  29 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'videopacket-sample-server' of Deployment 'videopacket-sample-server-v1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 videopacket-sample.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: videopacket-sample-server
  24 │         image: ghcr.io/aeraki-mesh/videopacket-sample-server
  25 │         env:
  26 │         - name: version
  27 │           value: add
  28 │         ports:
  29 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'videopacket-sample-server' of Deployment 'videopacket-sample-server-v1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 videopacket-sample.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: videopacket-sample-server
  24 │         image: ghcr.io/aeraki-mesh/videopacket-sample-server
  25 │         env:
  26 │         - name: version
  27 │           value: add
  28 │         ports:
  29 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'videopacket-sample-server' of Deployment 'videopacket-sample-server-v1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 videopacket-sample.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: videopacket-sample-server
  24 │         image: ghcr.io/aeraki-mesh/videopacket-sample-server
  25 │         env:
  26 │         - name: version
  27 │           value: add
  28 │         ports:
  29 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 videopacket-sample.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: videopacket-sample-server
  24 │         image: ghcr.io/aeraki-mesh/videopacket-sample-server
  25 │         env:
  26 │         - name: version
  27 │           value: add
  28 │         ports:
  29 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "videopacket-sample-server" of deployment "videopacket-sample-server-v1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 videopacket-sample.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: videopacket-sample-server
  24 │         image: ghcr.io/aeraki-mesh/videopacket-sample-server
  25 │         env:
  26 │         - name: version
  27 │           value: add
  28 │         ports:
  29 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 videopacket-sample.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: videopacket-sample-server
  24 │         image: ghcr.io/aeraki-mesh/videopacket-sample-server
  25 │         env:
  26 │         - name: version
  27 │           value: add
  28 │         ports:
  29 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment videopacket-sample-server-v1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 videopacket-sample.yaml:4-6
────────────────────────────────────────
   4 ┌   name: videopacket-sample-server-v1
   5 │   labels:
   6 └     app: videopacket-sample-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container videopacket-sample-server-v1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 videopacket-sample.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: videopacket-sample-server
  24 │         image: ghcr.io/aeraki-mesh/videopacket-sample-server
  25 │         env:
  26 │         - name: version
  27 │           value: add
  28 │         ports:
  29 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment videopacket-sample-server-v1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 videopacket-sample.yaml:22-29
────────────────────────────────────────
  22 ┌       containers:
  23 │       - name: videopacket-sample-server
  24 │         image: ghcr.io/aeraki-mesh/videopacket-sample-server
  25 │         env:
  26 │         - name: version
  27 │           value: add
  28 │         ports:
  29 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container videopacket-sample-server in deployment videopacket-sample-server-v1 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 videopacket-sample.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: videopacket-sample-server
  24 │         image: ghcr.io/aeraki-mesh/videopacket-sample-server
  25 │         env:
  26 │         - name: version
  27 │           value: add
  28 │         ports:
  29 └         - containerPort: 8000
────────────────────────────────────────



videopacket-sample_1.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'videopacket-sample-server' of Deployment 'videopacket-sample-server-v2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 videopacket-sample_1.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: videopacket-sample-server
  24 │         image: ghcr.io/aeraki-mesh/videopacket-sample-server
  25 │         env:
  26 │         - name: version
  27 │           value: multication
  28 │         ports:
  29 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'videopacket-sample-server' of Deployment 'videopacket-sample-server-v2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 videopacket-sample_1.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: videopacket-sample-server
  24 │         image: ghcr.io/aeraki-mesh/videopacket-sample-server
  25 │         env:
  26 │         - name: version
  27 │           value: multication
  28 │         ports:
  29 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'videopacket-sample-server' of 'deployment' 'videopacket-sample-server-v2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 videopacket-sample_1.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: videopacket-sample-server
  24 │         image: ghcr.io/aeraki-mesh/videopacket-sample-server
  25 │         env:
  26 │         - name: version
  27 │           value: multication
  28 │         ports:
  29 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'videopacket-sample-server' of Deployment 'videopacket-sample-server-v2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 videopacket-sample_1.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: videopacket-sample-server
  24 │         image: ghcr.io/aeraki-mesh/videopacket-sample-server
  25 │         env:
  26 │         - name: version
  27 │           value: multication
  28 │         ports:
  29 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'videopacket-sample-server' of Deployment 'videopacket-sample-server-v2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 videopacket-sample_1.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: videopacket-sample-server
  24 │         image: ghcr.io/aeraki-mesh/videopacket-sample-server
  25 │         env:
  26 │         - name: version
  27 │           value: multication
  28 │         ports:
  29 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'videopacket-sample-server' of Deployment 'videopacket-sample-server-v2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 videopacket-sample_1.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: videopacket-sample-server
  24 │         image: ghcr.io/aeraki-mesh/videopacket-sample-server
  25 │         env:
  26 │         - name: version
  27 │           value: multication
  28 │         ports:
  29 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'videopacket-sample-server' of Deployment 'videopacket-sample-server-v2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 videopacket-sample_1.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: videopacket-sample-server
  24 │         image: ghcr.io/aeraki-mesh/videopacket-sample-server
  25 │         env:
  26 │         - name: version
  27 │           value: multication
  28 │         ports:
  29 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'videopacket-sample-server' of Deployment 'videopacket-sample-server-v2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 videopacket-sample_1.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: videopacket-sample-server
  24 │         image: ghcr.io/aeraki-mesh/videopacket-sample-server
  25 │         env:
  26 │         - name: version
  27 │           value: multication
  28 │         ports:
  29 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'videopacket-sample-server' of Deployment 'videopacket-sample-server-v2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 videopacket-sample_1.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: videopacket-sample-server
  24 │         image: ghcr.io/aeraki-mesh/videopacket-sample-server
  25 │         env:
  26 │         - name: version
  27 │           value: multication
  28 │         ports:
  29 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'videopacket-sample-server' of Deployment 'videopacket-sample-server-v2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 videopacket-sample_1.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: videopacket-sample-server
  24 │         image: ghcr.io/aeraki-mesh/videopacket-sample-server
  25 │         env:
  26 │         - name: version
  27 │           value: multication
  28 │         ports:
  29 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'videopacket-sample-server' of Deployment 'videopacket-sample-server-v2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 videopacket-sample_1.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: videopacket-sample-server
  24 │         image: ghcr.io/aeraki-mesh/videopacket-sample-server
  25 │         env:
  26 │         - name: version
  27 │           value: multication
  28 │         ports:
  29 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'videopacket-sample-server' of Deployment 'videopacket-sample-server-v2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 videopacket-sample_1.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: videopacket-sample-server
  24 │         image: ghcr.io/aeraki-mesh/videopacket-sample-server
  25 │         env:
  26 │         - name: version
  27 │           value: multication
  28 │         ports:
  29 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 videopacket-sample_1.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: videopacket-sample-server
  24 │         image: ghcr.io/aeraki-mesh/videopacket-sample-server
  25 │         env:
  26 │         - name: version
  27 │           value: multication
  28 │         ports:
  29 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "videopacket-sample-server" of deployment "videopacket-sample-server-v2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 videopacket-sample_1.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: videopacket-sample-server
  24 │         image: ghcr.io/aeraki-mesh/videopacket-sample-server
  25 │         env:
  26 │         - name: version
  27 │           value: multication
  28 │         ports:
  29 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 videopacket-sample_1.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: videopacket-sample-server
  24 │         image: ghcr.io/aeraki-mesh/videopacket-sample-server
  25 │         env:
  26 │         - name: version
  27 │           value: multication
  28 │         ports:
  29 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment videopacket-sample-server-v2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 videopacket-sample_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: videopacket-sample-server-v2
   5 │   labels:
   6 └     app: videopacket-sample-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container videopacket-sample-server-v2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 videopacket-sample_1.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: videopacket-sample-server
  24 │         image: ghcr.io/aeraki-mesh/videopacket-sample-server
  25 │         env:
  26 │         - name: version
  27 │           value: multication
  28 │         ports:
  29 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment videopacket-sample-server-v2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 videopacket-sample_1.yaml:22-29
────────────────────────────────────────
  22 ┌       containers:
  23 │       - name: videopacket-sample-server
  24 │         image: ghcr.io/aeraki-mesh/videopacket-sample-server
  25 │         env:
  26 │         - name: version
  27 │           value: multication
  28 │         ports:
  29 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container videopacket-sample-server in deployment videopacket-sample-server-v2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 videopacket-sample_1.yaml:23-29
────────────────────────────────────────
  23 ┌       - name: videopacket-sample-server
  24 │         image: ghcr.io/aeraki-mesh/videopacket-sample-server
  25 │         env:
  26 │         - name: version
  27 │           value: multication
  28 │         ports:
  29 └         - containerPort: 8000
────────────────────────────────────────



videopacket-sample_2.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'videopacket-sample-client' of Deployment 'videopacket-sample-client' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 videopacket-sample_2.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: videopacket-sample-client
  23 │         image: ghcr.io/aeraki-mesh/videopacket-sample-client
  24 │         env:
  25 │         - name: server_addr
  26 └           value: videopacket-sample-server:8000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'videopacket-sample-client' of Deployment 'videopacket-sample-client' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 videopacket-sample_2.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: videopacket-sample-client
  23 │         image: ghcr.io/aeraki-mesh/videopacket-sample-client
  24 │         env:
  25 │         - name: server_addr
  26 └           value: videopacket-sample-server:8000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'videopacket-sample-client' of 'deployment' 'videopacket-sample-client' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 videopacket-sample_2.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: videopacket-sample-client
  23 │         image: ghcr.io/aeraki-mesh/videopacket-sample-client
  24 │         env:
  25 │         - name: server_addr
  26 └           value: videopacket-sample-server:8000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'videopacket-sample-client' of Deployment 'videopacket-sample-client' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 videopacket-sample_2.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: videopacket-sample-client
  23 │         image: ghcr.io/aeraki-mesh/videopacket-sample-client
  24 │         env:
  25 │         - name: server_addr
  26 └           value: videopacket-sample-server:8000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'videopacket-sample-client' of Deployment 'videopacket-sample-client' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 videopacket-sample_2.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: videopacket-sample-client
  23 │         image: ghcr.io/aeraki-mesh/videopacket-sample-client
  24 │         env:
  25 │         - name: server_addr
  26 └           value: videopacket-sample-server:8000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'videopacket-sample-client' of Deployment 'videopacket-sample-client' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 videopacket-sample_2.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: videopacket-sample-client
  23 │         image: ghcr.io/aeraki-mesh/videopacket-sample-client
  24 │         env:
  25 │         - name: server_addr
  26 └           value: videopacket-sample-server:8000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'videopacket-sample-client' of Deployment 'videopacket-sample-client' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 videopacket-sample_2.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: videopacket-sample-client
  23 │         image: ghcr.io/aeraki-mesh/videopacket-sample-client
  24 │         env:
  25 │         - name: server_addr
  26 └           value: videopacket-sample-server:8000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'videopacket-sample-client' of Deployment 'videopacket-sample-client' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 videopacket-sample_2.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: videopacket-sample-client
  23 │         image: ghcr.io/aeraki-mesh/videopacket-sample-client
  24 │         env:
  25 │         - name: server_addr
  26 └           value: videopacket-sample-server:8000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'videopacket-sample-client' of Deployment 'videopacket-sample-client' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 videopacket-sample_2.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: videopacket-sample-client
  23 │         image: ghcr.io/aeraki-mesh/videopacket-sample-client
  24 │         env:
  25 │         - name: server_addr
  26 └           value: videopacket-sample-server:8000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'videopacket-sample-client' of Deployment 'videopacket-sample-client' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 videopacket-sample_2.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: videopacket-sample-client
  23 │         image: ghcr.io/aeraki-mesh/videopacket-sample-client
  24 │         env:
  25 │         - name: server_addr
  26 └           value: videopacket-sample-server:8000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'videopacket-sample-client' of Deployment 'videopacket-sample-client' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 videopacket-sample_2.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: videopacket-sample-client
  23 │         image: ghcr.io/aeraki-mesh/videopacket-sample-client
  24 │         env:
  25 │         - name: server_addr
  26 └           value: videopacket-sample-server:8000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'videopacket-sample-client' of Deployment 'videopacket-sample-client' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 videopacket-sample_2.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: videopacket-sample-client
  23 │         image: ghcr.io/aeraki-mesh/videopacket-sample-client
  24 │         env:
  25 │         - name: server_addr
  26 └           value: videopacket-sample-server:8000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 videopacket-sample_2.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: videopacket-sample-client
  23 │         image: ghcr.io/aeraki-mesh/videopacket-sample-client
  24 │         env:
  25 │         - name: server_addr
  26 └           value: videopacket-sample-server:8000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "videopacket-sample-client" of deployment "videopacket-sample-client" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 videopacket-sample_2.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: videopacket-sample-client
  23 │         image: ghcr.io/aeraki-mesh/videopacket-sample-client
  24 │         env:
  25 │         - name: server_addr
  26 └           value: videopacket-sample-server:8000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 videopacket-sample_2.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: videopacket-sample-client
  23 │         image: ghcr.io/aeraki-mesh/videopacket-sample-client
  24 │         env:
  25 │         - name: server_addr
  26 └           value: videopacket-sample-server:8000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment videopacket-sample-client in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 videopacket-sample_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: videopacket-sample-client
   5 │   labels:
   6 └     app: videopacket-sample-client
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container videopacket-sample-client in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 videopacket-sample_2.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: videopacket-sample-client
  23 │         image: ghcr.io/aeraki-mesh/videopacket-sample-client
  24 │         env:
  25 │         - name: server_addr
  26 └           value: videopacket-sample-server:8000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment videopacket-sample-client in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 videopacket-sample_2.yaml:21-26
────────────────────────────────────────
  21 ┌       containers:
  22 │       - name: videopacket-sample-client
  23 │         image: ghcr.io/aeraki-mesh/videopacket-sample-client
  24 │         env:
  25 │         - name: server_addr
  26 └           value: videopacket-sample-server:8000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container videopacket-sample-client in deployment videopacket-sample-client (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 videopacket-sample_2.yaml:22-26
────────────────────────────────────────
  22 ┌       - name: videopacket-sample-client
  23 │         image: ghcr.io/aeraki-mesh/videopacket-sample-client
  24 │         env:
  25 │         - name: server_addr
  26 └           value: videopacket-sample-server:8000
────────────────────────────────────────



videos-storage-deployment.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'videos-storage' of Deployment 'videos-storage' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 videos-storage-deployment.yaml:17-58
────────────────────────────────────────
  17 ┌       - name: videos-storage
  18 │         image: crazydanila/videos-storage:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: storage-port
  22 │           containerPort: 4001
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4001'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'videos-storage' of Deployment 'videos-storage' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 videos-storage-deployment.yaml:17-58
────────────────────────────────────────
  17 ┌       - name: videos-storage
  18 │         image: crazydanila/videos-storage:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: storage-port
  22 │           containerPort: 4001
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4001'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'videos-storage' of 'deployment' 'videos-storage' in 'flixtube' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 videos-storage-deployment.yaml:17-58
────────────────────────────────────────
  17 ┌       - name: videos-storage
  18 │         image: crazydanila/videos-storage:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: storage-port
  22 │           containerPort: 4001
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4001'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'videos-storage' of Deployment 'videos-storage' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 videos-storage-deployment.yaml:17-58
────────────────────────────────────────
  17 ┌       - name: videos-storage
  18 │         image: crazydanila/videos-storage:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: storage-port
  22 │           containerPort: 4001
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4001'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'videos-storage' of Deployment 'videos-storage' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 videos-storage-deployment.yaml:17-58
────────────────────────────────────────
  17 ┌       - name: videos-storage
  18 │         image: crazydanila/videos-storage:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: storage-port
  22 │           containerPort: 4001
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4001'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'videos-storage' of Deployment 'videos-storage' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 videos-storage-deployment.yaml:17-58
────────────────────────────────────────
  17 ┌       - name: videos-storage
  18 │         image: crazydanila/videos-storage:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: storage-port
  22 │           containerPort: 4001
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4001'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'videos-storage' of Deployment 'videos-storage' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 videos-storage-deployment.yaml:17-58
────────────────────────────────────────
  17 ┌       - name: videos-storage
  18 │         image: crazydanila/videos-storage:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: storage-port
  22 │           containerPort: 4001
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4001'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 videos-storage-deployment.yaml:17-58
────────────────────────────────────────
  17 ┌       - name: videos-storage
  18 │         image: crazydanila/videos-storage:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: storage-port
  22 │           containerPort: 4001
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4001'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "videos-storage" of deployment "videos-storage" in "flixtube" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 videos-storage-deployment.yaml:17-58
────────────────────────────────────────
  17 ┌       - name: videos-storage
  18 │         image: crazydanila/videos-storage:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: storage-port
  22 │           containerPort: 4001
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4001'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 videos-storage-deployment.yaml:17-58
────────────────────────────────────────
  17 ┌       - name: videos-storage
  18 │         image: crazydanila/videos-storage:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: storage-port
  22 │           containerPort: 4001
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4001'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container videos-storage in flixtube namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 videos-storage-deployment.yaml:17-58
────────────────────────────────────────
  17 ┌       - name: videos-storage
  18 │         image: crazydanila/videos-storage:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: storage-port
  22 │           containerPort: 4001
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4001'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment videos-storage in flixtube namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 videos-storage-deployment.yaml:16-58
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: videos-storage
  18 │         image: crazydanila/videos-storage:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: storage-port
  22 │           containerPort: 4001
  23 │         env:
  24 └         - name: PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container videos-storage in deployment videos-storage (namespace: flixtube) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 videos-storage-deployment.yaml:17-58
────────────────────────────────────────
  17 ┌       - name: videos-storage
  18 │         image: crazydanila/videos-storage:af367a45b984e730bda2fa215f5330f9182e6c30
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - name: storage-port
  22 │           containerPort: 4001
  23 │         env:
  24 │         - name: PORT
  25 └           value: '4001'
  ..   
────────────────────────────────────────



videos-web-v2.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'videos-web-v2' of Deployment 'videos-web-v2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 videos-web-v2.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: videos-web-v2
  24 │         image: aimvector/service-mesh:videos-web-2.0.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'videos-web-v2' of Deployment 'videos-web-v2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 videos-web-v2.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: videos-web-v2
  24 │         image: aimvector/service-mesh:videos-web-2.0.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'videos-web-v2' of 'deployment' 'videos-web-v2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 videos-web-v2.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: videos-web-v2
  24 │         image: aimvector/service-mesh:videos-web-2.0.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'videos-web-v2' of Deployment 'videos-web-v2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 videos-web-v2.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: videos-web-v2
  24 │         image: aimvector/service-mesh:videos-web-2.0.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'videos-web-v2' of Deployment 'videos-web-v2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 videos-web-v2.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: videos-web-v2
  24 │         image: aimvector/service-mesh:videos-web-2.0.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'videos-web-v2' of Deployment 'videos-web-v2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 videos-web-v2.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: videos-web-v2
  24 │         image: aimvector/service-mesh:videos-web-2.0.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'videos-web-v2' of Deployment 'videos-web-v2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 videos-web-v2.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: videos-web-v2
  24 │         image: aimvector/service-mesh:videos-web-2.0.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'videos-web-v2' of Deployment 'videos-web-v2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 videos-web-v2.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: videos-web-v2
  24 │         image: aimvector/service-mesh:videos-web-2.0.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'videos-web-v2' of Deployment 'videos-web-v2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 videos-web-v2.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: videos-web-v2
  24 │         image: aimvector/service-mesh:videos-web-2.0.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'videos-web-v2' of Deployment 'videos-web-v2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 videos-web-v2.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: videos-web-v2
  24 │         image: aimvector/service-mesh:videos-web-2.0.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'videos-web-v2' of Deployment 'videos-web-v2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 videos-web-v2.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: videos-web-v2
  24 │         image: aimvector/service-mesh:videos-web-2.0.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 videos-web-v2.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: videos-web-v2
  24 │         image: aimvector/service-mesh:videos-web-2.0.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "videos-web-v2" of deployment "videos-web-v2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 videos-web-v2.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: videos-web-v2
  24 │         image: aimvector/service-mesh:videos-web-2.0.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 videos-web-v2.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: videos-web-v2
  24 │         image: aimvector/service-mesh:videos-web-2.0.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment videos-web-v2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 videos-web-v2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: videos-web-v2
   5 │   labels:
   6 └     app: videos-web-v2
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment videos-web-v2 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container videos-web-v2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 videos-web-v2.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: videos-web-v2
  24 │         image: aimvector/service-mesh:videos-web-2.0.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment videos-web-v2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 videos-web-v2.yaml:22-27
────────────────────────────────────────
  22 ┌       containers:
  23 │       - name: videos-web-v2
  24 │         image: aimvector/service-mesh:videos-web-2.0.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container videos-web-v2 in deployment videos-web-v2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 videos-web-v2.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: videos-web-v2
  24 │         image: aimvector/service-mesh:videos-web-2.0.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────



videos-web-v21.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'videos-web-v2' of Deployment 'videos-web-v2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 videos-web-v21.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: videos-web-v2
  24 │         image: aimvector/service-mesh:videos-web-2.0.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'videos-web-v2' of Deployment 'videos-web-v2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 videos-web-v21.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: videos-web-v2
  24 │         image: aimvector/service-mesh:videos-web-2.0.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'videos-web-v2' of 'deployment' 'videos-web-v2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 videos-web-v21.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: videos-web-v2
  24 │         image: aimvector/service-mesh:videos-web-2.0.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'videos-web-v2' of Deployment 'videos-web-v2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 videos-web-v21.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: videos-web-v2
  24 │         image: aimvector/service-mesh:videos-web-2.0.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'videos-web-v2' of Deployment 'videos-web-v2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 videos-web-v21.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: videos-web-v2
  24 │         image: aimvector/service-mesh:videos-web-2.0.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'videos-web-v2' of Deployment 'videos-web-v2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 videos-web-v21.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: videos-web-v2
  24 │         image: aimvector/service-mesh:videos-web-2.0.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'videos-web-v2' of Deployment 'videos-web-v2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 videos-web-v21.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: videos-web-v2
  24 │         image: aimvector/service-mesh:videos-web-2.0.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'videos-web-v2' of Deployment 'videos-web-v2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 videos-web-v21.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: videos-web-v2
  24 │         image: aimvector/service-mesh:videos-web-2.0.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'videos-web-v2' of Deployment 'videos-web-v2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 videos-web-v21.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: videos-web-v2
  24 │         image: aimvector/service-mesh:videos-web-2.0.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'videos-web-v2' of Deployment 'videos-web-v2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 videos-web-v21.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: videos-web-v2
  24 │         image: aimvector/service-mesh:videos-web-2.0.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'videos-web-v2' of Deployment 'videos-web-v2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 videos-web-v21.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: videos-web-v2
  24 │         image: aimvector/service-mesh:videos-web-2.0.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 videos-web-v21.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: videos-web-v2
  24 │         image: aimvector/service-mesh:videos-web-2.0.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "videos-web-v2" of deployment "videos-web-v2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 videos-web-v21.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: videos-web-v2
  24 │         image: aimvector/service-mesh:videos-web-2.0.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 videos-web-v21.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: videos-web-v2
  24 │         image: aimvector/service-mesh:videos-web-2.0.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment videos-web-v2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 videos-web-v21.yaml:4-6
────────────────────────────────────────
   4 ┌   name: videos-web-v2
   5 │   labels:
   6 └     app: videos-web-v2
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment videos-web-v2 in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container videos-web-v2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 videos-web-v21.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: videos-web-v2
  24 │         image: aimvector/service-mesh:videos-web-2.0.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment videos-web-v2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 videos-web-v21.yaml:22-27
────────────────────────────────────────
  22 ┌       containers:
  23 │       - name: videos-web-v2
  24 │         image: aimvector/service-mesh:videos-web-2.0.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container videos-web-v2 in deployment videos-web-v2 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 videos-web-v21.yaml:23-27
────────────────────────────────────────
  23 ┌       - name: videos-web-v2
  24 │         image: aimvector/service-mesh:videos-web-2.0.0
  25 │         imagePullPolicy: Always
  26 │         ports:
  27 └         - containerPort: 80
────────────────────────────────────────



view-generator-serv.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'view-generator-serv' of Deployment 'view-generator-serv-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 view-generator-serv.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: view-generator-serv
  17 └         image: us.gcr.io/photogallery-409112/view_generator_serv
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'view-generator-serv' of Deployment 'view-generator-serv-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 view-generator-serv.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: view-generator-serv
  17 └         image: us.gcr.io/photogallery-409112/view_generator_serv
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'view-generator-serv' of 'deployment' 'view-generator-serv-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 view-generator-serv.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: view-generator-serv
  17 └         image: us.gcr.io/photogallery-409112/view_generator_serv
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'view-generator-serv' of Deployment 'view-generator-serv-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 view-generator-serv.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: view-generator-serv
  17 └         image: us.gcr.io/photogallery-409112/view_generator_serv
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'view-generator-serv' of Deployment 'view-generator-serv-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 view-generator-serv.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: view-generator-serv
  17 └         image: us.gcr.io/photogallery-409112/view_generator_serv
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'view-generator-serv' of Deployment 'view-generator-serv-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 view-generator-serv.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: view-generator-serv
  17 └         image: us.gcr.io/photogallery-409112/view_generator_serv
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'view-generator-serv' of Deployment 'view-generator-serv-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 view-generator-serv.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: view-generator-serv
  17 └         image: us.gcr.io/photogallery-409112/view_generator_serv
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'view-generator-serv' of Deployment 'view-generator-serv-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 view-generator-serv.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: view-generator-serv
  17 └         image: us.gcr.io/photogallery-409112/view_generator_serv
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'view-generator-serv' of Deployment 'view-generator-serv-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 view-generator-serv.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: view-generator-serv
  17 └         image: us.gcr.io/photogallery-409112/view_generator_serv
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'view-generator-serv' of Deployment 'view-generator-serv-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 view-generator-serv.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: view-generator-serv
  17 └         image: us.gcr.io/photogallery-409112/view_generator_serv
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'view-generator-serv' of Deployment 'view-generator-serv-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 view-generator-serv.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: view-generator-serv
  17 └         image: us.gcr.io/photogallery-409112/view_generator_serv
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'view-generator-serv' of Deployment 'view-generator-serv-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 view-generator-serv.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: view-generator-serv
  17 └         image: us.gcr.io/photogallery-409112/view_generator_serv
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 view-generator-serv.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: view-generator-serv
  17 └         image: us.gcr.io/photogallery-409112/view_generator_serv
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "view-generator-serv" of deployment "view-generator-serv-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 view-generator-serv.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: view-generator-serv
  17 └         image: us.gcr.io/photogallery-409112/view_generator_serv
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 view-generator-serv.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: view-generator-serv
  17 └         image: us.gcr.io/photogallery-409112/view_generator_serv
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment view-generator-serv-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 view-generator-serv.yaml:4
────────────────────────────────────────
   4 [   name: view-generator-serv-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container view-generator-serv-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 view-generator-serv.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: view-generator-serv
  17 └         image: us.gcr.io/photogallery-409112/view_generator_serv
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment view-generator-serv-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 view-generator-serv.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: view-generator-serv
  17 └         image: us.gcr.io/photogallery-409112/view_generator_serv
────────────────────────────────────────



view-generator-serv1.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'view-generator-serv' of Deployment 'view-generator-serv-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 view-generator-serv1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: view-generator-serv
  17 └         image: us.gcr.io/photogallery-409112/view_generator_serv
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'view-generator-serv' of Deployment 'view-generator-serv-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 view-generator-serv1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: view-generator-serv
  17 └         image: us.gcr.io/photogallery-409112/view_generator_serv
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'view-generator-serv' of 'deployment' 'view-generator-serv-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 view-generator-serv1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: view-generator-serv
  17 └         image: us.gcr.io/photogallery-409112/view_generator_serv
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'view-generator-serv' of Deployment 'view-generator-serv-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 view-generator-serv1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: view-generator-serv
  17 └         image: us.gcr.io/photogallery-409112/view_generator_serv
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'view-generator-serv' of Deployment 'view-generator-serv-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 view-generator-serv1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: view-generator-serv
  17 └         image: us.gcr.io/photogallery-409112/view_generator_serv
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'view-generator-serv' of Deployment 'view-generator-serv-depl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 view-generator-serv1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: view-generator-serv
  17 └         image: us.gcr.io/photogallery-409112/view_generator_serv
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'view-generator-serv' of Deployment 'view-generator-serv-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 view-generator-serv1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: view-generator-serv
  17 └         image: us.gcr.io/photogallery-409112/view_generator_serv
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'view-generator-serv' of Deployment 'view-generator-serv-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 view-generator-serv1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: view-generator-serv
  17 └         image: us.gcr.io/photogallery-409112/view_generator_serv
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'view-generator-serv' of Deployment 'view-generator-serv-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 view-generator-serv1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: view-generator-serv
  17 └         image: us.gcr.io/photogallery-409112/view_generator_serv
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'view-generator-serv' of Deployment 'view-generator-serv-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 view-generator-serv1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: view-generator-serv
  17 └         image: us.gcr.io/photogallery-409112/view_generator_serv
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'view-generator-serv' of Deployment 'view-generator-serv-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 view-generator-serv1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: view-generator-serv
  17 └         image: us.gcr.io/photogallery-409112/view_generator_serv
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'view-generator-serv' of Deployment 'view-generator-serv-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 view-generator-serv1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: view-generator-serv
  17 └         image: us.gcr.io/photogallery-409112/view_generator_serv
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 view-generator-serv1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: view-generator-serv
  17 └         image: us.gcr.io/photogallery-409112/view_generator_serv
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "view-generator-serv" of deployment "view-generator-serv-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 view-generator-serv1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: view-generator-serv
  17 └         image: us.gcr.io/photogallery-409112/view_generator_serv
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 view-generator-serv1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: view-generator-serv
  17 └         image: us.gcr.io/photogallery-409112/view_generator_serv
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment view-generator-serv-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 view-generator-serv1.yaml:4
────────────────────────────────────────
   4 [   name: view-generator-serv-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container view-generator-serv-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 view-generator-serv1.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: view-generator-serv
  17 └         image: us.gcr.io/photogallery-409112/view_generator_serv
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment view-generator-serv-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 view-generator-serv1.yaml:15-17
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: view-generator-serv
  17 └         image: us.gcr.io/photogallery-409112/view_generator_serv
────────────────────────────────────────



view.yaml (kubernetes)
======================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'flux-view' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 view.yaml:10-20
────────────────────────────────────────
  10 ┌   - apiGroups:
  11 │       - notification.toolkit.fluxcd.io
  12 │       - source.toolkit.fluxcd.io
  13 │       - helm.toolkit.fluxcd.io
  14 │       - image.toolkit.fluxcd.io
  15 │       - kustomize.toolkit.fluxcd.io
  16 │     resources: ["*"]
  17 │     verbs:
  18 └       - get
  ..   
────────────────────────────────────────



viewer-role.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0112 (CRITICAL): Role 'viewer' shouldn't manage all resources at the namespace 'jx'
════════════════════════════════════════
Full control of the resources within a namespace.  In some cluster configurations, this is excessive. In others, this is normal (a gitops deployment operator like flux)

See https://avd.aquasec.com/misconfig/ksv112
────────────────────────────────────────
 viewer-role.yaml:15-35
────────────────────────────────────────
  15 ┌ - apiGroups:
  16 │   - ""
  17 │   - jenkins.io
  18 │   - extensions
  19 │   - apps
  20 │   - apiextensions.k8s.io
  21 │   - rbac.authorization.k8s.io
  22 │   - batch
  23 └   - tekton.dev
  ..   
────────────────────────────────────────



vip.yaml (kubernetes)
=====================
Tests: 163 (SUCCESSES: 97, FAILURES: 66)
Failures: 66 (UNKNOWN: 0, LOW: 41, MEDIUM: 16, HIGH: 9, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'vip1' of Pod 'vip' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vip.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: vip1
   8 │     image: busybox
   9 │     args:
  10 │     - sleep
  11 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'vip2' of Pod 'vip' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vip.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: vip2
  13 │     image: busybox
  14 │     args:
  15 │     - sleep
  16 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'vip3' of Pod 'vip' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vip.yaml:17-21
────────────────────────────────────────
  17 ┌   - name: vip3
  18 │     image: busybox
  19 │     args:
  20 │     - sleep
  21 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'vip4' of Pod 'vip' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vip.yaml:22-26
────────────────────────────────────────
  22 ┌   - name: vip4
  23 │     image: busybox
  24 │     args:
  25 │     - sleep
  26 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vip1' of Pod 'vip' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vip.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: vip1
   8 │     image: busybox
   9 │     args:
  10 │     - sleep
  11 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vip2' of Pod 'vip' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vip.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: vip2
  13 │     image: busybox
  14 │     args:
  15 │     - sleep
  16 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vip3' of Pod 'vip' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vip.yaml:17-21
────────────────────────────────────────
  17 ┌   - name: vip3
  18 │     image: busybox
  19 │     args:
  20 │     - sleep
  21 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vip4' of Pod 'vip' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vip.yaml:22-26
────────────────────────────────────────
  22 ┌   - name: vip4
  23 │     image: busybox
  24 │     args:
  25 │     - sleep
  26 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vip1' of 'pod' 'vip' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vip.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: vip1
   8 │     image: busybox
   9 │     args:
  10 │     - sleep
  11 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vip2' of 'pod' 'vip' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vip.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: vip2
  13 │     image: busybox
  14 │     args:
  15 │     - sleep
  16 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vip3' of 'pod' 'vip' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vip.yaml:17-21
────────────────────────────────────────
  17 ┌   - name: vip3
  18 │     image: busybox
  19 │     args:
  20 │     - sleep
  21 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vip4' of 'pod' 'vip' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vip.yaml:22-26
────────────────────────────────────────
  22 ┌   - name: vip4
  23 │     image: busybox
  24 │     args:
  25 │     - sleep
  26 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vip1' of Pod 'vip' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vip.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: vip1
   8 │     image: busybox
   9 │     args:
  10 │     - sleep
  11 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vip2' of Pod 'vip' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vip.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: vip2
  13 │     image: busybox
  14 │     args:
  15 │     - sleep
  16 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vip3' of Pod 'vip' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vip.yaml:17-21
────────────────────────────────────────
  17 ┌   - name: vip3
  18 │     image: busybox
  19 │     args:
  20 │     - sleep
  21 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vip4' of Pod 'vip' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vip.yaml:22-26
────────────────────────────────────────
  22 ┌   - name: vip4
  23 │     image: busybox
  24 │     args:
  25 │     - sleep
  26 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vip1' of Pod 'vip' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vip.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: vip1
   8 │     image: busybox
   9 │     args:
  10 │     - sleep
  11 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vip2' of Pod 'vip' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vip.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: vip2
  13 │     image: busybox
  14 │     args:
  15 │     - sleep
  16 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vip3' of Pod 'vip' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vip.yaml:17-21
────────────────────────────────────────
  17 ┌   - name: vip3
  18 │     image: busybox
  19 │     args:
  20 │     - sleep
  21 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vip4' of Pod 'vip' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vip.yaml:22-26
────────────────────────────────────────
  22 ┌   - name: vip4
  23 │     image: busybox
  24 │     args:
  25 │     - sleep
  26 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vip1' of Pod 'vip' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 vip.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: vip1
   8 │     image: busybox
   9 │     args:
  10 │     - sleep
  11 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vip2' of Pod 'vip' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 vip.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: vip2
  13 │     image: busybox
  14 │     args:
  15 │     - sleep
  16 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vip3' of Pod 'vip' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 vip.yaml:17-21
────────────────────────────────────────
  17 ┌   - name: vip3
  18 │     image: busybox
  19 │     args:
  20 │     - sleep
  21 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vip4' of Pod 'vip' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 vip.yaml:22-26
────────────────────────────────────────
  22 ┌   - name: vip4
  23 │     image: busybox
  24 │     args:
  25 │     - sleep
  26 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vip1' of Pod 'vip' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vip.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: vip1
   8 │     image: busybox
   9 │     args:
  10 │     - sleep
  11 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vip2' of Pod 'vip' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vip.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: vip2
  13 │     image: busybox
  14 │     args:
  15 │     - sleep
  16 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vip3' of Pod 'vip' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vip.yaml:17-21
────────────────────────────────────────
  17 ┌   - name: vip3
  18 │     image: busybox
  19 │     args:
  20 │     - sleep
  21 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vip4' of Pod 'vip' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vip.yaml:22-26
────────────────────────────────────────
  22 ┌   - name: vip4
  23 │     image: busybox
  24 │     args:
  25 │     - sleep
  26 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vip1' of Pod 'vip' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vip.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: vip1
   8 │     image: busybox
   9 │     args:
  10 │     - sleep
  11 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vip2' of Pod 'vip' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vip.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: vip2
  13 │     image: busybox
  14 │     args:
  15 │     - sleep
  16 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vip3' of Pod 'vip' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vip.yaml:17-21
────────────────────────────────────────
  17 ┌   - name: vip3
  18 │     image: busybox
  19 │     args:
  20 │     - sleep
  21 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vip4' of Pod 'vip' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vip.yaml:22-26
────────────────────────────────────────
  22 ┌   - name: vip4
  23 │     image: busybox
  24 │     args:
  25 │     - sleep
  26 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vip1' of Pod 'vip' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vip.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: vip1
   8 │     image: busybox
   9 │     args:
  10 │     - sleep
  11 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vip2' of Pod 'vip' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vip.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: vip2
  13 │     image: busybox
  14 │     args:
  15 │     - sleep
  16 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vip3' of Pod 'vip' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vip.yaml:17-21
────────────────────────────────────────
  17 ┌   - name: vip3
  18 │     image: busybox
  19 │     args:
  20 │     - sleep
  21 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vip4' of Pod 'vip' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vip.yaml:22-26
────────────────────────────────────────
  22 ┌   - name: vip4
  23 │     image: busybox
  24 │     args:
  25 │     - sleep
  26 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vip1' of Pod 'vip' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vip.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: vip1
   8 │     image: busybox
   9 │     args:
  10 │     - sleep
  11 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vip2' of Pod 'vip' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vip.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: vip2
  13 │     image: busybox
  14 │     args:
  15 │     - sleep
  16 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vip3' of Pod 'vip' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vip.yaml:17-21
────────────────────────────────────────
  17 ┌   - name: vip3
  18 │     image: busybox
  19 │     args:
  20 │     - sleep
  21 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vip4' of Pod 'vip' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vip.yaml:22-26
────────────────────────────────────────
  22 ┌   - name: vip4
  23 │     image: busybox
  24 │     args:
  25 │     - sleep
  26 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vip1' of Pod 'vip' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vip.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: vip1
   8 │     image: busybox
   9 │     args:
  10 │     - sleep
  11 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vip2' of Pod 'vip' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vip.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: vip2
  13 │     image: busybox
  14 │     args:
  15 │     - sleep
  16 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vip3' of Pod 'vip' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vip.yaml:17-21
────────────────────────────────────────
  17 ┌   - name: vip3
  18 │     image: busybox
  19 │     args:
  20 │     - sleep
  21 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vip4' of Pod 'vip' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vip.yaml:22-26
────────────────────────────────────────
  22 ┌   - name: vip4
  23 │     image: busybox
  24 │     args:
  25 │     - sleep
  26 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vip1' of Pod 'vip' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vip.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: vip1
   8 │     image: busybox
   9 │     args:
  10 │     - sleep
  11 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vip2' of Pod 'vip' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vip.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: vip2
  13 │     image: busybox
  14 │     args:
  15 │     - sleep
  16 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vip3' of Pod 'vip' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vip.yaml:17-21
────────────────────────────────────────
  17 ┌   - name: vip3
  18 │     image: busybox
  19 │     args:
  20 │     - sleep
  21 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vip4' of Pod 'vip' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vip.yaml:22-26
────────────────────────────────────────
  22 ┌   - name: vip4
  23 │     image: busybox
  24 │     args:
  25 │     - sleep
  26 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vip.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: vip2
  13 │     image: busybox
  14 │     args:
  15 │     - sleep
  16 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vip.yaml:22-26
────────────────────────────────────────
  22 ┌   - name: vip4
  23 │     image: busybox
  24 │     args:
  25 │     - sleep
  26 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vip.yaml:17-21
────────────────────────────────────────
  17 ┌   - name: vip3
  18 │     image: busybox
  19 │     args:
  20 │     - sleep
  21 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vip.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: vip1
   8 │     image: busybox
   9 │     args:
  10 │     - sleep
  11 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vip1" of pod "vip" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vip.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: vip1
   8 │     image: busybox
   9 │     args:
  10 │     - sleep
  11 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vip2" of pod "vip" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vip.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: vip2
  13 │     image: busybox
  14 │     args:
  15 │     - sleep
  16 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vip3" of pod "vip" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vip.yaml:17-21
────────────────────────────────────────
  17 ┌   - name: vip3
  18 │     image: busybox
  19 │     args:
  20 │     - sleep
  21 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vip4" of pod "vip" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vip.yaml:22-26
────────────────────────────────────────
  22 ┌   - name: vip4
  23 │     image: busybox
  24 │     args:
  25 │     - sleep
  26 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vip.yaml:22-26
────────────────────────────────────────
  22 ┌   - name: vip4
  23 │     image: busybox
  24 │     args:
  25 │     - sleep
  26 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vip.yaml:17-21
────────────────────────────────────────
  17 ┌   - name: vip3
  18 │     image: busybox
  19 │     args:
  20 │     - sleep
  21 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vip.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: vip2
  13 │     image: busybox
  14 │     args:
  15 │     - sleep
  16 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vip.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: vip1
   8 │     image: busybox
   9 │     args:
  10 │     - sleep
  11 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod vip in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 vip.yaml:4
────────────────────────────────────────
   4 [   name: vip
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vip in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vip.yaml:22-26
────────────────────────────────────────
  22 ┌   - name: vip4
  23 │     image: busybox
  24 │     args:
  25 │     - sleep
  26 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vip in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vip.yaml:17-21
────────────────────────────────────────
  17 ┌   - name: vip3
  18 │     image: busybox
  19 │     args:
  20 │     - sleep
  21 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vip in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vip.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: vip2
  13 │     image: busybox
  14 │     args:
  15 │     - sleep
  16 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vip in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vip.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: vip1
   8 │     image: busybox
   9 │     args:
  10 │     - sleep
  11 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod vip in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vip.yaml:6-28
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: vip1
   8 │     image: busybox
   9 │     args:
  10 │     - sleep
  11 │     - "1000000"
  12 │   - name: vip2
  13 │     image: busybox
  14 └     args:
  ..   
────────────────────────────────────────



vip1.yaml (kubernetes)
======================
Tests: 163 (SUCCESSES: 97, FAILURES: 66)
Failures: 66 (UNKNOWN: 0, LOW: 41, MEDIUM: 16, HIGH: 9, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'vip1' of Pod 'vip' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vip1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: vip1
   8 │     image: busybox
   9 │     args:
  10 │     - sleep
  11 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'vip2' of Pod 'vip' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vip1.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: vip2
  13 │     image: busybox
  14 │     args:
  15 │     - sleep
  16 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'vip3' of Pod 'vip' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vip1.yaml:17-21
────────────────────────────────────────
  17 ┌   - name: vip3
  18 │     image: busybox
  19 │     args:
  20 │     - sleep
  21 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'vip4' of Pod 'vip' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vip1.yaml:22-26
────────────────────────────────────────
  22 ┌   - name: vip4
  23 │     image: busybox
  24 │     args:
  25 │     - sleep
  26 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vip1' of Pod 'vip' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vip1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: vip1
   8 │     image: busybox
   9 │     args:
  10 │     - sleep
  11 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vip2' of Pod 'vip' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vip1.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: vip2
  13 │     image: busybox
  14 │     args:
  15 │     - sleep
  16 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vip3' of Pod 'vip' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vip1.yaml:17-21
────────────────────────────────────────
  17 ┌   - name: vip3
  18 │     image: busybox
  19 │     args:
  20 │     - sleep
  21 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vip4' of Pod 'vip' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vip1.yaml:22-26
────────────────────────────────────────
  22 ┌   - name: vip4
  23 │     image: busybox
  24 │     args:
  25 │     - sleep
  26 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vip1' of 'pod' 'vip' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vip1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: vip1
   8 │     image: busybox
   9 │     args:
  10 │     - sleep
  11 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vip2' of 'pod' 'vip' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vip1.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: vip2
  13 │     image: busybox
  14 │     args:
  15 │     - sleep
  16 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vip3' of 'pod' 'vip' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vip1.yaml:17-21
────────────────────────────────────────
  17 ┌   - name: vip3
  18 │     image: busybox
  19 │     args:
  20 │     - sleep
  21 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vip4' of 'pod' 'vip' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vip1.yaml:22-26
────────────────────────────────────────
  22 ┌   - name: vip4
  23 │     image: busybox
  24 │     args:
  25 │     - sleep
  26 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vip1' of Pod 'vip' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vip1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: vip1
   8 │     image: busybox
   9 │     args:
  10 │     - sleep
  11 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vip2' of Pod 'vip' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vip1.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: vip2
  13 │     image: busybox
  14 │     args:
  15 │     - sleep
  16 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vip3' of Pod 'vip' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vip1.yaml:17-21
────────────────────────────────────────
  17 ┌   - name: vip3
  18 │     image: busybox
  19 │     args:
  20 │     - sleep
  21 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vip4' of Pod 'vip' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vip1.yaml:22-26
────────────────────────────────────────
  22 ┌   - name: vip4
  23 │     image: busybox
  24 │     args:
  25 │     - sleep
  26 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vip1' of Pod 'vip' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vip1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: vip1
   8 │     image: busybox
   9 │     args:
  10 │     - sleep
  11 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vip2' of Pod 'vip' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vip1.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: vip2
  13 │     image: busybox
  14 │     args:
  15 │     - sleep
  16 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vip3' of Pod 'vip' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vip1.yaml:17-21
────────────────────────────────────────
  17 ┌   - name: vip3
  18 │     image: busybox
  19 │     args:
  20 │     - sleep
  21 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vip4' of Pod 'vip' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vip1.yaml:22-26
────────────────────────────────────────
  22 ┌   - name: vip4
  23 │     image: busybox
  24 │     args:
  25 │     - sleep
  26 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vip1' of Pod 'vip' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 vip1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: vip1
   8 │     image: busybox
   9 │     args:
  10 │     - sleep
  11 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vip2' of Pod 'vip' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 vip1.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: vip2
  13 │     image: busybox
  14 │     args:
  15 │     - sleep
  16 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vip3' of Pod 'vip' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 vip1.yaml:17-21
────────────────────────────────────────
  17 ┌   - name: vip3
  18 │     image: busybox
  19 │     args:
  20 │     - sleep
  21 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vip4' of Pod 'vip' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 vip1.yaml:22-26
────────────────────────────────────────
  22 ┌   - name: vip4
  23 │     image: busybox
  24 │     args:
  25 │     - sleep
  26 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vip1' of Pod 'vip' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vip1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: vip1
   8 │     image: busybox
   9 │     args:
  10 │     - sleep
  11 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vip2' of Pod 'vip' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vip1.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: vip2
  13 │     image: busybox
  14 │     args:
  15 │     - sleep
  16 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vip3' of Pod 'vip' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vip1.yaml:17-21
────────────────────────────────────────
  17 ┌   - name: vip3
  18 │     image: busybox
  19 │     args:
  20 │     - sleep
  21 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vip4' of Pod 'vip' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vip1.yaml:22-26
────────────────────────────────────────
  22 ┌   - name: vip4
  23 │     image: busybox
  24 │     args:
  25 │     - sleep
  26 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vip1' of Pod 'vip' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vip1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: vip1
   8 │     image: busybox
   9 │     args:
  10 │     - sleep
  11 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vip2' of Pod 'vip' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vip1.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: vip2
  13 │     image: busybox
  14 │     args:
  15 │     - sleep
  16 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vip3' of Pod 'vip' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vip1.yaml:17-21
────────────────────────────────────────
  17 ┌   - name: vip3
  18 │     image: busybox
  19 │     args:
  20 │     - sleep
  21 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vip4' of Pod 'vip' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vip1.yaml:22-26
────────────────────────────────────────
  22 ┌   - name: vip4
  23 │     image: busybox
  24 │     args:
  25 │     - sleep
  26 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vip1' of Pod 'vip' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vip1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: vip1
   8 │     image: busybox
   9 │     args:
  10 │     - sleep
  11 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vip2' of Pod 'vip' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vip1.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: vip2
  13 │     image: busybox
  14 │     args:
  15 │     - sleep
  16 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vip3' of Pod 'vip' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vip1.yaml:17-21
────────────────────────────────────────
  17 ┌   - name: vip3
  18 │     image: busybox
  19 │     args:
  20 │     - sleep
  21 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vip4' of Pod 'vip' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vip1.yaml:22-26
────────────────────────────────────────
  22 ┌   - name: vip4
  23 │     image: busybox
  24 │     args:
  25 │     - sleep
  26 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vip1' of Pod 'vip' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vip1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: vip1
   8 │     image: busybox
   9 │     args:
  10 │     - sleep
  11 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vip2' of Pod 'vip' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vip1.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: vip2
  13 │     image: busybox
  14 │     args:
  15 │     - sleep
  16 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vip3' of Pod 'vip' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vip1.yaml:17-21
────────────────────────────────────────
  17 ┌   - name: vip3
  18 │     image: busybox
  19 │     args:
  20 │     - sleep
  21 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vip4' of Pod 'vip' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vip1.yaml:22-26
────────────────────────────────────────
  22 ┌   - name: vip4
  23 │     image: busybox
  24 │     args:
  25 │     - sleep
  26 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vip1' of Pod 'vip' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vip1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: vip1
   8 │     image: busybox
   9 │     args:
  10 │     - sleep
  11 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vip2' of Pod 'vip' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vip1.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: vip2
  13 │     image: busybox
  14 │     args:
  15 │     - sleep
  16 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vip3' of Pod 'vip' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vip1.yaml:17-21
────────────────────────────────────────
  17 ┌   - name: vip3
  18 │     image: busybox
  19 │     args:
  20 │     - sleep
  21 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vip4' of Pod 'vip' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vip1.yaml:22-26
────────────────────────────────────────
  22 ┌   - name: vip4
  23 │     image: busybox
  24 │     args:
  25 │     - sleep
  26 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vip1' of Pod 'vip' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vip1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: vip1
   8 │     image: busybox
   9 │     args:
  10 │     - sleep
  11 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vip2' of Pod 'vip' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vip1.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: vip2
  13 │     image: busybox
  14 │     args:
  15 │     - sleep
  16 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vip3' of Pod 'vip' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vip1.yaml:17-21
────────────────────────────────────────
  17 ┌   - name: vip3
  18 │     image: busybox
  19 │     args:
  20 │     - sleep
  21 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vip4' of Pod 'vip' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vip1.yaml:22-26
────────────────────────────────────────
  22 ┌   - name: vip4
  23 │     image: busybox
  24 │     args:
  25 │     - sleep
  26 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vip1.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: vip2
  13 │     image: busybox
  14 │     args:
  15 │     - sleep
  16 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vip1.yaml:22-26
────────────────────────────────────────
  22 ┌   - name: vip4
  23 │     image: busybox
  24 │     args:
  25 │     - sleep
  26 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vip1.yaml:17-21
────────────────────────────────────────
  17 ┌   - name: vip3
  18 │     image: busybox
  19 │     args:
  20 │     - sleep
  21 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vip1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: vip1
   8 │     image: busybox
   9 │     args:
  10 │     - sleep
  11 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vip1" of pod "vip" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vip1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: vip1
   8 │     image: busybox
   9 │     args:
  10 │     - sleep
  11 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vip2" of pod "vip" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vip1.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: vip2
  13 │     image: busybox
  14 │     args:
  15 │     - sleep
  16 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vip3" of pod "vip" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vip1.yaml:17-21
────────────────────────────────────────
  17 ┌   - name: vip3
  18 │     image: busybox
  19 │     args:
  20 │     - sleep
  21 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vip4" of pod "vip" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vip1.yaml:22-26
────────────────────────────────────────
  22 ┌   - name: vip4
  23 │     image: busybox
  24 │     args:
  25 │     - sleep
  26 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vip1.yaml:22-26
────────────────────────────────────────
  22 ┌   - name: vip4
  23 │     image: busybox
  24 │     args:
  25 │     - sleep
  26 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vip1.yaml:17-21
────────────────────────────────────────
  17 ┌   - name: vip3
  18 │     image: busybox
  19 │     args:
  20 │     - sleep
  21 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vip1.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: vip2
  13 │     image: busybox
  14 │     args:
  15 │     - sleep
  16 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vip1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: vip1
   8 │     image: busybox
   9 │     args:
  10 │     - sleep
  11 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod vip in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 vip1.yaml:4
────────────────────────────────────────
   4 [   name: vip
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vip in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vip1.yaml:22-26
────────────────────────────────────────
  22 ┌   - name: vip4
  23 │     image: busybox
  24 │     args:
  25 │     - sleep
  26 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vip in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vip1.yaml:17-21
────────────────────────────────────────
  17 ┌   - name: vip3
  18 │     image: busybox
  19 │     args:
  20 │     - sleep
  21 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vip in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vip1.yaml:12-16
────────────────────────────────────────
  12 ┌   - name: vip2
  13 │     image: busybox
  14 │     args:
  15 │     - sleep
  16 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vip in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vip1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: vip1
   8 │     image: busybox
   9 │     args:
  10 │     - sleep
  11 └     - "1000000"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod vip in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vip1.yaml:6-28
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: vip1
   8 │     image: busybox
   9 │     args:
  10 │     - sleep
  11 │     - "1000000"
  12 │   - name: vip2
  13 │     image: busybox
  14 └     args:
  ..   
────────────────────────────────────────



virtual-node.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'aci-helloworld' of Deployment 'aci-helloworld' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 virtual-node.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: aci-helloworld
  17 │         image: microsoft/aci-helloworld
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'aci-helloworld' of Deployment 'aci-helloworld' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 virtual-node.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: aci-helloworld
  17 │         image: microsoft/aci-helloworld
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'aci-helloworld' of 'deployment' 'aci-helloworld' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 virtual-node.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: aci-helloworld
  17 │         image: microsoft/aci-helloworld
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'aci-helloworld' of Deployment 'aci-helloworld' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 virtual-node.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: aci-helloworld
  17 │         image: microsoft/aci-helloworld
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'aci-helloworld' of Deployment 'aci-helloworld' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 virtual-node.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: aci-helloworld
  17 │         image: microsoft/aci-helloworld
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'aci-helloworld' of Deployment 'aci-helloworld' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 virtual-node.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: aci-helloworld
  17 │         image: microsoft/aci-helloworld
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'aci-helloworld' of Deployment 'aci-helloworld' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 virtual-node.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: aci-helloworld
  17 │         image: microsoft/aci-helloworld
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'aci-helloworld' of Deployment 'aci-helloworld' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 virtual-node.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: aci-helloworld
  17 │         image: microsoft/aci-helloworld
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'aci-helloworld' of Deployment 'aci-helloworld' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 virtual-node.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: aci-helloworld
  17 │         image: microsoft/aci-helloworld
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'aci-helloworld' of Deployment 'aci-helloworld' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 virtual-node.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: aci-helloworld
  17 │         image: microsoft/aci-helloworld
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'aci-helloworld' of Deployment 'aci-helloworld' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 virtual-node.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: aci-helloworld
  17 │         image: microsoft/aci-helloworld
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'aci-helloworld' of Deployment 'aci-helloworld' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 virtual-node.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: aci-helloworld
  17 │         image: microsoft/aci-helloworld
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 virtual-node.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: aci-helloworld
  17 │         image: microsoft/aci-helloworld
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "aci-helloworld" of deployment "aci-helloworld" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 virtual-node.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: aci-helloworld
  17 │         image: microsoft/aci-helloworld
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 virtual-node.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: aci-helloworld
  17 │         image: microsoft/aci-helloworld
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment aci-helloworld in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 virtual-node.yaml:4
────────────────────────────────────────
   4 [   name: aci-helloworld
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment aci-helloworld in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container aci-helloworld in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 virtual-node.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: aci-helloworld
  17 │         image: microsoft/aci-helloworld
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment aci-helloworld in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 virtual-node.yaml:15-28
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: aci-helloworld
  17 │         image: microsoft/aci-helloworld
  18 │         ports:
  19 │         - containerPort: 80
  20 │       nodeSelector:
  21 │         kubernetes.io/role: agent
  22 │         beta.kubernetes.io/os: linux
  23 └         type: virtual-kubelet
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container aci-helloworld in deployment aci-helloworld (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 virtual-node.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: aci-helloworld
  17 │         image: microsoft/aci-helloworld
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



virtualservice19_4.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 108, FAILURES: 6)
Failures: 6 (UNKNOWN: 0, LOW: 4, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'keycloak' of Deployment 'keycloak' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 virtualservice19_4.yaml:23-92
────────────────────────────────────────
  23 ┌       - command:
  24 │         - /opt/keycloak/bin/kc.sh
  25 │         - start
  26 │         env:
  27 │         - name: KC_HEALTH_ENABLED
  28 │           value: 'true'
  29 │         - name: KC_HTTP_ENABLED
  30 │           value: 'true'
  31 └         - name: KC_CACHE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'keycloak' of Deployment 'keycloak' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 virtualservice19_4.yaml:23-92
────────────────────────────────────────
  23 ┌       - command:
  24 │         - /opt/keycloak/bin/kc.sh
  25 │         - start
  26 │         env:
  27 │         - name: KC_HEALTH_ENABLED
  28 │           value: 'true'
  29 │         - name: KC_HTTP_ENABLED
  30 │           value: 'true'
  31 └         - name: KC_CACHE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'keycloak' of Deployment 'keycloak' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 virtualservice19_4.yaml:23-92
────────────────────────────────────────
  23 ┌       - command:
  24 │         - /opt/keycloak/bin/kc.sh
  25 │         - start
  26 │         env:
  27 │         - name: KC_HEALTH_ENABLED
  28 │           value: 'true'
  29 │         - name: KC_HTTP_ENABLED
  30 │           value: 'true'
  31 └         - name: KC_CACHE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'keycloak' of Deployment 'keycloak' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 virtualservice19_4.yaml:23-92
────────────────────────────────────────
  23 ┌       - command:
  24 │         - /opt/keycloak/bin/kc.sh
  25 │         - start
  26 │         env:
  27 │         - name: KC_HEALTH_ENABLED
  28 │           value: 'true'
  29 │         - name: KC_HTTP_ENABLED
  30 │           value: 'true'
  31 └         - name: KC_CACHE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'keycloak' of Deployment 'keycloak' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 virtualservice19_4.yaml:23-92
────────────────────────────────────────
  23 ┌       - command:
  24 │         - /opt/keycloak/bin/kc.sh
  25 │         - start
  26 │         env:
  27 │         - name: KC_HEALTH_ENABLED
  28 │           value: 'true'
  29 │         - name: KC_HTTP_ENABLED
  30 │           value: 'true'
  31 └         - name: KC_CACHE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container keycloak in deployment keycloak (namespace: zel-test) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 virtualservice19_4.yaml:23-92
────────────────────────────────────────
  23 ┌       - command:
  24 │         - /opt/keycloak/bin/kc.sh
  25 │         - start
  26 │         env:
  27 │         - name: KC_HEALTH_ENABLED
  28 │           value: 'true'
  29 │         - name: KC_HTTP_ENABLED
  30 │           value: 'true'
  31 └         - name: KC_CACHE
  ..   
────────────────────────────────────────



virtvnc1_4.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'virtvnc' of Deployment 'virtvnc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 virtvnc1_4.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: virtvnc
  24 │         image: quay.io/samblade/virtvnc:v0.1
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             port: 8001
  28 │             path: /
  29 │             scheme: HTTP
  30 │           failureThreshold: 30
  31 └           initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'virtvnc' of Deployment 'virtvnc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 virtvnc1_4.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: virtvnc
  24 │         image: quay.io/samblade/virtvnc:v0.1
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             port: 8001
  28 │             path: /
  29 │             scheme: HTTP
  30 │           failureThreshold: 30
  31 └           initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'virtvnc' of 'deployment' 'virtvnc' in 'kubevirt' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 virtvnc1_4.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: virtvnc
  24 │         image: quay.io/samblade/virtvnc:v0.1
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             port: 8001
  28 │             path: /
  29 │             scheme: HTTP
  30 │           failureThreshold: 30
  31 └           initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'virtvnc' of Deployment 'virtvnc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 virtvnc1_4.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: virtvnc
  24 │         image: quay.io/samblade/virtvnc:v0.1
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             port: 8001
  28 │             path: /
  29 │             scheme: HTTP
  30 │           failureThreshold: 30
  31 └           initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'virtvnc' of Deployment 'virtvnc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 virtvnc1_4.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: virtvnc
  24 │         image: quay.io/samblade/virtvnc:v0.1
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             port: 8001
  28 │             path: /
  29 │             scheme: HTTP
  30 │           failureThreshold: 30
  31 └           initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'virtvnc' of Deployment 'virtvnc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 virtvnc1_4.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: virtvnc
  24 │         image: quay.io/samblade/virtvnc:v0.1
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             port: 8001
  28 │             path: /
  29 │             scheme: HTTP
  30 │           failureThreshold: 30
  31 └           initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'virtvnc' of Deployment 'virtvnc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 virtvnc1_4.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: virtvnc
  24 │         image: quay.io/samblade/virtvnc:v0.1
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             port: 8001
  28 │             path: /
  29 │             scheme: HTTP
  30 │           failureThreshold: 30
  31 └           initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'virtvnc' of Deployment 'virtvnc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 virtvnc1_4.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: virtvnc
  24 │         image: quay.io/samblade/virtvnc:v0.1
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             port: 8001
  28 │             path: /
  29 │             scheme: HTTP
  30 │           failureThreshold: 30
  31 └           initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'virtvnc' of Deployment 'virtvnc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 virtvnc1_4.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: virtvnc
  24 │         image: quay.io/samblade/virtvnc:v0.1
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             port: 8001
  28 │             path: /
  29 │             scheme: HTTP
  30 │           failureThreshold: 30
  31 └           initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'virtvnc' of Deployment 'virtvnc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 virtvnc1_4.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: virtvnc
  24 │         image: quay.io/samblade/virtvnc:v0.1
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             port: 8001
  28 │             path: /
  29 │             scheme: HTTP
  30 │           failureThreshold: 30
  31 └           initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'virtvnc' of Deployment 'virtvnc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 virtvnc1_4.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: virtvnc
  24 │         image: quay.io/samblade/virtvnc:v0.1
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             port: 8001
  28 │             path: /
  29 │             scheme: HTTP
  30 │           failureThreshold: 30
  31 └           initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 virtvnc1_4.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: virtvnc
  24 │         image: quay.io/samblade/virtvnc:v0.1
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             port: 8001
  28 │             path: /
  29 │             scheme: HTTP
  30 │           failureThreshold: 30
  31 └           initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "virtvnc" of deployment "virtvnc" in "kubevirt" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 virtvnc1_4.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: virtvnc
  24 │         image: quay.io/samblade/virtvnc:v0.1
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             port: 8001
  28 │             path: /
  29 │             scheme: HTTP
  30 │           failureThreshold: 30
  31 └           initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 virtvnc1_4.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: virtvnc
  24 │         image: quay.io/samblade/virtvnc:v0.1
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             port: 8001
  28 │             path: /
  29 │             scheme: HTTP
  30 │           failureThreshold: 30
  31 └           initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container virtvnc in kubevirt namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 virtvnc1_4.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: virtvnc
  24 │         image: quay.io/samblade/virtvnc:v0.1
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             port: 8001
  28 │             path: /
  29 │             scheme: HTTP
  30 │           failureThreshold: 30
  31 └           initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment virtvnc in kubevirt namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 virtvnc1_4.yaml:16-34
────────────────────────────────────────
  16 ┌       serviceAccountName: virtvnc
  17 │       tolerations:
  18 │       - key: node-role.kubernetes.io/master
  19 │         operator: Equal
  20 │         value: ''
  21 │         effect: NoSchedule
  22 │       containers:
  23 │       - name: virtvnc
  24 └         image: quay.io/samblade/virtvnc:v0.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container virtvnc in deployment virtvnc (namespace: kubevirt) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 virtvnc1_4.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: virtvnc
  24 │         image: quay.io/samblade/virtvnc:v0.1
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             port: 8001
  28 │             path: /
  29 │             scheme: HTTP
  30 │           failureThreshold: 30
  31 └           initialDelaySeconds: 30
  ..   
────────────────────────────────────────



virtvnc2_4.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kv-novnc' of Deployment 'kv-novnc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 virtvnc2_4.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: kv-novnc
  19 │         image: ghcr.io/scog/kubevirt-novnc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             port: 8001
  24 │             path: /
  25 │             scheme: HTTP
  26 └           failureThreshold: 30
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kv-novnc' of Deployment 'kv-novnc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 virtvnc2_4.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: kv-novnc
  19 │         image: ghcr.io/scog/kubevirt-novnc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             port: 8001
  24 │             path: /
  25 │             scheme: HTTP
  26 └           failureThreshold: 30
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kv-novnc' of 'deployment' 'kv-novnc' in 'kubevirt' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 virtvnc2_4.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: kv-novnc
  19 │         image: ghcr.io/scog/kubevirt-novnc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             port: 8001
  24 │             path: /
  25 │             scheme: HTTP
  26 └           failureThreshold: 30
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kv-novnc' of Deployment 'kv-novnc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 virtvnc2_4.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: kv-novnc
  19 │         image: ghcr.io/scog/kubevirt-novnc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             port: 8001
  24 │             path: /
  25 │             scheme: HTTP
  26 └           failureThreshold: 30
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kv-novnc' of Deployment 'kv-novnc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 virtvnc2_4.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: kv-novnc
  19 │         image: ghcr.io/scog/kubevirt-novnc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             port: 8001
  24 │             path: /
  25 │             scheme: HTTP
  26 └           failureThreshold: 30
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kv-novnc' of Deployment 'kv-novnc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 virtvnc2_4.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: kv-novnc
  19 │         image: ghcr.io/scog/kubevirt-novnc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             port: 8001
  24 │             path: /
  25 │             scheme: HTTP
  26 └           failureThreshold: 30
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kv-novnc' of Deployment 'kv-novnc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 virtvnc2_4.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: kv-novnc
  19 │         image: ghcr.io/scog/kubevirt-novnc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             port: 8001
  24 │             path: /
  25 │             scheme: HTTP
  26 └           failureThreshold: 30
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kv-novnc' of Deployment 'kv-novnc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 virtvnc2_4.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: kv-novnc
  19 │         image: ghcr.io/scog/kubevirt-novnc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             port: 8001
  24 │             path: /
  25 │             scheme: HTTP
  26 └           failureThreshold: 30
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kv-novnc' of Deployment 'kv-novnc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 virtvnc2_4.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: kv-novnc
  19 │         image: ghcr.io/scog/kubevirt-novnc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             port: 8001
  24 │             path: /
  25 │             scheme: HTTP
  26 └           failureThreshold: 30
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kv-novnc' of Deployment 'kv-novnc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 virtvnc2_4.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: kv-novnc
  19 │         image: ghcr.io/scog/kubevirt-novnc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             port: 8001
  24 │             path: /
  25 │             scheme: HTTP
  26 └           failureThreshold: 30
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kv-novnc' of Deployment 'kv-novnc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 virtvnc2_4.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: kv-novnc
  19 │         image: ghcr.io/scog/kubevirt-novnc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             port: 8001
  24 │             path: /
  25 │             scheme: HTTP
  26 └           failureThreshold: 30
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kv-novnc' of Deployment 'kv-novnc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 virtvnc2_4.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: kv-novnc
  19 │         image: ghcr.io/scog/kubevirt-novnc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             port: 8001
  24 │             path: /
  25 │             scheme: HTTP
  26 └           failureThreshold: 30
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 virtvnc2_4.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: kv-novnc
  19 │         image: ghcr.io/scog/kubevirt-novnc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             port: 8001
  24 │             path: /
  25 │             scheme: HTTP
  26 └           failureThreshold: 30
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kv-novnc" of deployment "kv-novnc" in "kubevirt" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 virtvnc2_4.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: kv-novnc
  19 │         image: ghcr.io/scog/kubevirt-novnc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             port: 8001
  24 │             path: /
  25 │             scheme: HTTP
  26 └           failureThreshold: 30
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 virtvnc2_4.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: kv-novnc
  19 │         image: ghcr.io/scog/kubevirt-novnc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             port: 8001
  24 │             path: /
  25 │             scheme: HTTP
  26 └           failureThreshold: 30
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kv-novnc in kubevirt namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 virtvnc2_4.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: kv-novnc
  19 │         image: ghcr.io/scog/kubevirt-novnc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             port: 8001
  24 │             path: /
  25 │             scheme: HTTP
  26 └           failureThreshold: 30
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment kv-novnc in kubevirt namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 virtvnc2_4.yaml:16-30
────────────────────────────────────────
  16 ┌       serviceAccountName: kv-novnc
  17 │       containers:
  18 │       - name: kv-novnc
  19 │         image: ghcr.io/scog/kubevirt-novnc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             port: 8001
  24 └             path: /
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kv-novnc in deployment kv-novnc (namespace: kubevirt) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 virtvnc2_4.yaml:18-30
────────────────────────────────────────
  18 ┌       - name: kv-novnc
  19 │         image: ghcr.io/scog/kubevirt-novnc:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         livenessProbe:
  22 │           httpGet:
  23 │             port: 8001
  24 │             path: /
  25 │             scheme: HTTP
  26 └           failureThreshold: 30
  ..   
────────────────────────────────────────



virtvnc_4.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'virtvnc' of Deployment 'virtvnc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 virtvnc_4.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: virtvnc
  24 │         image: quay.io/samblade/virtvnc:v0.1
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             port: 8001
  28 │             path: /
  29 │             scheme: HTTP
  30 │           failureThreshold: 30
  31 └           initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'virtvnc' of Deployment 'virtvnc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 virtvnc_4.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: virtvnc
  24 │         image: quay.io/samblade/virtvnc:v0.1
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             port: 8001
  28 │             path: /
  29 │             scheme: HTTP
  30 │           failureThreshold: 30
  31 └           initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'virtvnc' of 'deployment' 'virtvnc' in 'kubevirt' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 virtvnc_4.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: virtvnc
  24 │         image: quay.io/samblade/virtvnc:v0.1
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             port: 8001
  28 │             path: /
  29 │             scheme: HTTP
  30 │           failureThreshold: 30
  31 └           initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'virtvnc' of Deployment 'virtvnc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 virtvnc_4.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: virtvnc
  24 │         image: quay.io/samblade/virtvnc:v0.1
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             port: 8001
  28 │             path: /
  29 │             scheme: HTTP
  30 │           failureThreshold: 30
  31 └           initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'virtvnc' of Deployment 'virtvnc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 virtvnc_4.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: virtvnc
  24 │         image: quay.io/samblade/virtvnc:v0.1
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             port: 8001
  28 │             path: /
  29 │             scheme: HTTP
  30 │           failureThreshold: 30
  31 └           initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'virtvnc' of Deployment 'virtvnc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 virtvnc_4.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: virtvnc
  24 │         image: quay.io/samblade/virtvnc:v0.1
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             port: 8001
  28 │             path: /
  29 │             scheme: HTTP
  30 │           failureThreshold: 30
  31 └           initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'virtvnc' of Deployment 'virtvnc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 virtvnc_4.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: virtvnc
  24 │         image: quay.io/samblade/virtvnc:v0.1
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             port: 8001
  28 │             path: /
  29 │             scheme: HTTP
  30 │           failureThreshold: 30
  31 └           initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'virtvnc' of Deployment 'virtvnc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 virtvnc_4.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: virtvnc
  24 │         image: quay.io/samblade/virtvnc:v0.1
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             port: 8001
  28 │             path: /
  29 │             scheme: HTTP
  30 │           failureThreshold: 30
  31 └           initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'virtvnc' of Deployment 'virtvnc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 virtvnc_4.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: virtvnc
  24 │         image: quay.io/samblade/virtvnc:v0.1
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             port: 8001
  28 │             path: /
  29 │             scheme: HTTP
  30 │           failureThreshold: 30
  31 └           initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'virtvnc' of Deployment 'virtvnc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 virtvnc_4.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: virtvnc
  24 │         image: quay.io/samblade/virtvnc:v0.1
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             port: 8001
  28 │             path: /
  29 │             scheme: HTTP
  30 │           failureThreshold: 30
  31 └           initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'virtvnc' of Deployment 'virtvnc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 virtvnc_4.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: virtvnc
  24 │         image: quay.io/samblade/virtvnc:v0.1
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             port: 8001
  28 │             path: /
  29 │             scheme: HTTP
  30 │           failureThreshold: 30
  31 └           initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 virtvnc_4.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: virtvnc
  24 │         image: quay.io/samblade/virtvnc:v0.1
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             port: 8001
  28 │             path: /
  29 │             scheme: HTTP
  30 │           failureThreshold: 30
  31 └           initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "virtvnc" of deployment "virtvnc" in "kubevirt" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 virtvnc_4.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: virtvnc
  24 │         image: quay.io/samblade/virtvnc:v0.1
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             port: 8001
  28 │             path: /
  29 │             scheme: HTTP
  30 │           failureThreshold: 30
  31 └           initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 virtvnc_4.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: virtvnc
  24 │         image: quay.io/samblade/virtvnc:v0.1
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             port: 8001
  28 │             path: /
  29 │             scheme: HTTP
  30 │           failureThreshold: 30
  31 └           initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container virtvnc in kubevirt namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 virtvnc_4.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: virtvnc
  24 │         image: quay.io/samblade/virtvnc:v0.1
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             port: 8001
  28 │             path: /
  29 │             scheme: HTTP
  30 │           failureThreshold: 30
  31 └           initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment virtvnc in kubevirt namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 virtvnc_4.yaml:16-34
────────────────────────────────────────
  16 ┌       serviceAccountName: virtvnc
  17 │       tolerations:
  18 │       - key: node-role.kubernetes.io/master
  19 │         operator: Equal
  20 │         value: ''
  21 │         effect: NoSchedule
  22 │       containers:
  23 │       - name: virtvnc
  24 └         image: quay.io/samblade/virtvnc:v0.1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container virtvnc in deployment virtvnc (namespace: kubevirt) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 virtvnc_4.yaml:23-34
────────────────────────────────────────
  23 ┌       - name: virtvnc
  24 │         image: quay.io/samblade/virtvnc:v0.1
  25 │         livenessProbe:
  26 │           httpGet:
  27 │             port: 8001
  28 │             path: /
  29 │             scheme: HTTP
  30 │           failureThreshold: 30
  31 └           initialDelaySeconds: 30
  ..   
────────────────────────────────────────



visit-cnt-stfs1_1.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stfs-container' of StatefulSet 'visit-cnt-stfs' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 visit-cnt-stfs1_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: stfs-container
  18 │         image: dbgurum/mynode:fc.stfs
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8080
  22 │         volumeMounts:
  23 │         - name: data
  24 └           mountPath: /var/data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stfs-container' of StatefulSet 'visit-cnt-stfs' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 visit-cnt-stfs1_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: stfs-container
  18 │         image: dbgurum/mynode:fc.stfs
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8080
  22 │         volumeMounts:
  23 │         - name: data
  24 └           mountPath: /var/data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stfs-container' of 'statefulset' 'visit-cnt-stfs' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 visit-cnt-stfs1_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: stfs-container
  18 │         image: dbgurum/mynode:fc.stfs
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8080
  22 │         volumeMounts:
  23 │         - name: data
  24 └           mountPath: /var/data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stfs-container' of StatefulSet 'visit-cnt-stfs' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 visit-cnt-stfs1_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: stfs-container
  18 │         image: dbgurum/mynode:fc.stfs
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8080
  22 │         volumeMounts:
  23 │         - name: data
  24 └           mountPath: /var/data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stfs-container' of StatefulSet 'visit-cnt-stfs' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 visit-cnt-stfs1_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: stfs-container
  18 │         image: dbgurum/mynode:fc.stfs
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8080
  22 │         volumeMounts:
  23 │         - name: data
  24 └           mountPath: /var/data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stfs-container' of StatefulSet 'visit-cnt-stfs' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 visit-cnt-stfs1_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: stfs-container
  18 │         image: dbgurum/mynode:fc.stfs
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8080
  22 │         volumeMounts:
  23 │         - name: data
  24 └           mountPath: /var/data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stfs-container' of StatefulSet 'visit-cnt-stfs' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 visit-cnt-stfs1_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: stfs-container
  18 │         image: dbgurum/mynode:fc.stfs
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8080
  22 │         volumeMounts:
  23 │         - name: data
  24 └           mountPath: /var/data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stfs-container' of StatefulSet 'visit-cnt-stfs' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 visit-cnt-stfs1_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: stfs-container
  18 │         image: dbgurum/mynode:fc.stfs
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8080
  22 │         volumeMounts:
  23 │         - name: data
  24 └           mountPath: /var/data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stfs-container' of StatefulSet 'visit-cnt-stfs' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 visit-cnt-stfs1_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: stfs-container
  18 │         image: dbgurum/mynode:fc.stfs
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8080
  22 │         volumeMounts:
  23 │         - name: data
  24 └           mountPath: /var/data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stfs-container' of StatefulSet 'visit-cnt-stfs' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 visit-cnt-stfs1_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: stfs-container
  18 │         image: dbgurum/mynode:fc.stfs
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8080
  22 │         volumeMounts:
  23 │         - name: data
  24 └           mountPath: /var/data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stfs-container' of StatefulSet 'visit-cnt-stfs' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 visit-cnt-stfs1_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: stfs-container
  18 │         image: dbgurum/mynode:fc.stfs
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8080
  22 │         volumeMounts:
  23 │         - name: data
  24 └           mountPath: /var/data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 visit-cnt-stfs1_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: stfs-container
  18 │         image: dbgurum/mynode:fc.stfs
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8080
  22 │         volumeMounts:
  23 │         - name: data
  24 └           mountPath: /var/data
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stfs-container" of statefulset "visit-cnt-stfs" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 visit-cnt-stfs1_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: stfs-container
  18 │         image: dbgurum/mynode:fc.stfs
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8080
  22 │         volumeMounts:
  23 │         - name: data
  24 └           mountPath: /var/data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 visit-cnt-stfs1_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: stfs-container
  18 │         image: dbgurum/mynode:fc.stfs
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8080
  22 │         volumeMounts:
  23 │         - name: data
  24 └           mountPath: /var/data
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset visit-cnt-stfs in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 visit-cnt-stfs1_1.yaml:4
────────────────────────────────────────
   4 [   name: visit-cnt-stfs
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container visit-cnt-stfs in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 visit-cnt-stfs1_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: stfs-container
  18 │         image: dbgurum/mynode:fc.stfs
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8080
  22 │         volumeMounts:
  23 │         - name: data
  24 └           mountPath: /var/data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset visit-cnt-stfs in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 visit-cnt-stfs1_1.yaml:16-24
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: stfs-container
  18 │         image: dbgurum/mynode:fc.stfs
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8080
  22 │         volumeMounts:
  23 │         - name: data
  24 └           mountPath: /var/data
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stfs-container in statefulset visit-cnt-stfs (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 visit-cnt-stfs1_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: stfs-container
  18 │         image: dbgurum/mynode:fc.stfs
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8080
  22 │         volumeMounts:
  23 │         - name: data
  24 └           mountPath: /var/data
────────────────────────────────────────



visit-cnt-stfs_1.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'stfs-container' of StatefulSet 'visit-cnt-stfs' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 visit-cnt-stfs_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: stfs-container
  18 │         image: dbgurum/mynode:fc.stfs
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8080
  22 │         volumeMounts:
  23 │         - name: data
  24 └           mountPath: /var/data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'stfs-container' of StatefulSet 'visit-cnt-stfs' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 visit-cnt-stfs_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: stfs-container
  18 │         image: dbgurum/mynode:fc.stfs
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8080
  22 │         volumeMounts:
  23 │         - name: data
  24 └           mountPath: /var/data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'stfs-container' of 'statefulset' 'visit-cnt-stfs' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 visit-cnt-stfs_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: stfs-container
  18 │         image: dbgurum/mynode:fc.stfs
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8080
  22 │         volumeMounts:
  23 │         - name: data
  24 └           mountPath: /var/data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'stfs-container' of StatefulSet 'visit-cnt-stfs' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 visit-cnt-stfs_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: stfs-container
  18 │         image: dbgurum/mynode:fc.stfs
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8080
  22 │         volumeMounts:
  23 │         - name: data
  24 └           mountPath: /var/data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'stfs-container' of StatefulSet 'visit-cnt-stfs' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 visit-cnt-stfs_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: stfs-container
  18 │         image: dbgurum/mynode:fc.stfs
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8080
  22 │         volumeMounts:
  23 │         - name: data
  24 └           mountPath: /var/data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'stfs-container' of StatefulSet 'visit-cnt-stfs' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 visit-cnt-stfs_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: stfs-container
  18 │         image: dbgurum/mynode:fc.stfs
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8080
  22 │         volumeMounts:
  23 │         - name: data
  24 └           mountPath: /var/data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'stfs-container' of StatefulSet 'visit-cnt-stfs' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 visit-cnt-stfs_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: stfs-container
  18 │         image: dbgurum/mynode:fc.stfs
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8080
  22 │         volumeMounts:
  23 │         - name: data
  24 └           mountPath: /var/data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'stfs-container' of StatefulSet 'visit-cnt-stfs' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 visit-cnt-stfs_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: stfs-container
  18 │         image: dbgurum/mynode:fc.stfs
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8080
  22 │         volumeMounts:
  23 │         - name: data
  24 └           mountPath: /var/data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'stfs-container' of StatefulSet 'visit-cnt-stfs' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 visit-cnt-stfs_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: stfs-container
  18 │         image: dbgurum/mynode:fc.stfs
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8080
  22 │         volumeMounts:
  23 │         - name: data
  24 └           mountPath: /var/data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'stfs-container' of StatefulSet 'visit-cnt-stfs' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 visit-cnt-stfs_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: stfs-container
  18 │         image: dbgurum/mynode:fc.stfs
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8080
  22 │         volumeMounts:
  23 │         - name: data
  24 └           mountPath: /var/data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'stfs-container' of StatefulSet 'visit-cnt-stfs' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 visit-cnt-stfs_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: stfs-container
  18 │         image: dbgurum/mynode:fc.stfs
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8080
  22 │         volumeMounts:
  23 │         - name: data
  24 └           mountPath: /var/data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 visit-cnt-stfs_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: stfs-container
  18 │         image: dbgurum/mynode:fc.stfs
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8080
  22 │         volumeMounts:
  23 │         - name: data
  24 └           mountPath: /var/data
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "stfs-container" of statefulset "visit-cnt-stfs" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 visit-cnt-stfs_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: stfs-container
  18 │         image: dbgurum/mynode:fc.stfs
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8080
  22 │         volumeMounts:
  23 │         - name: data
  24 └           mountPath: /var/data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 visit-cnt-stfs_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: stfs-container
  18 │         image: dbgurum/mynode:fc.stfs
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8080
  22 │         volumeMounts:
  23 │         - name: data
  24 └           mountPath: /var/data
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset visit-cnt-stfs in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 visit-cnt-stfs_1.yaml:4
────────────────────────────────────────
   4 [   name: visit-cnt-stfs
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container visit-cnt-stfs in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 visit-cnt-stfs_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: stfs-container
  18 │         image: dbgurum/mynode:fc.stfs
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8080
  22 │         volumeMounts:
  23 │         - name: data
  24 └           mountPath: /var/data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset visit-cnt-stfs in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 visit-cnt-stfs_1.yaml:16-24
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: stfs-container
  18 │         image: dbgurum/mynode:fc.stfs
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8080
  22 │         volumeMounts:
  23 │         - name: data
  24 └           mountPath: /var/data
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container stfs-container in statefulset visit-cnt-stfs (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 visit-cnt-stfs_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: stfs-container
  18 │         image: dbgurum/mynode:fc.stfs
  19 │         ports:
  20 │         - name: http
  21 │           containerPort: 8080
  22 │         volumeMounts:
  23 │         - name: data
  24 └           mountPath: /var/data
────────────────────────────────────────



visit-counter-app-database-migration-job.yaml (kubernetes)
==========================================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'visit-counter-app-database-migrations' of Job 'visit-counter-app-database-migration-job' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 visit-counter-app-database-migration-job.yaml:11-26
────────────────────────────────────────
  11 ┌         - name: visit-counter-app-database-migrations
  12 │           image: visit-counter-app-database-migrations:latest
  13 │           imagePullPolicy: Never
  14 │           env:
  15 │             - name: FLYWAY_USER
  16 │               valueFrom:
  17 │                 secretKeyRef:
  18 │                   name: visit-counter-app-database-cluster-app
  19 └                   key: username
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'visit-counter-app-database-migrations' of Job 'visit-counter-app-database-migration-job' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 visit-counter-app-database-migration-job.yaml:11-26
────────────────────────────────────────
  11 ┌         - name: visit-counter-app-database-migrations
  12 │           image: visit-counter-app-database-migrations:latest
  13 │           imagePullPolicy: Never
  14 │           env:
  15 │             - name: FLYWAY_USER
  16 │               valueFrom:
  17 │                 secretKeyRef:
  18 │                   name: visit-counter-app-database-cluster-app
  19 └                   key: username
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'visit-counter-app-database-migrations' of 'job' 'visit-counter-app-database-migration-job' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 visit-counter-app-database-migration-job.yaml:11-26
────────────────────────────────────────
  11 ┌         - name: visit-counter-app-database-migrations
  12 │           image: visit-counter-app-database-migrations:latest
  13 │           imagePullPolicy: Never
  14 │           env:
  15 │             - name: FLYWAY_USER
  16 │               valueFrom:
  17 │                 secretKeyRef:
  18 │                   name: visit-counter-app-database-cluster-app
  19 └                   key: username
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'visit-counter-app-database-migrations' of Job 'visit-counter-app-database-migration-job' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 visit-counter-app-database-migration-job.yaml:11-26
────────────────────────────────────────
  11 ┌         - name: visit-counter-app-database-migrations
  12 │           image: visit-counter-app-database-migrations:latest
  13 │           imagePullPolicy: Never
  14 │           env:
  15 │             - name: FLYWAY_USER
  16 │               valueFrom:
  17 │                 secretKeyRef:
  18 │                   name: visit-counter-app-database-cluster-app
  19 └                   key: username
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'visit-counter-app-database-migrations' of Job 'visit-counter-app-database-migration-job' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 visit-counter-app-database-migration-job.yaml:11-26
────────────────────────────────────────
  11 ┌         - name: visit-counter-app-database-migrations
  12 │           image: visit-counter-app-database-migrations:latest
  13 │           imagePullPolicy: Never
  14 │           env:
  15 │             - name: FLYWAY_USER
  16 │               valueFrom:
  17 │                 secretKeyRef:
  18 │                   name: visit-counter-app-database-cluster-app
  19 └                   key: username
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'visit-counter-app-database-migrations' of Job 'visit-counter-app-database-migration-job' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 visit-counter-app-database-migration-job.yaml:11-26
────────────────────────────────────────
  11 ┌         - name: visit-counter-app-database-migrations
  12 │           image: visit-counter-app-database-migrations:latest
  13 │           imagePullPolicy: Never
  14 │           env:
  15 │             - name: FLYWAY_USER
  16 │               valueFrom:
  17 │                 secretKeyRef:
  18 │                   name: visit-counter-app-database-cluster-app
  19 └                   key: username
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'visit-counter-app-database-migrations' of Job 'visit-counter-app-database-migration-job' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 visit-counter-app-database-migration-job.yaml:11-26
────────────────────────────────────────
  11 ┌         - name: visit-counter-app-database-migrations
  12 │           image: visit-counter-app-database-migrations:latest
  13 │           imagePullPolicy: Never
  14 │           env:
  15 │             - name: FLYWAY_USER
  16 │               valueFrom:
  17 │                 secretKeyRef:
  18 │                   name: visit-counter-app-database-cluster-app
  19 └                   key: username
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'visit-counter-app-database-migrations' of Job 'visit-counter-app-database-migration-job' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 visit-counter-app-database-migration-job.yaml:11-26
────────────────────────────────────────
  11 ┌         - name: visit-counter-app-database-migrations
  12 │           image: visit-counter-app-database-migrations:latest
  13 │           imagePullPolicy: Never
  14 │           env:
  15 │             - name: FLYWAY_USER
  16 │               valueFrom:
  17 │                 secretKeyRef:
  18 │                   name: visit-counter-app-database-cluster-app
  19 └                   key: username
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'visit-counter-app-database-migrations' of Job 'visit-counter-app-database-migration-job' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 visit-counter-app-database-migration-job.yaml:11-26
────────────────────────────────────────
  11 ┌         - name: visit-counter-app-database-migrations
  12 │           image: visit-counter-app-database-migrations:latest
  13 │           imagePullPolicy: Never
  14 │           env:
  15 │             - name: FLYWAY_USER
  16 │               valueFrom:
  17 │                 secretKeyRef:
  18 │                   name: visit-counter-app-database-cluster-app
  19 └                   key: username
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'visit-counter-app-database-migrations' of Job 'visit-counter-app-database-migration-job' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 visit-counter-app-database-migration-job.yaml:11-26
────────────────────────────────────────
  11 ┌         - name: visit-counter-app-database-migrations
  12 │           image: visit-counter-app-database-migrations:latest
  13 │           imagePullPolicy: Never
  14 │           env:
  15 │             - name: FLYWAY_USER
  16 │               valueFrom:
  17 │                 secretKeyRef:
  18 │                   name: visit-counter-app-database-cluster-app
  19 └                   key: username
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'visit-counter-app-database-migrations' of Job 'visit-counter-app-database-migration-job' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 visit-counter-app-database-migration-job.yaml:11-26
────────────────────────────────────────
  11 ┌         - name: visit-counter-app-database-migrations
  12 │           image: visit-counter-app-database-migrations:latest
  13 │           imagePullPolicy: Never
  14 │           env:
  15 │             - name: FLYWAY_USER
  16 │               valueFrom:
  17 │                 secretKeyRef:
  18 │                   name: visit-counter-app-database-cluster-app
  19 └                   key: username
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'visit-counter-app-database-migrations' of Job 'visit-counter-app-database-migration-job' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 visit-counter-app-database-migration-job.yaml:11-26
────────────────────────────────────────
  11 ┌         - name: visit-counter-app-database-migrations
  12 │           image: visit-counter-app-database-migrations:latest
  13 │           imagePullPolicy: Never
  14 │           env:
  15 │             - name: FLYWAY_USER
  16 │               valueFrom:
  17 │                 secretKeyRef:
  18 │                   name: visit-counter-app-database-cluster-app
  19 └                   key: username
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 visit-counter-app-database-migration-job.yaml:11-26
────────────────────────────────────────
  11 ┌         - name: visit-counter-app-database-migrations
  12 │           image: visit-counter-app-database-migrations:latest
  13 │           imagePullPolicy: Never
  14 │           env:
  15 │             - name: FLYWAY_USER
  16 │               valueFrom:
  17 │                 secretKeyRef:
  18 │                   name: visit-counter-app-database-cluster-app
  19 └                   key: username
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "visit-counter-app-database-migrations" of job "visit-counter-app-database-migration-job" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 visit-counter-app-database-migration-job.yaml:11-26
────────────────────────────────────────
  11 ┌         - name: visit-counter-app-database-migrations
  12 │           image: visit-counter-app-database-migrations:latest
  13 │           imagePullPolicy: Never
  14 │           env:
  15 │             - name: FLYWAY_USER
  16 │               valueFrom:
  17 │                 secretKeyRef:
  18 │                   name: visit-counter-app-database-cluster-app
  19 └                   key: username
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 visit-counter-app-database-migration-job.yaml:11-26
────────────────────────────────────────
  11 ┌         - name: visit-counter-app-database-migrations
  12 │           image: visit-counter-app-database-migrations:latest
  13 │           imagePullPolicy: Never
  14 │           env:
  15 │             - name: FLYWAY_USER
  16 │               valueFrom:
  17 │                 secretKeyRef:
  18 │                   name: visit-counter-app-database-cluster-app
  19 └                   key: username
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): job visit-counter-app-database-migration-job in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 visit-counter-app-database-migration-job.yaml:4
────────────────────────────────────────
   4 [   name: visit-counter-app-database-migration-job
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container visit-counter-app-database-migration-job in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 visit-counter-app-database-migration-job.yaml:11-26
────────────────────────────────────────
  11 ┌         - name: visit-counter-app-database-migrations
  12 │           image: visit-counter-app-database-migrations:latest
  13 │           imagePullPolicy: Never
  14 │           env:
  15 │             - name: FLYWAY_USER
  16 │               valueFrom:
  17 │                 secretKeyRef:
  18 │                   name: visit-counter-app-database-cluster-app
  19 └                   key: username
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job visit-counter-app-database-migration-job in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 visit-counter-app-database-migration-job.yaml:10-27
────────────────────────────────────────
  10 ┌       containers:
  11 │         - name: visit-counter-app-database-migrations
  12 │           image: visit-counter-app-database-migrations:latest
  13 │           imagePullPolicy: Never
  14 │           env:
  15 │             - name: FLYWAY_USER
  16 │               valueFrom:
  17 │                 secretKeyRef:
  18 └                   name: visit-counter-app-database-cluster-app
  ..   
────────────────────────────────────────



visit-counter-app-deployment.yaml (kubernetes)
==============================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'visit-counter-app' of Deployment 'visit-counter-app-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 visit-counter-app-deployment.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: visit-counter-app
  18 │           image: visit-counter-app:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7777
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'visit-counter-app' of Deployment 'visit-counter-app-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 visit-counter-app-deployment.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: visit-counter-app
  18 │           image: visit-counter-app:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7777
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'visit-counter-app' of 'deployment' 'visit-counter-app-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 visit-counter-app-deployment.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: visit-counter-app
  18 │           image: visit-counter-app:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7777
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'visit-counter-app' of Deployment 'visit-counter-app-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 visit-counter-app-deployment.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: visit-counter-app
  18 │           image: visit-counter-app:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7777
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'visit-counter-app' of Deployment 'visit-counter-app-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 visit-counter-app-deployment.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: visit-counter-app
  18 │           image: visit-counter-app:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7777
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'visit-counter-app' of Deployment 'visit-counter-app-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 visit-counter-app-deployment.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: visit-counter-app
  18 │           image: visit-counter-app:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7777
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'visit-counter-app' of Deployment 'visit-counter-app-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 visit-counter-app-deployment.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: visit-counter-app
  18 │           image: visit-counter-app:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7777
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'visit-counter-app' of Deployment 'visit-counter-app-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 visit-counter-app-deployment.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: visit-counter-app
  18 │           image: visit-counter-app:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7777
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'visit-counter-app' of Deployment 'visit-counter-app-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 visit-counter-app-deployment.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: visit-counter-app
  18 │           image: visit-counter-app:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7777
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'visit-counter-app' of Deployment 'visit-counter-app-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 visit-counter-app-deployment.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: visit-counter-app
  18 │           image: visit-counter-app:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7777
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 visit-counter-app-deployment.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: visit-counter-app
  18 │           image: visit-counter-app:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7777
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "visit-counter-app" of deployment "visit-counter-app-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 visit-counter-app-deployment.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: visit-counter-app
  18 │           image: visit-counter-app:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7777
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 visit-counter-app-deployment.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: visit-counter-app
  18 │           image: visit-counter-app:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7777
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment visit-counter-app-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 visit-counter-app-deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: visit-counter-app-deployment
   5 │   labels:
   6 └     app: visit-counter-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container visit-counter-app-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 visit-counter-app-deployment.yaml:17-33
────────────────────────────────────────
  17 ┌         - name: visit-counter-app
  18 │           image: visit-counter-app:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7777
  22 │           resources:
  23 │             requests:
  24 │               cpu: 100m
  25 └             limits:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment visit-counter-app-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 visit-counter-app-deployment.yaml:16-33
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: visit-counter-app
  18 │           image: visit-counter-app:latest
  19 │           imagePullPolicy: Never
  20 │           ports:
  21 │             - containerPort: 7777
  22 │           resources:
  23 │             requests:
  24 └               cpu: 100m
  ..   
────────────────────────────────────────



viz2code.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'tango-viz2code' of Deployment 'viz2code' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 viz2code.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: tango-viz2code
  17 │         image: tango_viz2code
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'tango-viz2code' of Deployment 'viz2code' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 viz2code.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: tango-viz2code
  17 │         image: tango_viz2code
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'tango-viz2code' of 'deployment' 'viz2code' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 viz2code.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: tango-viz2code
  17 │         image: tango_viz2code
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'tango-viz2code' of Deployment 'viz2code' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 viz2code.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: tango-viz2code
  17 │         image: tango_viz2code
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'tango-viz2code' of Deployment 'viz2code' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 viz2code.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: tango-viz2code
  17 │         image: tango_viz2code
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'tango-viz2code' of Deployment 'viz2code' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 viz2code.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: tango-viz2code
  17 │         image: tango_viz2code
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'tango-viz2code' of Deployment 'viz2code' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 viz2code.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: tango-viz2code
  17 │         image: tango_viz2code
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'tango-viz2code' of Deployment 'viz2code' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 viz2code.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: tango-viz2code
  17 │         image: tango_viz2code
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'tango-viz2code' of Deployment 'viz2code' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 viz2code.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: tango-viz2code
  17 │         image: tango_viz2code
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'tango-viz2code' of Deployment 'viz2code' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 viz2code.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: tango-viz2code
  17 │         image: tango_viz2code
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 viz2code.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: tango-viz2code
  17 │         image: tango_viz2code
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "tango-viz2code" of deployment "viz2code" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 viz2code.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: tango-viz2code
  17 │         image: tango_viz2code
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 viz2code.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: tango-viz2code
  17 │         image: tango_viz2code
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment viz2code in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 viz2code.yaml:4
────────────────────────────────────────
   4 [   name: viz2code
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container viz2code in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 viz2code.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: tango-viz2code
  17 │         image: tango_viz2code
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment viz2code in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 viz2code.yaml:14-45
────────────────────────────────────────
  14 ┌       nodeName: etri-1
  15 │       containers:
  16 │       - name: tango-viz2code
  17 │         image: tango_viz2code
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 └             memory: 2048Mi
  ..   
────────────────────────────────────────



viz2code1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'tango-viz2code' of Deployment 'viz2code' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 viz2code1.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: tango-viz2code
  17 │         image: tango_viz2code
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'tango-viz2code' of Deployment 'viz2code' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 viz2code1.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: tango-viz2code
  17 │         image: tango_viz2code
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'tango-viz2code' of 'deployment' 'viz2code' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 viz2code1.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: tango-viz2code
  17 │         image: tango_viz2code
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'tango-viz2code' of Deployment 'viz2code' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 viz2code1.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: tango-viz2code
  17 │         image: tango_viz2code
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'tango-viz2code' of Deployment 'viz2code' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 viz2code1.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: tango-viz2code
  17 │         image: tango_viz2code
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'tango-viz2code' of Deployment 'viz2code' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 viz2code1.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: tango-viz2code
  17 │         image: tango_viz2code
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'tango-viz2code' of Deployment 'viz2code' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 viz2code1.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: tango-viz2code
  17 │         image: tango_viz2code
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'tango-viz2code' of Deployment 'viz2code' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 viz2code1.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: tango-viz2code
  17 │         image: tango_viz2code
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'tango-viz2code' of Deployment 'viz2code' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 viz2code1.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: tango-viz2code
  17 │         image: tango_viz2code
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'tango-viz2code' of Deployment 'viz2code' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 viz2code1.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: tango-viz2code
  17 │         image: tango_viz2code
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 viz2code1.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: tango-viz2code
  17 │         image: tango_viz2code
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "tango-viz2code" of deployment "viz2code" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 viz2code1.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: tango-viz2code
  17 │         image: tango_viz2code
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 viz2code1.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: tango-viz2code
  17 │         image: tango_viz2code
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment viz2code in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 viz2code1.yaml:4
────────────────────────────────────────
   4 [   name: viz2code
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container viz2code in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 viz2code1.yaml:16-37
────────────────────────────────────────
  16 ┌       - name: tango-viz2code
  17 │         image: tango_viz2code
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 │             memory: 2048Mi
  23 │         volumeMounts:
  24 └         - mountPath: /source
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment viz2code in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 viz2code1.yaml:14-45
────────────────────────────────────────
  14 ┌       nodeName: etri-1
  15 │       containers:
  16 │       - name: tango-viz2code
  17 │         image: tango_viz2code
  18 │         imagePullPolicy: Never
  19 │         resources:
  20 │           limits:
  21 │             cpu: 500m
  22 └             memory: 2048Mi
  ..   
────────────────────────────────────────



vk7b.yaml (kubernetes)
======================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'eureka' of StatefulSet 'eureka' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vk7b.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: eureka
  20 │         image: 123joker/serviceregistory:0.0.1
  21 │         ports:
  22 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'eureka' of StatefulSet 'eureka' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vk7b.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: eureka
  20 │         image: 123joker/serviceregistory:0.0.1
  21 │         ports:
  22 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'eureka' of 'statefulset' 'eureka' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vk7b.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: eureka
  20 │         image: 123joker/serviceregistory:0.0.1
  21 │         ports:
  22 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'eureka' of StatefulSet 'eureka' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vk7b.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: eureka
  20 │         image: 123joker/serviceregistory:0.0.1
  21 │         ports:
  22 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'eureka' of StatefulSet 'eureka' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vk7b.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: eureka
  20 │         image: 123joker/serviceregistory:0.0.1
  21 │         ports:
  22 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'eureka' of StatefulSet 'eureka' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vk7b.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: eureka
  20 │         image: 123joker/serviceregistory:0.0.1
  21 │         ports:
  22 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'eureka' of StatefulSet 'eureka' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vk7b.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: eureka
  20 │         image: 123joker/serviceregistory:0.0.1
  21 │         ports:
  22 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'eureka' of StatefulSet 'eureka' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vk7b.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: eureka
  20 │         image: 123joker/serviceregistory:0.0.1
  21 │         ports:
  22 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'eureka' of StatefulSet 'eureka' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vk7b.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: eureka
  20 │         image: 123joker/serviceregistory:0.0.1
  21 │         ports:
  22 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'eureka' of StatefulSet 'eureka' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vk7b.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: eureka
  20 │         image: 123joker/serviceregistory:0.0.1
  21 │         ports:
  22 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'eureka' of StatefulSet 'eureka' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vk7b.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: eureka
  20 │         image: 123joker/serviceregistory:0.0.1
  21 │         ports:
  22 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vk7b.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: eureka
  20 │         image: 123joker/serviceregistory:0.0.1
  21 │         ports:
  22 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "eureka" of statefulset "eureka" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vk7b.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: eureka
  20 │         image: 123joker/serviceregistory:0.0.1
  21 │         ports:
  22 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vk7b.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: eureka
  20 │         image: 123joker/serviceregistory:0.0.1
  21 │         ports:
  22 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset eureka in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 vk7b.yaml:4-5
────────────────────────────────────────
   4 ┌   name: eureka
   5 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container eureka in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vk7b.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: eureka
  20 │         image: 123joker/serviceregistory:0.0.1
  21 │         ports:
  22 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset eureka in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vk7b.yaml:17-22
────────────────────────────────────────
  17 ┌       terminationGracePeriodSeconds: 10
  18 │       containers:
  19 │       - name: eureka
  20 │         image: 123joker/serviceregistory:0.0.1
  21 │         ports:
  22 └         - containerPort: 8761
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container eureka in statefulset eureka (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vk7b.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: eureka
  20 │         image: 123joker/serviceregistory:0.0.1
  21 │         ports:
  22 └         - containerPort: 8761
────────────────────────────────────────



vllm_dep.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'vllm-container' of Deployment 'vllm' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vllm_dep.yaml:18-36
────────────────────────────────────────
  18 ┌       - name: vllm-container
  19 │         image: quay.io/chenw615/vllm_dra:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 8000
  23 │         env:
  24 │         - name: HUGGING_FACE_HUB_TOKEN
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vllm-container' of Deployment 'vllm' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vllm_dep.yaml:18-36
────────────────────────────────────────
  18 ┌       - name: vllm-container
  19 │         image: quay.io/chenw615/vllm_dra:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 8000
  23 │         env:
  24 │         - name: HUGGING_FACE_HUB_TOKEN
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vllm-container' of 'deployment' 'vllm' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vllm_dep.yaml:18-36
────────────────────────────────────────
  18 ┌       - name: vllm-container
  19 │         image: quay.io/chenw615/vllm_dra:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 8000
  23 │         env:
  24 │         - name: HUGGING_FACE_HUB_TOKEN
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vllm-container' of Deployment 'vllm' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vllm_dep.yaml:18-36
────────────────────────────────────────
  18 ┌       - name: vllm-container
  19 │         image: quay.io/chenw615/vllm_dra:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 8000
  23 │         env:
  24 │         - name: HUGGING_FACE_HUB_TOKEN
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vllm-container' of Deployment 'vllm' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vllm_dep.yaml:18-36
────────────────────────────────────────
  18 ┌       - name: vllm-container
  19 │         image: quay.io/chenw615/vllm_dra:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 8000
  23 │         env:
  24 │         - name: HUGGING_FACE_HUB_TOKEN
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vllm-container' of Deployment 'vllm' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 vllm_dep.yaml:18-36
────────────────────────────────────────
  18 ┌       - name: vllm-container
  19 │         image: quay.io/chenw615/vllm_dra:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 8000
  23 │         env:
  24 │         - name: HUGGING_FACE_HUB_TOKEN
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vllm-container' of Deployment 'vllm' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vllm_dep.yaml:18-36
────────────────────────────────────────
  18 ┌       - name: vllm-container
  19 │         image: quay.io/chenw615/vllm_dra:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 8000
  23 │         env:
  24 │         - name: HUGGING_FACE_HUB_TOKEN
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vllm-container' of Deployment 'vllm' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vllm_dep.yaml:18-36
────────────────────────────────────────
  18 ┌       - name: vllm-container
  19 │         image: quay.io/chenw615/vllm_dra:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 8000
  23 │         env:
  24 │         - name: HUGGING_FACE_HUB_TOKEN
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vllm-container' of Deployment 'vllm' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vllm_dep.yaml:18-36
────────────────────────────────────────
  18 ┌       - name: vllm-container
  19 │         image: quay.io/chenw615/vllm_dra:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 8000
  23 │         env:
  24 │         - name: HUGGING_FACE_HUB_TOKEN
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vllm-container' of Deployment 'vllm' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vllm_dep.yaml:18-36
────────────────────────────────────────
  18 ┌       - name: vllm-container
  19 │         image: quay.io/chenw615/vllm_dra:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 8000
  23 │         env:
  24 │         - name: HUGGING_FACE_HUB_TOKEN
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vllm-container' of Deployment 'vllm' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vllm_dep.yaml:18-36
────────────────────────────────────────
  18 ┌       - name: vllm-container
  19 │         image: quay.io/chenw615/vllm_dra:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 8000
  23 │         env:
  24 │         - name: HUGGING_FACE_HUB_TOKEN
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vllm-container' of Deployment 'vllm' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vllm_dep.yaml:18-36
────────────────────────────────────────
  18 ┌       - name: vllm-container
  19 │         image: quay.io/chenw615/vllm_dra:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 8000
  23 │         env:
  24 │         - name: HUGGING_FACE_HUB_TOKEN
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vllm_dep.yaml:18-36
────────────────────────────────────────
  18 ┌       - name: vllm-container
  19 │         image: quay.io/chenw615/vllm_dra:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 8000
  23 │         env:
  24 │         - name: HUGGING_FACE_HUB_TOKEN
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vllm-container" of deployment "vllm" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vllm_dep.yaml:18-36
────────────────────────────────────────
  18 ┌       - name: vllm-container
  19 │         image: quay.io/chenw615/vllm_dra:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 8000
  23 │         env:
  24 │         - name: HUGGING_FACE_HUB_TOKEN
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vllm_dep.yaml:18-36
────────────────────────────────────────
  18 ┌       - name: vllm-container
  19 │         image: quay.io/chenw615/vllm_dra:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 8000
  23 │         env:
  24 │         - name: HUGGING_FACE_HUB_TOKEN
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vllm in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 vllm_dep.yaml:4-6
────────────────────────────────────────
   4 ┌   name: vllm
   5 │   labels:
   6 └     app: gpu-test1-vllm
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vllm in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vllm_dep.yaml:18-36
────────────────────────────────────────
  18 ┌       - name: vllm-container
  19 │         image: quay.io/chenw615/vllm_dra:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 8000
  23 │         env:
  24 │         - name: HUGGING_FACE_HUB_TOKEN
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vllm in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vllm_dep.yaml:17-40
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: vllm-container
  19 │         image: quay.io/chenw615/vllm_dra:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 8000
  23 │         env:
  24 │         - name: HUGGING_FACE_HUB_TOKEN
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vllm-container in deployment vllm (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vllm_dep.yaml:18-36
────────────────────────────────────────
  18 ┌       - name: vllm-container
  19 │         image: quay.io/chenw615/vllm_dra:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         ports:
  22 │         - containerPort: 8000
  23 │         env:
  24 │         - name: HUGGING_FACE_HUB_TOKEN
  25 │           valueFrom:
  26 └             secretKeyRef:
  ..   
────────────────────────────────────────



vlmcsd1_1.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 4, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'vlmcsd' of Deployment 'vlmcsd' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vlmcsd1_1.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: vlmcsd
  20 │         image: mikolatero/vlmcsd:latest
  21 │         resources:
  22 │           requests:
  23 │             memory: 1024Mi
  24 │             cpu: 1024m
  25 │           limits:
  26 │             memory: 1024Mi
  27 └             cpu: 1024m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vlmcsd' of 'deployment' 'vlmcsd' in 'vlmcsd' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vlmcsd1_1.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: vlmcsd
  20 │         image: mikolatero/vlmcsd:latest
  21 │         resources:
  22 │           requests:
  23 │             memory: 1024Mi
  24 │             cpu: 1024m
  25 │           limits:
  26 │             memory: 1024Mi
  27 └             cpu: 1024m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vlmcsd' of Deployment 'vlmcsd' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vlmcsd1_1.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: vlmcsd
  20 │         image: mikolatero/vlmcsd:latest
  21 │         resources:
  22 │           requests:
  23 │             memory: 1024Mi
  24 │             cpu: 1024m
  25 │           limits:
  26 │             memory: 1024Mi
  27 └             cpu: 1024m
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vlmcsd' of Deployment 'vlmcsd' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 vlmcsd1_1.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: vlmcsd
  20 │         image: mikolatero/vlmcsd:latest
  21 │         resources:
  22 │           requests:
  23 │             memory: 1024Mi
  24 │             cpu: 1024m
  25 │           limits:
  26 │             memory: 1024Mi
  27 └             cpu: 1024m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vlmcsd1_1.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: vlmcsd
  20 │         image: mikolatero/vlmcsd:latest
  21 │         resources:
  22 │           requests:
  23 │             memory: 1024Mi
  24 │             cpu: 1024m
  25 │           limits:
  26 │             memory: 1024Mi
  27 └             cpu: 1024m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vlmcsd" of deployment "vlmcsd" in "vlmcsd" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vlmcsd1_1.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: vlmcsd
  20 │         image: mikolatero/vlmcsd:latest
  21 │         resources:
  22 │           requests:
  23 │             memory: 1024Mi
  24 │             cpu: 1024m
  25 │           limits:
  26 │             memory: 1024Mi
  27 └             cpu: 1024m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vlmcsd1_1.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: vlmcsd
  20 │         image: mikolatero/vlmcsd:latest
  21 │         resources:
  22 │           requests:
  23 │             memory: 1024Mi
  24 │             cpu: 1024m
  25 │           limits:
  26 │             memory: 1024Mi
  27 └             cpu: 1024m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vlmcsd in vlmcsd namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vlmcsd1_1.yaml:18-34
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: vlmcsd
  20 │         image: mikolatero/vlmcsd:latest
  21 │         resources:
  22 │           requests:
  23 │             memory: 1024Mi
  24 │             cpu: 1024m
  25 │           limits:
  26 └             memory: 1024Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vlmcsd in deployment vlmcsd (namespace: vlmcsd) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vlmcsd1_1.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: vlmcsd
  20 │         image: mikolatero/vlmcsd:latest
  21 │         resources:
  22 │           requests:
  23 │             memory: 1024Mi
  24 │             cpu: 1024m
  25 │           limits:
  26 │             memory: 1024Mi
  27 └             cpu: 1024m
  ..   
────────────────────────────────────────



vlmcsd3_1.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 105, FAILURES: 9)
Failures: 9 (UNKNOWN: 0, LOW: 4, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'vlmcsd' of Deployment 'vlmcsd' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vlmcsd3_1.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: vlmcsd
  20 │         image: mikolatero/vlmcsd:latest
  21 │         resources:
  22 │           requests:
  23 │             memory: 1024Mi
  24 │             cpu: 1024m
  25 │           limits:
  26 │             memory: 1024Mi
  27 └             cpu: 1024m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vlmcsd' of 'deployment' 'vlmcsd' in 'vlmcsd' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vlmcsd3_1.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: vlmcsd
  20 │         image: mikolatero/vlmcsd:latest
  21 │         resources:
  22 │           requests:
  23 │             memory: 1024Mi
  24 │             cpu: 1024m
  25 │           limits:
  26 │             memory: 1024Mi
  27 └             cpu: 1024m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vlmcsd' of Deployment 'vlmcsd' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vlmcsd3_1.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: vlmcsd
  20 │         image: mikolatero/vlmcsd:latest
  21 │         resources:
  22 │           requests:
  23 │             memory: 1024Mi
  24 │             cpu: 1024m
  25 │           limits:
  26 │             memory: 1024Mi
  27 └             cpu: 1024m
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'vlmcsd' of Deployment 'vlmcsd' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 vlmcsd3_1.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: vlmcsd
  20 │         image: mikolatero/vlmcsd:latest
  21 │         resources:
  22 │           requests:
  23 │             memory: 1024Mi
  24 │             cpu: 1024m
  25 │           limits:
  26 │             memory: 1024Mi
  27 └             cpu: 1024m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vlmcsd3_1.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: vlmcsd
  20 │         image: mikolatero/vlmcsd:latest
  21 │         resources:
  22 │           requests:
  23 │             memory: 1024Mi
  24 │             cpu: 1024m
  25 │           limits:
  26 │             memory: 1024Mi
  27 └             cpu: 1024m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vlmcsd" of deployment "vlmcsd" in "vlmcsd" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vlmcsd3_1.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: vlmcsd
  20 │         image: mikolatero/vlmcsd:latest
  21 │         resources:
  22 │           requests:
  23 │             memory: 1024Mi
  24 │             cpu: 1024m
  25 │           limits:
  26 │             memory: 1024Mi
  27 └             cpu: 1024m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vlmcsd3_1.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: vlmcsd
  20 │         image: mikolatero/vlmcsd:latest
  21 │         resources:
  22 │           requests:
  23 │             memory: 1024Mi
  24 │             cpu: 1024m
  25 │           limits:
  26 │             memory: 1024Mi
  27 └             cpu: 1024m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vlmcsd in vlmcsd namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vlmcsd3_1.yaml:18-34
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: vlmcsd
  20 │         image: mikolatero/vlmcsd:latest
  21 │         resources:
  22 │           requests:
  23 │             memory: 1024Mi
  24 │             cpu: 1024m
  25 │           limits:
  26 └             memory: 1024Mi
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vlmcsd in deployment vlmcsd (namespace: vlmcsd) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vlmcsd3_1.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: vlmcsd
  20 │         image: mikolatero/vlmcsd:latest
  21 │         resources:
  22 │           requests:
  23 │             memory: 1024Mi
  24 │             cpu: 1024m
  25 │           limits:
  26 │             memory: 1024Mi
  27 └             cpu: 1024m
  ..   
────────────────────────────────────────



vnc-deployments1_1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'vnc-container-1' of Deployment 'vnc-deployment-1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vnc-deployments1_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: vnc-container-1
  18 │         image: rafiqrock2003/ubuntu22-gui-rafik:v1
  19 │         ports:
  20 └         - containerPort: 5901
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vnc-container-1' of Deployment 'vnc-deployment-1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vnc-deployments1_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: vnc-container-1
  18 │         image: rafiqrock2003/ubuntu22-gui-rafik:v1
  19 │         ports:
  20 └         - containerPort: 5901
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vnc-container-1' of 'deployment' 'vnc-deployment-1' in 'vnc-pod-1' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vnc-deployments1_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: vnc-container-1
  18 │         image: rafiqrock2003/ubuntu22-gui-rafik:v1
  19 │         ports:
  20 └         - containerPort: 5901
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vnc-container-1' of Deployment 'vnc-deployment-1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vnc-deployments1_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: vnc-container-1
  18 │         image: rafiqrock2003/ubuntu22-gui-rafik:v1
  19 │         ports:
  20 └         - containerPort: 5901
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vnc-container-1' of Deployment 'vnc-deployment-1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vnc-deployments1_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: vnc-container-1
  18 │         image: rafiqrock2003/ubuntu22-gui-rafik:v1
  19 │         ports:
  20 └         - containerPort: 5901
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vnc-container-1' of Deployment 'vnc-deployment-1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vnc-deployments1_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: vnc-container-1
  18 │         image: rafiqrock2003/ubuntu22-gui-rafik:v1
  19 │         ports:
  20 └         - containerPort: 5901
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vnc-container-1' of Deployment 'vnc-deployment-1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vnc-deployments1_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: vnc-container-1
  18 │         image: rafiqrock2003/ubuntu22-gui-rafik:v1
  19 │         ports:
  20 └         - containerPort: 5901
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vnc-container-1' of Deployment 'vnc-deployment-1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vnc-deployments1_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: vnc-container-1
  18 │         image: rafiqrock2003/ubuntu22-gui-rafik:v1
  19 │         ports:
  20 └         - containerPort: 5901
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vnc-container-1' of Deployment 'vnc-deployment-1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vnc-deployments1_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: vnc-container-1
  18 │         image: rafiqrock2003/ubuntu22-gui-rafik:v1
  19 │         ports:
  20 └         - containerPort: 5901
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vnc-container-1' of Deployment 'vnc-deployment-1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vnc-deployments1_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: vnc-container-1
  18 │         image: rafiqrock2003/ubuntu22-gui-rafik:v1
  19 │         ports:
  20 └         - containerPort: 5901
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vnc-container-1' of Deployment 'vnc-deployment-1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vnc-deployments1_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: vnc-container-1
  18 │         image: rafiqrock2003/ubuntu22-gui-rafik:v1
  19 │         ports:
  20 └         - containerPort: 5901
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vnc-deployments1_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: vnc-container-1
  18 │         image: rafiqrock2003/ubuntu22-gui-rafik:v1
  19 │         ports:
  20 └         - containerPort: 5901
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vnc-container-1" of deployment "vnc-deployment-1" in "vnc-pod-1" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vnc-deployments1_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: vnc-container-1
  18 │         image: rafiqrock2003/ubuntu22-gui-rafik:v1
  19 │         ports:
  20 └         - containerPort: 5901
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vnc-deployments1_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: vnc-container-1
  18 │         image: rafiqrock2003/ubuntu22-gui-rafik:v1
  19 │         ports:
  20 └         - containerPort: 5901
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vnc-deployment-1 in vnc-pod-1 namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vnc-deployments1_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: vnc-container-1
  18 │         image: rafiqrock2003/ubuntu22-gui-rafik:v1
  19 │         ports:
  20 └         - containerPort: 5901
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vnc-deployment-1 in vnc-pod-1 namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vnc-deployments1_1.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: vnc-container-1
  18 │         image: rafiqrock2003/ubuntu22-gui-rafik:v1
  19 │         ports:
  20 └         - containerPort: 5901
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vnc-container-1 in deployment vnc-deployment-1 (namespace: vnc-pod-1) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vnc-deployments1_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: vnc-container-1
  18 │         image: rafiqrock2003/ubuntu22-gui-rafik:v1
  19 │         ports:
  20 └         - containerPort: 5901
────────────────────────────────────────



vnc-deployments_1.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'vnc-container' of Deployment 'vnc-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vnc-deployments_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: vnc-container
  18 │         image: rafiqrock2003/ubuntu22-gui-rafik:v1
  19 │         ports:
  20 └         - containerPort: 5901
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vnc-container' of Deployment 'vnc-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vnc-deployments_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: vnc-container
  18 │         image: rafiqrock2003/ubuntu22-gui-rafik:v1
  19 │         ports:
  20 └         - containerPort: 5901
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vnc-container' of 'deployment' 'vnc-deployment' in 'vnc-pod' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vnc-deployments_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: vnc-container
  18 │         image: rafiqrock2003/ubuntu22-gui-rafik:v1
  19 │         ports:
  20 └         - containerPort: 5901
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vnc-container' of Deployment 'vnc-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vnc-deployments_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: vnc-container
  18 │         image: rafiqrock2003/ubuntu22-gui-rafik:v1
  19 │         ports:
  20 └         - containerPort: 5901
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vnc-container' of Deployment 'vnc-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vnc-deployments_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: vnc-container
  18 │         image: rafiqrock2003/ubuntu22-gui-rafik:v1
  19 │         ports:
  20 └         - containerPort: 5901
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vnc-container' of Deployment 'vnc-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vnc-deployments_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: vnc-container
  18 │         image: rafiqrock2003/ubuntu22-gui-rafik:v1
  19 │         ports:
  20 └         - containerPort: 5901
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vnc-container' of Deployment 'vnc-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vnc-deployments_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: vnc-container
  18 │         image: rafiqrock2003/ubuntu22-gui-rafik:v1
  19 │         ports:
  20 └         - containerPort: 5901
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vnc-container' of Deployment 'vnc-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vnc-deployments_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: vnc-container
  18 │         image: rafiqrock2003/ubuntu22-gui-rafik:v1
  19 │         ports:
  20 └         - containerPort: 5901
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vnc-container' of Deployment 'vnc-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vnc-deployments_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: vnc-container
  18 │         image: rafiqrock2003/ubuntu22-gui-rafik:v1
  19 │         ports:
  20 └         - containerPort: 5901
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vnc-container' of Deployment 'vnc-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vnc-deployments_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: vnc-container
  18 │         image: rafiqrock2003/ubuntu22-gui-rafik:v1
  19 │         ports:
  20 └         - containerPort: 5901
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vnc-container' of Deployment 'vnc-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vnc-deployments_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: vnc-container
  18 │         image: rafiqrock2003/ubuntu22-gui-rafik:v1
  19 │         ports:
  20 └         - containerPort: 5901
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vnc-deployments_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: vnc-container
  18 │         image: rafiqrock2003/ubuntu22-gui-rafik:v1
  19 │         ports:
  20 └         - containerPort: 5901
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vnc-container" of deployment "vnc-deployment" in "vnc-pod" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vnc-deployments_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: vnc-container
  18 │         image: rafiqrock2003/ubuntu22-gui-rafik:v1
  19 │         ports:
  20 └         - containerPort: 5901
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vnc-deployments_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: vnc-container
  18 │         image: rafiqrock2003/ubuntu22-gui-rafik:v1
  19 │         ports:
  20 └         - containerPort: 5901
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vnc-deployment in vnc-pod namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vnc-deployments_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: vnc-container
  18 │         image: rafiqrock2003/ubuntu22-gui-rafik:v1
  19 │         ports:
  20 └         - containerPort: 5901
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vnc-deployment in vnc-pod namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vnc-deployments_1.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: vnc-container
  18 │         image: rafiqrock2003/ubuntu22-gui-rafik:v1
  19 │         ports:
  20 └         - containerPort: 5901
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vnc-container in deployment vnc-deployment (namespace: vnc-pod) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vnc-deployments_1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: vnc-container
  18 │         image: rafiqrock2003/ubuntu22-gui-rafik:v1
  19 │         ports:
  20 └         - containerPort: 5901
────────────────────────────────────────



vnc-pod.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'vnc-container' of Pod 'vnc-pod-1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vnc-pod.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: vnc-container
   9 │     image: rafiqrock2003/ubuntu22-gui-rafik:v1
  10 │     ports:
  11 │     - containerPort: 5901 
  12 └     - containerPort: 22  # VNC port
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vnc-container' of Pod 'vnc-pod-1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vnc-pod.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: vnc-container
   9 │     image: rafiqrock2003/ubuntu22-gui-rafik:v1
  10 │     ports:
  11 │     - containerPort: 5901 
  12 └     - containerPort: 22  # VNC port
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vnc-container' of 'pod' 'vnc-pod-1' in 'vnc1' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vnc-pod.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: vnc-container
   9 │     image: rafiqrock2003/ubuntu22-gui-rafik:v1
  10 │     ports:
  11 │     - containerPort: 5901 
  12 └     - containerPort: 22  # VNC port
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vnc-container' of Pod 'vnc-pod-1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vnc-pod.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: vnc-container
   9 │     image: rafiqrock2003/ubuntu22-gui-rafik:v1
  10 │     ports:
  11 │     - containerPort: 5901 
  12 └     - containerPort: 22  # VNC port
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vnc-container' of Pod 'vnc-pod-1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vnc-pod.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: vnc-container
   9 │     image: rafiqrock2003/ubuntu22-gui-rafik:v1
  10 │     ports:
  11 │     - containerPort: 5901 
  12 └     - containerPort: 22  # VNC port
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vnc-container' of Pod 'vnc-pod-1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vnc-pod.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: vnc-container
   9 │     image: rafiqrock2003/ubuntu22-gui-rafik:v1
  10 │     ports:
  11 │     - containerPort: 5901 
  12 └     - containerPort: 22  # VNC port
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vnc-container' of Pod 'vnc-pod-1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vnc-pod.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: vnc-container
   9 │     image: rafiqrock2003/ubuntu22-gui-rafik:v1
  10 │     ports:
  11 │     - containerPort: 5901 
  12 └     - containerPort: 22  # VNC port
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vnc-container' of Pod 'vnc-pod-1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vnc-pod.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: vnc-container
   9 │     image: rafiqrock2003/ubuntu22-gui-rafik:v1
  10 │     ports:
  11 │     - containerPort: 5901 
  12 └     - containerPort: 22  # VNC port
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vnc-container' of Pod 'vnc-pod-1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vnc-pod.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: vnc-container
   9 │     image: rafiqrock2003/ubuntu22-gui-rafik:v1
  10 │     ports:
  11 │     - containerPort: 5901 
  12 └     - containerPort: 22  # VNC port
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vnc-container' of Pod 'vnc-pod-1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vnc-pod.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: vnc-container
   9 │     image: rafiqrock2003/ubuntu22-gui-rafik:v1
  10 │     ports:
  11 │     - containerPort: 5901 
  12 └     - containerPort: 22  # VNC port
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vnc-container' of Pod 'vnc-pod-1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vnc-pod.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: vnc-container
   9 │     image: rafiqrock2003/ubuntu22-gui-rafik:v1
  10 │     ports:
  11 │     - containerPort: 5901 
  12 └     - containerPort: 22  # VNC port
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vnc-pod.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: vnc-container
   9 │     image: rafiqrock2003/ubuntu22-gui-rafik:v1
  10 │     ports:
  11 │     - containerPort: 5901 
  12 └     - containerPort: 22  # VNC port
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vnc-container" of pod "vnc-pod-1" in "vnc1" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vnc-pod.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: vnc-container
   9 │     image: rafiqrock2003/ubuntu22-gui-rafik:v1
  10 │     ports:
  11 │     - containerPort: 5901 
  12 └     - containerPort: 22  # VNC port
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vnc-pod.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: vnc-container
   9 │     image: rafiqrock2003/ubuntu22-gui-rafik:v1
  10 │     ports:
  11 │     - containerPort: 5901 
  12 └     - containerPort: 22  # VNC port
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod vnc-pod-1 in vnc1 namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vnc-pod-1 in vnc1 namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vnc-pod.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: vnc-container
   9 │     image: rafiqrock2003/ubuntu22-gui-rafik:v1
  10 │     ports:
  11 │     - containerPort: 5901 
  12 └     - containerPort: 22  # VNC port
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod vnc-pod-1 in vnc1 namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vnc-pod.yaml:7-12
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: vnc-container
   9 │     image: rafiqrock2003/ubuntu22-gui-rafik:v1
  10 │     ports:
  11 │     - containerPort: 5901 
  12 └     - containerPort: 22  # VNC port
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vnc-container in pod vnc-pod-1 (namespace: vnc1) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vnc-pod.yaml:8-12
────────────────────────────────────────
   8 ┌   - name: vnc-container
   9 │     image: rafiqrock2003/ubuntu22-gui-rafik:v1
  10 │     ports:
  11 │     - containerPort: 5901 
  12 └     - containerPort: 22  # VNC port
────────────────────────────────────────



vol-deployment.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'volconfigmapdeployment' of Deployment 'volconfigmapdeployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vol-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: volconfigmapdeployment
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: configmapvolume
  20 └           mountPath: /etc/name
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'volconfigmapdeployment' of Deployment 'volconfigmapdeployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vol-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: volconfigmapdeployment
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: configmapvolume
  20 └           mountPath: /etc/name
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'volconfigmapdeployment' of 'deployment' 'volconfigmapdeployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vol-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: volconfigmapdeployment
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: configmapvolume
  20 └           mountPath: /etc/name
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'volconfigmapdeployment' of Deployment 'volconfigmapdeployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vol-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: volconfigmapdeployment
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: configmapvolume
  20 └           mountPath: /etc/name
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'volconfigmapdeployment' of Deployment 'volconfigmapdeployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vol-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: volconfigmapdeployment
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: configmapvolume
  20 └           mountPath: /etc/name
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'volconfigmapdeployment' of Deployment 'volconfigmapdeployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 vol-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: volconfigmapdeployment
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: configmapvolume
  20 └           mountPath: /etc/name
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'volconfigmapdeployment' of Deployment 'volconfigmapdeployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vol-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: volconfigmapdeployment
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: configmapvolume
  20 └           mountPath: /etc/name
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'volconfigmapdeployment' of Deployment 'volconfigmapdeployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vol-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: volconfigmapdeployment
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: configmapvolume
  20 └           mountPath: /etc/name
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'volconfigmapdeployment' of Deployment 'volconfigmapdeployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vol-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: volconfigmapdeployment
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: configmapvolume
  20 └           mountPath: /etc/name
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'volconfigmapdeployment' of Deployment 'volconfigmapdeployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vol-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: volconfigmapdeployment
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: configmapvolume
  20 └           mountPath: /etc/name
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'volconfigmapdeployment' of Deployment 'volconfigmapdeployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vol-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: volconfigmapdeployment
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: configmapvolume
  20 └           mountPath: /etc/name
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'volconfigmapdeployment' of Deployment 'volconfigmapdeployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vol-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: volconfigmapdeployment
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: configmapvolume
  20 └           mountPath: /etc/name
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vol-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: volconfigmapdeployment
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: configmapvolume
  20 └           mountPath: /etc/name
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "volconfigmapdeployment" of deployment "volconfigmapdeployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vol-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: volconfigmapdeployment
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: configmapvolume
  20 └           mountPath: /etc/name
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vol-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: volconfigmapdeployment
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: configmapvolume
  20 └           mountPath: /etc/name
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment volconfigmapdeployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 vol-deployment.yaml:4
────────────────────────────────────────
   4 [   name: volconfigmapdeployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container volconfigmapdeployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vol-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: volconfigmapdeployment
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: configmapvolume
  20 └           mountPath: /etc/name
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment volconfigmapdeployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vol-deployment.yaml:15-24
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: volconfigmapdeployment
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: configmapvolume
  20 │           mountPath: /etc/name
  21 │       volumes:
  22 │       - name: configmapvolume
  23 │         configMap:
  24 └           name: multimap
────────────────────────────────────────



vol-deployment1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'volconfigmapdeployment' of Deployment 'volconfigmapdeployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vol-deployment1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: volconfigmapdeployment
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: configmapvolume
  20 └           mountPath: /etc/name
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'volconfigmapdeployment' of Deployment 'volconfigmapdeployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vol-deployment1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: volconfigmapdeployment
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: configmapvolume
  20 └           mountPath: /etc/name
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'volconfigmapdeployment' of 'deployment' 'volconfigmapdeployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vol-deployment1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: volconfigmapdeployment
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: configmapvolume
  20 └           mountPath: /etc/name
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'volconfigmapdeployment' of Deployment 'volconfigmapdeployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vol-deployment1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: volconfigmapdeployment
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: configmapvolume
  20 └           mountPath: /etc/name
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'volconfigmapdeployment' of Deployment 'volconfigmapdeployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vol-deployment1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: volconfigmapdeployment
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: configmapvolume
  20 └           mountPath: /etc/name
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'volconfigmapdeployment' of Deployment 'volconfigmapdeployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 vol-deployment1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: volconfigmapdeployment
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: configmapvolume
  20 └           mountPath: /etc/name
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'volconfigmapdeployment' of Deployment 'volconfigmapdeployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vol-deployment1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: volconfigmapdeployment
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: configmapvolume
  20 └           mountPath: /etc/name
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'volconfigmapdeployment' of Deployment 'volconfigmapdeployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vol-deployment1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: volconfigmapdeployment
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: configmapvolume
  20 └           mountPath: /etc/name
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'volconfigmapdeployment' of Deployment 'volconfigmapdeployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vol-deployment1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: volconfigmapdeployment
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: configmapvolume
  20 └           mountPath: /etc/name
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'volconfigmapdeployment' of Deployment 'volconfigmapdeployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vol-deployment1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: volconfigmapdeployment
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: configmapvolume
  20 └           mountPath: /etc/name
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'volconfigmapdeployment' of Deployment 'volconfigmapdeployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vol-deployment1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: volconfigmapdeployment
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: configmapvolume
  20 └           mountPath: /etc/name
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'volconfigmapdeployment' of Deployment 'volconfigmapdeployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vol-deployment1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: volconfigmapdeployment
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: configmapvolume
  20 └           mountPath: /etc/name
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vol-deployment1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: volconfigmapdeployment
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: configmapvolume
  20 └           mountPath: /etc/name
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "volconfigmapdeployment" of deployment "volconfigmapdeployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vol-deployment1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: volconfigmapdeployment
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: configmapvolume
  20 └           mountPath: /etc/name
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vol-deployment1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: volconfigmapdeployment
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: configmapvolume
  20 └           mountPath: /etc/name
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment volconfigmapdeployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 vol-deployment1.yaml:4
────────────────────────────────────────
   4 [   name: volconfigmapdeployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container volconfigmapdeployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vol-deployment1.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: volconfigmapdeployment
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: configmapvolume
  20 └           mountPath: /etc/name
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment volconfigmapdeployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vol-deployment1.yaml:15-24
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: volconfigmapdeployment
  17 │         image: nginx
  18 │         volumeMounts:
  19 │         - name: configmapvolume
  20 │           mountPath: /etc/name
  21 │       volumes:
  22 │       - name: configmapvolume
  23 │         configMap:
  24 └           name: multimap
────────────────────────────────────────



vol-hostpath.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'example-container' of Pod 'hostpath-example-linux' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vol-hostpath.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: example-container
   8 │     image: nginx:latest
   9 │     volumeMounts:
  10 │     - mountPath: /foo
  11 │       name: example-volume
  12 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'example-container' of Pod 'hostpath-example-linux' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vol-hostpath.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: example-container
   8 │     image: nginx:latest
   9 │     volumeMounts:
  10 │     - mountPath: /foo
  11 │       name: example-volume
  12 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'example-container' of 'pod' 'hostpath-example-linux' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vol-hostpath.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: example-container
   8 │     image: nginx:latest
   9 │     volumeMounts:
  10 │     - mountPath: /foo
  11 │       name: example-volume
  12 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'example-container' of Pod 'hostpath-example-linux' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vol-hostpath.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: example-container
   8 │     image: nginx:latest
   9 │     volumeMounts:
  10 │     - mountPath: /foo
  11 │       name: example-volume
  12 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'example-container' of Pod 'hostpath-example-linux' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vol-hostpath.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: example-container
   8 │     image: nginx:latest
   9 │     volumeMounts:
  10 │     - mountPath: /foo
  11 │       name: example-volume
  12 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'example-container' of Pod 'hostpath-example-linux' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 vol-hostpath.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: example-container
   8 │     image: nginx:latest
   9 │     volumeMounts:
  10 │     - mountPath: /foo
  11 │       name: example-volume
  12 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'example-container' of Pod 'hostpath-example-linux' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vol-hostpath.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: example-container
   8 │     image: nginx:latest
   9 │     volumeMounts:
  10 │     - mountPath: /foo
  11 │       name: example-volume
  12 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'example-container' of Pod 'hostpath-example-linux' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vol-hostpath.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: example-container
   8 │     image: nginx:latest
   9 │     volumeMounts:
  10 │     - mountPath: /foo
  11 │       name: example-volume
  12 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'example-container' of Pod 'hostpath-example-linux' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vol-hostpath.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: example-container
   8 │     image: nginx:latest
   9 │     volumeMounts:
  10 │     - mountPath: /foo
  11 │       name: example-volume
  12 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'example-container' of Pod 'hostpath-example-linux' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vol-hostpath.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: example-container
   8 │     image: nginx:latest
   9 │     volumeMounts:
  10 │     - mountPath: /foo
  11 │       name: example-volume
  12 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'example-container' of Pod 'hostpath-example-linux' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vol-hostpath.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: example-container
   8 │     image: nginx:latest
   9 │     volumeMounts:
  10 │     - mountPath: /foo
  11 │       name: example-volume
  12 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'example-container' of Pod 'hostpath-example-linux' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vol-hostpath.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: example-container
   8 │     image: nginx:latest
   9 │     volumeMounts:
  10 │     - mountPath: /foo
  11 │       name: example-volume
  12 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'hostpath-example-linux' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 vol-hostpath.yaml:6-17
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: example-container
   8 │     image: nginx:latest
   9 │     volumeMounts:
  10 │     - mountPath: /foo
  11 │       name: example-volume
  12 │       readOnly: false
  13 │   volumes:
  14 └   - name: example-volume
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vol-hostpath.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: example-container
   8 │     image: nginx:latest
   9 │     volumeMounts:
  10 │     - mountPath: /foo
  11 │       name: example-volume
  12 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "example-container" of pod "hostpath-example-linux" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vol-hostpath.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: example-container
   8 │     image: nginx:latest
   9 │     volumeMounts:
  10 │     - mountPath: /foo
  11 │       name: example-volume
  12 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vol-hostpath.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: example-container
   8 │     image: nginx:latest
   9 │     volumeMounts:
  10 │     - mountPath: /foo
  11 │       name: example-volume
  12 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod hostpath-example-linux in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 vol-hostpath.yaml:4
────────────────────────────────────────
   4 [   name: hostpath-example-linux
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hostpath-example-linux in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vol-hostpath.yaml:7-12
────────────────────────────────────────
   7 ┌   - name: example-container
   8 │     image: nginx:latest
   9 │     volumeMounts:
  10 │     - mountPath: /foo
  11 │       name: example-volume
  12 └       readOnly: false
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod hostpath-example-linux in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vol-hostpath.yaml:6-17
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: example-container
   8 │     image: nginx:latest
   9 │     volumeMounts:
  10 │     - mountPath: /foo
  11 │       name: example-volume
  12 │       readOnly: false
  13 │   volumes:
  14 └   - name: example-volume
  ..   
────────────────────────────────────────



vol-pod.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'express-test' of Pod 'volume-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vol-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: express-test
   8 │     image: lukondefmwila/express-test:latest
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/config/secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'express-test' of Pod 'volume-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vol-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: express-test
   8 │     image: lukondefmwila/express-test:latest
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/config/secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'express-test' of 'pod' 'volume-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vol-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: express-test
   8 │     image: lukondefmwila/express-test:latest
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/config/secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'express-test' of Pod 'volume-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vol-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: express-test
   8 │     image: lukondefmwila/express-test:latest
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/config/secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'express-test' of Pod 'volume-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vol-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: express-test
   8 │     image: lukondefmwila/express-test:latest
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/config/secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'express-test' of Pod 'volume-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 vol-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: express-test
   8 │     image: lukondefmwila/express-test:latest
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/config/secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'express-test' of Pod 'volume-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vol-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: express-test
   8 │     image: lukondefmwila/express-test:latest
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/config/secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'express-test' of Pod 'volume-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vol-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: express-test
   8 │     image: lukondefmwila/express-test:latest
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/config/secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'express-test' of Pod 'volume-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vol-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: express-test
   8 │     image: lukondefmwila/express-test:latest
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/config/secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'express-test' of Pod 'volume-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vol-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: express-test
   8 │     image: lukondefmwila/express-test:latest
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/config/secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'express-test' of Pod 'volume-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vol-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: express-test
   8 │     image: lukondefmwila/express-test:latest
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/config/secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'express-test' of Pod 'volume-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vol-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: express-test
   8 │     image: lukondefmwila/express-test:latest
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/config/secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vol-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: express-test
   8 │     image: lukondefmwila/express-test:latest
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/config/secret
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "express-test" of pod "volume-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vol-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: express-test
   8 │     image: lukondefmwila/express-test:latest
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/config/secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vol-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: express-test
   8 │     image: lukondefmwila/express-test:latest
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/config/secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod volume-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 vol-pod.yaml:4
────────────────────────────────────────
   4 [   name: volume-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container volume-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vol-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: express-test
   8 │     image: lukondefmwila/express-test:latest
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/config/secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod volume-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vol-pod.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: express-test
   8 │     image: lukondefmwila/express-test:latest
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 │       mountPath: /etc/config/secret
  12 │   volumes:
  13 │   - name: secret-volume
  14 │     secret:
  15 └       secretName: my-secret
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container express-test in pod volume-pod (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vol-pod.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: express-test
   8 │     image: lukondefmwila/express-test:latest
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/config/secret
────────────────────────────────────────



vol-pod1.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'express-test' of Pod 'volume-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vol-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: express-test
   8 │     image: lukondefmwila/express-test:latest
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/config/secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'express-test' of Pod 'volume-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vol-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: express-test
   8 │     image: lukondefmwila/express-test:latest
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/config/secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'express-test' of 'pod' 'volume-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vol-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: express-test
   8 │     image: lukondefmwila/express-test:latest
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/config/secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'express-test' of Pod 'volume-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vol-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: express-test
   8 │     image: lukondefmwila/express-test:latest
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/config/secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'express-test' of Pod 'volume-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vol-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: express-test
   8 │     image: lukondefmwila/express-test:latest
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/config/secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'express-test' of Pod 'volume-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 vol-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: express-test
   8 │     image: lukondefmwila/express-test:latest
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/config/secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'express-test' of Pod 'volume-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vol-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: express-test
   8 │     image: lukondefmwila/express-test:latest
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/config/secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'express-test' of Pod 'volume-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vol-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: express-test
   8 │     image: lukondefmwila/express-test:latest
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/config/secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'express-test' of Pod 'volume-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vol-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: express-test
   8 │     image: lukondefmwila/express-test:latest
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/config/secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'express-test' of Pod 'volume-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vol-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: express-test
   8 │     image: lukondefmwila/express-test:latest
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/config/secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'express-test' of Pod 'volume-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vol-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: express-test
   8 │     image: lukondefmwila/express-test:latest
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/config/secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'express-test' of Pod 'volume-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vol-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: express-test
   8 │     image: lukondefmwila/express-test:latest
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/config/secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vol-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: express-test
   8 │     image: lukondefmwila/express-test:latest
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/config/secret
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "express-test" of pod "volume-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vol-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: express-test
   8 │     image: lukondefmwila/express-test:latest
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/config/secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vol-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: express-test
   8 │     image: lukondefmwila/express-test:latest
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/config/secret
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod volume-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 vol-pod1.yaml:4
────────────────────────────────────────
   4 [   name: volume-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container volume-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vol-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: express-test
   8 │     image: lukondefmwila/express-test:latest
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/config/secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod volume-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vol-pod1.yaml:6-15
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: express-test
   8 │     image: lukondefmwila/express-test:latest
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 │       mountPath: /etc/config/secret
  12 │   volumes:
  13 │   - name: secret-volume
  14 │     secret:
  15 └       secretName: my-secret
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container express-test in pod volume-pod (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 vol-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: express-test
   8 │     image: lukondefmwila/express-test:latest
   9 │     volumeMounts:
  10 │     - name: secret-volume
  11 └       mountPath: /etc/config/secret
────────────────────────────────────────



vol.yaml (kubernetes)
=====================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'httpd' of Deployment 'voltest' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vol.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: httpd
  18 │           image: httpd
  19 │           ports:
  20 │            - containerPort: 80
  21 │           volumeMounts:
  22 │            - mountPath: /tmp/mount/dir
  23 └              name: testvol
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'httpd' of Deployment 'voltest' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vol.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: httpd
  18 │           image: httpd
  19 │           ports:
  20 │            - containerPort: 80
  21 │           volumeMounts:
  22 │            - mountPath: /tmp/mount/dir
  23 └              name: testvol
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'httpd' of 'deployment' 'voltest' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vol.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: httpd
  18 │           image: httpd
  19 │           ports:
  20 │            - containerPort: 80
  21 │           volumeMounts:
  22 │            - mountPath: /tmp/mount/dir
  23 └              name: testvol
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'httpd' of Deployment 'voltest' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vol.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: httpd
  18 │           image: httpd
  19 │           ports:
  20 │            - containerPort: 80
  21 │           volumeMounts:
  22 │            - mountPath: /tmp/mount/dir
  23 └              name: testvol
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'httpd' of Deployment 'voltest' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vol.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: httpd
  18 │           image: httpd
  19 │           ports:
  20 │            - containerPort: 80
  21 │           volumeMounts:
  22 │            - mountPath: /tmp/mount/dir
  23 └              name: testvol
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'httpd' of Deployment 'voltest' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 vol.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: httpd
  18 │           image: httpd
  19 │           ports:
  20 │            - containerPort: 80
  21 │           volumeMounts:
  22 │            - mountPath: /tmp/mount/dir
  23 └              name: testvol
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'httpd' of Deployment 'voltest' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vol.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: httpd
  18 │           image: httpd
  19 │           ports:
  20 │            - containerPort: 80
  21 │           volumeMounts:
  22 │            - mountPath: /tmp/mount/dir
  23 └              name: testvol
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'httpd' of Deployment 'voltest' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vol.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: httpd
  18 │           image: httpd
  19 │           ports:
  20 │            - containerPort: 80
  21 │           volumeMounts:
  22 │            - mountPath: /tmp/mount/dir
  23 └              name: testvol
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'httpd' of Deployment 'voltest' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vol.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: httpd
  18 │           image: httpd
  19 │           ports:
  20 │            - containerPort: 80
  21 │           volumeMounts:
  22 │            - mountPath: /tmp/mount/dir
  23 └              name: testvol
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'httpd' of Deployment 'voltest' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vol.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: httpd
  18 │           image: httpd
  19 │           ports:
  20 │            - containerPort: 80
  21 │           volumeMounts:
  22 │            - mountPath: /tmp/mount/dir
  23 └              name: testvol
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'httpd' of Deployment 'voltest' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vol.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: httpd
  18 │           image: httpd
  19 │           ports:
  20 │            - containerPort: 80
  21 │           volumeMounts:
  22 │            - mountPath: /tmp/mount/dir
  23 └              name: testvol
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'httpd' of Deployment 'voltest' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vol.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: httpd
  18 │           image: httpd
  19 │           ports:
  20 │            - containerPort: 80
  21 │           volumeMounts:
  22 │            - mountPath: /tmp/mount/dir
  23 └              name: testvol
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vol.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: httpd
  18 │           image: httpd
  19 │           ports:
  20 │            - containerPort: 80
  21 │           volumeMounts:
  22 │            - mountPath: /tmp/mount/dir
  23 └              name: testvol
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "httpd" of deployment "voltest" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vol.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: httpd
  18 │           image: httpd
  19 │           ports:
  20 │            - containerPort: 80
  21 │           volumeMounts:
  22 │            - mountPath: /tmp/mount/dir
  23 └              name: testvol
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vol.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: httpd
  18 │           image: httpd
  19 │           ports:
  20 │            - containerPort: 80
  21 │           volumeMounts:
  22 │            - mountPath: /tmp/mount/dir
  23 └              name: testvol
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment voltest in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 vol.yaml:5
────────────────────────────────────────
   5 [  name : voltest
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment voltest in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container voltest in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vol.yaml:17-23
────────────────────────────────────────
  17 ┌         - name: httpd
  18 │           image: httpd
  19 │           ports:
  20 │            - containerPort: 80
  21 │           volumeMounts:
  22 │            - mountPath: /tmp/mount/dir
  23 └              name: testvol
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment voltest in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vol.yaml:16-26
────────────────────────────────────────
  16 ┌       containers:
  17 │         - name: httpd
  18 │           image: httpd
  19 │           ports:
  20 │            - containerPort: 80
  21 │           volumeMounts:
  22 │            - mountPath: /tmp/mount/dir
  23 │              name: testvol
  24 └       volumes:
  ..   
────────────────────────────────────────



voll-med.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'vollmed-api' of Deployment 'vollmed' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 voll-med.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: titiura/vollmed:v1
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados          
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 voll-med.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: titiura/vollmed:v1
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados          
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vollmed-api' of 'deployment' 'vollmed' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 voll-med.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: titiura/vollmed:v1
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados          
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 voll-med.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: titiura/vollmed:v1
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados          
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vollmed-api' of Deployment 'vollmed' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 voll-med.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: titiura/vollmed:v1
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados          
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vollmed-api' of Deployment 'vollmed' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 voll-med.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: titiura/vollmed:v1
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados          
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 voll-med.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: titiura/vollmed:v1
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados          
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 voll-med.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: titiura/vollmed:v1
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados          
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 voll-med.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: titiura/vollmed:v1
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados          
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 voll-med.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: titiura/vollmed:v1
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados          
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 voll-med.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: titiura/vollmed:v1
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados          
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 voll-med.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: titiura/vollmed:v1
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados          
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vollmed-api" of deployment "vollmed" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 voll-med.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: titiura/vollmed:v1
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados          
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 voll-med.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: titiura/vollmed:v1
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados          
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vollmed in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 voll-med.yaml:4-6
────────────────────────────────────────
   4 ┌   name: vollmed
   5 │   labels:
   6 └     app: vollmed
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vollmed in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 voll-med.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: titiura/vollmed:v1
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados          
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vollmed in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 voll-med.yaml:17-37
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: vollmed-api
  19 │         image: titiura/vollmed:v1
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vollmed-api in deployment vollmed (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 voll-med.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: titiura/vollmed:v1
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados          
  ..   
────────────────────────────────────────



voll-med1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'vollmed-api' of Deployment 'vollmed' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 voll-med1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: titiura/vollmed:v1
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados          
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 voll-med1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: titiura/vollmed:v1
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados          
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vollmed-api' of 'deployment' 'vollmed' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 voll-med1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: titiura/vollmed:v1
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados          
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 voll-med1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: titiura/vollmed:v1
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados          
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vollmed-api' of Deployment 'vollmed' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 voll-med1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: titiura/vollmed:v1
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados          
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vollmed-api' of Deployment 'vollmed' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 voll-med1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: titiura/vollmed:v1
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados          
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 voll-med1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: titiura/vollmed:v1
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados          
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 voll-med1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: titiura/vollmed:v1
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados          
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 voll-med1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: titiura/vollmed:v1
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados          
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 voll-med1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: titiura/vollmed:v1
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados          
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 voll-med1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: titiura/vollmed:v1
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados          
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 voll-med1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: titiura/vollmed:v1
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados          
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vollmed-api" of deployment "vollmed" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 voll-med1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: titiura/vollmed:v1
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados          
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 voll-med1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: titiura/vollmed:v1
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados          
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vollmed in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 voll-med1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: vollmed
   5 │   labels:
   6 └     app: vollmed
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vollmed in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 voll-med1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: titiura/vollmed:v1
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados          
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vollmed in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 voll-med1.yaml:17-37
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: vollmed-api
  19 │         image: titiura/vollmed:v1
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vollmed-api in deployment vollmed (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 voll-med1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: titiura/vollmed:v1
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados          
  ..   
────────────────────────────────────────



voll-med4.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'vollmed-api' of Deployment 'vollmed' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 voll-med4.yaml:18-48
────────────────────────────────────────
  18 ┌         - name: vollmed-api
  19 │           image: leonardosartorello/vollmed:v9
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: DB_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 voll-med4.yaml:18-48
────────────────────────────────────────
  18 ┌         - name: vollmed-api
  19 │           image: leonardosartorello/vollmed:v9
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: DB_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vollmed-api' of 'deployment' 'vollmed' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 voll-med4.yaml:18-48
────────────────────────────────────────
  18 ┌         - name: vollmed-api
  19 │           image: leonardosartorello/vollmed:v9
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: DB_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 voll-med4.yaml:18-48
────────────────────────────────────────
  18 ┌         - name: vollmed-api
  19 │           image: leonardosartorello/vollmed:v9
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: DB_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vollmed-api' of Deployment 'vollmed' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 voll-med4.yaml:18-48
────────────────────────────────────────
  18 ┌         - name: vollmed-api
  19 │           image: leonardosartorello/vollmed:v9
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: DB_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vollmed-api' of Deployment 'vollmed' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 voll-med4.yaml:18-48
────────────────────────────────────────
  18 ┌         - name: vollmed-api
  19 │           image: leonardosartorello/vollmed:v9
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: DB_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 voll-med4.yaml:18-48
────────────────────────────────────────
  18 ┌         - name: vollmed-api
  19 │           image: leonardosartorello/vollmed:v9
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: DB_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 voll-med4.yaml:18-48
────────────────────────────────────────
  18 ┌         - name: vollmed-api
  19 │           image: leonardosartorello/vollmed:v9
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: DB_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 voll-med4.yaml:18-48
────────────────────────────────────────
  18 ┌         - name: vollmed-api
  19 │           image: leonardosartorello/vollmed:v9
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: DB_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 voll-med4.yaml:18-48
────────────────────────────────────────
  18 ┌         - name: vollmed-api
  19 │           image: leonardosartorello/vollmed:v9
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: DB_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 voll-med4.yaml:18-48
────────────────────────────────────────
  18 ┌         - name: vollmed-api
  19 │           image: leonardosartorello/vollmed:v9
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: DB_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 voll-med4.yaml:18-48
────────────────────────────────────────
  18 ┌         - name: vollmed-api
  19 │           image: leonardosartorello/vollmed:v9
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: DB_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vollmed-api" of deployment "vollmed" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 voll-med4.yaml:18-48
────────────────────────────────────────
  18 ┌         - name: vollmed-api
  19 │           image: leonardosartorello/vollmed:v9
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: DB_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 voll-med4.yaml:18-48
────────────────────────────────────────
  18 ┌         - name: vollmed-api
  19 │           image: leonardosartorello/vollmed:v9
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: DB_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vollmed in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 voll-med4.yaml:4-6
────────────────────────────────────────
   4 ┌   name: vollmed
   5 │   labels:
   6 └     app: vollmed
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vollmed in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 voll-med4.yaml:18-48
────────────────────────────────────────
  18 ┌         - name: vollmed-api
  19 │           image: leonardosartorello/vollmed:v9
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: DB_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vollmed in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 voll-med4.yaml:17-48
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: vollmed-api
  19 │           image: leonardosartorello/vollmed:v9
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: DB_HOST
  24 │               valueFrom:
  25 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vollmed-api in deployment vollmed (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 voll-med4.yaml:18-48
────────────────────────────────────────
  18 ┌         - name: vollmed-api
  19 │           image: leonardosartorello/vollmed:v9
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: DB_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: dados
  ..   
────────────────────────────────────────



voll-med5.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'vollmed-api' of Deployment 'vollmed' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 voll-med5.yaml:18-48
────────────────────────────────────────
  18 ┌         - name: vollmed-api
  19 │           image: leonardosartorello/vollmed:v9
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: DB_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 voll-med5.yaml:18-48
────────────────────────────────────────
  18 ┌         - name: vollmed-api
  19 │           image: leonardosartorello/vollmed:v9
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: DB_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vollmed-api' of 'deployment' 'vollmed' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 voll-med5.yaml:18-48
────────────────────────────────────────
  18 ┌         - name: vollmed-api
  19 │           image: leonardosartorello/vollmed:v9
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: DB_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 voll-med5.yaml:18-48
────────────────────────────────────────
  18 ┌         - name: vollmed-api
  19 │           image: leonardosartorello/vollmed:v9
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: DB_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vollmed-api' of Deployment 'vollmed' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 voll-med5.yaml:18-48
────────────────────────────────────────
  18 ┌         - name: vollmed-api
  19 │           image: leonardosartorello/vollmed:v9
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: DB_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vollmed-api' of Deployment 'vollmed' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 voll-med5.yaml:18-48
────────────────────────────────────────
  18 ┌         - name: vollmed-api
  19 │           image: leonardosartorello/vollmed:v9
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: DB_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 voll-med5.yaml:18-48
────────────────────────────────────────
  18 ┌         - name: vollmed-api
  19 │           image: leonardosartorello/vollmed:v9
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: DB_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 voll-med5.yaml:18-48
────────────────────────────────────────
  18 ┌         - name: vollmed-api
  19 │           image: leonardosartorello/vollmed:v9
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: DB_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 voll-med5.yaml:18-48
────────────────────────────────────────
  18 ┌         - name: vollmed-api
  19 │           image: leonardosartorello/vollmed:v9
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: DB_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 voll-med5.yaml:18-48
────────────────────────────────────────
  18 ┌         - name: vollmed-api
  19 │           image: leonardosartorello/vollmed:v9
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: DB_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 voll-med5.yaml:18-48
────────────────────────────────────────
  18 ┌         - name: vollmed-api
  19 │           image: leonardosartorello/vollmed:v9
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: DB_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 voll-med5.yaml:18-48
────────────────────────────────────────
  18 ┌         - name: vollmed-api
  19 │           image: leonardosartorello/vollmed:v9
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: DB_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vollmed-api" of deployment "vollmed" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 voll-med5.yaml:18-48
────────────────────────────────────────
  18 ┌         - name: vollmed-api
  19 │           image: leonardosartorello/vollmed:v9
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: DB_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 voll-med5.yaml:18-48
────────────────────────────────────────
  18 ┌         - name: vollmed-api
  19 │           image: leonardosartorello/vollmed:v9
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: DB_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vollmed in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 voll-med5.yaml:4-6
────────────────────────────────────────
   4 ┌   name: vollmed
   5 │   labels:
   6 └     app: vollmed
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vollmed in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 voll-med5.yaml:18-48
────────────────────────────────────────
  18 ┌         - name: vollmed-api
  19 │           image: leonardosartorello/vollmed:v9
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: DB_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vollmed in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 voll-med5.yaml:17-48
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: vollmed-api
  19 │           image: leonardosartorello/vollmed:v9
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: DB_HOST
  24 │               valueFrom:
  25 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vollmed-api in deployment vollmed (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 voll-med5.yaml:18-48
────────────────────────────────────────
  18 ┌         - name: vollmed-api
  19 │           image: leonardosartorello/vollmed:v9
  20 │           ports:
  21 │             - containerPort: 3000
  22 │           env:
  23 │             - name: DB_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: dados
  ..   
────────────────────────────────────────



voll-med6.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'vollmed-api' of Deployment 'vollmed' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 voll-med6.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v9
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         # Define the environment variable
  24 │         - name: REDIS_HOST # Notice that the case is different here
  25 │                                      # from the key name in the ConfigMap.
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 voll-med6.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v9
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         # Define the environment variable
  24 │         - name: REDIS_HOST # Notice that the case is different here
  25 │                                      # from the key name in the ConfigMap.
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vollmed-api' of 'deployment' 'vollmed' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 voll-med6.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v9
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         # Define the environment variable
  24 │         - name: REDIS_HOST # Notice that the case is different here
  25 │                                      # from the key name in the ConfigMap.
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 voll-med6.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v9
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         # Define the environment variable
  24 │         - name: REDIS_HOST # Notice that the case is different here
  25 │                                      # from the key name in the ConfigMap.
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vollmed-api' of Deployment 'vollmed' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 voll-med6.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v9
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         # Define the environment variable
  24 │         - name: REDIS_HOST # Notice that the case is different here
  25 │                                      # from the key name in the ConfigMap.
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vollmed-api' of Deployment 'vollmed' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 voll-med6.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v9
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         # Define the environment variable
  24 │         - name: REDIS_HOST # Notice that the case is different here
  25 │                                      # from the key name in the ConfigMap.
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 voll-med6.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v9
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         # Define the environment variable
  24 │         - name: REDIS_HOST # Notice that the case is different here
  25 │                                      # from the key name in the ConfigMap.
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 voll-med6.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v9
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         # Define the environment variable
  24 │         - name: REDIS_HOST # Notice that the case is different here
  25 │                                      # from the key name in the ConfigMap.
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 voll-med6.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v9
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         # Define the environment variable
  24 │         - name: REDIS_HOST # Notice that the case is different here
  25 │                                      # from the key name in the ConfigMap.
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 voll-med6.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v9
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         # Define the environment variable
  24 │         - name: REDIS_HOST # Notice that the case is different here
  25 │                                      # from the key name in the ConfigMap.
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vollmed-api' of Deployment 'vollmed' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 voll-med6.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v9
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         # Define the environment variable
  24 │         - name: REDIS_HOST # Notice that the case is different here
  25 │                                      # from the key name in the ConfigMap.
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 voll-med6.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v9
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         # Define the environment variable
  24 │         - name: REDIS_HOST # Notice that the case is different here
  25 │                                      # from the key name in the ConfigMap.
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vollmed-api" of deployment "vollmed" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 voll-med6.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v9
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         # Define the environment variable
  24 │         - name: REDIS_HOST # Notice that the case is different here
  25 │                                      # from the key name in the ConfigMap.
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 voll-med6.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v9
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         # Define the environment variable
  24 │         - name: REDIS_HOST # Notice that the case is different here
  25 │                                      # from the key name in the ConfigMap.
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vollmed in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 voll-med6.yaml:4-6
────────────────────────────────────────
   4 ┌   name: vollmed
   5 │   labels:
   6 └     app: vollmed
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vollmed in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 voll-med6.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v9
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         # Define the environment variable
  24 │         - name: REDIS_HOST # Notice that the case is different here
  25 │                                      # from the key name in the ConfigMap.
  26 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vollmed in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 voll-med6.yaml:17-53
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v9
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         # Define the environment variable
  24 │         - name: REDIS_HOST # Notice that the case is different here
  25 └                                      # from the key name in the ConfigMap.
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vollmed-api in deployment vollmed (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 voll-med6.yaml:18-53
────────────────────────────────────────
  18 ┌       - name: vollmed-api
  19 │         image: leonardosartorello/vollmed:v9
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         # Define the environment variable
  24 │         - name: REDIS_HOST # Notice that the case is different here
  25 │                                      # from the key name in the ConfigMap.
  26 └           valueFrom:
  ..   
────────────────────────────────────────



voll-med7.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'vollmedapi' of Deployment 'vollmed' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 voll-med7.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: vollmedapi
  19 │         image: leonardosartorello/vollmed:v8
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vollmedapi' of Deployment 'vollmed' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 voll-med7.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: vollmedapi
  19 │         image: leonardosartorello/vollmed:v8
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vollmedapi' of 'deployment' 'vollmed' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 voll-med7.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: vollmedapi
  19 │         image: leonardosartorello/vollmed:v8
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vollmedapi' of Deployment 'vollmed' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 voll-med7.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: vollmedapi
  19 │         image: leonardosartorello/vollmed:v8
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'vollmedapi' of Deployment 'vollmed' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 voll-med7.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: vollmedapi
  19 │         image: leonardosartorello/vollmed:v8
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vollmedapi' of Deployment 'vollmed' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 voll-med7.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: vollmedapi
  19 │         image: leonardosartorello/vollmed:v8
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vollmedapi' of Deployment 'vollmed' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 voll-med7.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: vollmedapi
  19 │         image: leonardosartorello/vollmed:v8
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vollmedapi' of Deployment 'vollmed' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 voll-med7.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: vollmedapi
  19 │         image: leonardosartorello/vollmed:v8
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vollmedapi' of Deployment 'vollmed' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 voll-med7.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: vollmedapi
  19 │         image: leonardosartorello/vollmed:v8
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vollmedapi' of Deployment 'vollmed' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 voll-med7.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: vollmedapi
  19 │         image: leonardosartorello/vollmed:v8
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vollmedapi' of Deployment 'vollmed' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 voll-med7.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: vollmedapi
  19 │         image: leonardosartorello/vollmed:v8
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 voll-med7.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: vollmedapi
  19 │         image: leonardosartorello/vollmed:v8
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vollmedapi" of deployment "vollmed" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 voll-med7.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: vollmedapi
  19 │         image: leonardosartorello/vollmed:v8
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 voll-med7.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: vollmedapi
  19 │         image: leonardosartorello/vollmed:v8
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment vollmed in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 voll-med7.yaml:4-6
────────────────────────────────────────
   4 ┌   name: vollmed
   5 │   labels:
   6 └     app: vollmed
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vollmed in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 voll-med7.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: vollmedapi
  19 │         image: leonardosartorello/vollmed:v8
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment vollmed in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 voll-med7.yaml:17-43
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: vollmedapi
  19 │         image: leonardosartorello/vollmed:v8
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container vollmedapi in deployment vollmed (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 voll-med7.yaml:18-43
────────────────────────────────────────
  18 ┌       - name: vollmedapi
  19 │         image: leonardosartorello/vollmed:v8
  20 │         ports:
  21 │         - containerPort: 3000
  22 │         env:
  23 │         - name: DB_HOST
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: dados
  ..   
────────────────────────────────────────



vols-demo.yaml (kubernetes)
===========================
Tests: 131 (SUCCESSES: 97, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 21, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ubuntu1' of Pod 'vols-demo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vols-demo.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: ubuntu1
   8 │     image: ubuntu
   9 │     command:
  10 │       - sleep
  11 │       - "3600"
  12 │     volumeMounts:
  13 │     - name: vol
  14 └       mountPath: /ubuntu1
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'ubuntu2' of Pod 'vols-demo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 vols-demo.yaml:15-22
────────────────────────────────────────
  15 ┌   - name: ubuntu2
  16 │     image: ubuntu
  17 │     command:
  18 │       - sleep
  19 │       - "3600"
  20 │     volumeMounts:
  21 │     - name: vol
  22 └       mountPath: /ubuntu2    
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ubuntu1' of Pod 'vols-demo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vols-demo.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: ubuntu1
   8 │     image: ubuntu
   9 │     command:
  10 │       - sleep
  11 │       - "3600"
  12 │     volumeMounts:
  13 │     - name: vol
  14 └       mountPath: /ubuntu1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ubuntu2' of Pod 'vols-demo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 vols-demo.yaml:15-22
────────────────────────────────────────
  15 ┌   - name: ubuntu2
  16 │     image: ubuntu
  17 │     command:
  18 │       - sleep
  19 │       - "3600"
  20 │     volumeMounts:
  21 │     - name: vol
  22 └       mountPath: /ubuntu2    
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ubuntu1' of 'pod' 'vols-demo' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vols-demo.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: ubuntu1
   8 │     image: ubuntu
   9 │     command:
  10 │       - sleep
  11 │       - "3600"
  12 │     volumeMounts:
  13 │     - name: vol
  14 └       mountPath: /ubuntu1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ubuntu2' of 'pod' 'vols-demo' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 vols-demo.yaml:15-22
────────────────────────────────────────
  15 ┌   - name: ubuntu2
  16 │     image: ubuntu
  17 │     command:
  18 │       - sleep
  19 │       - "3600"
  20 │     volumeMounts:
  21 │     - name: vol
  22 └       mountPath: /ubuntu2    
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'ubuntu1' of Pod 'vols-demo' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vols-demo.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: ubuntu1
   8 │     image: ubuntu
   9 │     command:
  10 │       - sleep
  11 │       - "3600"
  12 │     volumeMounts:
  13 │     - name: vol
  14 └       mountPath: /ubuntu1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'ubuntu2' of Pod 'vols-demo' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 vols-demo.yaml:15-22
────────────────────────────────────────
  15 ┌   - name: ubuntu2
  16 │     image: ubuntu
  17 │     command:
  18 │       - sleep
  19 │       - "3600"
  20 │     volumeMounts:
  21 │     - name: vol
  22 └       mountPath: /ubuntu2    
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ubuntu1' of Pod 'vols-demo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vols-demo.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: ubuntu1
   8 │     image: ubuntu
   9 │     command:
  10 │       - sleep
  11 │       - "3600"
  12 │     volumeMounts:
  13 │     - name: vol
  14 └       mountPath: /ubuntu1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ubuntu2' of Pod 'vols-demo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 vols-demo.yaml:15-22
────────────────────────────────────────
  15 ┌   - name: ubuntu2
  16 │     image: ubuntu
  17 │     command:
  18 │       - sleep
  19 │       - "3600"
  20 │     volumeMounts:
  21 │     - name: vol
  22 └       mountPath: /ubuntu2    
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'ubuntu1' of Pod 'vols-demo' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 vols-demo.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: ubuntu1
   8 │     image: ubuntu
   9 │     command:
  10 │       - sleep
  11 │       - "3600"
  12 │     volumeMounts:
  13 │     - name: vol
  14 └       mountPath: /ubuntu1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'ubuntu2' of Pod 'vols-demo' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 vols-demo.yaml:15-22
────────────────────────────────────────
  15 ┌   - name: ubuntu2
  16 │     image: ubuntu
  17 │     command:
  18 │       - sleep
  19 │       - "3600"
  20 │     volumeMounts:
  21 │     - name: vol
  22 └       mountPath: /ubuntu2    
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ubuntu1' of Pod 'vols-demo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vols-demo.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: ubuntu1
   8 │     image: ubuntu
   9 │     command:
  10 │       - sleep
  11 │       - "3600"
  12 │     volumeMounts:
  13 │     - name: vol
  14 └       mountPath: /ubuntu1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ubuntu2' of Pod 'vols-demo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 vols-demo.yaml:15-22
────────────────────────────────────────
  15 ┌   - name: ubuntu2
  16 │     image: ubuntu
  17 │     command:
  18 │       - sleep
  19 │       - "3600"
  20 │     volumeMounts:
  21 │     - name: vol
  22 └       mountPath: /ubuntu2    
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'ubuntu1' of Pod 'vols-demo' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vols-demo.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: ubuntu1
   8 │     image: ubuntu
   9 │     command:
  10 │       - sleep
  11 │       - "3600"
  12 │     volumeMounts:
  13 │     - name: vol
  14 └       mountPath: /ubuntu1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'ubuntu2' of Pod 'vols-demo' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 vols-demo.yaml:15-22
────────────────────────────────────────
  15 ┌   - name: ubuntu2
  16 │     image: ubuntu
  17 │     command:
  18 │       - sleep
  19 │       - "3600"
  20 │     volumeMounts:
  21 │     - name: vol
  22 └       mountPath: /ubuntu2    
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'ubuntu1' of Pod 'vols-demo' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vols-demo.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: ubuntu1
   8 │     image: ubuntu
   9 │     command:
  10 │       - sleep
  11 │       - "3600"
  12 │     volumeMounts:
  13 │     - name: vol
  14 └       mountPath: /ubuntu1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'ubuntu2' of Pod 'vols-demo' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 vols-demo.yaml:15-22
────────────────────────────────────────
  15 ┌   - name: ubuntu2
  16 │     image: ubuntu
  17 │     command:
  18 │       - sleep
  19 │       - "3600"
  20 │     volumeMounts:
  21 │     - name: vol
  22 └       mountPath: /ubuntu2    
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'ubuntu1' of Pod 'vols-demo' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vols-demo.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: ubuntu1
   8 │     image: ubuntu
   9 │     command:
  10 │       - sleep
  11 │       - "3600"
  12 │     volumeMounts:
  13 │     - name: vol
  14 └       mountPath: /ubuntu1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'ubuntu2' of Pod 'vols-demo' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 vols-demo.yaml:15-22
────────────────────────────────────────
  15 ┌   - name: ubuntu2
  16 │     image: ubuntu
  17 │     command:
  18 │       - sleep
  19 │       - "3600"
  20 │     volumeMounts:
  21 │     - name: vol
  22 └       mountPath: /ubuntu2    
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ubuntu1' of Pod 'vols-demo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vols-demo.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: ubuntu1
   8 │     image: ubuntu
   9 │     command:
  10 │       - sleep
  11 │       - "3600"
  12 │     volumeMounts:
  13 │     - name: vol
  14 └       mountPath: /ubuntu1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ubuntu2' of Pod 'vols-demo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 vols-demo.yaml:15-22
────────────────────────────────────────
  15 ┌   - name: ubuntu2
  16 │     image: ubuntu
  17 │     command:
  18 │       - sleep
  19 │       - "3600"
  20 │     volumeMounts:
  21 │     - name: vol
  22 └       mountPath: /ubuntu2    
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ubuntu1' of Pod 'vols-demo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vols-demo.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: ubuntu1
   8 │     image: ubuntu
   9 │     command:
  10 │       - sleep
  11 │       - "3600"
  12 │     volumeMounts:
  13 │     - name: vol
  14 └       mountPath: /ubuntu1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ubuntu2' of Pod 'vols-demo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 vols-demo.yaml:15-22
────────────────────────────────────────
  15 ┌   - name: ubuntu2
  16 │     image: ubuntu
  17 │     command:
  18 │       - sleep
  19 │       - "3600"
  20 │     volumeMounts:
  21 │     - name: vol
  22 └       mountPath: /ubuntu2    
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vols-demo.yaml:15-22
────────────────────────────────────────
  15 ┌   - name: ubuntu2
  16 │     image: ubuntu
  17 │     command:
  18 │       - sleep
  19 │       - "3600"
  20 │     volumeMounts:
  21 │     - name: vol
  22 └       mountPath: /ubuntu2    
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 vols-demo.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: ubuntu1
   8 │     image: ubuntu
   9 │     command:
  10 │       - sleep
  11 │       - "3600"
  12 │     volumeMounts:
  13 │     - name: vol
  14 └       mountPath: /ubuntu1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ubuntu1" of pod "vols-demo" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vols-demo.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: ubuntu1
   8 │     image: ubuntu
   9 │     command:
  10 │       - sleep
  11 │       - "3600"
  12 │     volumeMounts:
  13 │     - name: vol
  14 └       mountPath: /ubuntu1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ubuntu2" of pod "vols-demo" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 vols-demo.yaml:15-22
────────────────────────────────────────
  15 ┌   - name: ubuntu2
  16 │     image: ubuntu
  17 │     command:
  18 │       - sleep
  19 │       - "3600"
  20 │     volumeMounts:
  21 │     - name: vol
  22 └       mountPath: /ubuntu2    
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vols-demo.yaml:15-22
────────────────────────────────────────
  15 ┌   - name: ubuntu2
  16 │     image: ubuntu
  17 │     command:
  18 │       - sleep
  19 │       - "3600"
  20 │     volumeMounts:
  21 │     - name: vol
  22 └       mountPath: /ubuntu2    
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 vols-demo.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: ubuntu1
   8 │     image: ubuntu
   9 │     command:
  10 │       - sleep
  11 │       - "3600"
  12 │     volumeMounts:
  13 │     - name: vol
  14 └       mountPath: /ubuntu1
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod vols-demo in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 vols-demo.yaml:4
────────────────────────────────────────
   4 [   name: vols-demo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vols-demo in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vols-demo.yaml:15-22
────────────────────────────────────────
  15 ┌   - name: ubuntu2
  16 │     image: ubuntu
  17 │     command:
  18 │       - sleep
  19 │       - "3600"
  20 │     volumeMounts:
  21 │     - name: vol
  22 └       mountPath: /ubuntu2    
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vols-demo in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vols-demo.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: ubuntu1
   8 │     image: ubuntu
   9 │     command:
  10 │       - sleep
  11 │       - "3600"
  12 │     volumeMounts:
  13 │     - name: vol
  14 └       mountPath: /ubuntu1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod vols-demo in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 vols-demo.yaml:6-25
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: ubuntu1
   8 │     image: ubuntu
   9 │     command:
  10 │       - sleep
  11 │       - "3600"
  12 │     volumeMounts:
  13 │     - name: vol
  14 └       mountPath: /ubuntu1
  ..   
────────────────────────────────────────


