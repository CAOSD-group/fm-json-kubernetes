
Report Summary

┌─────────────────────────────────────────────────────────┬────────────┬───────────────────┐
│                         Target                          │    Type    │ Misconfigurations │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Ingress-Controller22.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Ingress-Deployment-Prod_1.yaml                          │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad4_14.yaml                        │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad4_15.yaml                        │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad4_16.yaml                        │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad4_17.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad4_2.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad4_3.yaml                         │ kubernetes │         3         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad4_4.yaml                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad4_5.yaml                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad4_6.yaml                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad4_7.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad4_8.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad4_9.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad5.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad5_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad5_10.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad5_11.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad5_12.yaml                        │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad5_13.yaml                        │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad5_14.yaml                        │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad5_15.yaml                        │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad5_16.yaml                        │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad5_17.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad5_2.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad5_3.yaml                         │ kubernetes │         3         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad5_4.yaml                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad5_5.yaml                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad5_6.yaml                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad5_7.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad5_8.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad5_9.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad6.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad6_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad6_10.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad6_11.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad6_12.yaml                        │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad6_13.yaml                        │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad6_14.yaml                        │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad6_15.yaml                        │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad6_16.yaml                        │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad6_17.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad6_2.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad6_3.yaml                         │ kubernetes │         3         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad6_4.yaml                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad6_5.yaml                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad6_6.yaml                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad6_7.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad6_8.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad6_9.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad7.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad7_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad7_10.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad7_11.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad7_12.yaml                        │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad7_13.yaml                        │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad7_14.yaml                        │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad7_15.yaml                        │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad7_16.yaml                        │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad7_17.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad7_2.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad7_3.yaml                         │ kubernetes │         3         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad7_4.yaml                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad7_5.yaml                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad7_6.yaml                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad7_7.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad7_8.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad7_9.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad8.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad8_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad8_10.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad8_11.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad8_12.yaml                        │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad8_13.yaml                        │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad8_14.yaml                        │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad8_15.yaml                        │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad8_16.yaml                        │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad8_17.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad8_2.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad8_3.yaml                         │ kubernetes │         3         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad8_4.yaml                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad8_5.yaml                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad8_6.yaml                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad8_7.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad8_8.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad8_9.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad9.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad9_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad9_10.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad9_11.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad9_12.yaml                        │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad9_13.yaml                        │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad9_14.yaml                        │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad9_15.yaml                        │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad9_16.yaml                        │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad9_17.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad9_2.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad9_3.yaml                         │ kubernetes │         3         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad9_4.yaml                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad9_5.yaml                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad9_6.yaml                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad9_7.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad9_8.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad9_9.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad_1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad_10.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad_11.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad_12.yaml                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad_13.yaml                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad_14.yaml                         │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad_15.yaml                         │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad_16.yaml                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad_17.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad_2.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad_3.yaml                          │ kubernetes │         3         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad_4.yaml                          │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad_5.yaml                          │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad_6.yaml                          │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad_7.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad_8.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-ckad_9.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-configmap-definition-file.yaml       │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-service-account-definition-file.yaml │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-service-definition-file.yaml         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-service1.yaml                        │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller-service1_1.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller1.yaml                                │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller10.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller10_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller10_10.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller10_11.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller10_12.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller10_13.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller10_14.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller10_15.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller10_16.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller10_17.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller10_18.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller10_2.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller10_3.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller10_4.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller10_5.yaml                             │ kubernetes │         3         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller10_6.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller10_7.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller10_8.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller10_9.yaml                             │ kubernetes │        13         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller11.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller11_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller11_10.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller11_11.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller11_12.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller11_13.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller11_14.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller11_15.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller11_16.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller11_17.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller11_18.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller11_2.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller11_3.yaml                             │ kubernetes │         3         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller11_4.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller11_5.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller11_6.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller11_7.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller11_8.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller11_9.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller12.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller13.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller14.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller15.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller17.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller17_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller17_10.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller17_11.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller17_12.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller17_13.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller17_14.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller17_15.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller17_16.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller17_17.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller17_18.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller17_2.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller17_3.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller17_4.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller17_5.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller17_6.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller17_7.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller17_8.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller17_9.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller18.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller18_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller18_10.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller18_11.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller18_12.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller18_13.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller18_14.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller18_15.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller18_16.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller18_17.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller18_18.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller18_2.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller18_3.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller18_4.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller18_5.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller18_6.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller18_7.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller18_8.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller18_9.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller19.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller1_1.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller2.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller20.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller24.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller24_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller24_10.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller24_11.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller24_12.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller24_13.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller24_14.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller24_15.yaml                            │ kubernetes │        13         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller24_16.yaml                            │ kubernetes │        13         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller24_17.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller24_18.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller24_2.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller24_3.yaml                             │ kubernetes │         3         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller24_4.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller24_5.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller24_6.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller24_7.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller24_8.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller24_9.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller25.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller25_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller25_10.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller25_11.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller25_12.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller25_13.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller25_14.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller25_15.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller25_16.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller25_17.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller25_18.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller25_2.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller25_3.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller25_4.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller25_5.yaml                             │ kubernetes │         3         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller25_6.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller25_7.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller25_8.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller25_9.yaml                             │ kubernetes │        13         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller26.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller26_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller26_10.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller26_11.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller26_12.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller26_13.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller26_14.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller26_15.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller26_16.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller26_17.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller26_18.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller26_2.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller26_3.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller26_4.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller26_5.yaml                             │ kubernetes │         3         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller26_6.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller26_7.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller26_8.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller26_9.yaml                             │ kubernetes │        13         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller27.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller27_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller27_10.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller27_11.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller27_12.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller27_13.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller27_14.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller27_15.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller27_16.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller27_17.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller27_18.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller27_2.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller27_3.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller27_4.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller27_5.yaml                             │ kubernetes │         3         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller27_6.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller27_7.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller27_8.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller27_9.yaml                             │ kubernetes │        13         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller28.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller28_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller28_10.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller28_11.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller28_12.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller28_13.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller28_14.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller28_15.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller28_16.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller28_17.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller28_18.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller28_2.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller28_3.yaml                             │ kubernetes │         3         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller28_4.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller28_5.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller28_6.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller28_7.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller28_8.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller28_9.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller29.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller2_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller2_10.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller2_11.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller2_12.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller2_13.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller2_14.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller2_15.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller2_16.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller2_17.yaml                             │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller2_18.yaml                             │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller2_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller2_3.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller2_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller2_5.yaml                              │ kubernetes │         3         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller2_6.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller2_7.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller2_8.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller2_9.yaml                              │ kubernetes │        13         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller3.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller30.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller30_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller30_10.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller30_2.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller30_3.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller30_4.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller30_9.yaml                             │ kubernetes │        17         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller33.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller33_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller33_10.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller33_2.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller33_3.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller33_4.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller33_9.yaml                             │ kubernetes │        17         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller34.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller34_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller34_10.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller34_11.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller34_12.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller34_13.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller34_14.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller34_15.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller34_16.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller34_17.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller34_18.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller34_2.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller34_3.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller34_4.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller34_5.yaml                             │ kubernetes │         3         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller34_6.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller34_7.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller34_8.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller34_9.yaml                             │ kubernetes │        13         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller35.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller35_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller35_10.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller35_11.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller35_12.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller35_13.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller35_14.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller35_15.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller35_16.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller35_17.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller35_18.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller35_2.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller35_3.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller35_4.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller35_5.yaml                             │ kubernetes │         3         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller35_6.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller35_7.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller35_8.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller35_9.yaml                             │ kubernetes │        13         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller36.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller36_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller36_10.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller36_11.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller36_12.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller36_13.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller36_14.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller36_15.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller36_16.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller36_17.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller36_18.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller36_2.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller36_3.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller36_4.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller36_5.yaml                             │ kubernetes │         3         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller36_6.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller36_7.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller36_8.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller36_9.yaml                             │ kubernetes │        13         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller37.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller37_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller37_10.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller37_11.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller37_12.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller37_13.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller37_14.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller37_15.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller37_16.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller37_17.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller37_18.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller37_2.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller37_3.yaml                             │ kubernetes │         3         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller37_4.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller37_5.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller37_6.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller37_7.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller37_8.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller37_9.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller38.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller38_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller38_10.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller38_11.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller38_12.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller38_13.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller38_14.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller38_15.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller38_16.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller38_17.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller38_18.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller38_2.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller38_3.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller38_4.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller38_5.yaml                             │ kubernetes │         3         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller38_6.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller38_7.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller38_8.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller38_9.yaml                             │ kubernetes │        13         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller39.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller39_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller39_10.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller39_11.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller39_12.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller39_13.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller39_14.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller39_15.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller39_16.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller39_17.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller39_18.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller39_2.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller39_3.yaml                             │ kubernetes │         3         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller39_4.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller39_5.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller39_6.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller39_7.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller39_8.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller39_9.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller3_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller3_10.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller3_11.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller3_12.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller3_13.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller3_14.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller3_15.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller3_16.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller3_17.yaml                             │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller3_18.yaml                             │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller3_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller3_3.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller3_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller3_5.yaml                              │ kubernetes │         3         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller3_6.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller3_7.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller3_8.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller3_9.yaml                              │ kubernetes │        13         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller4.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller40.yaml                               │ kubernetes │        19         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller43.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller44.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller45.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller45_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller45_10.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller45_11.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller45_12.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller45_13.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller45_14.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller45_15.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller45_16.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller45_17.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller45_18.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller45_2.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller45_3.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller45_4.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller45_5.yaml                             │ kubernetes │         3         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller45_6.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller45_7.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller45_8.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller45_9.yaml                             │ kubernetes │        13         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller46.yaml                               │ kubernetes │        19         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller46_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller47.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller49.yaml                               │ kubernetes │        21         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller4_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller4_10.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller4_11.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller4_12.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller4_13.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller4_14.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller4_15.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller4_16.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller4_17.yaml                             │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller4_18.yaml                             │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller4_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller4_3.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller4_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller4_5.yaml                              │ kubernetes │         3         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller4_6.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller4_7.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller4_8.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller4_9.yaml                              │ kubernetes │        13         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller5.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller50.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller50_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller50_10.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller50_11.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller50_12.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller50_13.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller50_14.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller50_15.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller50_16.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller50_17.yaml                            │ kubernetes │        13         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller50_18.yaml                            │ kubernetes │        13         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller50_2.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller50_3.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller50_4.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller50_5.yaml                             │ kubernetes │         3         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller50_6.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller50_7.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller50_8.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller50_9.yaml                             │ kubernetes │        13         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller51.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller53.yaml                               │ kubernetes │        19         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller54.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller55.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller5_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller5_10.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller5_11.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller5_12.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller5_13.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller5_14.yaml                             │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller5_15.yaml                             │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller5_16.yaml                             │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller5_17.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller5_18.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller5_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller5_3.yaml                              │ kubernetes │         3         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller5_4.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller5_5.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller5_6.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller5_7.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller5_8.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller5_9.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller6.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller6_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller6_10.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller6_11.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller6_12.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller6_13.yaml                             │ kubernetes │        13         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller6_14.yaml                             │ kubernetes │         8         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller6_15.yaml                             │ kubernetes │         8         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller6_16.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller6_17.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller6_2.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller6_3.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller6_4.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller6_5.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller6_6.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller6_7.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller6_8.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller6_9.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller7.yaml                                │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller7_1.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller8.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller8_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller8_10.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller8_11.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller8_12.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller8_13.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller8_14.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller8_15.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller8_16.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller8_17.yaml                             │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller8_18.yaml                             │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller8_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller8_3.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller8_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller8_5.yaml                              │ kubernetes │         3         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller8_6.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller8_7.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller8_8.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller8_9.yaml                              │ kubernetes │        13         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller9.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller9_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller9_10.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller9_11.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller9_12.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller9_13.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller9_14.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller9_15.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller9_16.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller9_17.yaml                             │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller9_18.yaml                             │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller9_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller9_3.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller9_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller9_5.yaml                              │ kubernetes │         3         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller9_6.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller9_7.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller9_8.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller9_9.yaml                              │ kubernetes │        13         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller_10.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller_11.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller_12.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller_13.yaml                              │ kubernetes │        13         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller_14.yaml                              │ kubernetes │         8         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller_15.yaml                              │ kubernetes │         8         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller_16.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller_17.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller_2.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller_3.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller_4.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller_5.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller_6.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller_7.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller_8.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-controller_9.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-cookie.yaml                                     │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-cookie1.yaml                                    │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-correto.yaml                                    │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-customer1-coit-frontend.yaml                    │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-customer2-coit-frontend.yaml                    │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-dashboard.yaml                                  │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-dashboard1.yaml                                 │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-dashboard2.yaml                                 │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-dashboard3.yaml                                 │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-default-backend.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-default-path-definition-file.yaml               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-definition.yaml                                 │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-demo-app.yaml                                   │ kubernetes │        20         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-demo-app_1.yaml                                 │ kubernetes │        19         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-demo-app_2.yaml                                 │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-demo-app_3.yaml                                 │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-demo-app_4.yaml                                 │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-depl.yaml                                       │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-deployment-service.yaml                         │ kubernetes │        20         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-deployment-service1.yaml                        │ kubernetes │        20         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-deployment-service1_1.yaml                      │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-deployment-service1_2.yaml                      │ kubernetes │        19         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-deployment-service1_3.yaml                      │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-deployment-service2.yaml                        │ kubernetes │        20         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-deployment-service2_1.yaml                      │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-deployment-service2_2.yaml                      │ kubernetes │        19         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-deployment-service2_3.yaml                      │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-deployment-service_1.yaml                       │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-deployment-service_2.yaml                       │ kubernetes │        19         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-deployment-service_3.yaml                       │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-deployment.yaml                                 │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-deployment1.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-deployment2.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-dev.yaml                                        │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-django.yaml                                     │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-dns-example-v1.yaml                             │ kubernetes │        18         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-dns-example-v1_1.yaml                           │ kubernetes │         2         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-dns-example-v1_2.yaml                           │ kubernetes │         3         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-dns-example-v1_3.yaml                           │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-dns-example-v1beta1.yaml                        │ kubernetes │        18         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-dns-example-v1beta1_2.yaml                      │ kubernetes │         3         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-dns-example-v1beta1_3.yaml                      │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-dns.yaml                                        │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-dns_1.yaml                                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-dns_2.yaml                                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-dns_3.yaml                                      │ kubernetes │        22         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-dnslocal-giropops.yaml                          │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-dnslocal-giropops1.yaml                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-docker-desktop.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-docker-desktop_1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-docker-desktop_10.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-docker-desktop_11.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-docker-desktop_12.yaml                          │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-docker-desktop_13.yaml                          │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-docker-desktop_14.yaml                          │ kubernetes │        13         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-docker-desktop_15.yaml                          │ kubernetes │        13         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-docker-desktop_16.yaml                          │ kubernetes │        13         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-docker-desktop_17.yaml                          │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-docker-desktop_18.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-docker-desktop_2.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-docker-desktop_3.yaml                           │ kubernetes │         3         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-docker-desktop_4.yaml                           │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-docker-desktop_5.yaml                           │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-docker-desktop_6.yaml                           │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-docker-desktop_7.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-docker-desktop_8.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-docker-desktop_9.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-domain-rules-definition-file.yaml               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-domain.yaml                                     │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-eks.yaml                                        │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-exact2.yaml                                     │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example.yaml                                    │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example1.yaml                                   │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example10.yaml                                  │ kubernetes │        19         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example10_1.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example10_2.yaml                                │ kubernetes │        19         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example10_3.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example10_4.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example11.yaml                                  │ kubernetes │        18         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example11_1.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example12.yaml                                  │ kubernetes │        18         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example12_1.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example12_2.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example12_3.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example12_4.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example13.yaml                                  │ kubernetes │        18         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example13_1.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example13_2.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example13_3.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example14.yaml                                  │ kubernetes │        19         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example14_1.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example2.yaml                                   │ kubernetes │        19         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example2_1.yaml                                 │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example2_2.yaml                                 │ kubernetes │        19         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example2_3.yaml                                 │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example2_4.yaml                                 │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example3.yaml                                   │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example4.yaml                                   │ kubernetes │        18         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example4_1.yaml                                 │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example5.yaml                                   │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example6.yaml                                   │ kubernetes │        19         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example6_1.yaml                                 │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example6_2.yaml                                 │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example7.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example7_1.yaml                                 │ kubernetes │        20         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example7_2.yaml                                 │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example7_3.yaml                                 │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example8.yaml                                   │ kubernetes │        18         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example8_1.yaml                                 │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example8_2.yaml                                 │ kubernetes │        18         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example8_3.yaml                                 │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example8_4.yaml                                 │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-example9.yaml                                   │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-external.yaml                                   │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-foo-bar.yaml                                    │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-foo-bar1.yaml                                   │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-for-k8s-dashboard.yaml                          │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-for-k8s-dashboard1.yaml                         │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-frontend-srv.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-frontend.yaml                                   │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-frontend1.yaml                                  │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-frontend2.yaml                                  │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-frontend3.yaml                                  │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-gateway2.yaml                                   │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-gateway2_1.yaml                                 │ kubernetes │        19         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-gateway2_2.yaml                                 │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-gateway2_3.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-gateway6_1.yaml                                 │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-geral.yaml                                      │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-geral_1.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-geral_10.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-geral_11.yaml                                   │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-geral_12.yaml                                   │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-geral_13.yaml                                   │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-geral_14.yaml                                   │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-geral_15.yaml                                   │ kubernetes │        14         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-geral_16.yaml                                   │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-geral_17.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-geral_2.yaml                                    │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-geral_3.yaml                                    │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-geral_4.yaml                                    │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-geral_5.yaml                                    │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-geral_6.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-geral_7.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-geral_8.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-geral_9.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-giropops-aws-dominio.yaml                       │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-giropops-aws.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-giropops-senhas.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-giropops.yaml                                   │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-giropops1.yaml                                  │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good.yaml                                       │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good1.yaml                                      │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good10.yaml                                     │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good10_1.yaml                                   │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good11.yaml                                     │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good11_1.yaml                                   │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good12.yaml                                     │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good12_1.yaml                                   │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good13.yaml                                     │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good13_1.yaml                                   │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good14.yaml                                     │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good14_1.yaml                                   │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good14_2.yaml                                   │ kubernetes │         1         │
├─────────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ingress-good15.yaml                                     │ kubernetes │         1         │
└─────────────────────────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


Ingress-Controller22.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 Ingress-Controller22.yaml:12-22
────────────────────────────────────────
  12 ┌   rules:
  13 │     - host: k8s.gangadharrecruitcrm.shop
  14 │       http:
  15 │         paths:
  16 │           - pathType: Prefix
  17 │             path: /
  18 │             backend:
  19 │               service:
  20 └                 name: frontend-service
  ..   
────────────────────────────────────────



Ingress-Deployment-Prod_1.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 Ingress-Deployment-Prod_1.yaml:13-49
────────────────────────────────────────
  13 ┌   tls:
  14 │   - hosts:
  15 │     - www.mad-world.nl
  16 │     - identity.mad-world.nl
  17 │     - log.mad-world.nl
  18 │     secretName: madworld-tls
  19 │   rules:
  20 │   - host: identity.mad-world.nl
  21 └     http:
  ..   
────────────────────────────────────────



ingress-controller-ckad4_14.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller-ckad4_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller-ckad4_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller-ckad4_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller-ckad4_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller-ckad4_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller-ckad4_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller-ckad4_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller-ckad4_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller-ckad4_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller-ckad4_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller-ckad4_14.yaml:13-46
────────────────────────────────────────
  13 ┌   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/component: admission-webhook
  17 │         app.kubernetes.io/instance: ingress-nginx
  18 │         app.kubernetes.io/name: ingress-nginx
  19 │         app.kubernetes.io/part-of: ingress-nginx
  20 │         app.kubernetes.io/version: 1.3.0
  21 └       name: ingress-nginx-admission-create
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller-ckad4_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller-ckad4_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller-ckad4_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-controller-ckad4_15.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller-ckad4_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller-ckad4_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller-ckad4_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller-ckad4_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller-ckad4_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller-ckad4_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller-ckad4_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller-ckad4_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller-ckad4_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller-ckad4_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller-ckad4_15.yaml:13-48
────────────────────────────────────────
  13 ┌   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/component: admission-webhook
  17 │         app.kubernetes.io/instance: ingress-nginx
  18 │         app.kubernetes.io/name: ingress-nginx
  19 │         app.kubernetes.io/part-of: ingress-nginx
  20 │         app.kubernetes.io/version: 1.3.0
  21 └       name: ingress-nginx-admission-patch
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller-ckad4_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller-ckad4_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller-ckad4_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-controller-ckad4_16.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller-ckad4_16.yaml:12
────────────────────────────────────────
  12 [   controller: k8s.io/ingress-nginx
────────────────────────────────────────



ingress-controller-ckad4_3.yaml (kubernetes)
============================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller-ckad4_3.yaml:60-68
────────────────────────────────────────
  60 ┌ - apiGroups:
  61 │   - ''
  62 │   resourceNames:
  63 │   - ingress-controller-leader
  64 │   resources:
  65 │   - configmaps
  66 │   verbs:
  67 │   - get
  68 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller-ckad4_3.yaml:69-74
────────────────────────────────────────
  69 ┌ - apiGroups:
  70 │   - ''
  71 │   resources:
  72 │   - configmaps
  73 │   verbs:
  74 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller-ckad4_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-controller-ckad4_4.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller-ckad4_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-controller-ckad4_5.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller-ckad4_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-controller-ckad4_6.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller-ckad4_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-controller-ckad5_12.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller-ckad5_12.yaml:13-29
────────────────────────────────────────
  13 ┌   externalTrafficPolicy: Local
  14 │   ports:
  15 │   - appProtocol: http
  16 │     name: http
  17 │     port: 80
  18 │     protocol: TCP
  19 │     targetPort: http
  20 │   - appProtocol: https
  21 └     name: https
  ..   
────────────────────────────────────────



ingress-controller-ckad5_13.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller-ckad5_13.yaml:13-22
────────────────────────────────────────
  13 ┌   ports:
  14 │   - appProtocol: https
  15 │     name: https-webhook
  16 │     port: 443
  17 │     targetPort: webhook
  18 │   selector:
  19 │     app.kubernetes.io/component: controller
  20 │     app.kubernetes.io/instance: ingress-nginx
  21 │     app.kubernetes.io/name: ingress-nginx
  22 └   type: ClusterIP
────────────────────────────────────────



ingress-controller-ckad5_14.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller-ckad5_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller-ckad5_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller-ckad5_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller-ckad5_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller-ckad5_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller-ckad5_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller-ckad5_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller-ckad5_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller-ckad5_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller-ckad5_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller-ckad5_14.yaml:13-46
────────────────────────────────────────
  13 ┌   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/component: admission-webhook
  17 │         app.kubernetes.io/instance: ingress-nginx
  18 │         app.kubernetes.io/name: ingress-nginx
  19 │         app.kubernetes.io/part-of: ingress-nginx
  20 │         app.kubernetes.io/version: 1.3.0
  21 └       name: ingress-nginx-admission-create
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller-ckad5_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller-ckad5_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller-ckad5_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-controller-ckad5_15.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller-ckad5_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller-ckad5_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller-ckad5_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller-ckad5_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller-ckad5_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller-ckad5_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller-ckad5_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller-ckad5_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller-ckad5_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller-ckad5_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller-ckad5_15.yaml:13-48
────────────────────────────────────────
  13 ┌   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/component: admission-webhook
  17 │         app.kubernetes.io/instance: ingress-nginx
  18 │         app.kubernetes.io/name: ingress-nginx
  19 │         app.kubernetes.io/part-of: ingress-nginx
  20 │         app.kubernetes.io/version: 1.3.0
  21 └       name: ingress-nginx-admission-patch
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller-ckad5_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller-ckad5_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller-ckad5_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-controller-ckad5_16.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller-ckad5_16.yaml:12
────────────────────────────────────────
  12 [   controller: k8s.io/ingress-nginx
────────────────────────────────────────



ingress-controller-ckad5_3.yaml (kubernetes)
============================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller-ckad5_3.yaml:60-68
────────────────────────────────────────
  60 ┌ - apiGroups:
  61 │   - ''
  62 │   resourceNames:
  63 │   - ingress-controller-leader
  64 │   resources:
  65 │   - configmaps
  66 │   verbs:
  67 │   - get
  68 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller-ckad5_3.yaml:69-74
────────────────────────────────────────
  69 ┌ - apiGroups:
  70 │   - ''
  71 │   resources:
  72 │   - configmaps
  73 │   verbs:
  74 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller-ckad5_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-controller-ckad5_4.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller-ckad5_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-controller-ckad5_5.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller-ckad5_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-controller-ckad5_6.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller-ckad5_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-controller-ckad6_12.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller-ckad6_12.yaml:13-29
────────────────────────────────────────
  13 ┌   externalTrafficPolicy: Local
  14 │   ports:
  15 │   - appProtocol: http
  16 │     name: http
  17 │     port: 80
  18 │     protocol: TCP
  19 │     targetPort: http
  20 │   - appProtocol: https
  21 └     name: https
  ..   
────────────────────────────────────────



ingress-controller-ckad6_13.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller-ckad6_13.yaml:13-22
────────────────────────────────────────
  13 ┌   ports:
  14 │   - appProtocol: https
  15 │     name: https-webhook
  16 │     port: 443
  17 │     targetPort: webhook
  18 │   selector:
  19 │     app.kubernetes.io/component: controller
  20 │     app.kubernetes.io/instance: ingress-nginx
  21 │     app.kubernetes.io/name: ingress-nginx
  22 └   type: ClusterIP
────────────────────────────────────────



ingress-controller-ckad6_14.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller-ckad6_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller-ckad6_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller-ckad6_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller-ckad6_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller-ckad6_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller-ckad6_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller-ckad6_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller-ckad6_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller-ckad6_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller-ckad6_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller-ckad6_14.yaml:13-46
────────────────────────────────────────
  13 ┌   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/component: admission-webhook
  17 │         app.kubernetes.io/instance: ingress-nginx
  18 │         app.kubernetes.io/name: ingress-nginx
  19 │         app.kubernetes.io/part-of: ingress-nginx
  20 │         app.kubernetes.io/version: 1.3.0
  21 └       name: ingress-nginx-admission-create
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller-ckad6_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller-ckad6_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller-ckad6_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-controller-ckad6_15.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller-ckad6_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller-ckad6_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller-ckad6_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller-ckad6_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller-ckad6_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller-ckad6_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller-ckad6_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller-ckad6_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller-ckad6_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller-ckad6_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller-ckad6_15.yaml:13-48
────────────────────────────────────────
  13 ┌   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/component: admission-webhook
  17 │         app.kubernetes.io/instance: ingress-nginx
  18 │         app.kubernetes.io/name: ingress-nginx
  19 │         app.kubernetes.io/part-of: ingress-nginx
  20 │         app.kubernetes.io/version: 1.3.0
  21 └       name: ingress-nginx-admission-patch
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller-ckad6_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller-ckad6_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller-ckad6_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-controller-ckad6_16.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller-ckad6_16.yaml:12
────────────────────────────────────────
  12 [   controller: k8s.io/ingress-nginx
────────────────────────────────────────



ingress-controller-ckad6_3.yaml (kubernetes)
============================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller-ckad6_3.yaml:60-68
────────────────────────────────────────
  60 ┌ - apiGroups:
  61 │   - ''
  62 │   resourceNames:
  63 │   - ingress-controller-leader
  64 │   resources:
  65 │   - configmaps
  66 │   verbs:
  67 │   - get
  68 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller-ckad6_3.yaml:69-74
────────────────────────────────────────
  69 ┌ - apiGroups:
  70 │   - ''
  71 │   resources:
  72 │   - configmaps
  73 │   verbs:
  74 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller-ckad6_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-controller-ckad6_4.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller-ckad6_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-controller-ckad6_5.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller-ckad6_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-controller-ckad6_6.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller-ckad6_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-controller-ckad7_12.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller-ckad7_12.yaml:13-29
────────────────────────────────────────
  13 ┌   externalTrafficPolicy: Local
  14 │   ports:
  15 │   - appProtocol: http
  16 │     name: http
  17 │     port: 80
  18 │     protocol: TCP
  19 │     targetPort: http
  20 │   - appProtocol: https
  21 └     name: https
  ..   
────────────────────────────────────────



ingress-controller-ckad7_13.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller-ckad7_13.yaml:13-22
────────────────────────────────────────
  13 ┌   ports:
  14 │   - appProtocol: https
  15 │     name: https-webhook
  16 │     port: 443
  17 │     targetPort: webhook
  18 │   selector:
  19 │     app.kubernetes.io/component: controller
  20 │     app.kubernetes.io/instance: ingress-nginx
  21 │     app.kubernetes.io/name: ingress-nginx
  22 └   type: ClusterIP
────────────────────────────────────────



ingress-controller-ckad7_14.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller-ckad7_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller-ckad7_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller-ckad7_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller-ckad7_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller-ckad7_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller-ckad7_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller-ckad7_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller-ckad7_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller-ckad7_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller-ckad7_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller-ckad7_14.yaml:13-46
────────────────────────────────────────
  13 ┌   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/component: admission-webhook
  17 │         app.kubernetes.io/instance: ingress-nginx
  18 │         app.kubernetes.io/name: ingress-nginx
  19 │         app.kubernetes.io/part-of: ingress-nginx
  20 │         app.kubernetes.io/version: 1.3.0
  21 └       name: ingress-nginx-admission-create
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller-ckad7_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller-ckad7_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller-ckad7_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-controller-ckad7_15.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller-ckad7_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller-ckad7_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller-ckad7_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller-ckad7_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller-ckad7_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller-ckad7_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller-ckad7_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller-ckad7_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller-ckad7_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller-ckad7_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller-ckad7_15.yaml:13-48
────────────────────────────────────────
  13 ┌   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/component: admission-webhook
  17 │         app.kubernetes.io/instance: ingress-nginx
  18 │         app.kubernetes.io/name: ingress-nginx
  19 │         app.kubernetes.io/part-of: ingress-nginx
  20 │         app.kubernetes.io/version: 1.3.0
  21 └       name: ingress-nginx-admission-patch
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller-ckad7_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller-ckad7_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller-ckad7_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-controller-ckad7_16.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller-ckad7_16.yaml:12
────────────────────────────────────────
  12 [   controller: k8s.io/ingress-nginx
────────────────────────────────────────



ingress-controller-ckad7_3.yaml (kubernetes)
============================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller-ckad7_3.yaml:60-68
────────────────────────────────────────
  60 ┌ - apiGroups:
  61 │   - ''
  62 │   resourceNames:
  63 │   - ingress-controller-leader
  64 │   resources:
  65 │   - configmaps
  66 │   verbs:
  67 │   - get
  68 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller-ckad7_3.yaml:69-74
────────────────────────────────────────
  69 ┌ - apiGroups:
  70 │   - ''
  71 │   resources:
  72 │   - configmaps
  73 │   verbs:
  74 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller-ckad7_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-controller-ckad7_4.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller-ckad7_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-controller-ckad7_5.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller-ckad7_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-controller-ckad7_6.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller-ckad7_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-controller-ckad8_12.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller-ckad8_12.yaml:13-29
────────────────────────────────────────
  13 ┌   externalTrafficPolicy: Local
  14 │   ports:
  15 │   - appProtocol: http
  16 │     name: http
  17 │     port: 80
  18 │     protocol: TCP
  19 │     targetPort: http
  20 │   - appProtocol: https
  21 └     name: https
  ..   
────────────────────────────────────────



ingress-controller-ckad8_13.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller-ckad8_13.yaml:13-22
────────────────────────────────────────
  13 ┌   ports:
  14 │   - appProtocol: https
  15 │     name: https-webhook
  16 │     port: 443
  17 │     targetPort: webhook
  18 │   selector:
  19 │     app.kubernetes.io/component: controller
  20 │     app.kubernetes.io/instance: ingress-nginx
  21 │     app.kubernetes.io/name: ingress-nginx
  22 └   type: ClusterIP
────────────────────────────────────────



ingress-controller-ckad8_14.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller-ckad8_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller-ckad8_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller-ckad8_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller-ckad8_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller-ckad8_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller-ckad8_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller-ckad8_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller-ckad8_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller-ckad8_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller-ckad8_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller-ckad8_14.yaml:13-46
────────────────────────────────────────
  13 ┌   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/component: admission-webhook
  17 │         app.kubernetes.io/instance: ingress-nginx
  18 │         app.kubernetes.io/name: ingress-nginx
  19 │         app.kubernetes.io/part-of: ingress-nginx
  20 │         app.kubernetes.io/version: 1.3.0
  21 └       name: ingress-nginx-admission-create
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller-ckad8_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller-ckad8_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller-ckad8_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-controller-ckad8_15.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller-ckad8_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller-ckad8_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller-ckad8_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller-ckad8_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller-ckad8_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller-ckad8_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller-ckad8_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller-ckad8_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller-ckad8_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller-ckad8_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller-ckad8_15.yaml:13-48
────────────────────────────────────────
  13 ┌   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/component: admission-webhook
  17 │         app.kubernetes.io/instance: ingress-nginx
  18 │         app.kubernetes.io/name: ingress-nginx
  19 │         app.kubernetes.io/part-of: ingress-nginx
  20 │         app.kubernetes.io/version: 1.3.0
  21 └       name: ingress-nginx-admission-patch
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller-ckad8_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller-ckad8_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller-ckad8_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-controller-ckad8_16.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller-ckad8_16.yaml:12
────────────────────────────────────────
  12 [   controller: k8s.io/ingress-nginx
────────────────────────────────────────



ingress-controller-ckad8_3.yaml (kubernetes)
============================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller-ckad8_3.yaml:60-68
────────────────────────────────────────
  60 ┌ - apiGroups:
  61 │   - ''
  62 │   resourceNames:
  63 │   - ingress-controller-leader
  64 │   resources:
  65 │   - configmaps
  66 │   verbs:
  67 │   - get
  68 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller-ckad8_3.yaml:69-74
────────────────────────────────────────
  69 ┌ - apiGroups:
  70 │   - ''
  71 │   resources:
  72 │   - configmaps
  73 │   verbs:
  74 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller-ckad8_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-controller-ckad8_4.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller-ckad8_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-controller-ckad8_5.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller-ckad8_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-controller-ckad8_6.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller-ckad8_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-controller-ckad9_12.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller-ckad9_12.yaml:13-29
────────────────────────────────────────
  13 ┌   externalTrafficPolicy: Local
  14 │   ports:
  15 │   - appProtocol: http
  16 │     name: http
  17 │     port: 80
  18 │     protocol: TCP
  19 │     targetPort: http
  20 │   - appProtocol: https
  21 └     name: https
  ..   
────────────────────────────────────────



ingress-controller-ckad9_13.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller-ckad9_13.yaml:13-22
────────────────────────────────────────
  13 ┌   ports:
  14 │   - appProtocol: https
  15 │     name: https-webhook
  16 │     port: 443
  17 │     targetPort: webhook
  18 │   selector:
  19 │     app.kubernetes.io/component: controller
  20 │     app.kubernetes.io/instance: ingress-nginx
  21 │     app.kubernetes.io/name: ingress-nginx
  22 └   type: ClusterIP
────────────────────────────────────────



ingress-controller-ckad9_14.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller-ckad9_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller-ckad9_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller-ckad9_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller-ckad9_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller-ckad9_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller-ckad9_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller-ckad9_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller-ckad9_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller-ckad9_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller-ckad9_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller-ckad9_14.yaml:13-46
────────────────────────────────────────
  13 ┌   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/component: admission-webhook
  17 │         app.kubernetes.io/instance: ingress-nginx
  18 │         app.kubernetes.io/name: ingress-nginx
  19 │         app.kubernetes.io/part-of: ingress-nginx
  20 │         app.kubernetes.io/version: 1.3.0
  21 └       name: ingress-nginx-admission-create
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller-ckad9_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller-ckad9_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller-ckad9_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-controller-ckad9_15.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller-ckad9_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller-ckad9_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller-ckad9_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller-ckad9_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller-ckad9_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller-ckad9_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller-ckad9_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller-ckad9_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller-ckad9_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller-ckad9_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller-ckad9_15.yaml:13-48
────────────────────────────────────────
  13 ┌   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/component: admission-webhook
  17 │         app.kubernetes.io/instance: ingress-nginx
  18 │         app.kubernetes.io/name: ingress-nginx
  19 │         app.kubernetes.io/part-of: ingress-nginx
  20 │         app.kubernetes.io/version: 1.3.0
  21 └       name: ingress-nginx-admission-patch
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller-ckad9_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller-ckad9_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller-ckad9_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-controller-ckad9_16.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller-ckad9_16.yaml:12
────────────────────────────────────────
  12 [   controller: k8s.io/ingress-nginx
────────────────────────────────────────



ingress-controller-ckad9_3.yaml (kubernetes)
============================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller-ckad9_3.yaml:60-68
────────────────────────────────────────
  60 ┌ - apiGroups:
  61 │   - ''
  62 │   resourceNames:
  63 │   - ingress-controller-leader
  64 │   resources:
  65 │   - configmaps
  66 │   verbs:
  67 │   - get
  68 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller-ckad9_3.yaml:69-74
────────────────────────────────────────
  69 ┌ - apiGroups:
  70 │   - ''
  71 │   resources:
  72 │   - configmaps
  73 │   verbs:
  74 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller-ckad9_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-controller-ckad9_4.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller-ckad9_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-controller-ckad9_5.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller-ckad9_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-controller-ckad9_6.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller-ckad9_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-controller-ckad_12.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller-ckad_12.yaml:13-29
────────────────────────────────────────
  13 ┌   externalTrafficPolicy: Local
  14 │   ports:
  15 │   - appProtocol: http
  16 │     name: http
  17 │     port: 80
  18 │     protocol: TCP
  19 │     targetPort: http
  20 │   - appProtocol: https
  21 └     name: https
  ..   
────────────────────────────────────────



ingress-controller-ckad_13.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller-ckad_13.yaml:13-22
────────────────────────────────────────
  13 ┌   ports:
  14 │   - appProtocol: https
  15 │     name: https-webhook
  16 │     port: 443
  17 │     targetPort: webhook
  18 │   selector:
  19 │     app.kubernetes.io/component: controller
  20 │     app.kubernetes.io/instance: ingress-nginx
  21 │     app.kubernetes.io/name: ingress-nginx
  22 └   type: ClusterIP
────────────────────────────────────────



ingress-controller-ckad_14.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller-ckad_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller-ckad_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller-ckad_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller-ckad_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller-ckad_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller-ckad_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller-ckad_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller-ckad_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller-ckad_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller-ckad_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller-ckad_14.yaml:13-46
────────────────────────────────────────
  13 ┌   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/component: admission-webhook
  17 │         app.kubernetes.io/instance: ingress-nginx
  18 │         app.kubernetes.io/name: ingress-nginx
  19 │         app.kubernetes.io/part-of: ingress-nginx
  20 │         app.kubernetes.io/version: 1.3.0
  21 └       name: ingress-nginx-admission-create
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller-ckad_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller-ckad_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller-ckad_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-controller-ckad_15.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller-ckad_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller-ckad_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller-ckad_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller-ckad_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller-ckad_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller-ckad_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller-ckad_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller-ckad_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller-ckad_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller-ckad_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller-ckad_15.yaml:13-48
────────────────────────────────────────
  13 ┌   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/component: admission-webhook
  17 │         app.kubernetes.io/instance: ingress-nginx
  18 │         app.kubernetes.io/name: ingress-nginx
  19 │         app.kubernetes.io/part-of: ingress-nginx
  20 │         app.kubernetes.io/version: 1.3.0
  21 └       name: ingress-nginx-admission-patch
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller-ckad_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller-ckad_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller-ckad_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-controller-ckad_16.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller-ckad_16.yaml:12
────────────────────────────────────────
  12 [   controller: k8s.io/ingress-nginx
────────────────────────────────────────



ingress-controller-ckad_3.yaml (kubernetes)
===========================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller-ckad_3.yaml:60-68
────────────────────────────────────────
  60 ┌ - apiGroups:
  61 │   - ''
  62 │   resourceNames:
  63 │   - ingress-controller-leader
  64 │   resources:
  65 │   - configmaps
  66 │   verbs:
  67 │   - get
  68 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller-ckad_3.yaml:69-74
────────────────────────────────────────
  69 ┌ - apiGroups:
  70 │   - ''
  71 │   resources:
  72 │   - configmaps
  73 │   verbs:
  74 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller-ckad_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-controller-ckad_4.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller-ckad_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-controller-ckad_5.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller-ckad_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-controller-ckad_6.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller-ckad_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-controller-service-definition-file.yaml (kubernetes)
============================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller-service-definition-file.yaml:6-17
────────────────────────────────────────
   6 ┌   type: NodePort
   7 │   ports:
   8 │     - port: 80
   9 │       targetPort: 80
  10 │       protocol: TCP
  11 │       name: http
  12 │     - port: 443
  13 │       targetPort: 443
  14 └       protocol: TCP
  ..   
────────────────────────────────────────



ingress-controller-service1.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller-service1.yaml:6-17
────────────────────────────────────────
   6 ┌   type: NodePort
   7 │   ports:
   8 │   - name: http
   9 │     port: 80
  10 │     targetPort: 80
  11 │     protocol: TCP
  12 │   - name: https
  13 │     port: 443
  14 └     targetPort: 443
  ..   
────────────────────────────────────────



ingress-controller1.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller1.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-http-backend
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller1.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-http-backend
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-controller1.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-http-backend
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller1.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-http-backend
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller1.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-http-backend
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller1.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-http-backend
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller1.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-http-backend
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-controller1.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-http-backend
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller1.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-http-backend
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller1.yaml:15-115
────────────────────────────────────────
  15 ┌   minReadySeconds: 0
  16 │   revisionHistoryLimit: 10
  17 │   selector:
  18 │     matchLabels:
  19 │       app.kubernetes.io/component: controller
  20 │       app.kubernetes.io/instance: ingress-nginx
  21 │       app.kubernetes.io/name: ingress-nginx
  22 │   template:
  23 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller1.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-http-backend
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller1.yaml:29-115
────────────────────────────────────────
  29 ┌       containers:
  30 │       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-http-backend
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 └         - --ingress-class=nginx
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller1.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-http-backend
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────



ingress-controller10_10.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller10_10.yaml:14
────────────────────────────────────────
  14 [   controller: k8s.io/ingress-nginx
────────────────────────────────────────



ingress-controller10_13.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller10_13.yaml:16-22
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - admissionregistration.k8s.io
  18 │   resources:
  19 │   - validatingwebhookconfigurations
  20 │   verbs:
  21 │   - get
  22 └   - update
────────────────────────────────────────



ingress-controller10_15.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller10_15.yaml:17-23
────────────────────────────────────────
  17 ┌ - apiGroups:
  18 │   - ''
  19 │   resources:
  20 │   - secrets
  21 │   verbs:
  22 │   - get
  23 └   - create
────────────────────────────────────────



ingress-controller10_17.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller10_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller10_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller10_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller10_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller10_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller10_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller10_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller10_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller10_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller10_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller10_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller10_17.yaml:17-48
────────────────────────────────────────
  17 ┌   template:
  18 │     metadata:
  19 │       name: ingress-nginx-admission-create
  20 │       labels:
  21 │         helm.sh/chart: ingress-nginx-4.0.6
  22 │         app.kubernetes.io/name: ingress-nginx
  23 │         app.kubernetes.io/instance: ingress-nginx
  24 │         app.kubernetes.io/version: 1.0.4
  25 └         app.kubernetes.io/managed-by: Helm
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller10_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller10_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────



ingress-controller10_18.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller10_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller10_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller10_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller10_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller10_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller10_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller10_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller10_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller10_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller10_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller10_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller10_18.yaml:17-50
────────────────────────────────────────
  17 ┌   template:
  18 │     metadata:
  19 │       name: ingress-nginx-admission-patch
  20 │       labels:
  21 │         helm.sh/chart: ingress-nginx-4.0.6
  22 │         app.kubernetes.io/name: ingress-nginx
  23 │         app.kubernetes.io/instance: ingress-nginx
  24 │         app.kubernetes.io/version: 1.0.4
  25 └         app.kubernetes.io/managed-by: Helm
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller10_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller10_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────



ingress-controller10_3.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller10_3.yaml:12-22
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - configmaps
  16 │   - endpoints
  17 │   - nodes
  18 │   - pods
  19 │   - secrets
  20 └   verbs:
  ..   
────────────────────────────────────────



ingress-controller10_5.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller10_5.yaml:61-69
────────────────────────────────────────
  61 ┌ - apiGroups:
  62 │   - ''
  63 │   resources:
  64 │   - configmaps
  65 │   resourceNames:
  66 │   - ingress-controller-leader
  67 │   verbs:
  68 │   - get
  69 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller10_5.yaml:70-75
────────────────────────────────────────
  70 ┌ - apiGroups:
  71 │   - ''
  72 │   resources:
  73 │   - configmaps
  74 │   verbs:
  75 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller10_5.yaml:20-30
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - configmaps
  24 │   - pods
  25 │   - secrets
  26 │   - endpoints
  27 │   verbs:
  28 └   - get
  ..   
────────────────────────────────────────



ingress-controller10_7.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller10_7.yaml:14-23
────────────────────────────────────────
  14 ┌   type: ClusterIP
  15 │   ports:
  16 │   - name: https-webhook
  17 │     port: 443
  18 │     targetPort: webhook
  19 │     appProtocol: https
  20 │   selector:
  21 │     app.kubernetes.io/name: ingress-nginx
  22 │     app.kubernetes.io/instance: ingress-nginx
  23 └     app.kubernetes.io/component: controller
────────────────────────────────────────



ingress-controller10_8.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller10_8.yaml:18-37
────────────────────────────────────────
  18 ┌   type: LoadBalancer
  19 │   externalTrafficPolicy: Local
  20 │   ipFamilyPolicy: SingleStack
  21 │   ipFamilies:
  22 │   - IPv4
  23 │   ports:
  24 │   - name: http
  25 │     port: 80
  26 └     protocol: TCP
  ..   
────────────────────────────────────────



ingress-controller10_9.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller10_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller10_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-controller10_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller10_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller10_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller10_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller10_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-controller10_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller10_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller10_9.yaml:14-111
────────────────────────────────────────
  14 ┌   selector:
  15 │     matchLabels:
  16 │       app.kubernetes.io/name: ingress-nginx
  17 │       app.kubernetes.io/instance: ingress-nginx
  18 │       app.kubernetes.io/component: controller
  19 │   revisionHistoryLimit: 10
  20 │   minReadySeconds: 0
  21 │   template:
  22 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller10_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller10_9.yaml:28-111
────────────────────────────────────────
  28 ┌       dnsPolicy: ClusterFirst
  29 │       containers:
  30 │       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 └               command:
  ..   
────────────────────────────────────────



ingress-controller11_12.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller11_12.yaml:17-36
────────────────────────────────────────
  17 ┌   externalTrafficPolicy: Local
  18 │   ipFamilies:
  19 │   - IPv4
  20 │   ipFamilyPolicy: SingleStack
  21 │   ports:
  22 │   - appProtocol: http
  23 │     name: http
  24 │     port: 80
  25 └     protocol: TCP
  ..   
────────────────────────────────────────



ingress-controller11_13.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller11_13.yaml:13-22
────────────────────────────────────────
  13 ┌   ports:
  14 │   - appProtocol: https
  15 │     name: https-webhook
  16 │     port: 443
  17 │     targetPort: webhook
  18 │   selector:
  19 │     app.kubernetes.io/component: controller
  20 │     app.kubernetes.io/instance: ingress-nginx
  21 │     app.kubernetes.io/name: ingress-nginx
  22 └   type: ClusterIP
────────────────────────────────────────



ingress-controller11_14.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller11_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller11_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-controller11_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller11_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller11_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller11_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller11_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-controller11_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller11_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller11_14.yaml:13-111
────────────────────────────────────────
  13 ┌   minReadySeconds: 0
  14 │   revisionHistoryLimit: 10
  15 │   selector:
  16 │     matchLabels:
  17 │       app.kubernetes.io/component: controller
  18 │       app.kubernetes.io/instance: ingress-nginx
  19 │       app.kubernetes.io/name: ingress-nginx
  20 │   template:
  21 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller11_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller11_14.yaml:27-111
────────────────────────────────────────
  27 ┌       containers:
  28 │       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller11_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────



ingress-controller11_15.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller11_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller11_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller11_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller11_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller11_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller11_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller11_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller11_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller11_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller11_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller11_15.yaml:13-46
────────────────────────────────────────
  13 ┌   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/component: admission-webhook
  17 │         app.kubernetes.io/instance: ingress-nginx
  18 │         app.kubernetes.io/name: ingress-nginx
  19 │         app.kubernetes.io/part-of: ingress-nginx
  20 │         app.kubernetes.io/version: 1.3.1
  21 └       name: ingress-nginx-admission-create
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller11_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller11_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller11_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-controller11_16.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller11_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller11_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller11_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller11_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller11_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller11_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller11_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller11_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller11_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller11_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller11_16.yaml:13-48
────────────────────────────────────────
  13 ┌   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/component: admission-webhook
  17 │         app.kubernetes.io/instance: ingress-nginx
  18 │         app.kubernetes.io/name: ingress-nginx
  19 │         app.kubernetes.io/part-of: ingress-nginx
  20 │         app.kubernetes.io/version: 1.3.1
  21 └       name: ingress-nginx-admission-patch
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller11_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller11_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller11_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-controller11_17.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller11_17.yaml:12
────────────────────────────────────────
  12 [   controller: k8s.io/ingress-nginx
────────────────────────────────────────



ingress-controller11_3.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller11_3.yaml:60-68
────────────────────────────────────────
  60 ┌ - apiGroups:
  61 │   - ''
  62 │   resourceNames:
  63 │   - ingress-controller-leader
  64 │   resources:
  65 │   - configmaps
  66 │   verbs:
  67 │   - get
  68 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller11_3.yaml:69-74
────────────────────────────────────────
  69 ┌ - apiGroups:
  70 │   - ''
  71 │   resources:
  72 │   - configmaps
  73 │   verbs:
  74 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller11_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-controller11_4.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller11_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-controller11_5.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller11_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-controller11_6.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller11_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-controller12.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller12.yaml:6-26
────────────────────────────────────────
   6 ┌   rules:
   7 │   - host: nginx-ingress.example.com
   8 │     http:
   9 │       paths:
  10 │       - path: /
  11 │         pathType: Exact
  12 │         backend:
  13 │           service:
  14 └             name: nginx-ingress-service
  ..   
────────────────────────────────────────



ingress-controller13.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller13.yaml:11-26
────────────────────────────────────────
  11 ┌   ingressClassName: nginx
  12 │   tls: 
  13 │     - hosts: 
  14 │         - eshoponweb.cloudns.biz
  15 │       secretName: eshoponweb-secret
  16 │   rules:
  17 │   - host: eshoponweb.cloudns.biz
  18 │     http:
  19 └         paths:
  ..   
────────────────────────────────────────



ingress-controller14.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller14.yaml:11-26
────────────────────────────────────────
  11 ┌   ingressClassName: nginx
  12 │   tls: 
  13 │     - hosts: 
  14 │         -  20.85.138.153
  15 │       secretName: parts-web-secret
  16 │   rules:
  17 │   - host: partsunlimited.cloudns.biz
  18 │     http:
  19 └         paths:
  ..   
────────────────────────────────────────



ingress-controller15.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller15.yaml:11-26
────────────────────────────────────────
  11 ┌   ingressClassName: nginx
  12 │   tls: 
  13 │     - hosts: 
  14 │         - tailwindtraders.cloudns.biz
  15 │       secretName: tailwind-secret
  16 │   rules:
  17 │   - host: tailwindtraders.cloudns.biz
  18 │     http:
  19 └         paths:
  ..   
────────────────────────────────────────



ingress-controller17_12.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller17_12.yaml:13-31
────────────────────────────────────────
  13 ┌   ipFamilies:
  14 │   - IPv4
  15 │   ipFamilyPolicy: SingleStack
  16 │   ports:
  17 │   - appProtocol: http
  18 │     name: http
  19 │     port: 80
  20 │     protocol: TCP
  21 └     targetPort: http
  ..   
────────────────────────────────────────



ingress-controller17_13.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller17_13.yaml:13-22
────────────────────────────────────────
  13 ┌   ports:
  14 │   - appProtocol: https
  15 │     name: https-webhook
  16 │     port: 443
  17 │     targetPort: webhook
  18 │   selector:
  19 │     app.kubernetes.io/component: controller
  20 │     app.kubernetes.io/instance: ingress-nginx
  21 │     app.kubernetes.io/name: ingress-nginx
  22 └   type: ClusterIP
────────────────────────────────────────



ingress-controller17_14.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller17_14.yaml:30-103
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --election-id=ingress-nginx-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  38 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller17_14.yaml:30-103
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --election-id=ingress-nginx-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  38 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-controller17_14.yaml:30-103
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --election-id=ingress-nginx-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  38 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller17_14.yaml:30-103
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --election-id=ingress-nginx-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  38 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller17_14.yaml:30-103
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --election-id=ingress-nginx-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  38 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller17_14.yaml:30-103
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --election-id=ingress-nginx-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  38 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller17_14.yaml:30-103
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --election-id=ingress-nginx-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  38 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-controller17_14.yaml:30-103
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --election-id=ingress-nginx-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  38 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller17_14.yaml:30-103
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --election-id=ingress-nginx-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  38 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller17_14.yaml:13-112
────────────────────────────────────────
  13 ┌   minReadySeconds: 0
  14 │   revisionHistoryLimit: 10
  15 │   selector:
  16 │     matchLabels:
  17 │       app.kubernetes.io/component: controller
  18 │       app.kubernetes.io/instance: ingress-nginx
  19 │       app.kubernetes.io/name: ingress-nginx
  20 │   template:
  21 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller17_14.yaml:30-103
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --election-id=ingress-nginx-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  38 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller17_14.yaml:29-112
────────────────────────────────────────
  29 ┌       containers:
  30 │       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --election-id=ingress-nginx-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller17_14.yaml:30-103
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --election-id=ingress-nginx-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  38 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────



ingress-controller17_15.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller17_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller17_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller17_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller17_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller17_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller17_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller17_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller17_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller17_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller17_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller17_15.yaml:13-46
────────────────────────────────────────
  13 ┌   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/component: admission-webhook
  17 │         app.kubernetes.io/instance: ingress-nginx
  18 │         app.kubernetes.io/name: ingress-nginx
  19 │         app.kubernetes.io/part-of: ingress-nginx
  20 │         app.kubernetes.io/version: 1.8.1
  21 └       name: ingress-nginx-admission-create
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller17_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller17_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller17_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-controller17_16.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller17_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller17_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller17_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller17_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller17_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller17_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller17_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller17_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller17_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller17_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller17_16.yaml:13-48
────────────────────────────────────────
  13 ┌   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/component: admission-webhook
  17 │         app.kubernetes.io/instance: ingress-nginx
  18 │         app.kubernetes.io/name: ingress-nginx
  19 │         app.kubernetes.io/part-of: ingress-nginx
  20 │         app.kubernetes.io/version: 1.8.1
  21 └       name: ingress-nginx-admission-patch
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller17_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller17_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller17_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-controller17_17.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller17_17.yaml:12
────────────────────────────────────────
  12 [   controller: k8s.io/ingress-nginx
────────────────────────────────────────



ingress-controller17_3.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller17_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-controller17_4.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller17_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-controller17_5.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller17_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-controller17_6.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller17_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-controller18_12.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller18_12.yaml:13-31
────────────────────────────────────────
  13 ┌   ipFamilies:
  14 │   - IPv4
  15 │   ipFamilyPolicy: SingleStack
  16 │   ports:
  17 │   - appProtocol: http
  18 │     name: http
  19 │     port: 80
  20 │     protocol: TCP
  21 └     targetPort: http
  ..   
────────────────────────────────────────



ingress-controller18_13.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller18_13.yaml:13-22
────────────────────────────────────────
  13 ┌   ports:
  14 │   - appProtocol: https
  15 │     name: https-webhook
  16 │     port: 443
  17 │     targetPort: webhook
  18 │   selector:
  19 │     app.kubernetes.io/component: controller
  20 │     app.kubernetes.io/instance: ingress-nginx
  21 │     app.kubernetes.io/name: ingress-nginx
  22 └   type: ClusterIP
────────────────────────────────────────



ingress-controller18_14.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller18_14.yaml:30-103
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --election-id=ingress-nginx-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  38 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller18_14.yaml:30-103
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --election-id=ingress-nginx-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  38 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-controller18_14.yaml:30-103
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --election-id=ingress-nginx-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  38 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller18_14.yaml:30-103
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --election-id=ingress-nginx-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  38 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller18_14.yaml:30-103
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --election-id=ingress-nginx-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  38 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller18_14.yaml:30-103
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --election-id=ingress-nginx-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  38 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller18_14.yaml:30-103
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --election-id=ingress-nginx-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  38 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-controller18_14.yaml:30-103
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --election-id=ingress-nginx-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  38 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller18_14.yaml:30-103
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --election-id=ingress-nginx-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  38 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller18_14.yaml:13-112
────────────────────────────────────────
  13 ┌   minReadySeconds: 0
  14 │   revisionHistoryLimit: 10
  15 │   selector:
  16 │     matchLabels:
  17 │       app.kubernetes.io/component: controller
  18 │       app.kubernetes.io/instance: ingress-nginx
  19 │       app.kubernetes.io/name: ingress-nginx
  20 │   template:
  21 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller18_14.yaml:30-103
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --election-id=ingress-nginx-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  38 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller18_14.yaml:29-112
────────────────────────────────────────
  29 ┌       containers:
  30 │       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --election-id=ingress-nginx-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller18_14.yaml:30-103
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --election-id=ingress-nginx-leader
  33 │         - --controller-class=k8s.io/ingress-nginx
  34 │         - --ingress-class=nginx
  35 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  36 │         - --validating-webhook=:8443
  37 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  38 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────



ingress-controller18_15.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller18_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller18_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller18_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller18_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller18_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller18_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller18_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller18_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller18_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller18_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller18_15.yaml:13-46
────────────────────────────────────────
  13 ┌   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/component: admission-webhook
  17 │         app.kubernetes.io/instance: ingress-nginx
  18 │         app.kubernetes.io/name: ingress-nginx
  19 │         app.kubernetes.io/part-of: ingress-nginx
  20 │         app.kubernetes.io/version: 1.8.1
  21 └       name: ingress-nginx-admission-create
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller18_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller18_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller18_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-controller18_16.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller18_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller18_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller18_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller18_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller18_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller18_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller18_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller18_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller18_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller18_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller18_16.yaml:13-48
────────────────────────────────────────
  13 ┌   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/component: admission-webhook
  17 │         app.kubernetes.io/instance: ingress-nginx
  18 │         app.kubernetes.io/name: ingress-nginx
  19 │         app.kubernetes.io/part-of: ingress-nginx
  20 │         app.kubernetes.io/version: 1.8.1
  21 └       name: ingress-nginx-admission-patch
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller18_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller18_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller18_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-controller18_17.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller18_17.yaml:12
────────────────────────────────────────
  12 [   controller: k8s.io/ingress-nginx
────────────────────────────────────────



ingress-controller18_3.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller18_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-controller18_4.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller18_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-controller18_5.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller18_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-controller18_6.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller18_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-controller19.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller19.yaml:8-61
────────────────────────────────────────
   8 ┌   ingressClassName: nginx
   9 │   rules:
  10 │   - host: kubernetes.docker.internal
  11 │     http:
  12 │       paths:
  13 │       - path: /api/users
  14 │         pathType: Prefix
  15 │         backend:
  16 └           service:
  ..   
────────────────────────────────────────



ingress-controller1_1.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller1_1.yaml:16-25
────────────────────────────────────────
  16 ┌   ports:
  17 │   - port: 80
  18 │     protocol: TCP
  19 │     targetPort: 80
  20 │     nodePort: 30080
  21 │   selector:
  22 │     app.kubernetes.io/component: controller
  23 │     app.kubernetes.io/instance: ingress-nginx
  24 │     app.kubernetes.io/name: ingress-nginx
  25 └   type: NodePort
────────────────────────────────────────



ingress-controller20.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller20.yaml:8-54
────────────────────────────────────────
   8 ┌   ingressClassName: nginx
   9 │   rules:
  10 │   - host: kubernetes.docker.internal
  11 │     http:
  12 │       paths:
  13 │       - path: /api/auth
  14 │         pathType: Prefix
  15 │         backend:
  16 └           service:
  ..   
────────────────────────────────────────



ingress-controller24_12.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller24_12.yaml:13-28
────────────────────────────────────────
  13 ┌   ports:
  14 │   - appProtocol: http
  15 │     name: http
  16 │     port: 80
  17 │     protocol: TCP
  18 │     targetPort: http
  19 │   - appProtocol: https
  20 │     name: https
  21 └     port: 443
  ..   
────────────────────────────────────────



ingress-controller24_13.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller24_13.yaml:13-22
────────────────────────────────────────
  13 ┌   ports:
  14 │   - appProtocol: https
  15 │     name: https-webhook
  16 │     port: 443
  17 │     targetPort: webhook
  18 │   selector:
  19 │     app.kubernetes.io/component: controller
  20 │     app.kubernetes.io/instance: ingress-nginx
  21 │     app.kubernetes.io/name: ingress-nginx
  22 └   type: ClusterIP
────────────────────────────────────────



ingress-controller24_14.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller24_14.yaml:32-108
────────────────────────────────────────
  32 ┌       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  40 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller24_14.yaml:32-108
────────────────────────────────────────
  32 ┌       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  40 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-controller24_14.yaml:32-108
────────────────────────────────────────
  32 ┌       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  40 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller24_14.yaml:32-108
────────────────────────────────────────
  32 ┌       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  40 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller24_14.yaml:32-108
────────────────────────────────────────
  32 ┌       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  40 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller24_14.yaml:32-108
────────────────────────────────────────
  32 ┌       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  40 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller24_14.yaml:32-108
────────────────────────────────────────
  32 ┌       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  40 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-controller24_14.yaml:32-108
────────────────────────────────────────
  32 ┌       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  40 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 ingress-controller24_14.yaml:32-108
────────────────────────────────────────
  32 ┌       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  40 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller24_14.yaml:32-108
────────────────────────────────────────
  32 ┌       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  40 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller24_14.yaml:13-122
────────────────────────────────────────
  13 ┌   minReadySeconds: 0
  14 │   revisionHistoryLimit: 10
  15 │   selector:
  16 │     matchLabels:
  17 │       app.kubernetes.io/component: controller
  18 │       app.kubernetes.io/instance: ingress-nginx
  19 │       app.kubernetes.io/name: ingress-nginx
  20 │   strategy:
  21 └     rollingUpdate:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller24_14.yaml:32-108
────────────────────────────────────────
  32 ┌       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  40 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller24_14.yaml:31-122
────────────────────────────────────────
  31 ┌       containers:
  32 │       - args:
  33 │         - /nginx-ingress-controller
  34 │         - --election-id=ingress-controller-leader
  35 │         - --controller-class=k8s.io/ingress-nginx
  36 │         - --ingress-class=nginx
  37 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  38 │         - --validating-webhook=:8443
  39 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────



ingress-controller24_15.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 11, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller24_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller24_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller24_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller24_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller24_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller24_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller24_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller24_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller24_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller24_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller24_15.yaml:13-44
────────────────────────────────────────
  13 ┌   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/component: admission-webhook
  17 │         app.kubernetes.io/instance: ingress-nginx
  18 │         app.kubernetes.io/name: ingress-nginx
  19 │         app.kubernetes.io/part-of: ingress-nginx
  20 │         app.kubernetes.io/version: 1.2.1
  21 └       name: ingress-nginx-admission-create
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller24_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller24_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-controller24_16.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 11, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller24_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller24_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller24_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller24_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller24_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller24_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller24_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller24_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller24_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller24_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller24_16.yaml:13-46
────────────────────────────────────────
  13 ┌   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/component: admission-webhook
  17 │         app.kubernetes.io/instance: ingress-nginx
  18 │         app.kubernetes.io/name: ingress-nginx
  19 │         app.kubernetes.io/part-of: ingress-nginx
  20 │         app.kubernetes.io/version: 1.2.1
  21 └       name: ingress-nginx-admission-patch
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller24_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller24_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-controller24_17.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller24_17.yaml:12
────────────────────────────────────────
  12 [   controller: k8s.io/ingress-nginx
────────────────────────────────────────



ingress-controller24_3.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller24_3.yaml:60-68
────────────────────────────────────────
  60 ┌ - apiGroups:
  61 │   - ''
  62 │   resourceNames:
  63 │   - ingress-controller-leader
  64 │   resources:
  65 │   - configmaps
  66 │   verbs:
  67 │   - get
  68 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller24_3.yaml:69-74
────────────────────────────────────────
  69 ┌ - apiGroups:
  70 │   - ''
  71 │   resources:
  72 │   - configmaps
  73 │   verbs:
  74 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller24_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-controller24_4.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller24_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-controller24_5.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller24_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-controller24_6.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller24_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-controller25_10.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller25_10.yaml:14
────────────────────────────────────────
  14 [   controller: k8s.io/ingress-nginx
────────────────────────────────────────



ingress-controller25_13.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller25_13.yaml:16-22
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - admissionregistration.k8s.io
  18 │   resources:
  19 │   - validatingwebhookconfigurations
  20 │   verbs:
  21 │   - get
  22 └   - update
────────────────────────────────────────



ingress-controller25_15.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller25_15.yaml:17-23
────────────────────────────────────────
  17 ┌ - apiGroups:
  18 │   - ''
  19 │   resources:
  20 │   - secrets
  21 │   verbs:
  22 │   - get
  23 └   - create
────────────────────────────────────────



ingress-controller25_17.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller25_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller25_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller25_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller25_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller25_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller25_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller25_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller25_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller25_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller25_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller25_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller25_17.yaml:17-48
────────────────────────────────────────
  17 ┌   template:
  18 │     metadata:
  19 │       name: ingress-nginx-admission-create
  20 │       labels:
  21 │         helm.sh/chart: ingress-nginx-4.0.6
  22 │         app.kubernetes.io/name: ingress-nginx
  23 │         app.kubernetes.io/instance: ingress-nginx
  24 │         app.kubernetes.io/version: 1.0.4
  25 └         app.kubernetes.io/managed-by: Helm
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller25_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller25_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────



ingress-controller25_18.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller25_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller25_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller25_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller25_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller25_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller25_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller25_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller25_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller25_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller25_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller25_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller25_18.yaml:17-50
────────────────────────────────────────
  17 ┌   template:
  18 │     metadata:
  19 │       name: ingress-nginx-admission-patch
  20 │       labels:
  21 │         helm.sh/chart: ingress-nginx-4.0.6
  22 │         app.kubernetes.io/name: ingress-nginx
  23 │         app.kubernetes.io/instance: ingress-nginx
  24 │         app.kubernetes.io/version: 1.0.4
  25 └         app.kubernetes.io/managed-by: Helm
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller25_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller25_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────



ingress-controller25_3.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller25_3.yaml:12-22
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - configmaps
  16 │   - endpoints
  17 │   - nodes
  18 │   - pods
  19 │   - secrets
  20 └   verbs:
  ..   
────────────────────────────────────────



ingress-controller25_5.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller25_5.yaml:61-69
────────────────────────────────────────
  61 ┌ - apiGroups:
  62 │   - ''
  63 │   resources:
  64 │   - configmaps
  65 │   resourceNames:
  66 │   - ingress-controller-leader
  67 │   verbs:
  68 │   - get
  69 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller25_5.yaml:70-75
────────────────────────────────────────
  70 ┌ - apiGroups:
  71 │   - ''
  72 │   resources:
  73 │   - configmaps
  74 │   verbs:
  75 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller25_5.yaml:20-30
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - configmaps
  24 │   - pods
  25 │   - secrets
  26 │   - endpoints
  27 │   verbs:
  28 └   - get
  ..   
────────────────────────────────────────



ingress-controller25_7.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller25_7.yaml:14-23
────────────────────────────────────────
  14 ┌   type: ClusterIP
  15 │   ports:
  16 │   - name: https-webhook
  17 │     port: 443
  18 │     targetPort: webhook
  19 │     appProtocol: https
  20 │   selector:
  21 │     app.kubernetes.io/name: ingress-nginx
  22 │     app.kubernetes.io/instance: ingress-nginx
  23 └     app.kubernetes.io/component: controller
────────────────────────────────────────



ingress-controller25_8.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller25_8.yaml:18-37
────────────────────────────────────────
  18 ┌   type: LoadBalancer
  19 │   externalTrafficPolicy: Local
  20 │   ipFamilyPolicy: SingleStack
  21 │   ipFamilies:
  22 │   - IPv4
  23 │   ports:
  24 │   - name: http
  25 │     port: 80
  26 └     protocol: TCP
  ..   
────────────────────────────────────────



ingress-controller25_9.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller25_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller25_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-controller25_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller25_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller25_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller25_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller25_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-controller25_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller25_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller25_9.yaml:14-111
────────────────────────────────────────
  14 ┌   selector:
  15 │     matchLabels:
  16 │       app.kubernetes.io/name: ingress-nginx
  17 │       app.kubernetes.io/instance: ingress-nginx
  18 │       app.kubernetes.io/component: controller
  19 │   revisionHistoryLimit: 10
  20 │   minReadySeconds: 0
  21 │   template:
  22 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller25_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller25_9.yaml:28-111
────────────────────────────────────────
  28 ┌       dnsPolicy: ClusterFirst
  29 │       containers:
  30 │       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 └               command:
  ..   
────────────────────────────────────────



ingress-controller26_10.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller26_10.yaml:14
────────────────────────────────────────
  14 [   controller: k8s.io/ingress-nginx
────────────────────────────────────────



ingress-controller26_13.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller26_13.yaml:16-22
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - admissionregistration.k8s.io
  18 │   resources:
  19 │   - validatingwebhookconfigurations
  20 │   verbs:
  21 │   - get
  22 └   - update
────────────────────────────────────────



ingress-controller26_15.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller26_15.yaml:17-23
────────────────────────────────────────
  17 ┌ - apiGroups:
  18 │   - ''
  19 │   resources:
  20 │   - secrets
  21 │   verbs:
  22 │   - get
  23 └   - create
────────────────────────────────────────



ingress-controller26_17.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller26_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller26_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller26_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller26_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller26_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller26_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller26_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller26_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller26_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller26_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller26_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller26_17.yaml:17-48
────────────────────────────────────────
  17 ┌   template:
  18 │     metadata:
  19 │       name: ingress-nginx-admission-create
  20 │       labels:
  21 │         helm.sh/chart: ingress-nginx-4.0.6
  22 │         app.kubernetes.io/name: ingress-nginx
  23 │         app.kubernetes.io/instance: ingress-nginx
  24 │         app.kubernetes.io/version: 1.0.4
  25 └         app.kubernetes.io/managed-by: Helm
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller26_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller26_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────



ingress-controller26_18.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller26_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller26_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller26_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller26_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller26_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller26_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller26_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller26_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller26_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller26_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller26_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller26_18.yaml:17-50
────────────────────────────────────────
  17 ┌   template:
  18 │     metadata:
  19 │       name: ingress-nginx-admission-patch
  20 │       labels:
  21 │         helm.sh/chart: ingress-nginx-4.0.6
  22 │         app.kubernetes.io/name: ingress-nginx
  23 │         app.kubernetes.io/instance: ingress-nginx
  24 │         app.kubernetes.io/version: 1.0.4
  25 └         app.kubernetes.io/managed-by: Helm
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller26_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller26_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────



ingress-controller26_3.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller26_3.yaml:12-22
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - configmaps
  16 │   - endpoints
  17 │   - nodes
  18 │   - pods
  19 │   - secrets
  20 └   verbs:
  ..   
────────────────────────────────────────



ingress-controller26_5.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller26_5.yaml:61-69
────────────────────────────────────────
  61 ┌ - apiGroups:
  62 │   - ''
  63 │   resources:
  64 │   - configmaps
  65 │   resourceNames:
  66 │   - ingress-controller-leader
  67 │   verbs:
  68 │   - get
  69 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller26_5.yaml:70-75
────────────────────────────────────────
  70 ┌ - apiGroups:
  71 │   - ''
  72 │   resources:
  73 │   - configmaps
  74 │   verbs:
  75 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller26_5.yaml:20-30
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - configmaps
  24 │   - pods
  25 │   - secrets
  26 │   - endpoints
  27 │   verbs:
  28 └   - get
  ..   
────────────────────────────────────────



ingress-controller26_7.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller26_7.yaml:14-23
────────────────────────────────────────
  14 ┌   type: ClusterIP
  15 │   ports:
  16 │   - name: https-webhook
  17 │     port: 443
  18 │     targetPort: webhook
  19 │     appProtocol: https
  20 │   selector:
  21 │     app.kubernetes.io/name: ingress-nginx
  22 │     app.kubernetes.io/instance: ingress-nginx
  23 └     app.kubernetes.io/component: controller
────────────────────────────────────────



ingress-controller26_8.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller26_8.yaml:18-37
────────────────────────────────────────
  18 ┌   type: LoadBalancer
  19 │   externalTrafficPolicy: Local
  20 │   ipFamilyPolicy: SingleStack
  21 │   ipFamilies:
  22 │   - IPv4
  23 │   ports:
  24 │   - name: http
  25 │     port: 80
  26 └     protocol: TCP
  ..   
────────────────────────────────────────



ingress-controller26_9.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller26_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller26_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-controller26_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller26_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller26_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller26_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller26_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-controller26_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller26_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller26_9.yaml:14-111
────────────────────────────────────────
  14 ┌   selector:
  15 │     matchLabels:
  16 │       app.kubernetes.io/name: ingress-nginx
  17 │       app.kubernetes.io/instance: ingress-nginx
  18 │       app.kubernetes.io/component: controller
  19 │   revisionHistoryLimit: 10
  20 │   minReadySeconds: 0
  21 │   template:
  22 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller26_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller26_9.yaml:28-111
────────────────────────────────────────
  28 ┌       dnsPolicy: ClusterFirst
  29 │       containers:
  30 │       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 └               command:
  ..   
────────────────────────────────────────



ingress-controller27_10.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller27_10.yaml:14
────────────────────────────────────────
  14 [   controller: k8s.io/ingress-nginx
────────────────────────────────────────



ingress-controller27_13.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller27_13.yaml:16-22
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - admissionregistration.k8s.io
  18 │   resources:
  19 │   - validatingwebhookconfigurations
  20 │   verbs:
  21 │   - get
  22 └   - update
────────────────────────────────────────



ingress-controller27_15.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller27_15.yaml:17-23
────────────────────────────────────────
  17 ┌ - apiGroups:
  18 │   - ''
  19 │   resources:
  20 │   - secrets
  21 │   verbs:
  22 │   - get
  23 └   - create
────────────────────────────────────────



ingress-controller27_17.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller27_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller27_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller27_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller27_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller27_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller27_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller27_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller27_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller27_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller27_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller27_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller27_17.yaml:17-48
────────────────────────────────────────
  17 ┌   template:
  18 │     metadata:
  19 │       name: ingress-nginx-admission-create
  20 │       labels:
  21 │         helm.sh/chart: ingress-nginx-4.0.6
  22 │         app.kubernetes.io/name: ingress-nginx
  23 │         app.kubernetes.io/instance: ingress-nginx
  24 │         app.kubernetes.io/version: 1.0.4
  25 └         app.kubernetes.io/managed-by: Helm
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller27_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller27_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────



ingress-controller27_18.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller27_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller27_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller27_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller27_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller27_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller27_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller27_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller27_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller27_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller27_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller27_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller27_18.yaml:17-50
────────────────────────────────────────
  17 ┌   template:
  18 │     metadata:
  19 │       name: ingress-nginx-admission-patch
  20 │       labels:
  21 │         helm.sh/chart: ingress-nginx-4.0.6
  22 │         app.kubernetes.io/name: ingress-nginx
  23 │         app.kubernetes.io/instance: ingress-nginx
  24 │         app.kubernetes.io/version: 1.0.4
  25 └         app.kubernetes.io/managed-by: Helm
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller27_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller27_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────



ingress-controller27_3.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller27_3.yaml:12-22
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - configmaps
  16 │   - endpoints
  17 │   - nodes
  18 │   - pods
  19 │   - secrets
  20 └   verbs:
  ..   
────────────────────────────────────────



ingress-controller27_5.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller27_5.yaml:61-69
────────────────────────────────────────
  61 ┌ - apiGroups:
  62 │   - ''
  63 │   resources:
  64 │   - configmaps
  65 │   resourceNames:
  66 │   - ingress-controller-leader
  67 │   verbs:
  68 │   - get
  69 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller27_5.yaml:70-75
────────────────────────────────────────
  70 ┌ - apiGroups:
  71 │   - ''
  72 │   resources:
  73 │   - configmaps
  74 │   verbs:
  75 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller27_5.yaml:20-30
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - configmaps
  24 │   - pods
  25 │   - secrets
  26 │   - endpoints
  27 │   verbs:
  28 └   - get
  ..   
────────────────────────────────────────



ingress-controller27_7.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller27_7.yaml:14-23
────────────────────────────────────────
  14 ┌   type: ClusterIP
  15 │   ports:
  16 │   - name: https-webhook
  17 │     port: 443
  18 │     targetPort: webhook
  19 │     appProtocol: https
  20 │   selector:
  21 │     app.kubernetes.io/name: ingress-nginx
  22 │     app.kubernetes.io/instance: ingress-nginx
  23 └     app.kubernetes.io/component: controller
────────────────────────────────────────



ingress-controller27_8.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller27_8.yaml:18-37
────────────────────────────────────────
  18 ┌   type: LoadBalancer
  19 │   externalTrafficPolicy: Local
  20 │   ipFamilyPolicy: SingleStack
  21 │   ipFamilies:
  22 │   - IPv4
  23 │   ports:
  24 │   - name: http
  25 │     port: 80
  26 └     protocol: TCP
  ..   
────────────────────────────────────────



ingress-controller27_9.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller27_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller27_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-controller27_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller27_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller27_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller27_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller27_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-controller27_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller27_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller27_9.yaml:14-111
────────────────────────────────────────
  14 ┌   selector:
  15 │     matchLabels:
  16 │       app.kubernetes.io/name: ingress-nginx
  17 │       app.kubernetes.io/instance: ingress-nginx
  18 │       app.kubernetes.io/component: controller
  19 │   revisionHistoryLimit: 10
  20 │   minReadySeconds: 0
  21 │   template:
  22 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller27_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller27_9.yaml:28-111
────────────────────────────────────────
  28 ┌       dnsPolicy: ClusterFirst
  29 │       containers:
  30 │       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 └               command:
  ..   
────────────────────────────────────────



ingress-controller28_12.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller28_12.yaml:17-36
────────────────────────────────────────
  17 ┌   externalTrafficPolicy: Local
  18 │   ipFamilies:
  19 │   - IPv4
  20 │   ipFamilyPolicy: SingleStack
  21 │   ports:
  22 │   - appProtocol: http
  23 │     name: http
  24 │     port: 80
  25 └     protocol: TCP
  ..   
────────────────────────────────────────



ingress-controller28_13.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller28_13.yaml:13-22
────────────────────────────────────────
  13 ┌   ports:
  14 │   - appProtocol: https
  15 │     name: https-webhook
  16 │     port: 443
  17 │     targetPort: webhook
  18 │   selector:
  19 │     app.kubernetes.io/component: controller
  20 │     app.kubernetes.io/instance: ingress-nginx
  21 │     app.kubernetes.io/name: ingress-nginx
  22 └   type: ClusterIP
────────────────────────────────────────



ingress-controller28_14.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller28_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller28_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-controller28_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller28_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller28_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller28_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller28_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-controller28_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller28_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller28_14.yaml:13-111
────────────────────────────────────────
  13 ┌   minReadySeconds: 0
  14 │   revisionHistoryLimit: 10
  15 │   selector:
  16 │     matchLabels:
  17 │       app.kubernetes.io/component: controller
  18 │       app.kubernetes.io/instance: ingress-nginx
  19 │       app.kubernetes.io/name: ingress-nginx
  20 │   template:
  21 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller28_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller28_14.yaml:27-111
────────────────────────────────────────
  27 ┌       containers:
  28 │       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller28_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────



ingress-controller28_15.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller28_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller28_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller28_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller28_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller28_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller28_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller28_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller28_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller28_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller28_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller28_15.yaml:13-46
────────────────────────────────────────
  13 ┌   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/component: admission-webhook
  17 │         app.kubernetes.io/instance: ingress-nginx
  18 │         app.kubernetes.io/name: ingress-nginx
  19 │         app.kubernetes.io/part-of: ingress-nginx
  20 │         app.kubernetes.io/version: 1.3.1
  21 └       name: ingress-nginx-admission-create
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller28_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller28_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller28_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-controller28_16.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller28_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller28_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller28_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller28_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller28_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller28_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller28_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller28_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller28_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller28_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller28_16.yaml:13-48
────────────────────────────────────────
  13 ┌   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/component: admission-webhook
  17 │         app.kubernetes.io/instance: ingress-nginx
  18 │         app.kubernetes.io/name: ingress-nginx
  19 │         app.kubernetes.io/part-of: ingress-nginx
  20 │         app.kubernetes.io/version: 1.3.1
  21 └       name: ingress-nginx-admission-patch
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller28_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller28_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller28_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-controller28_17.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller28_17.yaml:12
────────────────────────────────────────
  12 [   controller: k8s.io/ingress-nginx
────────────────────────────────────────



ingress-controller28_3.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller28_3.yaml:60-68
────────────────────────────────────────
  60 ┌ - apiGroups:
  61 │   - ''
  62 │   resourceNames:
  63 │   - ingress-controller-leader
  64 │   resources:
  65 │   - configmaps
  66 │   verbs:
  67 │   - get
  68 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller28_3.yaml:69-74
────────────────────────────────────────
  69 ┌ - apiGroups:
  70 │   - ''
  71 │   resources:
  72 │   - configmaps
  73 │   verbs:
  74 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller28_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-controller28_4.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller28_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-controller28_5.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller28_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-controller28_6.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller28_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-controller2_10.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller2_10.yaml:14
────────────────────────────────────────
  14 [   controller: k8s.io/ingress-nginx
────────────────────────────────────────



ingress-controller2_13.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller2_13.yaml:16-22
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - admissionregistration.k8s.io
  18 │   resources:
  19 │   - validatingwebhookconfigurations
  20 │   verbs:
  21 │   - get
  22 └   - update
────────────────────────────────────────



ingress-controller2_15.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller2_15.yaml:17-23
────────────────────────────────────────
  17 ┌ - apiGroups:
  18 │   - ''
  19 │   resources:
  20 │   - secrets
  21 │   verbs:
  22 │   - get
  23 └   - create
────────────────────────────────────────



ingress-controller2_17.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller2_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller2_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller2_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller2_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller2_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller2_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller2_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller2_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller2_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller2_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller2_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller2_17.yaml:17-48
────────────────────────────────────────
  17 ┌   template:
  18 │     metadata:
  19 │       name: ingress-nginx-admission-create
  20 │       labels:
  21 │         helm.sh/chart: ingress-nginx-4.0.6
  22 │         app.kubernetes.io/name: ingress-nginx
  23 │         app.kubernetes.io/instance: ingress-nginx
  24 │         app.kubernetes.io/version: 1.0.4
  25 └         app.kubernetes.io/managed-by: Helm
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller2_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller2_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────



ingress-controller2_18.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller2_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller2_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller2_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller2_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller2_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller2_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller2_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller2_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller2_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller2_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller2_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller2_18.yaml:17-50
────────────────────────────────────────
  17 ┌   template:
  18 │     metadata:
  19 │       name: ingress-nginx-admission-patch
  20 │       labels:
  21 │         helm.sh/chart: ingress-nginx-4.0.6
  22 │         app.kubernetes.io/name: ingress-nginx
  23 │         app.kubernetes.io/instance: ingress-nginx
  24 │         app.kubernetes.io/version: 1.0.4
  25 └         app.kubernetes.io/managed-by: Helm
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller2_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller2_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────



ingress-controller2_3.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller2_3.yaml:12-22
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - configmaps
  16 │   - endpoints
  17 │   - nodes
  18 │   - pods
  19 │   - secrets
  20 └   verbs:
  ..   
────────────────────────────────────────



ingress-controller2_5.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller2_5.yaml:61-69
────────────────────────────────────────
  61 ┌ - apiGroups:
  62 │   - ''
  63 │   resources:
  64 │   - configmaps
  65 │   resourceNames:
  66 │   - ingress-controller-leader
  67 │   verbs:
  68 │   - get
  69 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller2_5.yaml:70-75
────────────────────────────────────────
  70 ┌ - apiGroups:
  71 │   - ''
  72 │   resources:
  73 │   - configmaps
  74 │   verbs:
  75 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller2_5.yaml:20-30
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - configmaps
  24 │   - pods
  25 │   - secrets
  26 │   - endpoints
  27 │   verbs:
  28 └   - get
  ..   
────────────────────────────────────────



ingress-controller2_7.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller2_7.yaml:14-23
────────────────────────────────────────
  14 ┌   type: ClusterIP
  15 │   ports:
  16 │   - name: https-webhook
  17 │     port: 443
  18 │     targetPort: webhook
  19 │     appProtocol: https
  20 │   selector:
  21 │     app.kubernetes.io/name: ingress-nginx
  22 │     app.kubernetes.io/instance: ingress-nginx
  23 └     app.kubernetes.io/component: controller
────────────────────────────────────────



ingress-controller2_8.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller2_8.yaml:18-37
────────────────────────────────────────
  18 ┌   type: LoadBalancer
  19 │   externalTrafficPolicy: Local
  20 │   ipFamilyPolicy: SingleStack
  21 │   ipFamilies:
  22 │   - IPv4
  23 │   ports:
  24 │   - name: http
  25 │     port: 80
  26 └     protocol: TCP
  ..   
────────────────────────────────────────



ingress-controller2_9.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller2_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller2_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-controller2_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller2_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller2_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller2_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller2_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-controller2_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller2_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller2_9.yaml:14-111
────────────────────────────────────────
  14 ┌   selector:
  15 │     matchLabels:
  16 │       app.kubernetes.io/name: ingress-nginx
  17 │       app.kubernetes.io/instance: ingress-nginx
  18 │       app.kubernetes.io/component: controller
  19 │   revisionHistoryLimit: 10
  20 │   minReadySeconds: 0
  21 │   template:
  22 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller2_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller2_9.yaml:28-111
────────────────────────────────────────
  28 ┌       dnsPolicy: ClusterFirst
  29 │       containers:
  30 │       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 └               command:
  ..   
────────────────────────────────────────



ingress-controller30_10.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller30_10.yaml:10-14
────────────────────────────────────────
  10 ┌   limits:
  11 │   - min:
  12 │       memory: 90Mi
  13 │       cpu: 100m
  14 └     type: Container
────────────────────────────────────────



ingress-controller30_9.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 8, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller30_9.yaml:30-86
────────────────────────────────────────
  30 ┌       - name: nginx-ingress-controller
  31 │         image: lizhenliang/nginx-ingress-controller:0.30.0
  32 │         args:
  33 │         - /nginx-ingress-controller
  34 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  35 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  36 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  37 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  38 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): Deployment 'nginx-ingress-controller' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 ingress-controller30_9.yaml:10-86
────────────────────────────────────────
  10 ┌   replicas: 1
  11 │   selector:
  12 │     matchLabels:
  13 │       app.kubernetes.io/name: ingress-nginx
  14 │       app.kubernetes.io/part-of: ingress-nginx
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 └         app.kubernetes.io/name: ingress-nginx
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller30_9.yaml:30-86
────────────────────────────────────────
  30 ┌       - name: nginx-ingress-controller
  31 │         image: lizhenliang/nginx-ingress-controller:0.30.0
  32 │         args:
  33 │         - /nginx-ingress-controller
  34 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  35 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  36 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  37 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  38 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-controller30_9.yaml:30-86
────────────────────────────────────────
  30 ┌       - name: nginx-ingress-controller
  31 │         image: lizhenliang/nginx-ingress-controller:0.30.0
  32 │         args:
  33 │         - /nginx-ingress-controller
  34 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  35 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  36 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  37 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  38 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller30_9.yaml:30-86
────────────────────────────────────────
  30 ┌       - name: nginx-ingress-controller
  31 │         image: lizhenliang/nginx-ingress-controller:0.30.0
  32 │         args:
  33 │         - /nginx-ingress-controller
  34 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  35 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  36 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  37 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  38 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller30_9.yaml:30-86
────────────────────────────────────────
  30 ┌       - name: nginx-ingress-controller
  31 │         image: lizhenliang/nginx-ingress-controller:0.30.0
  32 │         args:
  33 │         - /nginx-ingress-controller
  34 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  35 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  36 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  37 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  38 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller30_9.yaml:30-86
────────────────────────────────────────
  30 ┌       - name: nginx-ingress-controller
  31 │         image: lizhenliang/nginx-ingress-controller:0.30.0
  32 │         args:
  33 │         - /nginx-ingress-controller
  34 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  35 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  36 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  37 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  38 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller30_9.yaml:30-86
────────────────────────────────────────
  30 ┌       - name: nginx-ingress-controller
  31 │         image: lizhenliang/nginx-ingress-controller:0.30.0
  32 │         args:
  33 │         - /nginx-ingress-controller
  34 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  35 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  36 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  37 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  38 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller30_9.yaml:30-86
────────────────────────────────────────
  30 ┌       - name: nginx-ingress-controller
  31 │         image: lizhenliang/nginx-ingress-controller:0.30.0
  32 │         args:
  33 │         - /nginx-ingress-controller
  34 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  35 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  36 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  37 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  38 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller30_9.yaml:30-86
────────────────────────────────────────
  30 ┌       - name: nginx-ingress-controller
  31 │         image: lizhenliang/nginx-ingress-controller:0.30.0
  32 │         args:
  33 │         - /nginx-ingress-controller
  34 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  35 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  36 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  37 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  38 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-controller30_9.yaml:30-86
────────────────────────────────────────
  30 ┌       - name: nginx-ingress-controller
  31 │         image: lizhenliang/nginx-ingress-controller:0.30.0
  32 │         args:
  33 │         - /nginx-ingress-controller
  34 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  35 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  36 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  37 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  38 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller30_9.yaml:30-86
────────────────────────────────────────
  30 ┌       - name: nginx-ingress-controller
  31 │         image: lizhenliang/nginx-ingress-controller:0.30.0
  32 │         args:
  33 │         - /nginx-ingress-controller
  34 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  35 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  36 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  37 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  38 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller30_9.yaml:10-86
────────────────────────────────────────
  10 ┌   replicas: 1
  11 │   selector:
  12 │     matchLabels:
  13 │       app.kubernetes.io/name: ingress-nginx
  14 │       app.kubernetes.io/part-of: ingress-nginx
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 └         app.kubernetes.io/name: ingress-nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-ingress-controller" of deployment "nginx-ingress-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller30_9.yaml:30-86
────────────────────────────────────────
  30 ┌       - name: nginx-ingress-controller
  31 │         image: lizhenliang/nginx-ingress-controller:0.30.0
  32 │         args:
  33 │         - /nginx-ingress-controller
  34 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  35 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  36 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  37 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  38 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-ingress-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-ingress-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller30_9.yaml:24-86
────────────────────────────────────────
  24 ┌       hostNetwork: true
  25 │       terminationGracePeriodSeconds: 300
  26 │       serviceAccountName: nginx-ingress-serviceaccount
  27 │       nodeSelector:
  28 │         kubernetes.io/os: linux
  29 │       containers:
  30 │       - name: nginx-ingress-controller
  31 │         image: lizhenliang/nginx-ingress-controller:0.30.0
  32 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nginx-ingress-controller in deployment nginx-ingress-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller30_9.yaml:30-86
────────────────────────────────────────
  30 ┌       - name: nginx-ingress-controller
  31 │         image: lizhenliang/nginx-ingress-controller:0.30.0
  32 │         args:
  33 │         - /nginx-ingress-controller
  34 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  35 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  36 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  37 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  38 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────



ingress-controller33_10.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller33_10.yaml:10-14
────────────────────────────────────────
  10 ┌   limits:
  11 │   - min:
  12 │       memory: 90Mi
  13 │       cpu: 100m
  14 └     type: Container
────────────────────────────────────────



ingress-controller33_9.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 8, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller33_9.yaml:30-86
────────────────────────────────────────
  30 ┌       - name: nginx-ingress-controller
  31 │         image: lizhenliang/nginx-ingress-controller:0.30.0
  32 │         args:
  33 │         - /nginx-ingress-controller
  34 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  35 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  36 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  37 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  38 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): Deployment 'nginx-ingress-controller' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 ingress-controller33_9.yaml:10-86
────────────────────────────────────────
  10 ┌   replicas: 1
  11 │   selector:
  12 │     matchLabels:
  13 │       app.kubernetes.io/name: ingress-nginx
  14 │       app.kubernetes.io/part-of: ingress-nginx
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 └         app.kubernetes.io/name: ingress-nginx
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller33_9.yaml:30-86
────────────────────────────────────────
  30 ┌       - name: nginx-ingress-controller
  31 │         image: lizhenliang/nginx-ingress-controller:0.30.0
  32 │         args:
  33 │         - /nginx-ingress-controller
  34 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  35 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  36 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  37 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  38 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-controller33_9.yaml:30-86
────────────────────────────────────────
  30 ┌       - name: nginx-ingress-controller
  31 │         image: lizhenliang/nginx-ingress-controller:0.30.0
  32 │         args:
  33 │         - /nginx-ingress-controller
  34 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  35 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  36 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  37 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  38 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller33_9.yaml:30-86
────────────────────────────────────────
  30 ┌       - name: nginx-ingress-controller
  31 │         image: lizhenliang/nginx-ingress-controller:0.30.0
  32 │         args:
  33 │         - /nginx-ingress-controller
  34 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  35 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  36 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  37 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  38 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller33_9.yaml:30-86
────────────────────────────────────────
  30 ┌       - name: nginx-ingress-controller
  31 │         image: lizhenliang/nginx-ingress-controller:0.30.0
  32 │         args:
  33 │         - /nginx-ingress-controller
  34 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  35 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  36 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  37 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  38 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller33_9.yaml:30-86
────────────────────────────────────────
  30 ┌       - name: nginx-ingress-controller
  31 │         image: lizhenliang/nginx-ingress-controller:0.30.0
  32 │         args:
  33 │         - /nginx-ingress-controller
  34 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  35 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  36 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  37 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  38 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller33_9.yaml:30-86
────────────────────────────────────────
  30 ┌       - name: nginx-ingress-controller
  31 │         image: lizhenliang/nginx-ingress-controller:0.30.0
  32 │         args:
  33 │         - /nginx-ingress-controller
  34 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  35 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  36 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  37 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  38 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller33_9.yaml:30-86
────────────────────────────────────────
  30 ┌       - name: nginx-ingress-controller
  31 │         image: lizhenliang/nginx-ingress-controller:0.30.0
  32 │         args:
  33 │         - /nginx-ingress-controller
  34 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  35 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  36 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  37 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  38 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller33_9.yaml:30-86
────────────────────────────────────────
  30 ┌       - name: nginx-ingress-controller
  31 │         image: lizhenliang/nginx-ingress-controller:0.30.0
  32 │         args:
  33 │         - /nginx-ingress-controller
  34 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  35 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  36 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  37 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  38 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-controller33_9.yaml:30-86
────────────────────────────────────────
  30 ┌       - name: nginx-ingress-controller
  31 │         image: lizhenliang/nginx-ingress-controller:0.30.0
  32 │         args:
  33 │         - /nginx-ingress-controller
  34 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  35 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  36 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  37 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  38 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller33_9.yaml:30-86
────────────────────────────────────────
  30 ┌       - name: nginx-ingress-controller
  31 │         image: lizhenliang/nginx-ingress-controller:0.30.0
  32 │         args:
  33 │         - /nginx-ingress-controller
  34 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  35 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  36 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  37 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  38 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller33_9.yaml:10-86
────────────────────────────────────────
  10 ┌   replicas: 1
  11 │   selector:
  12 │     matchLabels:
  13 │       app.kubernetes.io/name: ingress-nginx
  14 │       app.kubernetes.io/part-of: ingress-nginx
  15 │   template:
  16 │     metadata:
  17 │       labels:
  18 └         app.kubernetes.io/name: ingress-nginx
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-ingress-controller" of deployment "nginx-ingress-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller33_9.yaml:30-86
────────────────────────────────────────
  30 ┌       - name: nginx-ingress-controller
  31 │         image: lizhenliang/nginx-ingress-controller:0.30.0
  32 │         args:
  33 │         - /nginx-ingress-controller
  34 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  35 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  36 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  37 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  38 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-ingress-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-ingress-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller33_9.yaml:24-86
────────────────────────────────────────
  24 ┌       hostNetwork: true
  25 │       terminationGracePeriodSeconds: 300
  26 │       serviceAccountName: nginx-ingress-serviceaccount
  27 │       nodeSelector:
  28 │         kubernetes.io/os: linux
  29 │       containers:
  30 │       - name: nginx-ingress-controller
  31 │         image: lizhenliang/nginx-ingress-controller:0.30.0
  32 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nginx-ingress-controller in deployment nginx-ingress-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller33_9.yaml:30-86
────────────────────────────────────────
  30 ┌       - name: nginx-ingress-controller
  31 │         image: lizhenliang/nginx-ingress-controller:0.30.0
  32 │         args:
  33 │         - /nginx-ingress-controller
  34 │         - --configmap=$(POD_NAMESPACE)/nginx-configuration
  35 │         - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
  36 │         - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
  37 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx
  38 └         - --annotations-prefix=nginx.ingress.kubernetes.io
  ..   
────────────────────────────────────────



ingress-controller34_10.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller34_10.yaml:14
────────────────────────────────────────
  14 [   controller: k8s.io/ingress-nginx
────────────────────────────────────────



ingress-controller34_13.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller34_13.yaml:16-22
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - admissionregistration.k8s.io
  18 │   resources:
  19 │   - validatingwebhookconfigurations
  20 │   verbs:
  21 │   - get
  22 └   - update
────────────────────────────────────────



ingress-controller34_15.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller34_15.yaml:17-23
────────────────────────────────────────
  17 ┌ - apiGroups:
  18 │   - ''
  19 │   resources:
  20 │   - secrets
  21 │   verbs:
  22 │   - get
  23 └   - create
────────────────────────────────────────



ingress-controller34_17.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller34_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller34_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller34_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller34_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller34_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller34_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller34_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller34_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller34_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller34_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller34_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller34_17.yaml:17-48
────────────────────────────────────────
  17 ┌   template:
  18 │     metadata:
  19 │       name: ingress-nginx-admission-create
  20 │       labels:
  21 │         helm.sh/chart: ingress-nginx-4.0.6
  22 │         app.kubernetes.io/name: ingress-nginx
  23 │         app.kubernetes.io/instance: ingress-nginx
  24 │         app.kubernetes.io/version: 1.0.4
  25 └         app.kubernetes.io/managed-by: Helm
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller34_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller34_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────



ingress-controller34_18.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller34_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller34_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller34_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller34_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller34_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller34_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller34_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller34_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller34_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller34_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller34_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller34_18.yaml:17-50
────────────────────────────────────────
  17 ┌   template:
  18 │     metadata:
  19 │       name: ingress-nginx-admission-patch
  20 │       labels:
  21 │         helm.sh/chart: ingress-nginx-4.0.6
  22 │         app.kubernetes.io/name: ingress-nginx
  23 │         app.kubernetes.io/instance: ingress-nginx
  24 │         app.kubernetes.io/version: 1.0.4
  25 └         app.kubernetes.io/managed-by: Helm
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller34_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller34_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────



ingress-controller34_3.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller34_3.yaml:12-22
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - configmaps
  16 │   - endpoints
  17 │   - nodes
  18 │   - pods
  19 │   - secrets
  20 └   verbs:
  ..   
────────────────────────────────────────



ingress-controller34_5.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller34_5.yaml:61-69
────────────────────────────────────────
  61 ┌ - apiGroups:
  62 │   - ''
  63 │   resources:
  64 │   - configmaps
  65 │   resourceNames:
  66 │   - ingress-controller-leader
  67 │   verbs:
  68 │   - get
  69 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller34_5.yaml:70-75
────────────────────────────────────────
  70 ┌ - apiGroups:
  71 │   - ''
  72 │   resources:
  73 │   - configmaps
  74 │   verbs:
  75 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller34_5.yaml:20-30
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - configmaps
  24 │   - pods
  25 │   - secrets
  26 │   - endpoints
  27 │   verbs:
  28 └   - get
  ..   
────────────────────────────────────────



ingress-controller34_7.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller34_7.yaml:14-23
────────────────────────────────────────
  14 ┌   type: ClusterIP
  15 │   ports:
  16 │   - name: https-webhook
  17 │     port: 443
  18 │     targetPort: webhook
  19 │     appProtocol: https
  20 │   selector:
  21 │     app.kubernetes.io/name: ingress-nginx
  22 │     app.kubernetes.io/instance: ingress-nginx
  23 └     app.kubernetes.io/component: controller
────────────────────────────────────────



ingress-controller34_8.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller34_8.yaml:18-37
────────────────────────────────────────
  18 ┌   type: LoadBalancer
  19 │   externalTrafficPolicy: Local
  20 │   ipFamilyPolicy: SingleStack
  21 │   ipFamilies:
  22 │   - IPv4
  23 │   ports:
  24 │   - name: http
  25 │     port: 80
  26 └     protocol: TCP
  ..   
────────────────────────────────────────



ingress-controller34_9.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller34_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller34_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-controller34_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller34_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller34_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller34_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller34_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-controller34_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller34_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller34_9.yaml:14-111
────────────────────────────────────────
  14 ┌   selector:
  15 │     matchLabels:
  16 │       app.kubernetes.io/name: ingress-nginx
  17 │       app.kubernetes.io/instance: ingress-nginx
  18 │       app.kubernetes.io/component: controller
  19 │   revisionHistoryLimit: 10
  20 │   minReadySeconds: 0
  21 │   template:
  22 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller34_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller34_9.yaml:28-111
────────────────────────────────────────
  28 ┌       dnsPolicy: ClusterFirst
  29 │       containers:
  30 │       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 └               command:
  ..   
────────────────────────────────────────



ingress-controller35_10.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller35_10.yaml:14
────────────────────────────────────────
  14 [   controller: k8s.io/ingress-nginx
────────────────────────────────────────



ingress-controller35_13.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller35_13.yaml:16-22
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - admissionregistration.k8s.io
  18 │   resources:
  19 │   - validatingwebhookconfigurations
  20 │   verbs:
  21 │   - get
  22 └   - update
────────────────────────────────────────



ingress-controller35_15.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller35_15.yaml:17-23
────────────────────────────────────────
  17 ┌ - apiGroups:
  18 │   - ''
  19 │   resources:
  20 │   - secrets
  21 │   verbs:
  22 │   - get
  23 └   - create
────────────────────────────────────────



ingress-controller35_17.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller35_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller35_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller35_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller35_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller35_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller35_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller35_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller35_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller35_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller35_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller35_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller35_17.yaml:17-48
────────────────────────────────────────
  17 ┌   template:
  18 │     metadata:
  19 │       name: ingress-nginx-admission-create
  20 │       labels:
  21 │         helm.sh/chart: ingress-nginx-4.0.6
  22 │         app.kubernetes.io/name: ingress-nginx
  23 │         app.kubernetes.io/instance: ingress-nginx
  24 │         app.kubernetes.io/version: 1.0.4
  25 └         app.kubernetes.io/managed-by: Helm
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller35_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller35_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────



ingress-controller35_18.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller35_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller35_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller35_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller35_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller35_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller35_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller35_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller35_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller35_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller35_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller35_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller35_18.yaml:17-50
────────────────────────────────────────
  17 ┌   template:
  18 │     metadata:
  19 │       name: ingress-nginx-admission-patch
  20 │       labels:
  21 │         helm.sh/chart: ingress-nginx-4.0.6
  22 │         app.kubernetes.io/name: ingress-nginx
  23 │         app.kubernetes.io/instance: ingress-nginx
  24 │         app.kubernetes.io/version: 1.0.4
  25 └         app.kubernetes.io/managed-by: Helm
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller35_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller35_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────



ingress-controller35_3.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller35_3.yaml:12-22
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - configmaps
  16 │   - endpoints
  17 │   - nodes
  18 │   - pods
  19 │   - secrets
  20 └   verbs:
  ..   
────────────────────────────────────────



ingress-controller35_5.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller35_5.yaml:61-69
────────────────────────────────────────
  61 ┌ - apiGroups:
  62 │   - ''
  63 │   resources:
  64 │   - configmaps
  65 │   resourceNames:
  66 │   - ingress-controller-leader
  67 │   verbs:
  68 │   - get
  69 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller35_5.yaml:70-75
────────────────────────────────────────
  70 ┌ - apiGroups:
  71 │   - ''
  72 │   resources:
  73 │   - configmaps
  74 │   verbs:
  75 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller35_5.yaml:20-30
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - configmaps
  24 │   - pods
  25 │   - secrets
  26 │   - endpoints
  27 │   verbs:
  28 └   - get
  ..   
────────────────────────────────────────



ingress-controller35_7.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller35_7.yaml:14-23
────────────────────────────────────────
  14 ┌   type: ClusterIP
  15 │   ports:
  16 │   - name: https-webhook
  17 │     port: 443
  18 │     targetPort: webhook
  19 │     appProtocol: https
  20 │   selector:
  21 │     app.kubernetes.io/name: ingress-nginx
  22 │     app.kubernetes.io/instance: ingress-nginx
  23 └     app.kubernetes.io/component: controller
────────────────────────────────────────



ingress-controller35_8.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller35_8.yaml:18-37
────────────────────────────────────────
  18 ┌   type: LoadBalancer
  19 │   externalTrafficPolicy: Local
  20 │   ipFamilyPolicy: SingleStack
  21 │   ipFamilies:
  22 │   - IPv4
  23 │   ports:
  24 │   - name: http
  25 │     port: 80
  26 └     protocol: TCP
  ..   
────────────────────────────────────────



ingress-controller35_9.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller35_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller35_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-controller35_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller35_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller35_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller35_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller35_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-controller35_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller35_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller35_9.yaml:14-111
────────────────────────────────────────
  14 ┌   selector:
  15 │     matchLabels:
  16 │       app.kubernetes.io/name: ingress-nginx
  17 │       app.kubernetes.io/instance: ingress-nginx
  18 │       app.kubernetes.io/component: controller
  19 │   revisionHistoryLimit: 10
  20 │   minReadySeconds: 0
  21 │   template:
  22 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller35_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller35_9.yaml:28-111
────────────────────────────────────────
  28 ┌       dnsPolicy: ClusterFirst
  29 │       containers:
  30 │       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 └               command:
  ..   
────────────────────────────────────────



ingress-controller36_10.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller36_10.yaml:14
────────────────────────────────────────
  14 [   controller: k8s.io/ingress-nginx
────────────────────────────────────────



ingress-controller36_13.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller36_13.yaml:16-22
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - admissionregistration.k8s.io
  18 │   resources:
  19 │   - validatingwebhookconfigurations
  20 │   verbs:
  21 │   - get
  22 └   - update
────────────────────────────────────────



ingress-controller36_15.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller36_15.yaml:17-23
────────────────────────────────────────
  17 ┌ - apiGroups:
  18 │   - ''
  19 │   resources:
  20 │   - secrets
  21 │   verbs:
  22 │   - get
  23 └   - create
────────────────────────────────────────



ingress-controller36_17.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller36_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller36_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller36_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller36_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller36_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller36_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller36_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller36_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller36_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller36_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller36_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller36_17.yaml:17-48
────────────────────────────────────────
  17 ┌   template:
  18 │     metadata:
  19 │       name: ingress-nginx-admission-create
  20 │       labels:
  21 │         helm.sh/chart: ingress-nginx-4.0.6
  22 │         app.kubernetes.io/name: ingress-nginx
  23 │         app.kubernetes.io/instance: ingress-nginx
  24 │         app.kubernetes.io/version: 1.0.4
  25 └         app.kubernetes.io/managed-by: Helm
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller36_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller36_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────



ingress-controller36_18.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller36_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller36_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller36_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller36_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller36_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller36_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller36_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller36_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller36_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller36_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller36_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller36_18.yaml:17-50
────────────────────────────────────────
  17 ┌   template:
  18 │     metadata:
  19 │       name: ingress-nginx-admission-patch
  20 │       labels:
  21 │         helm.sh/chart: ingress-nginx-4.0.6
  22 │         app.kubernetes.io/name: ingress-nginx
  23 │         app.kubernetes.io/instance: ingress-nginx
  24 │         app.kubernetes.io/version: 1.0.4
  25 └         app.kubernetes.io/managed-by: Helm
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller36_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller36_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────



ingress-controller36_3.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller36_3.yaml:12-22
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - configmaps
  16 │   - endpoints
  17 │   - nodes
  18 │   - pods
  19 │   - secrets
  20 └   verbs:
  ..   
────────────────────────────────────────



ingress-controller36_5.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller36_5.yaml:61-69
────────────────────────────────────────
  61 ┌ - apiGroups:
  62 │   - ''
  63 │   resources:
  64 │   - configmaps
  65 │   resourceNames:
  66 │   - ingress-controller-leader
  67 │   verbs:
  68 │   - get
  69 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller36_5.yaml:70-75
────────────────────────────────────────
  70 ┌ - apiGroups:
  71 │   - ''
  72 │   resources:
  73 │   - configmaps
  74 │   verbs:
  75 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller36_5.yaml:20-30
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - configmaps
  24 │   - pods
  25 │   - secrets
  26 │   - endpoints
  27 │   verbs:
  28 └   - get
  ..   
────────────────────────────────────────



ingress-controller36_7.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller36_7.yaml:14-23
────────────────────────────────────────
  14 ┌   type: ClusterIP
  15 │   ports:
  16 │   - name: https-webhook
  17 │     port: 443
  18 │     targetPort: webhook
  19 │     appProtocol: https
  20 │   selector:
  21 │     app.kubernetes.io/name: ingress-nginx
  22 │     app.kubernetes.io/instance: ingress-nginx
  23 └     app.kubernetes.io/component: controller
────────────────────────────────────────



ingress-controller36_8.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller36_8.yaml:18-37
────────────────────────────────────────
  18 ┌   type: LoadBalancer
  19 │   externalTrafficPolicy: Local
  20 │   ipFamilyPolicy: SingleStack
  21 │   ipFamilies:
  22 │   - IPv4
  23 │   ports:
  24 │   - name: http
  25 │     port: 80
  26 └     protocol: TCP
  ..   
────────────────────────────────────────



ingress-controller36_9.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller36_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller36_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-controller36_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller36_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller36_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller36_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller36_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-controller36_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller36_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller36_9.yaml:14-111
────────────────────────────────────────
  14 ┌   selector:
  15 │     matchLabels:
  16 │       app.kubernetes.io/name: ingress-nginx
  17 │       app.kubernetes.io/instance: ingress-nginx
  18 │       app.kubernetes.io/component: controller
  19 │   revisionHistoryLimit: 10
  20 │   minReadySeconds: 0
  21 │   template:
  22 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller36_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller36_9.yaml:28-111
────────────────────────────────────────
  28 ┌       dnsPolicy: ClusterFirst
  29 │       containers:
  30 │       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 └               command:
  ..   
────────────────────────────────────────



ingress-controller37_12.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller37_12.yaml:17-36
────────────────────────────────────────
  17 ┌   externalTrafficPolicy: Local
  18 │   ipFamilies:
  19 │   - IPv4
  20 │   ipFamilyPolicy: SingleStack
  21 │   ports:
  22 │   - appProtocol: http
  23 │     name: http
  24 │     port: 80
  25 └     protocol: TCP
  ..   
────────────────────────────────────────



ingress-controller37_13.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller37_13.yaml:13-22
────────────────────────────────────────
  13 ┌   ports:
  14 │   - appProtocol: https
  15 │     name: https-webhook
  16 │     port: 443
  17 │     targetPort: webhook
  18 │   selector:
  19 │     app.kubernetes.io/component: controller
  20 │     app.kubernetes.io/instance: ingress-nginx
  21 │     app.kubernetes.io/name: ingress-nginx
  22 └   type: ClusterIP
────────────────────────────────────────



ingress-controller37_14.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller37_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller37_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-controller37_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller37_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller37_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller37_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller37_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-controller37_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller37_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller37_14.yaml:13-111
────────────────────────────────────────
  13 ┌   minReadySeconds: 0
  14 │   revisionHistoryLimit: 10
  15 │   selector:
  16 │     matchLabels:
  17 │       app.kubernetes.io/component: controller
  18 │       app.kubernetes.io/instance: ingress-nginx
  19 │       app.kubernetes.io/name: ingress-nginx
  20 │   template:
  21 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller37_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller37_14.yaml:27-111
────────────────────────────────────────
  27 ┌       containers:
  28 │       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller37_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────



ingress-controller37_15.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller37_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller37_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller37_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller37_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller37_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller37_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller37_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller37_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller37_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller37_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller37_15.yaml:13-46
────────────────────────────────────────
  13 ┌   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/component: admission-webhook
  17 │         app.kubernetes.io/instance: ingress-nginx
  18 │         app.kubernetes.io/name: ingress-nginx
  19 │         app.kubernetes.io/part-of: ingress-nginx
  20 │         app.kubernetes.io/version: 1.3.1
  21 └       name: ingress-nginx-admission-create
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller37_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller37_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller37_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-controller37_16.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller37_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller37_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller37_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller37_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller37_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller37_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller37_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller37_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller37_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller37_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller37_16.yaml:13-48
────────────────────────────────────────
  13 ┌   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/component: admission-webhook
  17 │         app.kubernetes.io/instance: ingress-nginx
  18 │         app.kubernetes.io/name: ingress-nginx
  19 │         app.kubernetes.io/part-of: ingress-nginx
  20 │         app.kubernetes.io/version: 1.3.1
  21 └       name: ingress-nginx-admission-patch
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller37_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller37_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller37_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-controller37_17.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller37_17.yaml:12
────────────────────────────────────────
  12 [   controller: k8s.io/ingress-nginx
────────────────────────────────────────



ingress-controller37_3.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller37_3.yaml:60-68
────────────────────────────────────────
  60 ┌ - apiGroups:
  61 │   - ''
  62 │   resourceNames:
  63 │   - ingress-controller-leader
  64 │   resources:
  65 │   - configmaps
  66 │   verbs:
  67 │   - get
  68 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller37_3.yaml:69-74
────────────────────────────────────────
  69 ┌ - apiGroups:
  70 │   - ''
  71 │   resources:
  72 │   - configmaps
  73 │   verbs:
  74 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller37_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-controller37_4.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller37_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-controller37_5.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller37_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-controller37_6.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller37_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-controller38_10.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller38_10.yaml:14
────────────────────────────────────────
  14 [   controller: k8s.io/ingress-nginx
────────────────────────────────────────



ingress-controller38_13.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller38_13.yaml:16-22
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - admissionregistration.k8s.io
  18 │   resources:
  19 │   - validatingwebhookconfigurations
  20 │   verbs:
  21 │   - get
  22 └   - update
────────────────────────────────────────



ingress-controller38_15.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller38_15.yaml:17-23
────────────────────────────────────────
  17 ┌ - apiGroups:
  18 │   - ''
  19 │   resources:
  20 │   - secrets
  21 │   verbs:
  22 │   - get
  23 └   - create
────────────────────────────────────────



ingress-controller38_17.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller38_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller38_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller38_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller38_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller38_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller38_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller38_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller38_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller38_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller38_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller38_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller38_17.yaml:17-48
────────────────────────────────────────
  17 ┌   template:
  18 │     metadata:
  19 │       name: ingress-nginx-admission-create
  20 │       labels:
  21 │         helm.sh/chart: ingress-nginx-4.0.6
  22 │         app.kubernetes.io/name: ingress-nginx
  23 │         app.kubernetes.io/instance: ingress-nginx
  24 │         app.kubernetes.io/version: 1.0.4
  25 └         app.kubernetes.io/managed-by: Helm
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller38_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller38_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────



ingress-controller38_18.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller38_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller38_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller38_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller38_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller38_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller38_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller38_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller38_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller38_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller38_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller38_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller38_18.yaml:17-50
────────────────────────────────────────
  17 ┌   template:
  18 │     metadata:
  19 │       name: ingress-nginx-admission-patch
  20 │       labels:
  21 │         helm.sh/chart: ingress-nginx-4.0.6
  22 │         app.kubernetes.io/name: ingress-nginx
  23 │         app.kubernetes.io/instance: ingress-nginx
  24 │         app.kubernetes.io/version: 1.0.4
  25 └         app.kubernetes.io/managed-by: Helm
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller38_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller38_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────



ingress-controller38_3.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller38_3.yaml:12-22
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - configmaps
  16 │   - endpoints
  17 │   - nodes
  18 │   - pods
  19 │   - secrets
  20 └   verbs:
  ..   
────────────────────────────────────────



ingress-controller38_5.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller38_5.yaml:61-69
────────────────────────────────────────
  61 ┌ - apiGroups:
  62 │   - ''
  63 │   resources:
  64 │   - configmaps
  65 │   resourceNames:
  66 │   - ingress-controller-leader
  67 │   verbs:
  68 │   - get
  69 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller38_5.yaml:70-75
────────────────────────────────────────
  70 ┌ - apiGroups:
  71 │   - ''
  72 │   resources:
  73 │   - configmaps
  74 │   verbs:
  75 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller38_5.yaml:20-30
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - configmaps
  24 │   - pods
  25 │   - secrets
  26 │   - endpoints
  27 │   verbs:
  28 └   - get
  ..   
────────────────────────────────────────



ingress-controller38_7.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller38_7.yaml:14-23
────────────────────────────────────────
  14 ┌   type: ClusterIP
  15 │   ports:
  16 │   - name: https-webhook
  17 │     port: 443
  18 │     targetPort: webhook
  19 │     appProtocol: https
  20 │   selector:
  21 │     app.kubernetes.io/name: ingress-nginx
  22 │     app.kubernetes.io/instance: ingress-nginx
  23 └     app.kubernetes.io/component: controller
────────────────────────────────────────



ingress-controller38_8.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller38_8.yaml:18-37
────────────────────────────────────────
  18 ┌   type: LoadBalancer
  19 │   externalTrafficPolicy: Local
  20 │   ipFamilyPolicy: SingleStack
  21 │   ipFamilies:
  22 │   - IPv4
  23 │   ports:
  24 │   - name: http
  25 │     port: 80
  26 └     protocol: TCP
  ..   
────────────────────────────────────────



ingress-controller38_9.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller38_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller38_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-controller38_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller38_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller38_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller38_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller38_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-controller38_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller38_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller38_9.yaml:14-111
────────────────────────────────────────
  14 ┌   selector:
  15 │     matchLabels:
  16 │       app.kubernetes.io/name: ingress-nginx
  17 │       app.kubernetes.io/instance: ingress-nginx
  18 │       app.kubernetes.io/component: controller
  19 │   revisionHistoryLimit: 10
  20 │   minReadySeconds: 0
  21 │   template:
  22 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller38_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller38_9.yaml:28-111
────────────────────────────────────────
  28 ┌       dnsPolicy: ClusterFirst
  29 │       containers:
  30 │       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 └               command:
  ..   
────────────────────────────────────────



ingress-controller39_12.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller39_12.yaml:13-32
────────────────────────────────────────
  13 ┌   externalTrafficPolicy: Local
  14 │   ipFamilies:
  15 │   - IPv4
  16 │   ipFamilyPolicy: SingleStack
  17 │   ports:
  18 │   - appProtocol: http
  19 │     name: http
  20 │     port: 80
  21 └     protocol: TCP
  ..   
────────────────────────────────────────



ingress-controller39_13.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller39_13.yaml:13-22
────────────────────────────────────────
  13 ┌   ports:
  14 │   - appProtocol: https
  15 │     name: https-webhook
  16 │     port: 443
  17 │     targetPort: webhook
  18 │   selector:
  19 │     app.kubernetes.io/component: controller
  20 │     app.kubernetes.io/instance: ingress-nginx
  21 │     app.kubernetes.io/name: ingress-nginx
  22 └   type: ClusterIP
────────────────────────────────────────



ingress-controller39_14.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller39_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-nginx-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller39_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-nginx-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-controller39_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-nginx-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller39_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-nginx-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller39_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-nginx-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller39_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-nginx-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller39_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-nginx-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-controller39_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-nginx-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller39_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-nginx-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller39_14.yaml:13-111
────────────────────────────────────────
  13 ┌   minReadySeconds: 0
  14 │   revisionHistoryLimit: 10
  15 │   selector:
  16 │     matchLabels:
  17 │       app.kubernetes.io/component: controller
  18 │       app.kubernetes.io/instance: ingress-nginx
  19 │       app.kubernetes.io/name: ingress-nginx
  20 │   template:
  21 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller39_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-nginx-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller39_14.yaml:27-111
────────────────────────────────────────
  27 ┌       containers:
  28 │       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-nginx-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller39_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-nginx-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────



ingress-controller39_15.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller39_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller39_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller39_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller39_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller39_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller39_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller39_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller39_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller39_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller39_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller39_15.yaml:13-46
────────────────────────────────────────
  13 ┌   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/component: admission-webhook
  17 │         app.kubernetes.io/instance: ingress-nginx
  18 │         app.kubernetes.io/name: ingress-nginx
  19 │         app.kubernetes.io/part-of: ingress-nginx
  20 │         app.kubernetes.io/version: 1.5.1
  21 └       name: ingress-nginx-admission-create
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller39_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller39_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller39_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-controller39_16.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller39_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller39_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller39_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller39_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller39_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller39_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller39_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller39_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller39_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller39_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller39_16.yaml:13-48
────────────────────────────────────────
  13 ┌   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/component: admission-webhook
  17 │         app.kubernetes.io/instance: ingress-nginx
  18 │         app.kubernetes.io/name: ingress-nginx
  19 │         app.kubernetes.io/part-of: ingress-nginx
  20 │         app.kubernetes.io/version: 1.5.1
  21 └       name: ingress-nginx-admission-patch
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller39_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller39_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller39_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-controller39_17.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller39_17.yaml:12
────────────────────────────────────────
  12 [   controller: k8s.io/ingress-nginx
────────────────────────────────────────



ingress-controller39_3.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller39_3.yaml:60-68
────────────────────────────────────────
  60 ┌ - apiGroups:
  61 │   - ''
  62 │   resourceNames:
  63 │   - ingress-nginx-leader
  64 │   resources:
  65 │   - configmaps
  66 │   verbs:
  67 │   - get
  68 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller39_3.yaml:69-74
────────────────────────────────────────
  69 ┌ - apiGroups:
  70 │   - ''
  71 │   resources:
  72 │   - configmaps
  73 │   verbs:
  74 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller39_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-controller39_4.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller39_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-controller39_5.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller39_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-controller39_6.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller39_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-controller3_10.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller3_10.yaml:14
────────────────────────────────────────
  14 [   controller: k8s.io/ingress-nginx
────────────────────────────────────────



ingress-controller3_13.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller3_13.yaml:16-22
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - admissionregistration.k8s.io
  18 │   resources:
  19 │   - validatingwebhookconfigurations
  20 │   verbs:
  21 │   - get
  22 └   - update
────────────────────────────────────────



ingress-controller3_15.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller3_15.yaml:17-23
────────────────────────────────────────
  17 ┌ - apiGroups:
  18 │   - ''
  19 │   resources:
  20 │   - secrets
  21 │   verbs:
  22 │   - get
  23 └   - create
────────────────────────────────────────



ingress-controller3_17.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller3_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller3_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller3_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller3_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller3_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller3_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller3_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller3_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller3_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller3_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller3_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller3_17.yaml:17-48
────────────────────────────────────────
  17 ┌   template:
  18 │     metadata:
  19 │       name: ingress-nginx-admission-create
  20 │       labels:
  21 │         helm.sh/chart: ingress-nginx-4.0.6
  22 │         app.kubernetes.io/name: ingress-nginx
  23 │         app.kubernetes.io/instance: ingress-nginx
  24 │         app.kubernetes.io/version: 1.0.4
  25 └         app.kubernetes.io/managed-by: Helm
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller3_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller3_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────



ingress-controller3_18.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller3_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller3_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller3_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller3_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller3_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller3_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller3_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller3_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller3_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller3_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller3_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller3_18.yaml:17-50
────────────────────────────────────────
  17 ┌   template:
  18 │     metadata:
  19 │       name: ingress-nginx-admission-patch
  20 │       labels:
  21 │         helm.sh/chart: ingress-nginx-4.0.6
  22 │         app.kubernetes.io/name: ingress-nginx
  23 │         app.kubernetes.io/instance: ingress-nginx
  24 │         app.kubernetes.io/version: 1.0.4
  25 └         app.kubernetes.io/managed-by: Helm
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller3_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller3_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────



ingress-controller3_3.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller3_3.yaml:12-22
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - configmaps
  16 │   - endpoints
  17 │   - nodes
  18 │   - pods
  19 │   - secrets
  20 └   verbs:
  ..   
────────────────────────────────────────



ingress-controller3_5.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller3_5.yaml:61-69
────────────────────────────────────────
  61 ┌ - apiGroups:
  62 │   - ''
  63 │   resources:
  64 │   - configmaps
  65 │   resourceNames:
  66 │   - ingress-controller-leader
  67 │   verbs:
  68 │   - get
  69 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller3_5.yaml:70-75
────────────────────────────────────────
  70 ┌ - apiGroups:
  71 │   - ''
  72 │   resources:
  73 │   - configmaps
  74 │   verbs:
  75 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller3_5.yaml:20-30
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - configmaps
  24 │   - pods
  25 │   - secrets
  26 │   - endpoints
  27 │   verbs:
  28 └   - get
  ..   
────────────────────────────────────────



ingress-controller3_7.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller3_7.yaml:14-23
────────────────────────────────────────
  14 ┌   type: ClusterIP
  15 │   ports:
  16 │   - name: https-webhook
  17 │     port: 443
  18 │     targetPort: webhook
  19 │     appProtocol: https
  20 │   selector:
  21 │     app.kubernetes.io/name: ingress-nginx
  22 │     app.kubernetes.io/instance: ingress-nginx
  23 └     app.kubernetes.io/component: controller
────────────────────────────────────────



ingress-controller3_8.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller3_8.yaml:18-37
────────────────────────────────────────
  18 ┌   type: LoadBalancer
  19 │   externalTrafficPolicy: Local
  20 │   ipFamilyPolicy: SingleStack
  21 │   ipFamilies:
  22 │   - IPv4
  23 │   ports:
  24 │   - name: http
  25 │     port: 80
  26 └     protocol: TCP
  ..   
────────────────────────────────────────



ingress-controller3_9.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller3_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller3_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-controller3_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller3_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller3_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller3_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller3_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-controller3_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller3_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller3_9.yaml:14-111
────────────────────────────────────────
  14 ┌   selector:
  15 │     matchLabels:
  16 │       app.kubernetes.io/name: ingress-nginx
  17 │       app.kubernetes.io/instance: ingress-nginx
  18 │       app.kubernetes.io/component: controller
  19 │   revisionHistoryLimit: 10
  20 │   minReadySeconds: 0
  21 │   template:
  22 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller3_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller3_9.yaml:28-111
────────────────────────────────────────
  28 ┌       dnsPolicy: ClusterFirst
  29 │       containers:
  30 │       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 └               command:
  ..   
────────────────────────────────────────



ingress-controller40.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-ingress-controller' of Deployment 'ingress-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller40.yaml:18-37
────────────────────────────────────────
  18 ┌         - name: nginx-ingress-controller
  19 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
  20 │           args:
  21 │             - /nginx-ingress-controller
  22 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
  23 │             - --default-backend-service=app-space/default-http-backend
  24 │           env:
  25 │             - name: POD_NAME
  26 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-ingress-controller' of Deployment 'ingress-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller40.yaml:18-37
────────────────────────────────────────
  18 ┌         - name: nginx-ingress-controller
  19 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
  20 │           args:
  21 │             - /nginx-ingress-controller
  22 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
  23 │             - --default-backend-service=app-space/default-http-backend
  24 │           env:
  25 │             - name: POD_NAME
  26 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-ingress-controller' of 'deployment' 'ingress-controller' in 'ingress-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller40.yaml:18-37
────────────────────────────────────────
  18 ┌         - name: nginx-ingress-controller
  19 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
  20 │           args:
  21 │             - /nginx-ingress-controller
  22 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
  23 │             - --default-backend-service=app-space/default-http-backend
  24 │           env:
  25 │             - name: POD_NAME
  26 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-ingress-controller' of Deployment 'ingress-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller40.yaml:18-37
────────────────────────────────────────
  18 ┌         - name: nginx-ingress-controller
  19 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
  20 │           args:
  21 │             - /nginx-ingress-controller
  22 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
  23 │             - --default-backend-service=app-space/default-http-backend
  24 │           env:
  25 │             - name: POD_NAME
  26 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-ingress-controller' of Deployment 'ingress-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-controller40.yaml:18-37
────────────────────────────────────────
  18 ┌         - name: nginx-ingress-controller
  19 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
  20 │           args:
  21 │             - /nginx-ingress-controller
  22 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
  23 │             - --default-backend-service=app-space/default-http-backend
  24 │           env:
  25 │             - name: POD_NAME
  26 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-ingress-controller' of Deployment 'ingress-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller40.yaml:18-37
────────────────────────────────────────
  18 ┌         - name: nginx-ingress-controller
  19 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
  20 │           args:
  21 │             - /nginx-ingress-controller
  22 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
  23 │             - --default-backend-service=app-space/default-http-backend
  24 │           env:
  25 │             - name: POD_NAME
  26 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-ingress-controller' of Deployment 'ingress-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller40.yaml:18-37
────────────────────────────────────────
  18 ┌         - name: nginx-ingress-controller
  19 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
  20 │           args:
  21 │             - /nginx-ingress-controller
  22 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
  23 │             - --default-backend-service=app-space/default-http-backend
  24 │           env:
  25 │             - name: POD_NAME
  26 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-ingress-controller' of Deployment 'ingress-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller40.yaml:18-37
────────────────────────────────────────
  18 ┌         - name: nginx-ingress-controller
  19 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
  20 │           args:
  21 │             - /nginx-ingress-controller
  22 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
  23 │             - --default-backend-service=app-space/default-http-backend
  24 │           env:
  25 │             - name: POD_NAME
  26 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-ingress-controller' of Deployment 'ingress-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller40.yaml:18-37
────────────────────────────────────────
  18 ┌         - name: nginx-ingress-controller
  19 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
  20 │           args:
  21 │             - /nginx-ingress-controller
  22 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
  23 │             - --default-backend-service=app-space/default-http-backend
  24 │           env:
  25 │             - name: POD_NAME
  26 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-ingress-controller' of Deployment 'ingress-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller40.yaml:18-37
────────────────────────────────────────
  18 ┌         - name: nginx-ingress-controller
  19 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
  20 │           args:
  21 │             - /nginx-ingress-controller
  22 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
  23 │             - --default-backend-service=app-space/default-http-backend
  24 │           env:
  25 │             - name: POD_NAME
  26 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-ingress-controller' of Deployment 'ingress-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller40.yaml:18-37
────────────────────────────────────────
  18 ┌         - name: nginx-ingress-controller
  19 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
  20 │           args:
  21 │             - /nginx-ingress-controller
  22 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
  23 │             - --default-backend-service=app-space/default-http-backend
  24 │           env:
  25 │             - name: POD_NAME
  26 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller40.yaml:18-37
────────────────────────────────────────
  18 ┌         - name: nginx-ingress-controller
  19 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
  20 │           args:
  21 │             - /nginx-ingress-controller
  22 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
  23 │             - --default-backend-service=app-space/default-http-backend
  24 │           env:
  25 │             - name: POD_NAME
  26 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller40.yaml:7-37
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       name: nginx-ingress
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         name: nginx-ingress
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-ingress-controller" of deployment "ingress-controller" in "ingress-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller40.yaml:18-37
────────────────────────────────────────
  18 ┌         - name: nginx-ingress-controller
  19 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
  20 │           args:
  21 │             - /nginx-ingress-controller
  22 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
  23 │             - --default-backend-service=app-space/default-http-backend
  24 │           env:
  25 │             - name: POD_NAME
  26 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller40.yaml:18-37
────────────────────────────────────────
  18 ┌         - name: nginx-ingress-controller
  19 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
  20 │           args:
  21 │             - /nginx-ingress-controller
  22 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
  23 │             - --default-backend-service=app-space/default-http-backend
  24 │           env:
  25 │             - name: POD_NAME
  26 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-controller in ingress-space namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ingress-controller in ingress-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller40.yaml:18-37
────────────────────────────────────────
  18 ┌         - name: nginx-ingress-controller
  19 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
  20 │           args:
  21 │             - /nginx-ingress-controller
  22 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
  23 │             - --default-backend-service=app-space/default-http-backend
  24 │           env:
  25 │             - name: POD_NAME
  26 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-controller in ingress-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller40.yaml:16-37
────────────────────────────────────────
  16 ┌       serviceAccountName: ingress-serviceaccount
  17 │       containers:
  18 │         - name: nginx-ingress-controller
  19 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
  20 │           args:
  21 │             - /nginx-ingress-controller
  22 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
  23 │             - --default-backend-service=app-space/default-http-backend
  24 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nginx-ingress-controller in deployment ingress-controller (namespace: ingress-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller40.yaml:18-37
────────────────────────────────────────
  18 ┌         - name: nginx-ingress-controller
  19 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
  20 │           args:
  21 │             - /nginx-ingress-controller
  22 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
  23 │             - --default-backend-service=app-space/default-http-backend
  24 │           env:
  25 │             - name: POD_NAME
  26 └               valueFrom:
  ..   
────────────────────────────────────────



ingress-controller43.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller43.yaml:11-78
────────────────────────────────────────
  11 ┌   ingressClassName: webapprouting.kubernetes.azure.com
  12 │   rules:
  13 │   - host: mydocctor.online
  14 │     http:
  15 │       paths:
  16 │       # - path: /
  17 │       #   pathType: Prefix
  18 │       #   backend:
  19 └       #     service:
  ..   
────────────────────────────────────────



ingress-controller44.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller44.yaml:11-64
────────────────────────────────────────
  11 ┌   ingressClassName: webapprouting.kubernetes.azure.com
  12 │   rules:
  13 │     - host: phonebazaar.shop
  14 │       http:
  15 │         paths:
  16 │           - path: /api/auth
  17 │             pathType: Prefix
  18 │             backend:
  19 └               service:
  ..   
────────────────────────────────────────



ingress-controller45_10.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller45_10.yaml:14
────────────────────────────────────────
  14 [   controller: k8s.io/ingress-nginx
────────────────────────────────────────



ingress-controller45_13.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller45_13.yaml:16-22
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - admissionregistration.k8s.io
  18 │   resources:
  19 │   - validatingwebhookconfigurations
  20 │   verbs:
  21 │   - get
  22 └   - update
────────────────────────────────────────



ingress-controller45_15.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller45_15.yaml:17-23
────────────────────────────────────────
  17 ┌ - apiGroups:
  18 │   - ''
  19 │   resources:
  20 │   - secrets
  21 │   verbs:
  22 │   - get
  23 └   - create
────────────────────────────────────────



ingress-controller45_17.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller45_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.0@sha256:f3b6b39a6062328c095337b4cadcefd1612348fdd5190b1dcbcb9b9e90bd8068
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller45_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.0@sha256:f3b6b39a6062328c095337b4cadcefd1612348fdd5190b1dcbcb9b9e90bd8068
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller45_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.0@sha256:f3b6b39a6062328c095337b4cadcefd1612348fdd5190b1dcbcb9b9e90bd8068
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller45_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.0@sha256:f3b6b39a6062328c095337b4cadcefd1612348fdd5190b1dcbcb9b9e90bd8068
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller45_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.0@sha256:f3b6b39a6062328c095337b4cadcefd1612348fdd5190b1dcbcb9b9e90bd8068
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller45_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.0@sha256:f3b6b39a6062328c095337b4cadcefd1612348fdd5190b1dcbcb9b9e90bd8068
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller45_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.0@sha256:f3b6b39a6062328c095337b4cadcefd1612348fdd5190b1dcbcb9b9e90bd8068
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller45_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.0@sha256:f3b6b39a6062328c095337b4cadcefd1612348fdd5190b1dcbcb9b9e90bd8068
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller45_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.0@sha256:f3b6b39a6062328c095337b4cadcefd1612348fdd5190b1dcbcb9b9e90bd8068
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller45_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.0@sha256:f3b6b39a6062328c095337b4cadcefd1612348fdd5190b1dcbcb9b9e90bd8068
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller45_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.0@sha256:f3b6b39a6062328c095337b4cadcefd1612348fdd5190b1dcbcb9b9e90bd8068
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller45_17.yaml:17-48
────────────────────────────────────────
  17 ┌   template:
  18 │     metadata:
  19 │       name: ingress-nginx-admission-create
  20 │       labels:
  21 │         helm.sh/chart: ingress-nginx-4.0.4
  22 │         app.kubernetes.io/name: ingress-nginx
  23 │         app.kubernetes.io/instance: ingress-nginx
  24 │         app.kubernetes.io/version: 1.0.3
  25 └         app.kubernetes.io/managed-by: Helm
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller45_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.0@sha256:f3b6b39a6062328c095337b4cadcefd1612348fdd5190b1dcbcb9b9e90bd8068
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller45_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.0@sha256:f3b6b39a6062328c095337b4cadcefd1612348fdd5190b1dcbcb9b9e90bd8068
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────



ingress-controller45_18.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller45_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.0@sha256:f3b6b39a6062328c095337b4cadcefd1612348fdd5190b1dcbcb9b9e90bd8068
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller45_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.0@sha256:f3b6b39a6062328c095337b4cadcefd1612348fdd5190b1dcbcb9b9e90bd8068
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller45_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.0@sha256:f3b6b39a6062328c095337b4cadcefd1612348fdd5190b1dcbcb9b9e90bd8068
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller45_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.0@sha256:f3b6b39a6062328c095337b4cadcefd1612348fdd5190b1dcbcb9b9e90bd8068
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller45_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.0@sha256:f3b6b39a6062328c095337b4cadcefd1612348fdd5190b1dcbcb9b9e90bd8068
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller45_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.0@sha256:f3b6b39a6062328c095337b4cadcefd1612348fdd5190b1dcbcb9b9e90bd8068
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller45_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.0@sha256:f3b6b39a6062328c095337b4cadcefd1612348fdd5190b1dcbcb9b9e90bd8068
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller45_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.0@sha256:f3b6b39a6062328c095337b4cadcefd1612348fdd5190b1dcbcb9b9e90bd8068
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller45_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.0@sha256:f3b6b39a6062328c095337b4cadcefd1612348fdd5190b1dcbcb9b9e90bd8068
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller45_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.0@sha256:f3b6b39a6062328c095337b4cadcefd1612348fdd5190b1dcbcb9b9e90bd8068
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller45_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.0@sha256:f3b6b39a6062328c095337b4cadcefd1612348fdd5190b1dcbcb9b9e90bd8068
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller45_18.yaml:17-50
────────────────────────────────────────
  17 ┌   template:
  18 │     metadata:
  19 │       name: ingress-nginx-admission-patch
  20 │       labels:
  21 │         helm.sh/chart: ingress-nginx-4.0.4
  22 │         app.kubernetes.io/name: ingress-nginx
  23 │         app.kubernetes.io/instance: ingress-nginx
  24 │         app.kubernetes.io/version: 1.0.3
  25 └         app.kubernetes.io/managed-by: Helm
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller45_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.0@sha256:f3b6b39a6062328c095337b4cadcefd1612348fdd5190b1dcbcb9b9e90bd8068
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller45_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.0@sha256:f3b6b39a6062328c095337b4cadcefd1612348fdd5190b1dcbcb9b9e90bd8068
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────



ingress-controller45_3.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller45_3.yaml:12-22
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - configmaps
  16 │   - endpoints
  17 │   - nodes
  18 │   - pods
  19 │   - secrets
  20 └   verbs:
  ..   
────────────────────────────────────────



ingress-controller45_5.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller45_5.yaml:61-69
────────────────────────────────────────
  61 ┌ - apiGroups:
  62 │   - ''
  63 │   resources:
  64 │   - configmaps
  65 │   resourceNames:
  66 │   - ingress-controller-leader
  67 │   verbs:
  68 │   - get
  69 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller45_5.yaml:70-75
────────────────────────────────────────
  70 ┌ - apiGroups:
  71 │   - ''
  72 │   resources:
  73 │   - configmaps
  74 │   verbs:
  75 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller45_5.yaml:20-30
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - configmaps
  24 │   - pods
  25 │   - secrets
  26 │   - endpoints
  27 │   verbs:
  28 └   - get
  ..   
────────────────────────────────────────



ingress-controller45_7.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller45_7.yaml:14-23
────────────────────────────────────────
  14 ┌   type: ClusterIP
  15 │   ports:
  16 │   - name: https-webhook
  17 │     port: 443
  18 │     targetPort: webhook
  19 │     appProtocol: https
  20 │   selector:
  21 │     app.kubernetes.io/name: ingress-nginx
  22 │     app.kubernetes.io/instance: ingress-nginx
  23 └     app.kubernetes.io/component: controller
────────────────────────────────────────



ingress-controller45_8.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller45_8.yaml:15-30
────────────────────────────────────────
  15 ┌   type: NodePort
  16 │   ports:
  17 │   - name: http
  18 │     port: 80
  19 │     protocol: TCP
  20 │     targetPort: http
  21 │     appProtocol: http
  22 │   - name: https
  23 └     port: 443
  ..   
────────────────────────────────────────



ingress-controller45_9.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller45_9.yaml:30-102
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.3@sha256:4ade87838eb8256b094fbb5272d7dda9b6c7fa8b759e6af5383c1300996a7452
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller45_9.yaml:30-102
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.3@sha256:4ade87838eb8256b094fbb5272d7dda9b6c7fa8b759e6af5383c1300996a7452
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-controller45_9.yaml:30-102
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.3@sha256:4ade87838eb8256b094fbb5272d7dda9b6c7fa8b759e6af5383c1300996a7452
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller45_9.yaml:30-102
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.3@sha256:4ade87838eb8256b094fbb5272d7dda9b6c7fa8b759e6af5383c1300996a7452
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller45_9.yaml:30-102
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.3@sha256:4ade87838eb8256b094fbb5272d7dda9b6c7fa8b759e6af5383c1300996a7452
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller45_9.yaml:30-102
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.3@sha256:4ade87838eb8256b094fbb5272d7dda9b6c7fa8b759e6af5383c1300996a7452
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller45_9.yaml:30-102
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.3@sha256:4ade87838eb8256b094fbb5272d7dda9b6c7fa8b759e6af5383c1300996a7452
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-controller45_9.yaml:30-102
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.3@sha256:4ade87838eb8256b094fbb5272d7dda9b6c7fa8b759e6af5383c1300996a7452
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller45_9.yaml:30-102
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.3@sha256:4ade87838eb8256b094fbb5272d7dda9b6c7fa8b759e6af5383c1300996a7452
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller45_9.yaml:14-110
────────────────────────────────────────
  14 ┌   selector:
  15 │     matchLabels:
  16 │       app.kubernetes.io/name: ingress-nginx
  17 │       app.kubernetes.io/instance: ingress-nginx
  18 │       app.kubernetes.io/component: controller
  19 │   revisionHistoryLimit: 10
  20 │   minReadySeconds: 0
  21 │   template:
  22 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller45_9.yaml:30-102
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.3@sha256:4ade87838eb8256b094fbb5272d7dda9b6c7fa8b759e6af5383c1300996a7452
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller45_9.yaml:28-110
────────────────────────────────────────
  28 ┌       dnsPolicy: ClusterFirst
  29 │       containers:
  30 │       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.3@sha256:4ade87838eb8256b094fbb5272d7dda9b6c7fa8b759e6af5383c1300996a7452
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 └               command:
  ..   
────────────────────────────────────────



ingress-controller46.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller46.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx-ingress-controller
  17 └         image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller46.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx-ingress-controller
  17 └         image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-ingress-controller' of 'deployment' 'nginx-ingress-controller' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller46.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx-ingress-controller
  17 └         image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller46.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx-ingress-controller
  17 └         image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-controller46.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx-ingress-controller
  17 └         image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller46.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx-ingress-controller
  17 └         image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller46.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx-ingress-controller
  17 └         image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller46.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx-ingress-controller
  17 └         image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller46.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx-ingress-controller
  17 └         image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller46.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx-ingress-controller
  17 └         image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-ingress-controller' of Deployment 'nginx-ingress-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller46.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx-ingress-controller
  17 └         image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller46.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx-ingress-controller
  17 └         image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller46.yaml:6-34
────────────────────────────────────────
   6 ┌   replicas: 1
   7 │   selector:
   8 │     matchLabels:
   9 │       name: nginx-ingress
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         name: nginx-ingress
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-ingress-controller" of deployment "nginx-ingress-controller" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller46.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx-ingress-controller
  17 └         image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller46.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx-ingress-controller
  17 └         image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-ingress-controller in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-controller46.yaml:4
────────────────────────────────────────
   4 [   name: nginx-ingress-controller
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-ingress-controller in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller46.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx-ingress-controller
  17 └         image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-ingress-controller in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller46.yaml:15-34
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: nginx-ingress-controller
  17 │         image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
  18 │       args:
  19 │       - /nginx-ingress-controller
  20 │       - --configmap=$(POD_NAMESPACE)/nginx-configuration
  21 │       env:
  22 │       - name: POD_NAME
  23 └         valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nginx-ingress-controller in deployment nginx-ingress-controller (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller46.yaml:16-17
────────────────────────────────────────
  16 ┌       - name: nginx-ingress-controller
  17 └         image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
────────────────────────────────────────



ingress-controller47.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller47.yaml:6-16
────────────────────────────────────────
   6 ┌   ingressClassName: nginx
   7 │   rules:
   8 │     - http:
   9 │         paths:
  10 │           - path: /
  11 │             pathType: Prefix
  12 │             backend:  
  13 │               service:
  14 └                 name: adminer
  ..   
────────────────────────────────────────



ingress-controller49.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 95, FAILURES: 21)
Failures: 21 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ingress-controller' of Deployment 'ingress-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller49.yaml:44-67
────────────────────────────────────────
  44 ┌         - image: apache/api7-ingress-controller:1.0.0
  45 │           imagePullPolicy: IfNotPresent
  46 │           name: ingress-controller
  47 │           ports:
  48 │             - containerPort: 8080
  49 │               hostPort: 8080
  50 │             - containerPort: 8443
  51 │               hostPort: 8443
  52 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ingress-controller' of Deployment 'ingress-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller49.yaml:44-67
────────────────────────────────────────
  44 ┌         - image: apache/api7-ingress-controller:1.0.0
  45 │           imagePullPolicy: IfNotPresent
  46 │           name: ingress-controller
  47 │           ports:
  48 │             - containerPort: 8080
  49 │               hostPort: 8080
  50 │             - containerPort: 8443
  51 │               hostPort: 8443
  52 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ingress-controller' of 'deployment' 'ingress-controller' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller49.yaml:44-67
────────────────────────────────────────
  44 ┌         - image: apache/api7-ingress-controller:1.0.0
  45 │           imagePullPolicy: IfNotPresent
  46 │           name: ingress-controller
  47 │           ports:
  48 │             - containerPort: 8080
  49 │               hostPort: 8080
  50 │             - containerPort: 8443
  51 │               hostPort: 8443
  52 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): Deployment 'ingress-controller' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 ingress-controller49.yaml:23-76
────────────────────────────────────────
  23 ┌   minReadySeconds: 5
  24 │   replicas: 1
  25 │   selector:
  26 │     matchLabels:
  27 │       app: api7-ingress-controller
  28 │       tier: backend
  29 │   strategy:
  30 │     rollingUpdate:
  31 └       maxSurge: 50%
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'ingress-controller' of Deployment 'ingress-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller49.yaml:44-67
────────────────────────────────────────
  44 ┌         - image: apache/api7-ingress-controller:1.0.0
  45 │           imagePullPolicy: IfNotPresent
  46 │           name: ingress-controller
  47 │           ports:
  48 │             - containerPort: 8080
  49 │               hostPort: 8080
  50 │             - containerPort: 8443
  51 │               hostPort: 8443
  52 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ingress-controller' of Deployment 'ingress-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-controller49.yaml:44-67
────────────────────────────────────────
  44 ┌         - image: apache/api7-ingress-controller:1.0.0
  45 │           imagePullPolicy: IfNotPresent
  46 │           name: ingress-controller
  47 │           ports:
  48 │             - containerPort: 8080
  49 │               hostPort: 8080
  50 │             - containerPort: 8443
  51 │               hostPort: 8443
  52 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ingress-controller' of Deployment 'ingress-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller49.yaml:44-67
────────────────────────────────────────
  44 ┌         - image: apache/api7-ingress-controller:1.0.0
  45 │           imagePullPolicy: IfNotPresent
  46 │           name: ingress-controller
  47 │           ports:
  48 │             - containerPort: 8080
  49 │               hostPort: 8080
  50 │             - containerPort: 8443
  51 │               hostPort: 8443
  52 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'ingress-controller' of Deployment 'ingress-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller49.yaml:44-67
────────────────────────────────────────
  44 ┌         - image: apache/api7-ingress-controller:1.0.0
  45 │           imagePullPolicy: IfNotPresent
  46 │           name: ingress-controller
  47 │           ports:
  48 │             - containerPort: 8080
  49 │               hostPort: 8080
  50 │             - containerPort: 8443
  51 │               hostPort: 8443
  52 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'ingress-controller' of Deployment 'ingress-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller49.yaml:44-67
────────────────────────────────────────
  44 ┌         - image: apache/api7-ingress-controller:1.0.0
  45 │           imagePullPolicy: IfNotPresent
  46 │           name: ingress-controller
  47 │           ports:
  48 │             - containerPort: 8080
  49 │               hostPort: 8080
  50 │             - containerPort: 8443
  51 │               hostPort: 8443
  52 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'ingress-controller' of Deployment 'ingress-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller49.yaml:44-67
────────────────────────────────────────
  44 ┌         - image: apache/api7-ingress-controller:1.0.0
  45 │           imagePullPolicy: IfNotPresent
  46 │           name: ingress-controller
  47 │           ports:
  48 │             - containerPort: 8080
  49 │               hostPort: 8080
  50 │             - containerPort: 8443
  51 │               hostPort: 8443
  52 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ingress-controller' of Deployment 'ingress-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller49.yaml:44-67
────────────────────────────────────────
  44 ┌         - image: apache/api7-ingress-controller:1.0.0
  45 │           imagePullPolicy: IfNotPresent
  46 │           name: ingress-controller
  47 │           ports:
  48 │             - containerPort: 8080
  49 │               hostPort: 8080
  50 │             - containerPort: 8443
  51 │               hostPort: 8443
  52 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ingress-controller' of Deployment 'ingress-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller49.yaml:44-67
────────────────────────────────────────
  44 ┌         - image: apache/api7-ingress-controller:1.0.0
  45 │           imagePullPolicy: IfNotPresent
  46 │           name: ingress-controller
  47 │           ports:
  48 │             - containerPort: 8080
  49 │               hostPort: 8080
  50 │             - containerPort: 8443
  51 │               hostPort: 8443
  52 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'ingress-controller' of Deployment 'ingress-controller' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 ingress-controller49.yaml:44-67
────────────────────────────────────────
  44 ┌         - image: apache/api7-ingress-controller:1.0.0
  45 │           imagePullPolicy: IfNotPresent
  46 │           name: ingress-controller
  47 │           ports:
  48 │             - containerPort: 8080
  49 │               hostPort: 8080
  50 │             - containerPort: 8443
  51 │               hostPort: 8443
  52 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller49.yaml:44-67
────────────────────────────────────────
  44 ┌         - image: apache/api7-ingress-controller:1.0.0
  45 │           imagePullPolicy: IfNotPresent
  46 │           name: ingress-controller
  47 │           ports:
  48 │             - containerPort: 8080
  49 │               hostPort: 8080
  50 │             - containerPort: 8443
  51 │               hostPort: 8443
  52 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller49.yaml:23-76
────────────────────────────────────────
  23 ┌   minReadySeconds: 5
  24 │   replicas: 1
  25 │   selector:
  26 │     matchLabels:
  27 │       app: api7-ingress-controller
  28 │       tier: backend
  29 │   strategy:
  30 │     rollingUpdate:
  31 └       maxSurge: 50%
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ingress-controller" of deployment "ingress-controller" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller49.yaml:44-67
────────────────────────────────────────
  44 ┌         - image: apache/api7-ingress-controller:1.0.0
  45 │           imagePullPolicy: IfNotPresent
  46 │           name: ingress-controller
  47 │           ports:
  48 │             - containerPort: 8080
  49 │               hostPort: 8080
  50 │             - containerPort: 8443
  51 │               hostPort: 8443
  52 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller49.yaml:44-67
────────────────────────────────────────
  44 ┌         - image: apache/api7-ingress-controller:1.0.0
  45 │           imagePullPolicy: IfNotPresent
  46 │           name: ingress-controller
  47 │           ports:
  48 │             - containerPort: 8080
  49 │               hostPort: 8080
  50 │             - containerPort: 8443
  51 │               hostPort: 8443
  52 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment ingress-controller in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-controller49.yaml:21
────────────────────────────────────────
  21 [   name: ingress-controller
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ingress-controller in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller49.yaml:44-67
────────────────────────────────────────
  44 ┌         - image: apache/api7-ingress-controller:1.0.0
  45 │           imagePullPolicy: IfNotPresent
  46 │           name: ingress-controller
  47 │           ports:
  48 │             - containerPort: 8080
  49 │               hostPort: 8080
  50 │             - containerPort: 8443
  51 │               hostPort: 8443
  52 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-controller in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller49.yaml:41-76
────────────────────────────────────────
  41 ┌       hostNetwork: true
  42 │       dnsPolicy: ClusterFirstWithHostNet
  43 │       containers:
  44 │         - image: apache/api7-ingress-controller:1.0.0
  45 │           imagePullPolicy: IfNotPresent
  46 │           name: ingress-controller
  47 │           ports:
  48 │             - containerPort: 8080
  49 └               hostPort: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container ingress-controller in deployment ingress-controller (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller49.yaml:44-67
────────────────────────────────────────
  44 ┌         - image: apache/api7-ingress-controller:1.0.0
  45 │           imagePullPolicy: IfNotPresent
  46 │           name: ingress-controller
  47 │           ports:
  48 │             - containerPort: 8080
  49 │               hostPort: 8080
  50 │             - containerPort: 8443
  51 │               hostPort: 8443
  52 └           volumeMounts:
  ..   
────────────────────────────────────────



ingress-controller4_10.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller4_10.yaml:14
────────────────────────────────────────
  14 [   controller: k8s.io/ingress-nginx
────────────────────────────────────────



ingress-controller4_13.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller4_13.yaml:16-22
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - admissionregistration.k8s.io
  18 │   resources:
  19 │   - validatingwebhookconfigurations
  20 │   verbs:
  21 │   - get
  22 └   - update
────────────────────────────────────────



ingress-controller4_15.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller4_15.yaml:17-23
────────────────────────────────────────
  17 ┌ - apiGroups:
  18 │   - ''
  19 │   resources:
  20 │   - secrets
  21 │   verbs:
  22 │   - get
  23 └   - create
────────────────────────────────────────



ingress-controller4_17.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller4_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller4_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller4_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller4_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller4_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller4_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller4_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller4_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller4_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller4_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller4_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller4_17.yaml:17-48
────────────────────────────────────────
  17 ┌   template:
  18 │     metadata:
  19 │       name: ingress-nginx-admission-create
  20 │       labels:
  21 │         helm.sh/chart: ingress-nginx-4.0.6
  22 │         app.kubernetes.io/name: ingress-nginx
  23 │         app.kubernetes.io/instance: ingress-nginx
  24 │         app.kubernetes.io/version: 1.0.4
  25 └         app.kubernetes.io/managed-by: Helm
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller4_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller4_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────



ingress-controller4_18.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller4_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller4_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller4_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller4_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller4_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller4_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller4_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller4_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller4_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller4_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller4_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller4_18.yaml:17-50
────────────────────────────────────────
  17 ┌   template:
  18 │     metadata:
  19 │       name: ingress-nginx-admission-patch
  20 │       labels:
  21 │         helm.sh/chart: ingress-nginx-4.0.6
  22 │         app.kubernetes.io/name: ingress-nginx
  23 │         app.kubernetes.io/instance: ingress-nginx
  24 │         app.kubernetes.io/version: 1.0.4
  25 └         app.kubernetes.io/managed-by: Helm
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller4_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller4_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────



ingress-controller4_3.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller4_3.yaml:12-22
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - configmaps
  16 │   - endpoints
  17 │   - nodes
  18 │   - pods
  19 │   - secrets
  20 └   verbs:
  ..   
────────────────────────────────────────



ingress-controller4_5.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller4_5.yaml:61-69
────────────────────────────────────────
  61 ┌ - apiGroups:
  62 │   - ''
  63 │   resources:
  64 │   - configmaps
  65 │   resourceNames:
  66 │   - ingress-controller-leader
  67 │   verbs:
  68 │   - get
  69 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller4_5.yaml:70-75
────────────────────────────────────────
  70 ┌ - apiGroups:
  71 │   - ''
  72 │   resources:
  73 │   - configmaps
  74 │   verbs:
  75 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller4_5.yaml:20-30
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - configmaps
  24 │   - pods
  25 │   - secrets
  26 │   - endpoints
  27 │   verbs:
  28 └   - get
  ..   
────────────────────────────────────────



ingress-controller4_7.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller4_7.yaml:14-23
────────────────────────────────────────
  14 ┌   type: ClusterIP
  15 │   ports:
  16 │   - name: https-webhook
  17 │     port: 443
  18 │     targetPort: webhook
  19 │     appProtocol: https
  20 │   selector:
  21 │     app.kubernetes.io/name: ingress-nginx
  22 │     app.kubernetes.io/instance: ingress-nginx
  23 └     app.kubernetes.io/component: controller
────────────────────────────────────────



ingress-controller4_8.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller4_8.yaml:18-37
────────────────────────────────────────
  18 ┌   type: LoadBalancer
  19 │   externalTrafficPolicy: Local
  20 │   ipFamilyPolicy: SingleStack
  21 │   ipFamilies:
  22 │   - IPv4
  23 │   ports:
  24 │   - name: http
  25 │     port: 80
  26 └     protocol: TCP
  ..   
────────────────────────────────────────



ingress-controller4_9.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller4_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller4_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-controller4_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller4_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller4_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller4_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller4_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-controller4_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller4_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller4_9.yaml:14-111
────────────────────────────────────────
  14 ┌   selector:
  15 │     matchLabels:
  16 │       app.kubernetes.io/name: ingress-nginx
  17 │       app.kubernetes.io/instance: ingress-nginx
  18 │       app.kubernetes.io/component: controller
  19 │   revisionHistoryLimit: 10
  20 │   minReadySeconds: 0
  21 │   template:
  22 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller4_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller4_9.yaml:28-111
────────────────────────────────────────
  28 ┌       dnsPolicy: ClusterFirst
  29 │       containers:
  30 │       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 └               command:
  ..   
────────────────────────────────────────



ingress-controller50_10.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller50_10.yaml:14
────────────────────────────────────────
  14 [   controller: k8s.io/ingress-nginx
────────────────────────────────────────



ingress-controller50_13.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller50_13.yaml:16-22
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - admissionregistration.k8s.io
  18 │   resources:
  19 │   - validatingwebhookconfigurations
  20 │   verbs:
  21 │   - get
  22 └   - update
────────────────────────────────────────



ingress-controller50_15.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller50_15.yaml:17-23
────────────────────────────────────────
  17 ┌ - apiGroups:
  18 │   - ''
  19 │   resources:
  20 │   - secrets
  21 │   verbs:
  22 │   - get
  23 └   - create
────────────────────────────────────────



ingress-controller50_17.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 11, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller50_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller50_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller50_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller50_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller50_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller50_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller50_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller50_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller50_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller50_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller50_17.yaml:17-50
────────────────────────────────────────
  17 ┌   template:
  18 │     metadata:
  19 │       name: ingress-nginx-admission-create
  20 │       labels:
  21 │         helm.sh/chart: ingress-nginx-4.0.15
  22 │         app.kubernetes.io/name: ingress-nginx
  23 │         app.kubernetes.io/instance: ingress-nginx
  24 │         app.kubernetes.io/version: 1.1.1
  25 └         app.kubernetes.io/managed-by: Helm
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller50_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller50_17.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────



ingress-controller50_18.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 11, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller50_18.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller50_18.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller50_18.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller50_18.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller50_18.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller50_18.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller50_18.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller50_18.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller50_18.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller50_18.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller50_18.yaml:17-52
────────────────────────────────────────
  17 ┌   template:
  18 │     metadata:
  19 │       name: ingress-nginx-admission-patch
  20 │       labels:
  21 │         helm.sh/chart: ingress-nginx-4.0.15
  22 │         app.kubernetes.io/name: ingress-nginx
  23 │         app.kubernetes.io/instance: ingress-nginx
  24 │         app.kubernetes.io/version: 1.1.1
  25 └         app.kubernetes.io/managed-by: Helm
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller50_18.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller50_18.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────



ingress-controller50_3.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller50_3.yaml:12-23
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - configmaps
  16 │   - endpoints
  17 │   - nodes
  18 │   - pods
  19 │   - secrets
  20 └   - namespaces
  ..   
────────────────────────────────────────



ingress-controller50_5.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller50_5.yaml:61-69
────────────────────────────────────────
  61 ┌ - apiGroups:
  62 │   - ''
  63 │   resources:
  64 │   - configmaps
  65 │   resourceNames:
  66 │   - ingress-controller-leader
  67 │   verbs:
  68 │   - get
  69 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller50_5.yaml:70-75
────────────────────────────────────────
  70 ┌ - apiGroups:
  71 │   - ''
  72 │   resources:
  73 │   - configmaps
  74 │   verbs:
  75 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller50_5.yaml:20-30
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - configmaps
  24 │   - pods
  25 │   - secrets
  26 │   - endpoints
  27 │   verbs:
  28 └   - get
  ..   
────────────────────────────────────────



ingress-controller50_7.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller50_7.yaml:14-23
────────────────────────────────────────
  14 ┌   type: ClusterIP
  15 │   ports:
  16 │   - name: https-webhook
  17 │     port: 443
  18 │     targetPort: webhook
  19 │     appProtocol: https
  20 │   selector:
  21 │     app.kubernetes.io/name: ingress-nginx
  22 │     app.kubernetes.io/instance: ingress-nginx
  23 └     app.kubernetes.io/component: controller
────────────────────────────────────────



ingress-controller50_8.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller50_8.yaml:15-34
────────────────────────────────────────
  15 ┌   type: LoadBalancer
  16 │   externalTrafficPolicy: Local
  17 │   ipFamilyPolicy: SingleStack
  18 │   ipFamilies:
  19 │   - IPv4
  20 │   ports:
  21 │   - name: http
  22 │     port: 80
  23 └     protocol: TCP
  ..   
────────────────────────────────────────



ingress-controller50_9.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller50_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.1.1@sha256:0bc88eb15f9e7f84e8e56c14fa5735aaa488b840983f87bd79b1054190e660de
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller50_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.1.1@sha256:0bc88eb15f9e7f84e8e56c14fa5735aaa488b840983f87bd79b1054190e660de
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-controller50_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.1.1@sha256:0bc88eb15f9e7f84e8e56c14fa5735aaa488b840983f87bd79b1054190e660de
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller50_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.1.1@sha256:0bc88eb15f9e7f84e8e56c14fa5735aaa488b840983f87bd79b1054190e660de
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller50_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.1.1@sha256:0bc88eb15f9e7f84e8e56c14fa5735aaa488b840983f87bd79b1054190e660de
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller50_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.1.1@sha256:0bc88eb15f9e7f84e8e56c14fa5735aaa488b840983f87bd79b1054190e660de
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller50_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.1.1@sha256:0bc88eb15f9e7f84e8e56c14fa5735aaa488b840983f87bd79b1054190e660de
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-controller50_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.1.1@sha256:0bc88eb15f9e7f84e8e56c14fa5735aaa488b840983f87bd79b1054190e660de
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller50_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.1.1@sha256:0bc88eb15f9e7f84e8e56c14fa5735aaa488b840983f87bd79b1054190e660de
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller50_9.yaml:14-111
────────────────────────────────────────
  14 ┌   selector:
  15 │     matchLabels:
  16 │       app.kubernetes.io/name: ingress-nginx
  17 │       app.kubernetes.io/instance: ingress-nginx
  18 │       app.kubernetes.io/component: controller
  19 │   revisionHistoryLimit: 10
  20 │   minReadySeconds: 0
  21 │   template:
  22 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller50_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.1.1@sha256:0bc88eb15f9e7f84e8e56c14fa5735aaa488b840983f87bd79b1054190e660de
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller50_9.yaml:28-111
────────────────────────────────────────
  28 ┌       dnsPolicy: ClusterFirst
  29 │       containers:
  30 │       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.1.1@sha256:0bc88eb15f9e7f84e8e56c14fa5735aaa488b840983f87bd79b1054190e660de
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 └               command:
  ..   
────────────────────────────────────────



ingress-controller51.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller51.yaml:17-77
────────────────────────────────────────
  17 ┌   ingressClassName: webapprouting.kubernetes.azure.com
  18 │   rules:
  19 │   - host: drop-ship.shop
  20 │     http:
  21 │       paths:
  22 │       - path: /
  23 │         pathType: Prefix
  24 │         backend:
  25 └           service:
  ..   
────────────────────────────────────────



ingress-controller53.yaml (kubernetes)
======================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-ingress-controller' of Deployment 'ingress-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller53.yaml:18-37
────────────────────────────────────────
  18 ┌         - name: nginx-ingress-controller
  19 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
  20 │           args:
  21 │             - /nginx-ingress-controller
  22 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
  23 │             - --default-backend-service=app-space/default-http-backend
  24 │           env:
  25 │             - name: POD_NAME
  26 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-ingress-controller' of Deployment 'ingress-controller' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller53.yaml:18-37
────────────────────────────────────────
  18 ┌         - name: nginx-ingress-controller
  19 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
  20 │           args:
  21 │             - /nginx-ingress-controller
  22 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
  23 │             - --default-backend-service=app-space/default-http-backend
  24 │           env:
  25 │             - name: POD_NAME
  26 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-ingress-controller' of 'deployment' 'ingress-controller' in 'ingress-space' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller53.yaml:18-37
────────────────────────────────────────
  18 ┌         - name: nginx-ingress-controller
  19 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
  20 │           args:
  21 │             - /nginx-ingress-controller
  22 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
  23 │             - --default-backend-service=app-space/default-http-backend
  24 │           env:
  25 │             - name: POD_NAME
  26 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-ingress-controller' of Deployment 'ingress-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller53.yaml:18-37
────────────────────────────────────────
  18 ┌         - name: nginx-ingress-controller
  19 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
  20 │           args:
  21 │             - /nginx-ingress-controller
  22 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
  23 │             - --default-backend-service=app-space/default-http-backend
  24 │           env:
  25 │             - name: POD_NAME
  26 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-ingress-controller' of Deployment 'ingress-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-controller53.yaml:18-37
────────────────────────────────────────
  18 ┌         - name: nginx-ingress-controller
  19 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
  20 │           args:
  21 │             - /nginx-ingress-controller
  22 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
  23 │             - --default-backend-service=app-space/default-http-backend
  24 │           env:
  25 │             - name: POD_NAME
  26 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-ingress-controller' of Deployment 'ingress-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller53.yaml:18-37
────────────────────────────────────────
  18 ┌         - name: nginx-ingress-controller
  19 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
  20 │           args:
  21 │             - /nginx-ingress-controller
  22 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
  23 │             - --default-backend-service=app-space/default-http-backend
  24 │           env:
  25 │             - name: POD_NAME
  26 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-ingress-controller' of Deployment 'ingress-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller53.yaml:18-37
────────────────────────────────────────
  18 ┌         - name: nginx-ingress-controller
  19 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
  20 │           args:
  21 │             - /nginx-ingress-controller
  22 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
  23 │             - --default-backend-service=app-space/default-http-backend
  24 │           env:
  25 │             - name: POD_NAME
  26 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-ingress-controller' of Deployment 'ingress-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller53.yaml:18-37
────────────────────────────────────────
  18 ┌         - name: nginx-ingress-controller
  19 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
  20 │           args:
  21 │             - /nginx-ingress-controller
  22 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
  23 │             - --default-backend-service=app-space/default-http-backend
  24 │           env:
  25 │             - name: POD_NAME
  26 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-ingress-controller' of Deployment 'ingress-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller53.yaml:18-37
────────────────────────────────────────
  18 ┌         - name: nginx-ingress-controller
  19 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
  20 │           args:
  21 │             - /nginx-ingress-controller
  22 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
  23 │             - --default-backend-service=app-space/default-http-backend
  24 │           env:
  25 │             - name: POD_NAME
  26 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-ingress-controller' of Deployment 'ingress-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller53.yaml:18-37
────────────────────────────────────────
  18 ┌         - name: nginx-ingress-controller
  19 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
  20 │           args:
  21 │             - /nginx-ingress-controller
  22 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
  23 │             - --default-backend-service=app-space/default-http-backend
  24 │           env:
  25 │             - name: POD_NAME
  26 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-ingress-controller' of Deployment 'ingress-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller53.yaml:18-37
────────────────────────────────────────
  18 ┌         - name: nginx-ingress-controller
  19 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
  20 │           args:
  21 │             - /nginx-ingress-controller
  22 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
  23 │             - --default-backend-service=app-space/default-http-backend
  24 │           env:
  25 │             - name: POD_NAME
  26 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller53.yaml:18-37
────────────────────────────────────────
  18 ┌         - name: nginx-ingress-controller
  19 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
  20 │           args:
  21 │             - /nginx-ingress-controller
  22 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
  23 │             - --default-backend-service=app-space/default-http-backend
  24 │           env:
  25 │             - name: POD_NAME
  26 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller53.yaml:7-37
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       name: nginx-ingress
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         name: nginx-ingress
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-ingress-controller" of deployment "ingress-controller" in "ingress-space" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller53.yaml:18-37
────────────────────────────────────────
  18 ┌         - name: nginx-ingress-controller
  19 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
  20 │           args:
  21 │             - /nginx-ingress-controller
  22 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
  23 │             - --default-backend-service=app-space/default-http-backend
  24 │           env:
  25 │             - name: POD_NAME
  26 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller53.yaml:18-37
────────────────────────────────────────
  18 ┌         - name: nginx-ingress-controller
  19 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
  20 │           args:
  21 │             - /nginx-ingress-controller
  22 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
  23 │             - --default-backend-service=app-space/default-http-backend
  24 │           env:
  25 │             - name: POD_NAME
  26 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-controller in ingress-space namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ingress-controller in ingress-space namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller53.yaml:18-37
────────────────────────────────────────
  18 ┌         - name: nginx-ingress-controller
  19 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
  20 │           args:
  21 │             - /nginx-ingress-controller
  22 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
  23 │             - --default-backend-service=app-space/default-http-backend
  24 │           env:
  25 │             - name: POD_NAME
  26 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-controller in ingress-space namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller53.yaml:16-37
────────────────────────────────────────
  16 ┌       serviceAccountName: ingress-serviceaccount
  17 │       containers:
  18 │         - name: nginx-ingress-controller
  19 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
  20 │           args:
  21 │             - /nginx-ingress-controller
  22 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
  23 │             - --default-backend-service=app-space/default-http-backend
  24 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nginx-ingress-controller in deployment ingress-controller (namespace: ingress-space) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller53.yaml:18-37
────────────────────────────────────────
  18 ┌         - name: nginx-ingress-controller
  19 │           image: quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.21.0
  20 │           args:
  21 │             - /nginx-ingress-controller
  22 │             - --configmap=$(POD_NAMESPACE)/nginx-configuration
  23 │             - --default-backend-service=app-space/default-http-backend
  24 │           env:
  25 │             - name: POD_NAME
  26 └               valueFrom:
  ..   
────────────────────────────────────────



ingress-controller54.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller54.yaml:6-22
────────────────────────────────────────
   6 ┌   rules:
   7 │     - http:
   8 │         paths:
   9 │           - path: /blue
  10 │             pathType: Prefix
  11 │             backend:
  12 │               service:
  13 │                 name: blue-service
  14 └                 port:
  ..   
────────────────────────────────────────



ingress-controller55.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller55.yaml:11-71
────────────────────────────────────────
  11 ┌   ingressClassName: webapprouting.kubernetes.azure.com
  12 │   rules:
  13 │   - host: gizmocart.shop
  14 │     http:
  15 │       paths:
  16 │       - path: /
  17 │         pathType: Prefix
  18 │         backend:
  19 └           service:
  ..   
────────────────────────────────────────



ingress-controller5_12.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller5_12.yaml:17-36
────────────────────────────────────────
  17 ┌   externalTrafficPolicy: Local
  18 │   ipFamilies:
  19 │   - IPv4
  20 │   ipFamilyPolicy: SingleStack
  21 │   ports:
  22 │   - appProtocol: http
  23 │     name: http
  24 │     port: 80
  25 └     protocol: TCP
  ..   
────────────────────────────────────────



ingress-controller5_13.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller5_13.yaml:13-22
────────────────────────────────────────
  13 ┌   ports:
  14 │   - appProtocol: https
  15 │     name: https-webhook
  16 │     port: 443
  17 │     targetPort: webhook
  18 │   selector:
  19 │     app.kubernetes.io/component: controller
  20 │     app.kubernetes.io/instance: ingress-nginx
  21 │     app.kubernetes.io/name: ingress-nginx
  22 └   type: ClusterIP
────────────────────────────────────────



ingress-controller5_14.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller5_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller5_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-controller5_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller5_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller5_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller5_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller5_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-controller5_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller5_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller5_14.yaml:13-111
────────────────────────────────────────
  13 ┌   minReadySeconds: 0
  14 │   revisionHistoryLimit: 10
  15 │   selector:
  16 │     matchLabels:
  17 │       app.kubernetes.io/component: controller
  18 │       app.kubernetes.io/instance: ingress-nginx
  19 │       app.kubernetes.io/name: ingress-nginx
  20 │   template:
  21 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller5_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller5_14.yaml:27-111
────────────────────────────────────────
  27 ┌       containers:
  28 │       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller5_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────



ingress-controller5_15.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller5_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller5_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller5_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller5_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller5_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller5_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller5_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller5_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller5_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller5_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller5_15.yaml:13-46
────────────────────────────────────────
  13 ┌   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/component: admission-webhook
  17 │         app.kubernetes.io/instance: ingress-nginx
  18 │         app.kubernetes.io/name: ingress-nginx
  19 │         app.kubernetes.io/part-of: ingress-nginx
  20 │         app.kubernetes.io/version: 1.3.1
  21 └       name: ingress-nginx-admission-create
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller5_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller5_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller5_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-controller5_16.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller5_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller5_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller5_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller5_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller5_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller5_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller5_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller5_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller5_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller5_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller5_16.yaml:13-48
────────────────────────────────────────
  13 ┌   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/component: admission-webhook
  17 │         app.kubernetes.io/instance: ingress-nginx
  18 │         app.kubernetes.io/name: ingress-nginx
  19 │         app.kubernetes.io/part-of: ingress-nginx
  20 │         app.kubernetes.io/version: 1.3.1
  21 └       name: ingress-nginx-admission-patch
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller5_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller5_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller5_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-controller5_17.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller5_17.yaml:12
────────────────────────────────────────
  12 [   controller: k8s.io/ingress-nginx
────────────────────────────────────────



ingress-controller5_3.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller5_3.yaml:60-68
────────────────────────────────────────
  60 ┌ - apiGroups:
  61 │   - ''
  62 │   resourceNames:
  63 │   - ingress-controller-leader
  64 │   resources:
  65 │   - configmaps
  66 │   verbs:
  67 │   - get
  68 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller5_3.yaml:69-74
────────────────────────────────────────
  69 ┌ - apiGroups:
  70 │   - ''
  71 │   resources:
  72 │   - configmaps
  73 │   verbs:
  74 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller5_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-controller5_4.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller5_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-controller5_5.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller5_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-controller5_6.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller5_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-controller6_11.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller6_11.yaml:12-33
────────────────────────────────────────
  12 ┌   ipFamilies:
  13 │   - IPv4
  14 │   ipFamilyPolicy: SingleStack
  15 │   ports:
  16 │   - appProtocol: http
  17 │     name: http
  18 │     port: 80
  19 │     protocol: TCP
  20 └     targetPort: http
  ..   
────────────────────────────────────────



ingress-controller6_12.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller6_12.yaml:12-21
────────────────────────────────────────
  12 ┌   ports:
  13 │   - appProtocol: https
  14 │     name: https-webhook
  15 │     port: 443
  16 │     targetPort: webhook
  17 │   selector:
  18 │     app.kubernetes.io/component: controller
  19 │     app.kubernetes.io/instance: ingress-nginx
  20 │     app.kubernetes.io/name: ingress-nginx
  21 └   type: ClusterIP
────────────────────────────────────────



ingress-controller6_13.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller6_13.yaml:33-108
────────────────────────────────────────
  33 ┌       - args:
  34 │         - /nginx-ingress-controller
  35 │         - --election-id=ingress-nginx-leader
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  39 │         - --validating-webhook=:8443
  40 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  41 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller6_13.yaml:33-108
────────────────────────────────────────
  33 ┌       - args:
  34 │         - /nginx-ingress-controller
  35 │         - --election-id=ingress-nginx-leader
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  39 │         - --validating-webhook=:8443
  40 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  41 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller6_13.yaml:33-108
────────────────────────────────────────
  33 ┌       - args:
  34 │         - /nginx-ingress-controller
  35 │         - --election-id=ingress-nginx-leader
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  39 │         - --validating-webhook=:8443
  40 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  41 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller6_13.yaml:33-108
────────────────────────────────────────
  33 ┌       - args:
  34 │         - /nginx-ingress-controller
  35 │         - --election-id=ingress-nginx-leader
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  39 │         - --validating-webhook=:8443
  40 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  41 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller6_13.yaml:33-108
────────────────────────────────────────
  33 ┌       - args:
  34 │         - /nginx-ingress-controller
  35 │         - --election-id=ingress-nginx-leader
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  39 │         - --validating-webhook=:8443
  40 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  41 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller6_13.yaml:33-108
────────────────────────────────────────
  33 ┌       - args:
  34 │         - /nginx-ingress-controller
  35 │         - --election-id=ingress-nginx-leader
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  39 │         - --validating-webhook=:8443
  40 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  41 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller6_13.yaml:33-108
────────────────────────────────────────
  33 ┌       - args:
  34 │         - /nginx-ingress-controller
  35 │         - --election-id=ingress-nginx-leader
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  39 │         - --validating-webhook=:8443
  40 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  41 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-controller6_13.yaml:33-108
────────────────────────────────────────
  33 ┌       - args:
  34 │         - /nginx-ingress-controller
  35 │         - --election-id=ingress-nginx-leader
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  39 │         - --validating-webhook=:8443
  40 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  41 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller6_13.yaml:12-117
────────────────────────────────────────
  12 ┌   minReadySeconds: 0
  13 │   revisionHistoryLimit: 10
  14 │   selector:
  15 │     matchLabels:
  16 │       app.kubernetes.io/component: controller
  17 │       app.kubernetes.io/instance: ingress-nginx
  18 │       app.kubernetes.io/name: ingress-nginx
  19 │   strategy:
  20 └     rollingUpdate:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment ingress-nginx-controller in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-controller6_13.yaml:4-10
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: controller
   6 │     app.kubernetes.io/instance: ingress-nginx
   7 │     app.kubernetes.io/name: ingress-nginx
   8 │     app.kubernetes.io/part-of: ingress-nginx
   9 │     app.kubernetes.io/version: 1.12.0
  10 └   name: ingress-nginx-controller
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller6_13.yaml:32-117
────────────────────────────────────────
  32 ┌       containers:
  33 │       - args:
  34 │         - /nginx-ingress-controller
  35 │         - --election-id=ingress-nginx-leader
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  39 │         - --validating-webhook=:8443
  40 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller6_13.yaml:33-108
────────────────────────────────────────
  33 ┌       - args:
  34 │         - /nginx-ingress-controller
  35 │         - --election-id=ingress-nginx-leader
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  39 │         - --validating-webhook=:8443
  40 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  41 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────



ingress-controller6_14.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller6_14.yaml:23-46
────────────────────────────────────────
  23 ┌       - args:
  24 │         - create
  25 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  26 │         - --namespace=$(POD_NAMESPACE)
  27 │         - --secret-name=ingress-nginx-admission
  28 │         env:
  29 │         - name: POD_NAMESPACE
  30 │           valueFrom:
  31 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller6_14.yaml:23-46
────────────────────────────────────────
  23 ┌       - args:
  24 │         - create
  25 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  26 │         - --namespace=$(POD_NAMESPACE)
  27 │         - --secret-name=ingress-nginx-admission
  28 │         env:
  29 │         - name: POD_NAMESPACE
  30 │           valueFrom:
  31 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller6_14.yaml:23-46
────────────────────────────────────────
  23 ┌       - args:
  24 │         - create
  25 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  26 │         - --namespace=$(POD_NAMESPACE)
  27 │         - --secret-name=ingress-nginx-admission
  28 │         env:
  29 │         - name: POD_NAMESPACE
  30 │           valueFrom:
  31 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller6_14.yaml:23-46
────────────────────────────────────────
  23 ┌       - args:
  24 │         - create
  25 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  26 │         - --namespace=$(POD_NAMESPACE)
  27 │         - --secret-name=ingress-nginx-admission
  28 │         env:
  29 │         - name: POD_NAMESPACE
  30 │           valueFrom:
  31 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller6_14.yaml:12-50
────────────────────────────────────────
  12 ┌   template:
  13 │     metadata:
  14 │       labels:
  15 │         app.kubernetes.io/component: admission-webhook
  16 │         app.kubernetes.io/instance: ingress-nginx
  17 │         app.kubernetes.io/name: ingress-nginx
  18 │         app.kubernetes.io/part-of: ingress-nginx
  19 │         app.kubernetes.io/version: 1.12.0
  20 └       name: ingress-nginx-admission-create
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): job ingress-nginx-admission-create in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-controller6_14.yaml:4-10
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: admission-webhook
   6 │     app.kubernetes.io/instance: ingress-nginx
   7 │     app.kubernetes.io/name: ingress-nginx
   8 │     app.kubernetes.io/part-of: ingress-nginx
   9 │     app.kubernetes.io/version: 1.12.0
  10 └   name: ingress-nginx-admission-create
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-create in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller6_14.yaml:22-50
────────────────────────────────────────
  22 ┌       containers:
  23 │       - args:
  24 │         - create
  25 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  26 │         - --namespace=$(POD_NAMESPACE)
  27 │         - --secret-name=ingress-nginx-admission
  28 │         env:
  29 │         - name: POD_NAMESPACE
  30 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller6_14.yaml:23-46
────────────────────────────────────────
  23 ┌       - args:
  24 │         - create
  25 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  26 │         - --namespace=$(POD_NAMESPACE)
  27 │         - --secret-name=ingress-nginx-admission
  28 │         env:
  29 │         - name: POD_NAMESPACE
  30 │           valueFrom:
  31 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-controller6_15.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller6_15.yaml:23-48
────────────────────────────────────────
  23 ┌       - args:
  24 │         - patch
  25 │         - --webhook-name=ingress-nginx-admission
  26 │         - --namespace=$(POD_NAMESPACE)
  27 │         - --patch-mutating=false
  28 │         - --secret-name=ingress-nginx-admission
  29 │         - --patch-failure-policy=Fail
  30 │         env:
  31 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller6_15.yaml:23-48
────────────────────────────────────────
  23 ┌       - args:
  24 │         - patch
  25 │         - --webhook-name=ingress-nginx-admission
  26 │         - --namespace=$(POD_NAMESPACE)
  27 │         - --patch-mutating=false
  28 │         - --secret-name=ingress-nginx-admission
  29 │         - --patch-failure-policy=Fail
  30 │         env:
  31 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller6_15.yaml:23-48
────────────────────────────────────────
  23 ┌       - args:
  24 │         - patch
  25 │         - --webhook-name=ingress-nginx-admission
  26 │         - --namespace=$(POD_NAMESPACE)
  27 │         - --patch-mutating=false
  28 │         - --secret-name=ingress-nginx-admission
  29 │         - --patch-failure-policy=Fail
  30 │         env:
  31 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller6_15.yaml:23-48
────────────────────────────────────────
  23 ┌       - args:
  24 │         - patch
  25 │         - --webhook-name=ingress-nginx-admission
  26 │         - --namespace=$(POD_NAMESPACE)
  27 │         - --patch-mutating=false
  28 │         - --secret-name=ingress-nginx-admission
  29 │         - --patch-failure-policy=Fail
  30 │         env:
  31 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller6_15.yaml:12-52
────────────────────────────────────────
  12 ┌   template:
  13 │     metadata:
  14 │       labels:
  15 │         app.kubernetes.io/component: admission-webhook
  16 │         app.kubernetes.io/instance: ingress-nginx
  17 │         app.kubernetes.io/name: ingress-nginx
  18 │         app.kubernetes.io/part-of: ingress-nginx
  19 │         app.kubernetes.io/version: 1.12.0
  20 └       name: ingress-nginx-admission-patch
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): job ingress-nginx-admission-patch in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-controller6_15.yaml:4-10
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: admission-webhook
   6 │     app.kubernetes.io/instance: ingress-nginx
   7 │     app.kubernetes.io/name: ingress-nginx
   8 │     app.kubernetes.io/part-of: ingress-nginx
   9 │     app.kubernetes.io/version: 1.12.0
  10 └   name: ingress-nginx-admission-patch
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-patch in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller6_15.yaml:22-52
────────────────────────────────────────
  22 ┌       containers:
  23 │       - args:
  24 │         - patch
  25 │         - --webhook-name=ingress-nginx-admission
  26 │         - --namespace=$(POD_NAMESPACE)
  27 │         - --patch-mutating=false
  28 │         - --secret-name=ingress-nginx-admission
  29 │         - --patch-failure-policy=Fail
  30 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller6_15.yaml:23-48
────────────────────────────────────────
  23 ┌       - args:
  24 │         - patch
  25 │         - --webhook-name=ingress-nginx-admission
  26 │         - --namespace=$(POD_NAMESPACE)
  27 │         - --patch-mutating=false
  28 │         - --secret-name=ingress-nginx-admission
  29 │         - --patch-failure-policy=Fail
  30 │         env:
  31 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-controller6_16.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller6_16.yaml:12
────────────────────────────────────────
  12 [   controller: k8s.io/ingress-nginx
────────────────────────────────────────



ingress-controller6_2.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller6_2.yaml:18-28
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - ''
  20 │   resources:
  21 │   - configmaps
  22 │   - pods
  23 │   - secrets
  24 │   - endpoints
  25 │   verbs:
  26 └   - get
  ..   
────────────────────────────────────────



ingress-controller6_3.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller6_3.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - secrets
  16 │   verbs:
  17 │   - get
  18 └   - create
────────────────────────────────────────



ingress-controller6_4.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller6_4.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-controller6_5.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller6_5.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-controller7.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller7.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-http-backend
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller7.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-http-backend
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-controller7.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-http-backend
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller7.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-http-backend
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller7.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-http-backend
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller7.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-http-backend
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller7.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-http-backend
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-controller7.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-http-backend
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller7.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-http-backend
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller7.yaml:15-115
────────────────────────────────────────
  15 ┌   minReadySeconds: 0
  16 │   revisionHistoryLimit: 10
  17 │   selector:
  18 │     matchLabels:
  19 │       app.kubernetes.io/component: controller
  20 │       app.kubernetes.io/instance: ingress-nginx
  21 │       app.kubernetes.io/name: ingress-nginx
  22 │   template:
  23 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller7.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-http-backend
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller7.yaml:29-115
────────────────────────────────────────
  29 ┌       containers:
  30 │       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-http-backend
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 └         - --ingress-class=nginx
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: ingress-nginx) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller7.yaml:30-106
────────────────────────────────────────
  30 ┌       - args:
  31 │         - /nginx-ingress-controller
  32 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  33 │         - --election-id=ingress-controller-leader
  34 │         - --watch-ingress-without-class=true
  35 │         - --default-backend-service=app-space/default-http-backend
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 └         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  ..   
────────────────────────────────────────



ingress-controller7_1.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller7_1.yaml:16-25
────────────────────────────────────────
  16 ┌   ports:
  17 │   - port: 80
  18 │     protocol: TCP
  19 │     targetPort: 80
  20 │     nodePort: 30080
  21 │   selector:
  22 │     app.kubernetes.io/component: controller
  23 │     app.kubernetes.io/instance: ingress-nginx
  24 │     app.kubernetes.io/name: ingress-nginx
  25 └   type: NodePort
────────────────────────────────────────



ingress-controller8_10.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller8_10.yaml:14
────────────────────────────────────────
  14 [   controller: k8s.io/ingress-nginx
────────────────────────────────────────



ingress-controller8_13.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller8_13.yaml:16-22
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - admissionregistration.k8s.io
  18 │   resources:
  19 │   - validatingwebhookconfigurations
  20 │   verbs:
  21 │   - get
  22 └   - update
────────────────────────────────────────



ingress-controller8_15.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller8_15.yaml:17-23
────────────────────────────────────────
  17 ┌ - apiGroups:
  18 │   - ''
  19 │   resources:
  20 │   - secrets
  21 │   verbs:
  22 │   - get
  23 └   - create
────────────────────────────────────────



ingress-controller8_17.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller8_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller8_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller8_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller8_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller8_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller8_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller8_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller8_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller8_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller8_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller8_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller8_17.yaml:17-48
────────────────────────────────────────
  17 ┌   template:
  18 │     metadata:
  19 │       name: ingress-nginx-admission-create
  20 │       labels:
  21 │         helm.sh/chart: ingress-nginx-4.0.6
  22 │         app.kubernetes.io/name: ingress-nginx
  23 │         app.kubernetes.io/instance: ingress-nginx
  24 │         app.kubernetes.io/version: 1.0.4
  25 └         app.kubernetes.io/managed-by: Helm
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller8_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller8_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────



ingress-controller8_18.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller8_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller8_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller8_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller8_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller8_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller8_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller8_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller8_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller8_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller8_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller8_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller8_18.yaml:17-50
────────────────────────────────────────
  17 ┌   template:
  18 │     metadata:
  19 │       name: ingress-nginx-admission-patch
  20 │       labels:
  21 │         helm.sh/chart: ingress-nginx-4.0.6
  22 │         app.kubernetes.io/name: ingress-nginx
  23 │         app.kubernetes.io/instance: ingress-nginx
  24 │         app.kubernetes.io/version: 1.0.4
  25 └         app.kubernetes.io/managed-by: Helm
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller8_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller8_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────



ingress-controller8_3.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller8_3.yaml:12-22
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - configmaps
  16 │   - endpoints
  17 │   - nodes
  18 │   - pods
  19 │   - secrets
  20 └   verbs:
  ..   
────────────────────────────────────────



ingress-controller8_5.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller8_5.yaml:61-69
────────────────────────────────────────
  61 ┌ - apiGroups:
  62 │   - ''
  63 │   resources:
  64 │   - configmaps
  65 │   resourceNames:
  66 │   - ingress-controller-leader
  67 │   verbs:
  68 │   - get
  69 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller8_5.yaml:70-75
────────────────────────────────────────
  70 ┌ - apiGroups:
  71 │   - ''
  72 │   resources:
  73 │   - configmaps
  74 │   verbs:
  75 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller8_5.yaml:20-30
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - configmaps
  24 │   - pods
  25 │   - secrets
  26 │   - endpoints
  27 │   verbs:
  28 └   - get
  ..   
────────────────────────────────────────



ingress-controller8_7.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller8_7.yaml:14-23
────────────────────────────────────────
  14 ┌   type: ClusterIP
  15 │   ports:
  16 │   - name: https-webhook
  17 │     port: 443
  18 │     targetPort: webhook
  19 │     appProtocol: https
  20 │   selector:
  21 │     app.kubernetes.io/name: ingress-nginx
  22 │     app.kubernetes.io/instance: ingress-nginx
  23 └     app.kubernetes.io/component: controller
────────────────────────────────────────



ingress-controller8_8.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller8_8.yaml:18-37
────────────────────────────────────────
  18 ┌   type: LoadBalancer
  19 │   externalTrafficPolicy: Local
  20 │   ipFamilyPolicy: SingleStack
  21 │   ipFamilies:
  22 │   - IPv4
  23 │   ports:
  24 │   - name: http
  25 │     port: 80
  26 └     protocol: TCP
  ..   
────────────────────────────────────────



ingress-controller8_9.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller8_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller8_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-controller8_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller8_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller8_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller8_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller8_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-controller8_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller8_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller8_9.yaml:14-111
────────────────────────────────────────
  14 ┌   selector:
  15 │     matchLabels:
  16 │       app.kubernetes.io/name: ingress-nginx
  17 │       app.kubernetes.io/instance: ingress-nginx
  18 │       app.kubernetes.io/component: controller
  19 │   revisionHistoryLimit: 10
  20 │   minReadySeconds: 0
  21 │   template:
  22 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller8_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller8_9.yaml:28-111
────────────────────────────────────────
  28 ┌       dnsPolicy: ClusterFirst
  29 │       containers:
  30 │       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 └               command:
  ..   
────────────────────────────────────────



ingress-controller9_10.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller9_10.yaml:14
────────────────────────────────────────
  14 [   controller: k8s.io/ingress-nginx
────────────────────────────────────────



ingress-controller9_13.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller9_13.yaml:16-22
────────────────────────────────────────
  16 ┌ - apiGroups:
  17 │   - admissionregistration.k8s.io
  18 │   resources:
  19 │   - validatingwebhookconfigurations
  20 │   verbs:
  21 │   - get
  22 └   - update
────────────────────────────────────────



ingress-controller9_15.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller9_15.yaml:17-23
────────────────────────────────────────
  17 ┌ - apiGroups:
  18 │   - ''
  19 │   resources:
  20 │   - secrets
  21 │   verbs:
  22 │   - get
  23 └   - create
────────────────────────────────────────



ingress-controller9_17.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller9_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller9_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller9_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller9_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller9_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller9_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller9_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller9_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller9_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller9_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller9_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller9_17.yaml:17-48
────────────────────────────────────────
  17 ┌   template:
  18 │     metadata:
  19 │       name: ingress-nginx-admission-create
  20 │       labels:
  21 │         helm.sh/chart: ingress-nginx-4.0.6
  22 │         app.kubernetes.io/name: ingress-nginx
  23 │         app.kubernetes.io/instance: ingress-nginx
  24 │         app.kubernetes.io/version: 1.0.4
  25 └         app.kubernetes.io/managed-by: Helm
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller9_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller9_17.yaml:29-41
────────────────────────────────────────
  29 ┌       - name: create
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - create
  34 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --secret-name=ingress-nginx-admission
  37 └         env:
  ..   
────────────────────────────────────────



ingress-controller9_18.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller9_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-controller9_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-controller9_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller9_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller9_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller9_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller9_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller9_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller9_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller9_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller9_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller9_18.yaml:17-50
────────────────────────────────────────
  17 ┌   template:
  18 │     metadata:
  19 │       name: ingress-nginx-admission-patch
  20 │       labels:
  21 │         helm.sh/chart: ingress-nginx-4.0.6
  22 │         app.kubernetes.io/name: ingress-nginx
  23 │         app.kubernetes.io/instance: ingress-nginx
  24 │         app.kubernetes.io/version: 1.0.4
  25 └         app.kubernetes.io/managed-by: Helm
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller9_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-controller9_18.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: patch
  30 │         image: k8s.gcr.io/ingress-nginx/kube-webhook-certgen:v1.1.1@sha256:64d8c73dca984af206adf9d6d7e46aa550362b1d7a01f3a0a91b20cc67868660
  31 │         imagePullPolicy: IfNotPresent
  32 │         args:
  33 │         - patch
  34 │         - --webhook-name=ingress-nginx-admission
  35 │         - --namespace=$(POD_NAMESPACE)
  36 │         - --patch-mutating=false
  37 └         - --secret-name=ingress-nginx-admission
  ..   
────────────────────────────────────────



ingress-controller9_3.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller9_3.yaml:12-22
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - configmaps
  16 │   - endpoints
  17 │   - nodes
  18 │   - pods
  19 │   - secrets
  20 └   verbs:
  ..   
────────────────────────────────────────



ingress-controller9_5.yaml (kubernetes)
=======================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller9_5.yaml:61-69
────────────────────────────────────────
  61 ┌ - apiGroups:
  62 │   - ''
  63 │   resources:
  64 │   - configmaps
  65 │   resourceNames:
  66 │   - ingress-controller-leader
  67 │   verbs:
  68 │   - get
  69 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-controller9_5.yaml:70-75
────────────────────────────────────────
  70 ┌ - apiGroups:
  71 │   - ''
  72 │   resources:
  73 │   - configmaps
  74 │   verbs:
  75 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller9_5.yaml:20-30
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - configmaps
  24 │   - pods
  25 │   - secrets
  26 │   - endpoints
  27 │   verbs:
  28 └   - get
  ..   
────────────────────────────────────────



ingress-controller9_7.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller9_7.yaml:14-23
────────────────────────────────────────
  14 ┌   type: ClusterIP
  15 │   ports:
  16 │   - name: https-webhook
  17 │     port: 443
  18 │     targetPort: webhook
  19 │     appProtocol: https
  20 │   selector:
  21 │     app.kubernetes.io/name: ingress-nginx
  22 │     app.kubernetes.io/instance: ingress-nginx
  23 └     app.kubernetes.io/component: controller
────────────────────────────────────────



ingress-controller9_8.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller9_8.yaml:18-37
────────────────────────────────────────
  18 ┌   type: LoadBalancer
  19 │   externalTrafficPolicy: Local
  20 │   ipFamilyPolicy: SingleStack
  21 │   ipFamilies:
  22 │   - IPv4
  23 │   ports:
  24 │   - name: http
  25 │     port: 80
  26 └     protocol: TCP
  ..   
────────────────────────────────────────



ingress-controller9_9.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-controller9_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller9_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-controller9_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller9_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller9_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller9_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller9_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-controller9_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-controller9_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller9_9.yaml:14-111
────────────────────────────────────────
  14 ┌   selector:
  15 │     matchLabels:
  16 │       app.kubernetes.io/name: ingress-nginx
  17 │       app.kubernetes.io/instance: ingress-nginx
  18 │       app.kubernetes.io/component: controller
  19 │   revisionHistoryLimit: 10
  20 │   minReadySeconds: 0
  21 │   template:
  22 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-controller9_9.yaml:30-103
────────────────────────────────────────
  30 ┌       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 │               command:
  37 │               - /wait-shutdown
  38 └         args:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller9_9.yaml:28-111
────────────────────────────────────────
  28 ┌       dnsPolicy: ClusterFirst
  29 │       containers:
  30 │       - name: controller
  31 │         image: k8s.gcr.io/ingress-nginx/controller:v1.0.4@sha256:545cff00370f28363dad31e3b59a94ba377854d3a11f18988f5f9e56841ef9ef
  32 │         imagePullPolicy: IfNotPresent
  33 │         lifecycle:
  34 │           preStop:
  35 │             exec:
  36 └               command:
  ..   
────────────────────────────────────────



ingress-controller_11.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller_11.yaml:12-33
────────────────────────────────────────
  12 ┌   ipFamilies:
  13 │   - IPv4
  14 │   ipFamilyPolicy: SingleStack
  15 │   ports:
  16 │   - appProtocol: http
  17 │     name: http
  18 │     port: 80
  19 │     protocol: TCP
  20 └     targetPort: http
  ..   
────────────────────────────────────────



ingress-controller_12.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller_12.yaml:12-21
────────────────────────────────────────
  12 ┌   ports:
  13 │   - appProtocol: https
  14 │     name: https-webhook
  15 │     port: 443
  16 │     targetPort: webhook
  17 │   selector:
  18 │     app.kubernetes.io/component: controller
  19 │     app.kubernetes.io/instance: ingress-nginx
  20 │     app.kubernetes.io/name: ingress-nginx
  21 └   type: ClusterIP
────────────────────────────────────────



ingress-controller_13.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 8, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller_13.yaml:33-108
────────────────────────────────────────
  33 ┌       - args:
  34 │         - /nginx-ingress-controller
  35 │         - --election-id=ingress-nginx-leader
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  39 │         - --validating-webhook=:8443
  40 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  41 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-controller_13.yaml:33-108
────────────────────────────────────────
  33 ┌       - args:
  34 │         - /nginx-ingress-controller
  35 │         - --election-id=ingress-nginx-leader
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  39 │         - --validating-webhook=:8443
  40 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  41 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller_13.yaml:33-108
────────────────────────────────────────
  33 ┌       - args:
  34 │         - /nginx-ingress-controller
  35 │         - --election-id=ingress-nginx-leader
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  39 │         - --validating-webhook=:8443
  40 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  41 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller_13.yaml:33-108
────────────────────────────────────────
  33 ┌       - args:
  34 │         - /nginx-ingress-controller
  35 │         - --election-id=ingress-nginx-leader
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  39 │         - --validating-webhook=:8443
  40 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  41 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller_13.yaml:33-108
────────────────────────────────────────
  33 ┌       - args:
  34 │         - /nginx-ingress-controller
  35 │         - --election-id=ingress-nginx-leader
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  39 │         - --validating-webhook=:8443
  40 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  41 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-controller_13.yaml:33-108
────────────────────────────────────────
  33 ┌       - args:
  34 │         - /nginx-ingress-controller
  35 │         - --election-id=ingress-nginx-leader
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  39 │         - --validating-webhook=:8443
  40 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  41 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-controller_13.yaml:33-108
────────────────────────────────────────
  33 ┌       - args:
  34 │         - /nginx-ingress-controller
  35 │         - --election-id=ingress-nginx-leader
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  39 │         - --validating-webhook=:8443
  40 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  41 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-controller_13.yaml:33-108
────────────────────────────────────────
  33 ┌       - args:
  34 │         - /nginx-ingress-controller
  35 │         - --election-id=ingress-nginx-leader
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  39 │         - --validating-webhook=:8443
  40 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  41 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller_13.yaml:12-117
────────────────────────────────────────
  12 ┌   minReadySeconds: 0
  13 │   revisionHistoryLimit: 10
  14 │   selector:
  15 │     matchLabels:
  16 │       app.kubernetes.io/component: controller
  17 │       app.kubernetes.io/instance: ingress-nginx
  18 │       app.kubernetes.io/name: ingress-nginx
  19 │   strategy:
  20 └     rollingUpdate:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment ingress-nginx-controller in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-controller_13.yaml:4-10
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: controller
   6 │     app.kubernetes.io/instance: ingress-nginx
   7 │     app.kubernetes.io/name: ingress-nginx
   8 │     app.kubernetes.io/part-of: ingress-nginx
   9 │     app.kubernetes.io/version: 1.12.0
  10 └   name: ingress-nginx-controller
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller_13.yaml:32-117
────────────────────────────────────────
  32 ┌       containers:
  33 │       - args:
  34 │         - /nginx-ingress-controller
  35 │         - --election-id=ingress-nginx-leader
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  39 │         - --validating-webhook=:8443
  40 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller_13.yaml:33-108
────────────────────────────────────────
  33 ┌       - args:
  34 │         - /nginx-ingress-controller
  35 │         - --election-id=ingress-nginx-leader
  36 │         - --controller-class=k8s.io/ingress-nginx
  37 │         - --ingress-class=nginx
  38 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  39 │         - --validating-webhook=:8443
  40 │         - --validating-webhook-certificate=/usr/local/certificates/cert
  41 └         - --validating-webhook-key=/usr/local/certificates/key
  ..   
────────────────────────────────────────



ingress-controller_14.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller_14.yaml:23-46
────────────────────────────────────────
  23 ┌       - args:
  24 │         - create
  25 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  26 │         - --namespace=$(POD_NAMESPACE)
  27 │         - --secret-name=ingress-nginx-admission
  28 │         env:
  29 │         - name: POD_NAMESPACE
  30 │           valueFrom:
  31 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller_14.yaml:23-46
────────────────────────────────────────
  23 ┌       - args:
  24 │         - create
  25 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  26 │         - --namespace=$(POD_NAMESPACE)
  27 │         - --secret-name=ingress-nginx-admission
  28 │         env:
  29 │         - name: POD_NAMESPACE
  30 │           valueFrom:
  31 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller_14.yaml:23-46
────────────────────────────────────────
  23 ┌       - args:
  24 │         - create
  25 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  26 │         - --namespace=$(POD_NAMESPACE)
  27 │         - --secret-name=ingress-nginx-admission
  28 │         env:
  29 │         - name: POD_NAMESPACE
  30 │           valueFrom:
  31 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller_14.yaml:23-46
────────────────────────────────────────
  23 ┌       - args:
  24 │         - create
  25 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  26 │         - --namespace=$(POD_NAMESPACE)
  27 │         - --secret-name=ingress-nginx-admission
  28 │         env:
  29 │         - name: POD_NAMESPACE
  30 │           valueFrom:
  31 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller_14.yaml:12-50
────────────────────────────────────────
  12 ┌   template:
  13 │     metadata:
  14 │       labels:
  15 │         app.kubernetes.io/component: admission-webhook
  16 │         app.kubernetes.io/instance: ingress-nginx
  17 │         app.kubernetes.io/name: ingress-nginx
  18 │         app.kubernetes.io/part-of: ingress-nginx
  19 │         app.kubernetes.io/version: 1.12.0
  20 └       name: ingress-nginx-admission-create
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): job ingress-nginx-admission-create in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-controller_14.yaml:4-10
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: admission-webhook
   6 │     app.kubernetes.io/instance: ingress-nginx
   7 │     app.kubernetes.io/name: ingress-nginx
   8 │     app.kubernetes.io/part-of: ingress-nginx
   9 │     app.kubernetes.io/version: 1.12.0
  10 └   name: ingress-nginx-admission-create
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-create in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller_14.yaml:22-50
────────────────────────────────────────
  22 ┌       containers:
  23 │       - args:
  24 │         - create
  25 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  26 │         - --namespace=$(POD_NAMESPACE)
  27 │         - --secret-name=ingress-nginx-admission
  28 │         env:
  29 │         - name: POD_NAMESPACE
  30 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller_14.yaml:23-46
────────────────────────────────────────
  23 ┌       - args:
  24 │         - create
  25 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  26 │         - --namespace=$(POD_NAMESPACE)
  27 │         - --secret-name=ingress-nginx-admission
  28 │         env:
  29 │         - name: POD_NAMESPACE
  30 │           valueFrom:
  31 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-controller_15.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 107, FAILURES: 8)
Failures: 8 (UNKNOWN: 0, LOW: 6, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-controller_15.yaml:23-48
────────────────────────────────────────
  23 ┌       - args:
  24 │         - patch
  25 │         - --webhook-name=ingress-nginx-admission
  26 │         - --namespace=$(POD_NAMESPACE)
  27 │         - --patch-mutating=false
  28 │         - --secret-name=ingress-nginx-admission
  29 │         - --patch-failure-policy=Fail
  30 │         env:
  31 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-controller_15.yaml:23-48
────────────────────────────────────────
  23 ┌       - args:
  24 │         - patch
  25 │         - --webhook-name=ingress-nginx-admission
  26 │         - --namespace=$(POD_NAMESPACE)
  27 │         - --patch-mutating=false
  28 │         - --secret-name=ingress-nginx-admission
  29 │         - --patch-failure-policy=Fail
  30 │         env:
  31 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-controller_15.yaml:23-48
────────────────────────────────────────
  23 ┌       - args:
  24 │         - patch
  25 │         - --webhook-name=ingress-nginx-admission
  26 │         - --namespace=$(POD_NAMESPACE)
  27 │         - --patch-mutating=false
  28 │         - --secret-name=ingress-nginx-admission
  29 │         - --patch-failure-policy=Fail
  30 │         env:
  31 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-controller_15.yaml:23-48
────────────────────────────────────────
  23 ┌       - args:
  24 │         - patch
  25 │         - --webhook-name=ingress-nginx-admission
  26 │         - --namespace=$(POD_NAMESPACE)
  27 │         - --patch-mutating=false
  28 │         - --secret-name=ingress-nginx-admission
  29 │         - --patch-failure-policy=Fail
  30 │         env:
  31 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller_15.yaml:12-52
────────────────────────────────────────
  12 ┌   template:
  13 │     metadata:
  14 │       labels:
  15 │         app.kubernetes.io/component: admission-webhook
  16 │         app.kubernetes.io/instance: ingress-nginx
  17 │         app.kubernetes.io/name: ingress-nginx
  18 │         app.kubernetes.io/part-of: ingress-nginx
  19 │         app.kubernetes.io/version: 1.12.0
  20 └       name: ingress-nginx-admission-patch
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): job ingress-nginx-admission-patch in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-controller_15.yaml:4-10
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/component: admission-webhook
   6 │     app.kubernetes.io/instance: ingress-nginx
   7 │     app.kubernetes.io/name: ingress-nginx
   8 │     app.kubernetes.io/part-of: ingress-nginx
   9 │     app.kubernetes.io/version: 1.12.0
  10 └   name: ingress-nginx-admission-patch
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job ingress-nginx-admission-patch in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-controller_15.yaml:22-52
────────────────────────────────────────
  22 ┌       containers:
  23 │       - args:
  24 │         - patch
  25 │         - --webhook-name=ingress-nginx-admission
  26 │         - --namespace=$(POD_NAMESPACE)
  27 │         - --patch-mutating=false
  28 │         - --secret-name=ingress-nginx-admission
  29 │         - --patch-failure-policy=Fail
  30 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-controller_15.yaml:23-48
────────────────────────────────────────
  23 ┌       - args:
  24 │         - patch
  25 │         - --webhook-name=ingress-nginx-admission
  26 │         - --namespace=$(POD_NAMESPACE)
  27 │         - --patch-mutating=false
  28 │         - --secret-name=ingress-nginx-admission
  29 │         - --patch-failure-policy=Fail
  30 │         env:
  31 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-controller_16.yaml (kubernetes)
=======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-controller_16.yaml:12
────────────────────────────────────────
  12 [   controller: k8s.io/ingress-nginx
────────────────────────────────────────



ingress-controller_2.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller_2.yaml:18-28
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - ''
  20 │   resources:
  21 │   - configmaps
  22 │   - pods
  23 │   - secrets
  24 │   - endpoints
  25 │   verbs:
  26 └   - get
  ..   
────────────────────────────────────────



ingress-controller_3.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-controller_3.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - ''
  14 │   resources:
  15 │   - secrets
  16 │   verbs:
  17 │   - get
  18 └   - create
────────────────────────────────────────



ingress-controller_4.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-controller_4.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-controller_5.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-controller_5.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-cookie.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-cookie.yaml:13-29
────────────────────────────────────────
  13 ┌   ingressClassName: nginx
  14 │   #tls:
  15 │   #### Domínio para ter a finalização da criptografia
  16 │   #- hosts:
  17 │   #  - cofre-senhas.io # SSL somente vai ser assinado se tiver domínio CNAME
  18 │   #  secretName: gupoco-senhas-tls
  19 │   rules:
  20 │   - host: localhost # SE FOR AWS: domínio CNAME
  21 └     http:
  ..   
────────────────────────────────────────



ingress-cookie1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-cookie1.yaml:13-29
────────────────────────────────────────
  13 ┌   ingressClassName: nginx
  14 │   #tls:
  15 │   #### Domínio para ter a finalização da criptografia
  16 │   #- hosts:
  17 │   #  - cofre-senhas.io # SSL somente vai ser assinado se tiver domínio CNAME
  18 │   #  secretName: gupoco-senhas-tls
  19 │   rules:
  20 │   - host: localhost # SE FOR AWS: domínio CNAME
  21 └     http:
  ..   
────────────────────────────────────────



ingress-correto.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-correto.yaml:8-17
────────────────────────────────────────
   8 ┌   rules:
   9 │   - http:
  10 │       paths:
  11 │       - pathType: Prefix
  12 │         path: "/" # esse é o path correto que a aplicação giropops-senhas responde
  13 │         backend:
  14 │           service:
  15 │             name: giropops-senhas
  16 │             port: 
  17 └               number: 5000
────────────────────────────────────────



ingress-customer1-coit-frontend.yaml (kubernetes)
=================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-customer1-coit-frontend.yaml:7-18
────────────────────────────────────────
   7 ┌   ingressClassName: nginx
   8 │   rules:
   9 │   - host: "customer1.basilportfolio.com"
  10 │     http:
  11 │       paths:
  12 │       - pathType: Prefix
  13 │         path: "/"
  14 │         backend:
  15 └           service:
  ..   
────────────────────────────────────────



ingress-customer2-coit-frontend.yaml (kubernetes)
=================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-customer2-coit-frontend.yaml:9-20
────────────────────────────────────────
   9 ┌   ingressClassName: nginx
  10 │   rules:
  11 │   - host: "customer2.basilportfolio.com"
  12 │     http:
  13 │       paths:
  14 │       - pathType: Prefix
  15 │         path: "/"
  16 │         backend:
  17 └           service:
  ..   
────────────────────────────────────────



ingress-dashboard.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-dashboard.yaml:8-29
────────────────────────────────────────
   8 ┌   ingressClassName: traefik
   9 │   rules:
  10 │     - host: traefik.10-7-2-13.sslip.io
  11 │       http:
  12 │         paths:
  13 │           - backend:
  14 │               service:
  15 │                 name: traefik-dashboard-service
  16 └                 port:
  ..   
────────────────────────────────────────



ingress-dashboard1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-dashboard1.yaml:12-27
────────────────────────────────────────
  12 ┌   ingressClassName: "nginx"
  13 │   tls:
  14 │    - hosts:
  15 │      - rook-ceph-dashboard.internal.nanibot.net
  16 │      secretName: rook-ceph-ingress-secret
  17 │   rules:
  18 │   - host: rook-ceph-dashboard.internal.nanibot.net
  19 │     http:
  20 └       paths:
  ..   
────────────────────────────────────────



ingress-dashboard2.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-dashboard2.yaml:8-29
────────────────────────────────────────
   8 ┌   ingressClassName: traefik
   9 │   rules:
  10 │     - host: traefik.10-7-2-13.sslip.io
  11 │       http:
  12 │         paths:
  13 │           - backend:
  14 │               service:
  15 │                 name: traefik-dashboard-service
  16 └                 port:
  ..   
────────────────────────────────────────



ingress-dashboard3.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-dashboard3.yaml:12-27
────────────────────────────────────────
  12 ┌   ingressClassName: "nginx"
  13 │   tls:
  14 │    - hosts:
  15 │      - rook-ceph-dashboard.internal.nanibot.net
  16 │      secretName: rook-ceph-ingress-secret
  17 │   rules:
  18 │   - host: rook-ceph-dashboard.internal.nanibot.net
  19 │     http:
  20 └       paths:
  ..   
────────────────────────────────────────



ingress-default-backend.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-default-backend.yaml:11-15
────────────────────────────────────────
  11 ┌   defaultBackend: # WARNING: use the IP assigned to this Ingress to access the Service.
  12 │     service:
  13 │       name: python-server
  14 │       port:
  15 └         number: 5000
────────────────────────────────────────



ingress-default-path-definition-file.yaml (kubernetes)
======================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-default-path-definition-file.yaml:6-10
────────────────────────────────────────
   6 ┌   defaultBackend:
   7 │     service: 
   8 │       name: wear-service
   9 │       port:
  10 └         number: 80
────────────────────────────────────────



ingress-definition.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-definition.yaml:9-25
────────────────────────────────────────
   9 ┌   rules:
  10 │     - http:
  11 │         paths:
  12 │           - path: "/demo-path"
  13 │             pathType: Prefix
  14 │             backend:
  15 │               service:
  16 │                 port:
  17 └                   number: 8080
  ..   
────────────────────────────────────────



ingress-demo-app.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'hello-server' of Deployment 'hello-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-demo-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-server
  17 │         image: registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/hello-server
  18 │         ports:
  19 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'hello-server' of Deployment 'hello-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-demo-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-server
  17 │         image: registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/hello-server
  18 │         ports:
  19 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'hello-server' of 'deployment' 'hello-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-demo-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-server
  17 │         image: registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/hello-server
  18 │         ports:
  19 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'hello-server' of Deployment 'hello-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-demo-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-server
  17 │         image: registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/hello-server
  18 │         ports:
  19 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'hello-server' of Deployment 'hello-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-demo-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-server
  17 │         image: registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/hello-server
  18 │         ports:
  19 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'hello-server' of Deployment 'hello-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 ingress-demo-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-server
  17 │         image: registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/hello-server
  18 │         ports:
  19 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'hello-server' of Deployment 'hello-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-demo-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-server
  17 │         image: registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/hello-server
  18 │         ports:
  19 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'hello-server' of Deployment 'hello-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-demo-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-server
  17 │         image: registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/hello-server
  18 │         ports:
  19 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'hello-server' of Deployment 'hello-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-demo-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-server
  17 │         image: registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/hello-server
  18 │         ports:
  19 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'hello-server' of Deployment 'hello-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-demo-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-server
  17 │         image: registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/hello-server
  18 │         ports:
  19 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'hello-server' of Deployment 'hello-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-demo-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-server
  17 │         image: registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/hello-server
  18 │         ports:
  19 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'hello-server' of Deployment 'hello-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-demo-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-server
  17 │         image: registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/hello-server
  18 │         ports:
  19 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-demo-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-server
  17 │         image: registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/hello-server
  18 │         ports:
  19 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-demo-app.yaml:6-19
────────────────────────────────────────
   6 ┌   replicas: 2
   7 │   selector:
   8 │     matchLabels:
   9 │       app: hello-server
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: hello-server
  14 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "hello-server" of deployment "hello-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-demo-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-server
  17 │         image: registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/hello-server
  18 │         ports:
  19 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-demo-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-server
  17 │         image: registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/hello-server
  18 │         ports:
  19 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment hello-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-demo-app.yaml:4
────────────────────────────────────────
   4 [   name: hello-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hello-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-demo-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-server
  17 │         image: registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/hello-server
  18 │         ports:
  19 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment hello-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-demo-app.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: hello-server
  17 │         image: registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/hello-server
  18 │         ports:
  19 └         - containerPort: 9000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container hello-server in deployment hello-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-demo-app.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-server
  17 │         image: registry.cn-hangzhou.aliyuncs.com/lfy_k8s_images/hello-server
  18 │         ports:
  19 └         - containerPort: 9000
────────────────────────────────────────



ingress-demo-app_1.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-demo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-demo-app_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - image: nginx
  19 └         name: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-demo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-demo-app_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - image: nginx
  19 └         name: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-demo' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-demo-app_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - image: nginx
  19 └         name: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-demo' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-demo-app_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - image: nginx
  19 └         name: nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-demo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-demo-app_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - image: nginx
  19 └         name: nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of Deployment 'nginx-demo' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 ingress-demo-app_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - image: nginx
  19 └         name: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-demo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-demo-app_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - image: nginx
  19 └         name: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-demo' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-demo-app_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - image: nginx
  19 └         name: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-demo' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-demo-app_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - image: nginx
  19 └         name: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-demo' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-demo-app_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - image: nginx
  19 └         name: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-demo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-demo-app_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - image: nginx
  19 └         name: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-demo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-demo-app_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - image: nginx
  19 └         name: nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-demo-app_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - image: nginx
  19 └         name: nginx
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-demo-app_1.yaml:8-19
────────────────────────────────────────
   8 ┌   replicas: 2
   9 │   selector:
  10 │     matchLabels:
  11 │       app: nginx-demo
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: nginx-demo
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-demo" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-demo-app_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - image: nginx
  19 └         name: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-demo-app_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - image: nginx
  19 └         name: nginx
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-demo in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-demo-app_1.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: nginx-demo
   6 └   name: nginx-demo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-demo in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-demo-app_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - image: nginx
  19 └         name: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-demo in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-demo-app_1.yaml:17-19
────────────────────────────────────────
  17 ┌       containers:
  18 │       - image: nginx
  19 └         name: nginx
────────────────────────────────────────



ingress-demo-app_2.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-demo-app_2.yaml:8-13
────────────────────────────────────────
   8 ┌   selector:
   9 │     app: nginx-demo
  10 │   ports:
  11 │   - port: 8000
  12 │     protocol: TCP
  13 └     targetPort: 80
────────────────────────────────────────



ingress-demo-app_3.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-demo-app_3.yaml:8-13
────────────────────────────────────────
   8 ┌   selector:
   9 │     app: hello-server
  10 │   ports:
  11 │   - port: 8000
  12 │     protocol: TCP
  13 └     targetPort: 9000
────────────────────────────────────────



ingress-demo-app_4.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-demo-app_4.yaml:6-27
────────────────────────────────────────
   6 ┌   ingressClassName: nginx
   7 │   rules:
   8 │   - host: hello.chenby.cn
   9 │     http:
  10 │       paths:
  11 │       - pathType: Prefix
  12 │         path: /
  13 │         backend:
  14 └           service:
  ..   
────────────────────────────────────────



ingress-depl.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-depl.yaml:8-19
────────────────────────────────────────
   8 ┌   ingressClassName: nginx
   9 │   rules:
  10 │     - host: ticketing.dev
  11 │       http:
  12 │         paths:
  13 │           - path: /api/users/?(.*)
  14 │             pathType: ImplementationSpecific
  15 │             backend:
  16 └               service:
  ..   
────────────────────────────────────────



ingress-deployment-service.yaml (kubernetes)
============================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-pod' of Deployment 'nginx-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-deployment-service.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-pod
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-pod' of Deployment 'nginx-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-deployment-service.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-pod
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-pod' of 'deployment' 'nginx-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-deployment-service.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-pod
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-pod' of Deployment 'nginx-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-deployment-service.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-pod
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-pod' of Deployment 'nginx-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-deployment-service.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-pod
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-pod' of Deployment 'nginx-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 ingress-deployment-service.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-pod
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-pod' of Deployment 'nginx-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-deployment-service.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-pod
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-pod' of Deployment 'nginx-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-deployment-service.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-pod
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-pod' of Deployment 'nginx-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-deployment-service.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-pod
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-pod' of Deployment 'nginx-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-deployment-service.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-pod
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-pod' of Deployment 'nginx-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-deployment-service.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-pod
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-pod' of Deployment 'nginx-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-deployment-service.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-pod
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-deployment-service.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-pod
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-deployment-service.yaml:6-20
────────────────────────────────────────
   6 ┌   replicas: 2
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nginx-app
  10 │   template:
  11 │     metadata:
  12 │       name: nginx-pod
  13 │       labels:
  14 └         app: nginx-app
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-pod" of deployment "nginx-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-deployment-service.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-pod
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-deployment-service.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-pod
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-deployment-service.yaml:4
────────────────────────────────────────
   4 [   name: nginx-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-deployment-service.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-pod
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-deployment-service.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx-pod
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



ingress-deployment-service1.yaml (kubernetes)
=============================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-pod' of Deployment 'nginx-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-deployment-service1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-pod
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-pod' of Deployment 'nginx-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-deployment-service1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-pod
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-pod' of 'deployment' 'nginx-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-deployment-service1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-pod
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-pod' of Deployment 'nginx-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-deployment-service1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-pod
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-pod' of Deployment 'nginx-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-deployment-service1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-pod
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-pod' of Deployment 'nginx-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 ingress-deployment-service1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-pod
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-pod' of Deployment 'nginx-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-deployment-service1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-pod
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-pod' of Deployment 'nginx-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-deployment-service1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-pod
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-pod' of Deployment 'nginx-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-deployment-service1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-pod
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-pod' of Deployment 'nginx-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-deployment-service1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-pod
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-pod' of Deployment 'nginx-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-deployment-service1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-pod
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-pod' of Deployment 'nginx-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-deployment-service1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-pod
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-deployment-service1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-pod
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-deployment-service1.yaml:6-20
────────────────────────────────────────
   6 ┌   replicas: 2
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nginx-app
  10 │   template:
  11 │     metadata:
  12 │       name: nginx-pod
  13 │       labels:
  14 └         app: nginx-app
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-pod" of deployment "nginx-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-deployment-service1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-pod
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-deployment-service1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-pod
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-deployment-service1.yaml:4
────────────────────────────────────────
   4 [   name: nginx-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-deployment-service1.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-pod
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-deployment-service1.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx-pod
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



ingress-deployment-service1_1.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-deployment-service1_1.yaml:6-13
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: nginx-app
   9 │   ports:
  10 │   - name: http
  11 │     protocol: TCP
  12 │     port: 80
  13 └     targetPort: 80
────────────────────────────────────────



ingress-deployment-service1_2.yaml (kubernetes)
===============================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'django-container' of Deployment 'django-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-deployment-service1_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'django-container' of Deployment 'django-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-deployment-service1_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'django-container' of 'deployment' 'django-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-deployment-service1_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'django-container' of Deployment 'django-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-deployment-service1_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'django-container' of Deployment 'django-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-deployment-service1_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'django-container' of Deployment 'django-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-deployment-service1_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'django-container' of Deployment 'django-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-deployment-service1_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'django-container' of Deployment 'django-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-deployment-service1_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'django-container' of Deployment 'django-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-deployment-service1_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'django-container' of Deployment 'django-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-deployment-service1_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'django-container' of Deployment 'django-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-deployment-service1_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-deployment-service1_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-deployment-service1_2.yaml:6-20
────────────────────────────────────────
   6 ┌   replicas: 2
   7 │   selector:
   8 │     matchLabels:
   9 │       app: django-app
  10 │   template:
  11 │     metadata:
  12 │       name: django-pod
  13 │       labels:
  14 └         app: django-app
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "django-container" of deployment "django-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-deployment-service1_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-deployment-service1_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment django-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-deployment-service1_2.yaml:4
────────────────────────────────────────
   4 [   name: django-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container django-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-deployment-service1_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment django-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-deployment-service1_2.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container django-container in deployment django-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-deployment-service1_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────



ingress-deployment-service1_3.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-deployment-service1_3.yaml:6-13
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: django-app
   9 │   ports:
  10 │   - name: http
  11 │     protocol: TCP
  12 │     port: 8000
  13 └     targetPort: 8000
────────────────────────────────────────



ingress-deployment-service2.yaml (kubernetes)
=============================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-container' of Deployment 'nginx-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-deployment-service2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-container' of Deployment 'nginx-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-deployment-service2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-container' of 'deployment' 'nginx-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-deployment-service2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-container' of Deployment 'nginx-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-deployment-service2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-container' of Deployment 'nginx-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-deployment-service2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-container' of Deployment 'nginx-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 ingress-deployment-service2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-container' of Deployment 'nginx-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-deployment-service2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-container' of Deployment 'nginx-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-deployment-service2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-container' of Deployment 'nginx-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-deployment-service2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-container' of Deployment 'nginx-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-deployment-service2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-container' of Deployment 'nginx-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-deployment-service2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-container' of Deployment 'nginx-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-deployment-service2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-deployment-service2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-deployment-service2.yaml:6-20
────────────────────────────────────────
   6 ┌   replicas: 2
   7 │   selector:
   8 │     matchLabels:
   9 │       app: nginx-app
  10 │   template:
  11 │     metadata:
  12 │       name: nginx-pod
  13 │       labels:
  14 └         app: nginx-app
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-container" of deployment "nginx-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-deployment-service2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-deployment-service2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-deployment-service2.yaml:4
────────────────────────────────────────
   4 [   name: nginx-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-deployment-service2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx-container
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-deployment-service2.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx-container
  18 │         image: nginx:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



ingress-deployment-service2_1.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-deployment-service2_1.yaml:6-13
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: nginx-app
   9 │   ports:
  10 │   - name: http
  11 │     protocol: TCP
  12 │     port: 80
  13 └     targetPort: 80
────────────────────────────────────────



ingress-deployment-service2_2.yaml (kubernetes)
===============================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'django-container' of Deployment 'django-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-deployment-service2_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'django-container' of Deployment 'django-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-deployment-service2_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'django-container' of 'deployment' 'django-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-deployment-service2_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'django-container' of Deployment 'django-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-deployment-service2_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'django-container' of Deployment 'django-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-deployment-service2_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'django-container' of Deployment 'django-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-deployment-service2_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'django-container' of Deployment 'django-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-deployment-service2_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'django-container' of Deployment 'django-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-deployment-service2_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'django-container' of Deployment 'django-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-deployment-service2_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'django-container' of Deployment 'django-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-deployment-service2_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'django-container' of Deployment 'django-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-deployment-service2_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-deployment-service2_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-deployment-service2_2.yaml:6-20
────────────────────────────────────────
   6 ┌   replicas: 2
   7 │   selector:
   8 │     matchLabels:
   9 │       app: django-app
  10 │   template:
  11 │     metadata:
  12 │       name: django-pod
  13 │       labels:
  14 └         app: django-app
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "django-container" of deployment "django-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-deployment-service2_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-deployment-service2_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment django-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-deployment-service2_2.yaml:4
────────────────────────────────────────
   4 [   name: django-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container django-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-deployment-service2_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment django-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-deployment-service2_2.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container django-container in deployment django-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-deployment-service2_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────



ingress-deployment-service2_3.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-deployment-service2_3.yaml:6-13
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: django-app
   9 │   ports:
  10 │   - name: http
  11 │     protocol: TCP
  12 │     port: 8000
  13 └     targetPort: 8000
────────────────────────────────────────



ingress-deployment-service_1.yaml (kubernetes)
==============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-deployment-service_1.yaml:6-13
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: nginx-app
   9 │   ports:
  10 │   - name: http
  11 │     protocol: TCP
  12 │     port: 80
  13 └     targetPort: 80
────────────────────────────────────────



ingress-deployment-service_2.yaml (kubernetes)
==============================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'django-container' of Deployment 'django-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-deployment-service_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'django-container' of Deployment 'django-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-deployment-service_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'django-container' of 'deployment' 'django-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-deployment-service_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'django-container' of Deployment 'django-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-deployment-service_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'django-container' of Deployment 'django-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-deployment-service_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'django-container' of Deployment 'django-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-deployment-service_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'django-container' of Deployment 'django-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-deployment-service_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'django-container' of Deployment 'django-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-deployment-service_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'django-container' of Deployment 'django-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-deployment-service_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'django-container' of Deployment 'django-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-deployment-service_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'django-container' of Deployment 'django-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-deployment-service_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-deployment-service_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-deployment-service_2.yaml:6-20
────────────────────────────────────────
   6 ┌   replicas: 2
   7 │   selector:
   8 │     matchLabels:
   9 │       app: django-app
  10 │   template:
  11 │     metadata:
  12 │       name: django-pod
  13 │       labels:
  14 └         app: django-app
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "django-container" of deployment "django-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-deployment-service_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-deployment-service_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment django-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-deployment-service_2.yaml:4
────────────────────────────────────────
   4 [   name: django-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container django-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-deployment-service_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment django-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-deployment-service_2.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container django-container in deployment django-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-deployment-service_2.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: django-container
  18 │         image: venu1322/django-web-app:0.0.2.RELEASE
  19 │         ports:
  20 └         - containerPort: 8000
────────────────────────────────────────



ingress-deployment-service_3.yaml (kubernetes)
==============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-deployment-service_3.yaml:6-13
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     app: django-app
   9 │   ports:
  10 │   - name: http
  11 │     protocol: TCP
  12 │     port: 8000
  13 └     targetPort: 8000
────────────────────────────────────────



ingress-deployment.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-deployment.yaml:11-21
────────────────────────────────────────
  11 ┌   rules:
  12 │        - host: app.185.47.227.175.nip.io # Url where curl it's received (ELB or Domain linked to ELB)
  13 │          http:
  14 │           paths:
  15 │           - path: /
  16 │             pathType: Exact
  17 │             backend:
  18 │               service:
  19 └                 name: frontend
  ..   
────────────────────────────────────────



ingress-deployment1.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-deployment1.yaml:11-21
────────────────────────────────────────
  11 ┌   rules:
  12 │        - host: app.185.47.227.175.nip.io # Url where curl it's received (ELB or Domain linked to ELB)
  13 │          http:
  14 │           paths:
  15 │           - path: /
  16 │             pathType: Exact
  17 │             backend:
  18 │               service:
  19 └                 name: frontend
  ..   
────────────────────────────────────────



ingress-deployment2.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-deployment2.yaml:11-15
────────────────────────────────────────
  11 ┌   defaultBackend:
  12 │     service:
  13 │       name: app3-nginx-nodeport-service
  14 │       port:
  15 └         number: 80                   
────────────────────────────────────────



ingress-dev.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-dev.yaml:8-19
────────────────────────────────────────
   8 ┌   ingressClassName: nginx
   9 │   rules:
  10 │   - host: dev.afraz.dev
  11 │     http:
  12 │       paths:
  13 │       - path: /
  14 │         pathType: Prefix
  15 │         backend:
  16 └           service:
  ..   
────────────────────────────────────────



ingress-django.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-django.yaml:6-16
────────────────────────────────────────
   6 ┌   rules:
   7 │     - host: www.jmdp-django.org
   8 │       http:
   9 │         paths:
  10 │           - path: /
  11 │             pathType: Prefix
  12 │             backend:
  13 │               service:
  14 └                 name: django
  ..   
────────────────────────────────────────



ingress-dns-example-v1.yaml (kubernetes)
========================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'hello-world-app' of Deployment 'hello-world-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-dns-example-v1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-world-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'hello-world-app' of Deployment 'hello-world-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-dns-example-v1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-world-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'hello-world-app' of 'deployment' 'hello-world-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-dns-example-v1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-world-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'hello-world-app' of Deployment 'hello-world-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-dns-example-v1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-world-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'hello-world-app' of Deployment 'hello-world-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-dns-example-v1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-world-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'hello-world-app' of Deployment 'hello-world-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-dns-example-v1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-world-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'hello-world-app' of Deployment 'hello-world-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-dns-example-v1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-world-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'hello-world-app' of Deployment 'hello-world-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-dns-example-v1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-world-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'hello-world-app' of Deployment 'hello-world-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-dns-example-v1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-world-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'hello-world-app' of Deployment 'hello-world-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-dns-example-v1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-world-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'hello-world-app' of Deployment 'hello-world-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-dns-example-v1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-world-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-dns-example-v1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-world-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-dns-example-v1.yaml:7-19
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       app: hello-world-app
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: hello-world-app
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "hello-world-app" of deployment "hello-world-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-dns-example-v1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-world-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-dns-example-v1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-world-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment hello-world-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-dns-example-v1.yaml:4-5
────────────────────────────────────────
   4 ┌   name: hello-world-app
   5 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hello-world-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-dns-example-v1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-world-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment hello-world-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-dns-example-v1.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: hello-world-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────



ingress-dns-example-v1_1.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Ingress 'example-ingress' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 ingress-dns-example-v1_1.yaml:7-28
────────────────────────────────────────
   7 ┌   ingressClassName: nginx
   8 │   rules:
   9 │   - host: hello-john.test
  10 │     http:
  11 │       paths:
  12 │       - path: /
  13 │         pathType: Prefix
  14 │         backend:
  15 └           service:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-dns-example-v1_1.yaml:7-28
────────────────────────────────────────
   7 ┌   ingressClassName: nginx
   8 │   rules:
   9 │   - host: hello-john.test
  10 │     http:
  11 │       paths:
  12 │       - path: /
  13 │         pathType: Prefix
  14 │         backend:
  15 └           service:
  ..   
────────────────────────────────────────



ingress-dns-example-v1_2.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 112, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'hello-world-app' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 ingress-dns-example-v1_2.yaml:7-8
────────────────────────────────────────
   7 ┌   type: ExternalName
   8 └   externalName: hello-world-app.default.svc.cluster.local
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-dns-example-v1_2.yaml:7-8
────────────────────────────────────────
   7 ┌   type: ExternalName
   8 └   externalName: hello-world-app.default.svc.cluster.local
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'hello-world-app' in 'kube-system' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



ingress-dns-example-v1_3.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-dns-example-v1_3.yaml:7-14
────────────────────────────────────────
   7 ┌   ports:
   8 │   - name: http
   9 │     port: 80
  10 │     targetPort: 8080
  11 │     protocol: TCP
  12 │   type: NodePort
  13 │   selector:
  14 └     app: hello-world-app
────────────────────────────────────────



ingress-dns-example-v1beta1.yaml (kubernetes)
=============================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'hello-world-app' of Deployment 'hello-world-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-dns-example-v1beta1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-world-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'hello-world-app' of Deployment 'hello-world-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-dns-example-v1beta1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-world-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'hello-world-app' of 'deployment' 'hello-world-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-dns-example-v1beta1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-world-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'hello-world-app' of Deployment 'hello-world-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-dns-example-v1beta1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-world-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'hello-world-app' of Deployment 'hello-world-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-dns-example-v1beta1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-world-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'hello-world-app' of Deployment 'hello-world-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-dns-example-v1beta1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-world-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'hello-world-app' of Deployment 'hello-world-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-dns-example-v1beta1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-world-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'hello-world-app' of Deployment 'hello-world-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-dns-example-v1beta1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-world-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'hello-world-app' of Deployment 'hello-world-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-dns-example-v1beta1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-world-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'hello-world-app' of Deployment 'hello-world-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-dns-example-v1beta1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-world-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'hello-world-app' of Deployment 'hello-world-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-dns-example-v1beta1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-world-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-dns-example-v1beta1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-world-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-dns-example-v1beta1.yaml:7-19
────────────────────────────────────────
   7 ┌   selector:
   8 │     matchLabels:
   9 │       app: hello-world-app
  10 │   template:
  11 │     metadata:
  12 │       labels:
  13 │         app: hello-world-app
  14 │     spec:
  15 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "hello-world-app" of deployment "hello-world-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-dns-example-v1beta1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-world-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-dns-example-v1beta1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-world-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment hello-world-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-dns-example-v1beta1.yaml:4-5
────────────────────────────────────────
   4 ┌   name: hello-world-app
   5 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hello-world-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-dns-example-v1beta1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: hello-world-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment hello-world-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-dns-example-v1beta1.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: hello-world-app
  17 │         image: gcr.io/google-samples/hello-app:1.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────



ingress-dns-example-v1beta1_2.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 112, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 1, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'hello-world-app' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 ingress-dns-example-v1beta1_2.yaml:7-8
────────────────────────────────────────
   7 ┌   type: ExternalName
   8 └   externalName: hello-world-app.default.svc.cluster.local
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-dns-example-v1beta1_2.yaml:7-8
────────────────────────────────────────
   7 ┌   type: ExternalName
   8 └   externalName: hello-world-app.default.svc.cluster.local
────────────────────────────────────────


AVD-KSV-0108 (HIGH): Service 'hello-world-app' in 'kube-system' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



ingress-dns-example-v1beta1_3.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-dns-example-v1beta1_3.yaml:7-14
────────────────────────────────────────
   7 ┌   ports:
   8 │   - name: http
   9 │     port: 80
  10 │     targetPort: 8080
  11 │     protocol: TCP
  12 │   type: NodePort
  13 │   selector:
  14 └     app: hello-world-app
────────────────────────────────────────



ingress-dns_3.yaml (kubernetes)
===============================
Tests: 116 (SUCCESSES: 94, FAILURES: 22)
Failures: 22 (UNKNOWN: 0, LOW: 11, MEDIUM: 7, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kube-ingress-dns' of Pod 'kube-ingress-dns' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-dns_3.yaml:13-25
────────────────────────────────────────
  13 ┌   - name: kube-ingress-dns
  14 │     image: tomlawton89/kube-ingress-dns:latest
  15 │     imagePullPolicy: IfNotPresent
  16 │     ports:
  17 │     - containerPort: 53
  18 │       protocol: UDP
  19 │     env:
  20 │     - name: DNS_PORT
  21 └       value: '53'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-ingress-dns' of Pod 'kube-ingress-dns' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-dns_3.yaml:13-25
────────────────────────────────────────
  13 ┌   - name: kube-ingress-dns
  14 │     image: tomlawton89/kube-ingress-dns:latest
  15 │     imagePullPolicy: IfNotPresent
  16 │     ports:
  17 │     - containerPort: 53
  18 │       protocol: UDP
  19 │     env:
  20 │     - name: DNS_PORT
  21 └       value: '53'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-ingress-dns' of 'pod' 'kube-ingress-dns' in 'kube-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-dns_3.yaml:13-25
────────────────────────────────────────
  13 ┌   - name: kube-ingress-dns
  14 │     image: tomlawton89/kube-ingress-dns:latest
  15 │     imagePullPolicy: IfNotPresent
  16 │     ports:
  17 │     - containerPort: 53
  18 │       protocol: UDP
  19 │     env:
  20 │     - name: DNS_PORT
  21 └       value: '53'
  ..   
────────────────────────────────────────


AVD-KSV-0009 (HIGH): Pod 'kube-ingress-dns' should not set 'spec.template.spec.hostNetwork' to true
════════════════════════════════════════
Sharing the host’s network namespace permits processes in the pod to communicate with processes bound to the host’s loopback adapter.

See https://avd.aquasec.com/misconfig/ksv009
────────────────────────────────────────
 ingress-dns_3.yaml:10-25
────────────────────────────────────────
  10 ┌   serviceAccountName: kube-ingress-dns
  11 │   hostNetwork: true
  12 │   containers:
  13 │   - name: kube-ingress-dns
  14 │     image: tomlawton89/kube-ingress-dns:latest
  15 │     imagePullPolicy: IfNotPresent
  16 │     ports:
  17 │     - containerPort: 53
  18 └       protocol: UDP
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kube-ingress-dns' of Pod 'kube-ingress-dns' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-dns_3.yaml:13-25
────────────────────────────────────────
  13 ┌   - name: kube-ingress-dns
  14 │     image: tomlawton89/kube-ingress-dns:latest
  15 │     imagePullPolicy: IfNotPresent
  16 │     ports:
  17 │     - containerPort: 53
  18 │       protocol: UDP
  19 │     env:
  20 │     - name: DNS_PORT
  21 └       value: '53'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kube-ingress-dns' of Pod 'kube-ingress-dns' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-dns_3.yaml:13-25
────────────────────────────────────────
  13 ┌   - name: kube-ingress-dns
  14 │     image: tomlawton89/kube-ingress-dns:latest
  15 │     imagePullPolicy: IfNotPresent
  16 │     ports:
  17 │     - containerPort: 53
  18 │       protocol: UDP
  19 │     env:
  20 │     - name: DNS_PORT
  21 └       value: '53'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kube-ingress-dns' of Pod 'kube-ingress-dns' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 ingress-dns_3.yaml:13-25
────────────────────────────────────────
  13 ┌   - name: kube-ingress-dns
  14 │     image: tomlawton89/kube-ingress-dns:latest
  15 │     imagePullPolicy: IfNotPresent
  16 │     ports:
  17 │     - containerPort: 53
  18 │       protocol: UDP
  19 │     env:
  20 │     - name: DNS_PORT
  21 └       value: '53'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-ingress-dns' of Pod 'kube-ingress-dns' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-dns_3.yaml:13-25
────────────────────────────────────────
  13 ┌   - name: kube-ingress-dns
  14 │     image: tomlawton89/kube-ingress-dns:latest
  15 │     imagePullPolicy: IfNotPresent
  16 │     ports:
  17 │     - containerPort: 53
  18 │       protocol: UDP
  19 │     env:
  20 │     - name: DNS_PORT
  21 └       value: '53'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kube-ingress-dns' of Pod 'kube-ingress-dns' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-dns_3.yaml:13-25
────────────────────────────────────────
  13 ┌   - name: kube-ingress-dns
  14 │     image: tomlawton89/kube-ingress-dns:latest
  15 │     imagePullPolicy: IfNotPresent
  16 │     ports:
  17 │     - containerPort: 53
  18 │       protocol: UDP
  19 │     env:
  20 │     - name: DNS_PORT
  21 └       value: '53'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kube-ingress-dns' of Pod 'kube-ingress-dns' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-dns_3.yaml:13-25
────────────────────────────────────────
  13 ┌   - name: kube-ingress-dns
  14 │     image: tomlawton89/kube-ingress-dns:latest
  15 │     imagePullPolicy: IfNotPresent
  16 │     ports:
  17 │     - containerPort: 53
  18 │       protocol: UDP
  19 │     env:
  20 │     - name: DNS_PORT
  21 └       value: '53'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kube-ingress-dns' of Pod 'kube-ingress-dns' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-dns_3.yaml:13-25
────────────────────────────────────────
  13 ┌   - name: kube-ingress-dns
  14 │     image: tomlawton89/kube-ingress-dns:latest
  15 │     imagePullPolicy: IfNotPresent
  16 │     ports:
  17 │     - containerPort: 53
  18 │       protocol: UDP
  19 │     env:
  20 │     - name: DNS_PORT
  21 └       value: '53'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kube-ingress-dns' of Pod 'kube-ingress-dns' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-dns_3.yaml:13-25
────────────────────────────────────────
  13 ┌   - name: kube-ingress-dns
  14 │     image: tomlawton89/kube-ingress-dns:latest
  15 │     imagePullPolicy: IfNotPresent
  16 │     ports:
  17 │     - containerPort: 53
  18 │       protocol: UDP
  19 │     env:
  20 │     - name: DNS_PORT
  21 └       value: '53'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kube-ingress-dns' of Pod 'kube-ingress-dns' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-dns_3.yaml:13-25
────────────────────────────────────────
  13 ┌   - name: kube-ingress-dns
  14 │     image: tomlawton89/kube-ingress-dns:latest
  15 │     imagePullPolicy: IfNotPresent
  16 │     ports:
  17 │     - containerPort: 53
  18 │       protocol: UDP
  19 │     env:
  20 │     - name: DNS_PORT
  21 └       value: '53'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-dns_3.yaml:13-25
────────────────────────────────────────
  13 ┌   - name: kube-ingress-dns
  14 │     image: tomlawton89/kube-ingress-dns:latest
  15 │     imagePullPolicy: IfNotPresent
  16 │     ports:
  17 │     - containerPort: 53
  18 │       protocol: UDP
  19 │     env:
  20 │     - name: DNS_PORT
  21 └       value: '53'
  ..   
────────────────────────────────────────


AVD-KSV-0037 (MEDIUM): Pod 'kube-ingress-dns' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 ingress-dns_3.yaml:10-25
────────────────────────────────────────
  10 ┌   serviceAccountName: kube-ingress-dns
  11 │   hostNetwork: true
  12 │   containers:
  13 │   - name: kube-ingress-dns
  14 │     image: tomlawton89/kube-ingress-dns:latest
  15 │     imagePullPolicy: IfNotPresent
  16 │     ports:
  17 │     - containerPort: 53
  18 └       protocol: UDP
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-dns_3.yaml:10-25
────────────────────────────────────────
  10 ┌   serviceAccountName: kube-ingress-dns
  11 │   hostNetwork: true
  12 │   containers:
  13 │   - name: kube-ingress-dns
  14 │     image: tomlawton89/kube-ingress-dns:latest
  15 │     imagePullPolicy: IfNotPresent
  16 │     ports:
  17 │     - containerPort: 53
  18 └       protocol: UDP
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-ingress-dns" of pod "kube-ingress-dns" in "kube-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-dns_3.yaml:13-25
────────────────────────────────────────
  13 ┌   - name: kube-ingress-dns
  14 │     image: tomlawton89/kube-ingress-dns:latest
  15 │     imagePullPolicy: IfNotPresent
  16 │     ports:
  17 │     - containerPort: 53
  18 │       protocol: UDP
  19 │     env:
  20 │     - name: DNS_PORT
  21 └       value: '53'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-dns_3.yaml:13-25
────────────────────────────────────────
  13 ┌   - name: kube-ingress-dns
  14 │     image: tomlawton89/kube-ingress-dns:latest
  15 │     imagePullPolicy: IfNotPresent
  16 │     ports:
  17 │     - containerPort: 53
  18 │       protocol: UDP
  19 │     env:
  20 │     - name: DNS_PORT
  21 └       value: '53'
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod kube-ingress-dns in kube-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container kube-ingress-dns in kube-system namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-dns_3.yaml:13-25
────────────────────────────────────────
  13 ┌   - name: kube-ingress-dns
  14 │     image: tomlawton89/kube-ingress-dns:latest
  15 │     imagePullPolicy: IfNotPresent
  16 │     ports:
  17 │     - containerPort: 53
  18 │       protocol: UDP
  19 │     env:
  20 │     - name: DNS_PORT
  21 └       value: '53'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod kube-ingress-dns in kube-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-dns_3.yaml:10-25
────────────────────────────────────────
  10 ┌   serviceAccountName: kube-ingress-dns
  11 │   hostNetwork: true
  12 │   containers:
  13 │   - name: kube-ingress-dns
  14 │     image: tomlawton89/kube-ingress-dns:latest
  15 │     imagePullPolicy: IfNotPresent
  16 │     ports:
  17 │     - containerPort: 53
  18 └       protocol: UDP
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-ingress-dns in pod kube-ingress-dns (namespace: kube-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-dns_3.yaml:13-25
────────────────────────────────────────
  13 ┌   - name: kube-ingress-dns
  14 │     image: tomlawton89/kube-ingress-dns:latest
  15 │     imagePullPolicy: IfNotPresent
  16 │     ports:
  17 │     - containerPort: 53
  18 │       protocol: UDP
  19 │     env:
  20 │     - name: DNS_PORT
  21 └       value: '53'
  ..   
────────────────────────────────────────



ingress-dnslocal-giropops.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-dnslocal-giropops.yaml:8-18
────────────────────────────────────────
   8 ┌   rules:
   9 │   - host: giropops-senhas.local
  10 │     http:
  11 │       paths:
  12 │       - pathType: Prefix
  13 │         path: "/" # esse é o path correto que a aplicação giropops-senhas responde
  14 │         backend:
  15 │           service:
  16 └             name: giropops-senhas
  ..   
────────────────────────────────────────



ingress-dnslocal-giropops1.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-dnslocal-giropops1.yaml:12-27
────────────────────────────────────────
  12 ┌   ingressClassName: nginx
  13 │   tls:
  14 │   - hosts: # definindo qual é o host que irá receber as configurações de TLS
  15 │     - giropops-senhas.local
  16 │     secretName: giropops-senhas-tls # secret que será criado automatico com as informacoes de TLS
  17 │   rules:
  18 │   - host: giropops-senhas.local
  19 │     http:
  20 └       paths:
  ..   
────────────────────────────────────────



ingress-docker-desktop_12.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-docker-desktop_12.yaml:13-29
────────────────────────────────────────
  13 ┌   externalTrafficPolicy: Local
  14 │   ports:
  15 │   - appProtocol: http
  16 │     name: http
  17 │     port: 80
  18 │     protocol: TCP
  19 │     targetPort: http
  20 │   - appProtocol: https
  21 └     name: https
  ..   
────────────────────────────────────────



ingress-docker-desktop_13.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-docker-desktop_13.yaml:13-22
────────────────────────────────────────
  13 ┌   ports:
  14 │   - appProtocol: https
  15 │     name: https-webhook
  16 │     port: 443
  17 │     targetPort: webhook
  18 │   selector:
  19 │     app.kubernetes.io/component: controller
  20 │     app.kubernetes.io/instance: ingress-nginx
  21 │     app.kubernetes.io/name: ingress-nginx
  22 └   type: ClusterIP
────────────────────────────────────────



ingress-docker-desktop_14.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-docker-desktop_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-docker-desktop_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-docker-desktop_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-docker-desktop_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-docker-desktop_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-docker-desktop_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-docker-desktop_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-docker-desktop_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-docker-desktop_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-docker-desktop_14.yaml:13-111
────────────────────────────────────────
  13 ┌   minReadySeconds: 0
  14 │   revisionHistoryLimit: 10
  15 │   selector:
  16 │     matchLabels:
  17 │       app.kubernetes.io/component: controller
  18 │       app.kubernetes.io/instance: ingress-nginx
  19 │       app.kubernetes.io/name: ingress-nginx
  20 │   template:
  21 └     metadata:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-docker-desktop_14.yaml:28-102
────────────────────────────────────────
  28 ┌       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 │         - --validating-webhook=:8443
  36 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in ingress-nginx namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in ingress-nginx namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-docker-desktop_14.yaml:27-111
────────────────────────────────────────
  27 ┌       containers:
  28 │       - args:
  29 │         - /nginx-ingress-controller
  30 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  31 │         - --election-id=ingress-controller-leader
  32 │         - --controller-class=k8s.io/ingress-nginx
  33 │         - --ingress-class=nginx
  34 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  35 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────



ingress-docker-desktop_15.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 11, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-docker-desktop_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-docker-desktop_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-docker-desktop_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-docker-desktop_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-docker-desktop_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-docker-desktop_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-docker-desktop_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-docker-desktop_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-docker-desktop_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-docker-desktop_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-docker-desktop_15.yaml:13-46
────────────────────────────────────────
  13 ┌   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/component: admission-webhook
  17 │         app.kubernetes.io/instance: ingress-nginx
  18 │         app.kubernetes.io/name: ingress-nginx
  19 │         app.kubernetes.io/part-of: ingress-nginx
  20 │         app.kubernetes.io/version: 1.2.1
  21 └       name: ingress-nginx-admission-create
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-docker-desktop_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-docker-desktop_15.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-docker-desktop_16.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 11, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-docker-desktop_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'ingress-nginx' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-docker-desktop_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-docker-desktop_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-docker-desktop_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-docker-desktop_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-docker-desktop_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-docker-desktop_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-docker-desktop_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-docker-desktop_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-docker-desktop_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-docker-desktop_16.yaml:13-48
────────────────────────────────────────
  13 ┌   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/component: admission-webhook
  17 │         app.kubernetes.io/instance: ingress-nginx
  18 │         app.kubernetes.io/name: ingress-nginx
  19 │         app.kubernetes.io/part-of: ingress-nginx
  20 │         app.kubernetes.io/version: 1.2.1
  21 └       name: ingress-nginx-admission-patch
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "ingress-nginx" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-docker-desktop_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-docker-desktop_16.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-docker-desktop_17.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-docker-desktop_17.yaml:12
────────────────────────────────────────
  12 [   controller: k8s.io/ingress-nginx
────────────────────────────────────────



ingress-docker-desktop_3.yaml (kubernetes)
==========================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-docker-desktop_3.yaml:60-68
────────────────────────────────────────
  60 ┌ - apiGroups:
  61 │   - ''
  62 │   resourceNames:
  63 │   - ingress-controller-leader
  64 │   resources:
  65 │   - configmaps
  66 │   verbs:
  67 │   - get
  68 └   - update
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'ingress-nginx' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ingress-docker-desktop_3.yaml:69-74
────────────────────────────────────────
  69 ┌ - apiGroups:
  70 │   - ''
  71 │   resources:
  72 │   - configmaps
  73 │   verbs:
  74 └   - create
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-docker-desktop_3.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-docker-desktop_4.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'ingress-nginx'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-docker-desktop_4.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-docker-desktop_5.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-docker-desktop_5.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-docker-desktop_6.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-docker-desktop_6.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-domain-rules-definition-file.yaml (kubernetes)
======================================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-domain-rules-definition-file.yaml:6-26
────────────────────────────────────────
   6 ┌   rules:
   7 │   - host: wear.my-online-store.com
   8 │     http:
   9 │       paths:
  10 │       - backend:
  11 │           service:
  12 │             name: wear-service
  13 │             port:
  14 └               number: 80
  ..   
────────────────────────────────────────



ingress-domain.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-domain.yaml:9-18
────────────────────────────────────────
   9 ┌   rules:
  10 │     - host: lille.k8s-sfeirschool.com
  11 │       http:
  12 │         paths:
  13 │           - path: /
  14 │             backend:
  15 │               service:
  16 │                 name: web
  17 │                 port:
  18 └                   number: 8080
────────────────────────────────────────



ingress-eks.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-eks.yaml:21-30
────────────────────────────────────────
  21 ┌   rules:
  22 │   - http:
  23 │       paths:
  24 │       - path: /apple/
  25 │         pathType: Prefix
  26 │         backend:
  27 │           service:
  28 │             name: apple-service
  29 │             port:
  30 └               number: 5678
────────────────────────────────────────



ingress-exact2.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-exact2.yaml:8-39
────────────────────────────────────────
   8 ┌   rules:
   9 │   - host: todo.kiamol.local
  10 │     http:
  11 │       paths:
  12 │       - pathType: Exact
  13 │         path: /
  14 │         backend:
  15 │           service:
  16 └             name: todo-web
  ..   
────────────────────────────────────────



ingress-example.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example.yaml:6-21
────────────────────────────────────────
   6 ┌   rules:
   7 │     - host: example.com
   8 │       http:
   9 │         paths:
  10 │           - path: /blog
  11 │             backend:
  12 │               service:
  13 │                 name: my-blog-service
  14 └                 port:
  ..   
────────────────────────────────────────



ingress-example1.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example1.yaml:6-21
────────────────────────────────────────
   6 ┌   rules:
   7 │     - host: example.com
   8 │       http:
   9 │         paths:
  10 │           - path: /blog
  11 │             backend:
  12 │               service:
  13 │                 name: my-blog-service
  14 └                 port:
  ..   
────────────────────────────────────────



ingress-example10.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'foo-app' of Pod 'foo-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-example10.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: foo-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'foo-app' of Pod 'foo-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-example10.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: foo-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'foo-app' of 'pod' 'foo-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-example10.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: foo-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'foo-app' of Pod 'foo-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-example10.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: foo-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'foo-app' of Pod 'foo-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-example10.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: foo-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'foo-app' of Pod 'foo-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-example10.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: foo-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'foo-app' of Pod 'foo-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-example10.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: foo-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'foo-app' of Pod 'foo-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-example10.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: foo-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'foo-app' of Pod 'foo-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-example10.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: foo-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'foo-app' of Pod 'foo-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-example10.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: foo-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'foo-app' of Pod 'foo-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-example10.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: foo-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-example10.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: foo-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example10.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: foo-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "foo-app" of pod "foo-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-example10.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: foo-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-example10.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: foo-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod foo-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-example10.yaml:4-6
────────────────────────────────────────
   4 ┌   name: foo-app
   5 │   labels:
   6 └     app: foo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container foo-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-example10.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: foo-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod foo-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-example10.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: foo-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container foo-app in pod foo-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-example10.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: foo-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────



ingress-example10_1.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example10_1.yaml:6-9
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: foo
   8 │   ports:
   9 └   - port: 8080
────────────────────────────────────────



ingress-example10_2.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'bar-app' of Pod 'bar-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-example10_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: bar-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'bar-app' of Pod 'bar-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-example10_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: bar-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'bar-app' of 'pod' 'bar-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-example10_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: bar-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'bar-app' of Pod 'bar-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-example10_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: bar-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'bar-app' of Pod 'bar-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-example10_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: bar-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'bar-app' of Pod 'bar-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-example10_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: bar-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'bar-app' of Pod 'bar-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-example10_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: bar-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'bar-app' of Pod 'bar-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-example10_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: bar-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'bar-app' of Pod 'bar-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-example10_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: bar-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'bar-app' of Pod 'bar-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-example10_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: bar-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'bar-app' of Pod 'bar-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-example10_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: bar-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-example10_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: bar-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example10_2.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: bar-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "bar-app" of pod "bar-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-example10_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: bar-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-example10_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: bar-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod bar-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-example10_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: bar-app
   5 │   labels:
   6 └     app: bar
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container bar-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-example10_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: bar-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod bar-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-example10_2.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: bar-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container bar-app in pod bar-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-example10_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: bar-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────



ingress-example10_3.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example10_3.yaml:6-9
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: bar
   8 │   ports:
   9 └   - port: 8080
────────────────────────────────────────



ingress-example10_4.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example10_4.yaml:6-22
────────────────────────────────────────
   6 ┌   rules:
   7 │   - http:
   8 │       paths:
   9 │       - pathType: Prefix
  10 │         path: /foo
  11 │         backend:
  12 │           service:
  13 │             name: foo-service
  14 └             port:
  ..   
────────────────────────────────────────



ingress-example11.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'ingress-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-example11.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 └         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'ingress-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-example11.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 └         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'ingress-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-example11.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 └         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'ingress-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-example11.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 └         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'ingress-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-example11.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 └         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'ingress-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-example11.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 └         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'ingress-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-example11.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 └         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'ingress-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-example11.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 └         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'ingress-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-example11.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 └         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'ingress-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-example11.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 └         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'ingress-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-example11.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 └         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-example11.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 └         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example11.yaml:8-23
────────────────────────────────────────
   8 ┌   replicas: 3
   9 │   selector:
  10 │     matchLabels:
  11 │       app: backend
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: backend
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "ingress-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-example11.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 └         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-example11.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 └         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment ingress-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-example11.yaml:4-6
────────────────────────────────────────
   4 ┌   name: ingress-depl
   5 │   labels:
   6 └     app: backend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ingress-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-example11.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 └         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-example11.yaml:17-23
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 └         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
────────────────────────────────────────



ingress-example11_1.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example11_1.yaml:8-14
────────────────────────────────────────
   8 ┌   type: ClusterIP
   9 │   selector:
  10 │     app: backend
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8080
  14 └     targetPort: 80
────────────────────────────────────────



ingress-example12.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-v1' of Pod 'nginx-v1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-example12.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-v1' of Pod 'nginx-v1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-example12.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-v1' of 'pod' 'nginx-v1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-example12.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-v1' of Pod 'nginx-v1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-example12.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-v1' of Pod 'nginx-v1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-example12.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-v1' of Pod 'nginx-v1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-example12.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-v1' of Pod 'nginx-v1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-example12.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-v1' of Pod 'nginx-v1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-example12.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-v1' of Pod 'nginx-v1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-example12.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-v1' of Pod 'nginx-v1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-example12.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-v1' of Pod 'nginx-v1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-example12.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-example12.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example12.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-v1" of pod "nginx-v1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-example12.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-example12.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx-v1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-example12.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx-v1
   5 │   labels:
   6 └     app: nginx-v1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-v1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-example12.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx-v1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-example12.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────



ingress-example12_1.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example12_1.yaml:6-9
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nginx-v1
   8 │   ports:
   9 └   - port: 80
────────────────────────────────────────



ingress-example12_2.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-v2' of Pod 'nginx-v2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-example12_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-v2' of Pod 'nginx-v2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-example12_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-v2' of 'pod' 'nginx-v2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-example12_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-v2' of Pod 'nginx-v2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-example12_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-v2' of Pod 'nginx-v2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-example12_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-v2' of Pod 'nginx-v2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-example12_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-v2' of Pod 'nginx-v2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-example12_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-v2' of Pod 'nginx-v2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-example12_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-v2' of Pod 'nginx-v2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-example12_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-v2' of Pod 'nginx-v2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-example12_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-v2' of Pod 'nginx-v2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-example12_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-example12_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example12_2.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-v2" of pod "nginx-v2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-example12_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-example12_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx-v2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-example12_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx-v2
   5 │   labels:
   6 └     app: nginx-v2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-v2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-example12_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx-v2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-example12_2.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────



ingress-example12_3.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example12_3.yaml:6-9
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nginx-v2
   8 │   ports:
   9 └   - port: 80
────────────────────────────────────────



ingress-example12_4.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example12_4.yaml:8-18
────────────────────────────────────────
   8 ┌   rules:
   9 │   - http:
  10 │       paths:
  11 │       - path: /v1(/|$)(.*)
  12 │         backend:
  13 │           serviceName: nginx-v1-service
  14 │           servicePort: 80
  15 │       - path: /v2(/|$)(.*)
  16 └         backend:
  ..   
────────────────────────────────────────



ingress-example13.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-v1' of Pod 'nginx-v1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-example13.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-v1' of Pod 'nginx-v1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-example13.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-v1' of 'pod' 'nginx-v1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-example13.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-v1' of Pod 'nginx-v1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-example13.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-v1' of Pod 'nginx-v1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-example13.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-v1' of Pod 'nginx-v1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-example13.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-v1' of Pod 'nginx-v1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-example13.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-v1' of Pod 'nginx-v1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-example13.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-v1' of Pod 'nginx-v1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-example13.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-v1' of Pod 'nginx-v1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-example13.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-v1' of Pod 'nginx-v1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-example13.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-example13.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example13.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-v1" of pod "nginx-v1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-example13.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-example13.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx-v1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-example13.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx-v1
   5 │   labels:
   6 └     app: nginx-v1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-v1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-example13.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx-v1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-example13.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────



ingress-example13_1.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example13_1.yaml:6-9
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nginx-v1
   8 │   ports:
   9 └   - port: 80
────────────────────────────────────────



ingress-example13_2.yaml (kubernetes)
=====================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-v2' of Pod 'nginx-v2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-example13_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-v2' of Pod 'nginx-v2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-example13_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-v2' of 'pod' 'nginx-v2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-example13_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-v2' of Pod 'nginx-v2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-example13_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-v2' of Pod 'nginx-v2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-example13_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-v2' of Pod 'nginx-v2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-example13_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-v2' of Pod 'nginx-v2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-example13_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-v2' of Pod 'nginx-v2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-example13_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-v2' of Pod 'nginx-v2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-example13_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-v2' of Pod 'nginx-v2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-example13_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-v2' of Pod 'nginx-v2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-example13_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-example13_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example13_2.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-v2" of pod "nginx-v2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-example13_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-example13_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx-v2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-example13_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx-v2
   5 │   labels:
   6 └     app: nginx-v2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-v2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-example13_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx-v2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-example13_2.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────



ingress-example13_3.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example13_3.yaml:6-9
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nginx-v2
   8 │   ports:
   9 └   - port: 80
────────────────────────────────────────



ingress-example14.yaml (kubernetes)
===================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-example14.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 │         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
  24 │           -g 'daemon off;'
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'deployment-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-example14.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 │         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
  24 │           -g 'daemon off;'
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'deployment-test' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-example14.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 │         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
  24 │           -g 'daemon off;'
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-example14.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 │         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
  24 │           -g 'daemon off;'
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-example14.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 │         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
  24 │           -g 'daemon off;'
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-example14.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 │         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
  24 │           -g 'daemon off;'
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-example14.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 │         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
  24 │           -g 'daemon off;'
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-example14.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 │         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
  24 │           -g 'daemon off;'
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-example14.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 │         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
  24 │           -g 'daemon off;'
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-example14.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 │         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
  24 │           -g 'daemon off;'
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-example14.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 │         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
  24 │           -g 'daemon off;'
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-example14.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 │         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
  24 │           -g 'daemon off;'
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example14.yaml:8-26
────────────────────────────────────────
   8 ┌   replicas: 3
   9 │   selector:
  10 │     matchLabels:
  11 │       app: front
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: front
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "deployment-test" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-example14.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 │         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
  24 │           -g 'daemon off;'
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-example14.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 │         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
  24 │           -g 'daemon off;'
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment deployment-test in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-example14.yaml:4-6
────────────────────────────────────────
   4 ┌   name: deployment-test
   5 │   labels:
   6 └     app: front
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment deployment-test in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container deployment-test in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-example14.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 │         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
  24 │           -g 'daemon off;'
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment deployment-test in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-example14.yaml:17-26
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 │         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
  24 │           -g 'daemon off;'
  25 │         ports:
  26 └         - containerPort: 80
────────────────────────────────────────



ingress-example14_1.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example14_1.yaml:8-14
────────────────────────────────────────
   8 ┌   selector:
   9 │     app: front
  10 │   type: ClusterIP
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8080
  14 └     targetPort: 80
────────────────────────────────────────



ingress-example2.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'foo-app' of Pod 'foo-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-example2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: foo-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'foo-app' of Pod 'foo-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-example2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: foo-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'foo-app' of 'pod' 'foo-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-example2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: foo-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'foo-app' of Pod 'foo-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-example2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: foo-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'foo-app' of Pod 'foo-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-example2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: foo-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'foo-app' of Pod 'foo-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-example2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: foo-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'foo-app' of Pod 'foo-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-example2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: foo-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'foo-app' of Pod 'foo-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-example2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: foo-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'foo-app' of Pod 'foo-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-example2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: foo-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'foo-app' of Pod 'foo-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-example2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: foo-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'foo-app' of Pod 'foo-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-example2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: foo-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-example2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: foo-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example2.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: foo-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "foo-app" of pod "foo-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-example2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: foo-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-example2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: foo-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod foo-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-example2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: foo-app
   5 │   labels:
   6 └     app: foo
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container foo-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-example2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: foo-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod foo-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-example2.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: foo-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container foo-app in pod foo-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-example2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: foo-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────



ingress-example2_1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example2_1.yaml:6-9
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: foo
   8 │   ports:
   9 └   - port: 8080
────────────────────────────────────────



ingress-example2_2.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'bar-app' of Pod 'bar-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-example2_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: bar-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'bar-app' of Pod 'bar-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-example2_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: bar-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'bar-app' of 'pod' 'bar-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-example2_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: bar-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'bar-app' of Pod 'bar-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-example2_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: bar-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'bar-app' of Pod 'bar-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-example2_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: bar-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'bar-app' of Pod 'bar-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-example2_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: bar-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'bar-app' of Pod 'bar-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-example2_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: bar-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'bar-app' of Pod 'bar-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-example2_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: bar-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'bar-app' of Pod 'bar-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-example2_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: bar-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'bar-app' of Pod 'bar-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-example2_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: bar-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'bar-app' of Pod 'bar-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-example2_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: bar-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-example2_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: bar-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example2_2.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: bar-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "bar-app" of pod "bar-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-example2_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: bar-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-example2_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: bar-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod bar-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-example2_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: bar-app
   5 │   labels:
   6 └     app: bar
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container bar-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-example2_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: bar-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod bar-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-example2_2.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: bar-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container bar-app in pod bar-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-example2_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: bar-app
  10 └     image: kicbase/echo-server:1.0
────────────────────────────────────────



ingress-example2_3.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example2_3.yaml:6-9
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: bar
   8 │   ports:
   9 └   - port: 8080
────────────────────────────────────────



ingress-example2_4.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example2_4.yaml:6-22
────────────────────────────────────────
   6 ┌   rules:
   7 │   - http:
   8 │       paths:
   9 │       - pathType: Prefix
  10 │         path: /foo
  11 │         backend:
  12 │           service:
  13 │             name: foo-service
  14 └             port:
  ..   
────────────────────────────────────────



ingress-example3.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example3.yaml:9-16
────────────────────────────────────────
   9 ┌   rules:
  10 │     - host: sixtyfive.me
  11 │       http:
  12 │         paths:
  13 │           - path: /echo-hostname
  14 │             backend:
  15 │               serviceName: hostname-service
  16 └               servicePort: 80
────────────────────────────────────────



ingress-example4.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'ingress-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-example4.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 └         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'ingress-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-example4.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 └         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'ingress-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-example4.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 └         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'ingress-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-example4.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 └         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'ingress-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-example4.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 └         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'ingress-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-example4.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 └         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'ingress-depl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-example4.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 └         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'ingress-depl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-example4.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 └         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'ingress-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-example4.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 └         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'ingress-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-example4.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 └         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'ingress-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-example4.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 └         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-example4.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 └         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example4.yaml:8-23
────────────────────────────────────────
   8 ┌   replicas: 3
   9 │   selector:
  10 │     matchLabels:
  11 │       app: backend
  12 │   template:
  13 │     metadata:
  14 │       labels:
  15 │         app: backend
  16 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "ingress-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-example4.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 └         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-example4.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 └         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment ingress-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-example4.yaml:4-6
────────────────────────────────────────
   4 ┌   name: ingress-depl
   5 │   labels:
   6 └     app: backend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ingress-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-example4.yaml:18-23
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 └         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-example4.yaml:17-23
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:alpine
  20 │         command:
  21 │         - sh
  22 │         - -c
  23 └         - echo VERSION 1.0 desde $HOSTNAME > /usr/share/nginx/html/index.html && nginx
────────────────────────────────────────



ingress-example4_1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example4_1.yaml:8-14
────────────────────────────────────────
   8 ┌   type: ClusterIP
   9 │   selector:
  10 │     app: backend
  11 │   ports:
  12 │   - protocol: TCP
  13 │     port: 8080
  14 └     targetPort: 80
────────────────────────────────────────



ingress-example5.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example5.yaml:9-27
────────────────────────────────────────
   9 ┌   ingressClassName: nginx
  10 │   rules:
  11 │     - host: localhost
  12 │       http:
  13 │         paths:
  14 │           - path: /python
  15 │             pathType: Prefix
  16 │             backend:
  17 └               service:
  ..   
────────────────────────────────────────



ingress-example6.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-example6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-example6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'nginx-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-example6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-example6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-example6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-example6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-example6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-example6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-example6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-example6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'nginx-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-example6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-example6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example6.yaml:7-20
────────────────────────────────────────
   7 ┌   replicas: 1
   8 │   selector:
   9 │     matchLabels:
  10 │       app: nginx
  11 │   template:
  12 │     metadata:
  13 │       labels:
  14 │         app: nginx
  15 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "nginx-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-example6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-example6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment nginx-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-example6.yaml:4-5
────────────────────────────────────────
   4 ┌   name: nginx-deployment
   5 └   namespace: default
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment nginx-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-example6.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment nginx-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-example6.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx:1.14.2
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



ingress-example6_1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example6_1.yaml:7-11
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: nginx
   9 │   ports:
  10 │   - protocol: TCP
  11 └     port: 80
────────────────────────────────────────



ingress-example6_2.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example6_2.yaml:7-18
────────────────────────────────────────
   7 ┌   ingressClassName: external-nginx
   8 │   rules:
   9 │   - host: test.cloudsys.win
  10 │     http:
  11 │       paths:
  12 │       - path: /
  13 │         pathType: Prefix
  14 │         backend:
  15 └           service:
  ..   
────────────────────────────────────────



ingress-example7_1.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 96, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'go-sample-app' of Deployment 'go-app-server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-example7_1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: go-sample-app
  20 │         image: mayurwadekar2/go-app-server:1.0.2
  21 │         ports:
  22 │         - containerPort: 80
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: go-sample-app
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'go-sample-app' of Deployment 'go-app-server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-example7_1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: go-sample-app
  20 │         image: mayurwadekar2/go-app-server:1.0.2
  21 │         ports:
  22 │         - containerPort: 80
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: go-sample-app
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'go-sample-app' of 'deployment' 'go-app-server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-example7_1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: go-sample-app
  20 │         image: mayurwadekar2/go-app-server:1.0.2
  21 │         ports:
  22 │         - containerPort: 80
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: go-sample-app
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'go-sample-app' of Deployment 'go-app-server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-example7_1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: go-sample-app
  20 │         image: mayurwadekar2/go-app-server:1.0.2
  21 │         ports:
  22 │         - containerPort: 80
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: go-sample-app
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'go-sample-app' of Deployment 'go-app-server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-example7_1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: go-sample-app
  20 │         image: mayurwadekar2/go-app-server:1.0.2
  21 │         ports:
  22 │         - containerPort: 80
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: go-sample-app
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'go-sample-app' of Deployment 'go-app-server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-example7_1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: go-sample-app
  20 │         image: mayurwadekar2/go-app-server:1.0.2
  21 │         ports:
  22 │         - containerPort: 80
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: go-sample-app
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'go-sample-app' of Deployment 'go-app-server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-example7_1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: go-sample-app
  20 │         image: mayurwadekar2/go-app-server:1.0.2
  21 │         ports:
  22 │         - containerPort: 80
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: go-sample-app
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'go-sample-app' of Deployment 'go-app-server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-example7_1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: go-sample-app
  20 │         image: mayurwadekar2/go-app-server:1.0.2
  21 │         ports:
  22 │         - containerPort: 80
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: go-sample-app
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'go-sample-app' of Deployment 'go-app-server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-example7_1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: go-sample-app
  20 │         image: mayurwadekar2/go-app-server:1.0.2
  21 │         ports:
  22 │         - containerPort: 80
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: go-sample-app
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'go-sample-app' of Deployment 'go-app-server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-example7_1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: go-sample-app
  20 │         image: mayurwadekar2/go-app-server:1.0.2
  21 │         ports:
  22 │         - containerPort: 80
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: go-sample-app
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'go-sample-app' of Deployment 'go-app-server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-example7_1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: go-sample-app
  20 │         image: mayurwadekar2/go-app-server:1.0.2
  21 │         ports:
  22 │         - containerPort: 80
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: go-sample-app
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-example7_1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: go-sample-app
  20 │         image: mayurwadekar2/go-app-server:1.0.2
  21 │         ports:
  22 │         - containerPort: 80
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: go-sample-app
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example7_1.yaml:9-25
────────────────────────────────────────
   9 ┌   selector:
  10 │     matchLabels:
  11 │       app: go-app-server-deployment
  12 │   replicas: 1
  13 │   template:
  14 │     metadata:
  15 │       labels:
  16 │         app: go-app-server-deployment
  17 └     spec:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "go-sample-app" of deployment "go-app-server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-example7_1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: go-sample-app
  20 │         image: mayurwadekar2/go-app-server:1.0.2
  21 │         ports:
  22 │         - containerPort: 80
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: go-sample-app
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-example7_1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: go-sample-app
  20 │         image: mayurwadekar2/go-app-server:1.0.2
  21 │         ports:
  22 │         - containerPort: 80
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: go-sample-app
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment go-app-server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-example7_1.yaml:4-7
────────────────────────────────────────
   4 ┌   name: go-app-server-deployment
   5 │   namespace: default
   6 │   labels:
   7 └     app: go-app-server
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment go-app-server-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container go-app-server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-example7_1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: go-sample-app
  20 │         image: mayurwadekar2/go-app-server:1.0.2
  21 │         ports:
  22 │         - containerPort: 80
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: go-sample-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment go-app-server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-example7_1.yaml:18-25
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: go-sample-app
  20 │         image: mayurwadekar2/go-app-server:1.0.2
  21 │         ports:
  22 │         - containerPort: 80
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: go-sample-app
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container go-sample-app in deployment go-app-server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-example7_1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: go-sample-app
  20 │         image: mayurwadekar2/go-app-server:1.0.2
  21 │         ports:
  22 │         - containerPort: 80
  23 │         envFrom:
  24 │         - configMapRef:
  25 └             name: go-sample-app
────────────────────────────────────────



ingress-example7_2.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example7_2.yaml:6-14
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: go-app-server-deployment
   8 │   type: LoadBalancer
   9 │   ports:
  10 │   - name: go-sample-app-service
  11 │     protocol: TCP
  12 │     port: 80
  13 │     targetPort: 80
  14 └     nodePort: 30000
────────────────────────────────────────



ingress-example7_3.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example7_3.yaml:6-16
────────────────────────────────────────
   6 ┌   rules:
   7 │   - host: goapp.com
   8 │     http:
   9 │       paths:
  10 │       - path: /hello
  11 │         pathType: Prefix
  12 │         backend:
  13 │           service:
  14 └             name: go-app-server-service
  ..   
────────────────────────────────────────



ingress-example8.yaml (kubernetes)
==================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-v1' of Pod 'nginx-v1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-example8.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-v1' of Pod 'nginx-v1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-example8.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-v1' of 'pod' 'nginx-v1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-example8.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-v1' of Pod 'nginx-v1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-example8.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-v1' of Pod 'nginx-v1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-example8.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-v1' of Pod 'nginx-v1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-example8.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-v1' of Pod 'nginx-v1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-example8.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-v1' of Pod 'nginx-v1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-example8.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-v1' of Pod 'nginx-v1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-example8.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-v1' of Pod 'nginx-v1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-example8.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-v1' of Pod 'nginx-v1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-example8.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-example8.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example8.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-v1" of pod "nginx-v1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-example8.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-example8.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx-v1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-example8.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx-v1
   5 │   labels:
   6 └     app: nginx-v1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-v1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-example8.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx-v1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-example8.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx-v1
  10 └     image: nginx:1.15.9
────────────────────────────────────────



ingress-example8_1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example8_1.yaml:6-9
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nginx-v1
   8 │   ports:
   9 └   - port: 80
────────────────────────────────────────



ingress-example8_2.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 98, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 12, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-v2' of Pod 'nginx-v2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-example8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-v2' of Pod 'nginx-v2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-example8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-v2' of 'pod' 'nginx-v2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-example8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-v2' of Pod 'nginx-v2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-example8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-v2' of Pod 'nginx-v2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-example8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-v2' of Pod 'nginx-v2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-example8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-v2' of Pod 'nginx-v2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-example8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-v2' of Pod 'nginx-v2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-example8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-v2' of Pod 'nginx-v2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-example8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-v2' of Pod 'nginx-v2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-example8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-v2' of Pod 'nginx-v2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-example8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-example8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example8_2.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-v2" of pod "nginx-v2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-example8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-example8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx-v2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-example8_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx-v2
   5 │   labels:
   6 └     app: nginx-v2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-v2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-example8_2.yaml:9-10
────────────────────────────────────────
   9 ┌   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx-v2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-example8_2.yaml:8-10
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx-v2
  10 └     image: nginx:1.15.12
────────────────────────────────────────



ingress-example8_3.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example8_3.yaml:6-9
────────────────────────────────────────
   6 ┌   selector:
   7 │     app: nginx-v2
   8 │   ports:
   9 └   - port: 80
────────────────────────────────────────



ingress-example8_4.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example8_4.yaml:8-18
────────────────────────────────────────
   8 ┌   rules:
   9 │   - http:
  10 │       paths:
  11 │       - path: /v1(/|$)(.*)
  12 │         backend:
  13 │           serviceName: nginx-v1-service
  14 │           servicePort: 80
  15 │       - path: /v2(/|$)(.*)
  16 └         backend:
  ..   
────────────────────────────────────────



ingress-example9.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-example9.yaml:8-28
────────────────────────────────────────
   8 ┌   rules:
   9 │     - host: nginx.ingress.example.com
  10 │       http:
  11 │         paths:
  12 │           - path: /
  13 │             pathType: Prefix
  14 │             backend:
  15 │               service:
  16 └                 name: my-nginx
  ..   
────────────────────────────────────────



ingress-external.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-external.yaml:9-24
────────────────────────────────────────
   9 ┌   tls:
  10 │   - hosts:
  11 │     - jellyfin.konst.fish
  12 │     secretName: jellyfin-tls
  13 │   ingressClassName: nginx
  14 │   rules:
  15 │   - host: jellyfin.konst.fish
  16 │     http:
  17 └       paths:
  ..   
────────────────────────────────────────



ingress-foo-bar.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-foo-bar.yaml:6-26
────────────────────────────────────────
   6 ┌   ingressClassName: nginx
   7 │   rules:
   8 │   - http: 
   9 │       paths: 
  10 │       - pathType: Prefix
  11 │         path: "/foo"
  12 │         backend:
  13 │           service:
  14 └             name: foo-svc
  ..   
────────────────────────────────────────



ingress-foo-bar1.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-foo-bar1.yaml:6-28
────────────────────────────────────────
   6 ┌   ingressClassName: nginx
   7 │   rules:
   8 │   - host: foo.bar.com
   9 │     http: 
  10 │       paths: 
  11 │       - pathType: Prefix
  12 │         path: "/"
  13 │         backend:
  14 └           service:
  ..   
────────────────────────────────────────



ingress-for-k8s-dashboard.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-for-k8s-dashboard.yaml:6-16
────────────────────────────────────────
   6 ┌   rules:
   7 │   - host: dashboard.com
   8 │     http:
   9 │       paths:
  10 │       - path: /
  11 │         pathType: Prefix
  12 │         backend:
  13 │           service:
  14 └             name: kubernetes-dashboard
  ..   
────────────────────────────────────────



ingress-for-k8s-dashboard1.yaml (kubernetes)
============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-for-k8s-dashboard1.yaml:6-16
────────────────────────────────────────
   6 ┌   rules:
   7 │   - host: dashboard.com
   8 │     http:
   9 │       paths:
  10 │       - path: /
  11 │         pathType: Prefix
  12 │         backend:
  13 │           service:
  14 └             name: kubernetes-dashboard
  ..   
────────────────────────────────────────



ingress-frontend-srv.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-frontend-srv.yaml:9-19
────────────────────────────────────────
   9 ┌   rules:
  10 │     - host: courierfiscal.com
  11 │       http:
  12 │         paths:
  13 │           - path: /
  14 │             pathType: Prefix
  15 │             backend:
  16 │               service:
  17 └                 name: courierwebapp-clusterip-srv
  ..   
────────────────────────────────────────



ingress-frontend.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-frontend.yaml:8-18
────────────────────────────────────────
   8 ┌   rules:
   9 │     - host: haitham-exam.k8s
  10 │       http:
  11 │         paths:
  12 │           - path: /
  13 │             pathType: Prefix
  14 │             backend:
  15 │               service:
  16 └                 name: mini-projet-client
  ..   
────────────────────────────────────────



ingress-frontend1.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-frontend1.yaml:8-18
────────────────────────────────────────
   8 ┌   rules:
   9 │     - host: haitham-exam.k8s
  10 │       http:
  11 │         paths:
  12 │           - path: /
  13 │             pathType: Prefix
  14 │             backend:
  15 │               service:
  16 └                 name: mini-projet-client
  ..   
────────────────────────────────────────



ingress-frontend2.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-frontend2.yaml:16-30
────────────────────────────────────────
  16 ┌   rules:
  17 │     - host: calendar.prayujt.com
  18 │       http:
  19 │         paths:
  20 │           - path: /
  21 │             pathType: Prefix
  22 │             backend:
  23 │               service:
  24 └                 name: calendar-frontend
  ..   
────────────────────────────────────────



ingress-frontend3.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-frontend3.yaml:7-18
────────────────────────────────────────
   7 ┌   ingressClassName: nginx
   8 │   rules:
   9 │   - host: demo.localdev.me
  10 │     http:
  11 │       paths:
  12 │       - backend:
  13 │           service:
  14 │             name: venkatesh-frontend-svc
  15 └             port:
  ..   
────────────────────────────────────────



ingress-gateway2.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-gateway2.yaml:6-15
────────────────────────────────────────
   6 ┌   type: ClusterIP
   7 │   selector:
   8 │     istio: ingressgateway
   9 │   ports:
  10 │   - name: http2
  11 │     port: 80
  12 │     targetPort: 8080
  13 │   - name: https
  14 │     port: 443
  15 └     targetPort: 8443
────────────────────────────────────────



ingress-gateway2_1.yaml (kubernetes)
====================================
Tests: 116 (SUCCESSES: 97, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'istio-proxy' of Deployment 'istio-ingressgateway' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-gateway2_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: istio-proxy
  19 └         image: auto
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'istio-proxy' of Deployment 'istio-ingressgateway' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-gateway2_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: istio-proxy
  19 └         image: auto
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'istio-proxy' of 'deployment' 'istio-ingressgateway' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-gateway2_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: istio-proxy
  19 └         image: auto
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'istio-proxy' of Deployment 'istio-ingressgateway' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-gateway2_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: istio-proxy
  19 └         image: auto
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'istio-proxy' of Deployment 'istio-ingressgateway' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-gateway2_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: istio-proxy
  19 └         image: auto
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'istio-proxy' of Deployment 'istio-ingressgateway' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 ingress-gateway2_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: istio-proxy
  19 └         image: auto
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'istio-proxy' of Deployment 'istio-ingressgateway' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-gateway2_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: istio-proxy
  19 └         image: auto
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'istio-proxy' of Deployment 'istio-ingressgateway' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-gateway2_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: istio-proxy
  19 └         image: auto
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'istio-proxy' of Deployment 'istio-ingressgateway' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-gateway2_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: istio-proxy
  19 └         image: auto
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'istio-proxy' of Deployment 'istio-ingressgateway' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-gateway2_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: istio-proxy
  19 └         image: auto
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'istio-proxy' of Deployment 'istio-ingressgateway' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-gateway2_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: istio-proxy
  19 └         image: auto
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'istio-proxy' of Deployment 'istio-ingressgateway' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-gateway2_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: istio-proxy
  19 └         image: auto
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-gateway2_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: istio-proxy
  19 └         image: auto
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-gateway2_1.yaml:6-19
────────────────────────────────────────
   6 ┌   selector:
   7 │     matchLabels:
   8 │       istio: ingressgateway
   9 │   template:
  10 │     metadata:
  11 │       annotations:
  12 │         inject.istio.io/templates: gateway
  13 │       labels:
  14 └         istio: ingressgateway
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "istio-proxy" of deployment "istio-ingressgateway" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-gateway2_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: istio-proxy
  19 └         image: auto
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-gateway2_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: istio-proxy
  19 └         image: auto
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment istio-ingressgateway in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 ingress-gateway2_1.yaml:4
────────────────────────────────────────
   4 [   name: istio-ingressgateway
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container istio-ingressgateway in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-gateway2_1.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: istio-proxy
  19 └         image: auto
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment istio-ingressgateway in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-gateway2_1.yaml:17-19
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: istio-proxy
  19 └         image: auto
────────────────────────────────────────



ingress-gateway2_2.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'istio-ingressgateway-sds' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-gateway2_2.yaml:6-13
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - secrets
  10 │   verbs:
  11 │   - get
  12 │   - watch
  13 └   - list
────────────────────────────────────────



ingress-gateway6_1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-gateway6_1.yaml:11-45
────────────────────────────────────────
  11 ┌   externalTrafficPolicy: Cluster
  12 │   ports:
  13 │   - name: status-port
  14 │     port: 15021
  15 │     protocol: TCP
  16 │     targetPort: 15021
  17 │   - name: http2
  18 │     port: 80
  19 └     protocol: TCP
  ..   
────────────────────────────────────────



ingress-geral_11.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-geral_11.yaml:13-32
────────────────────────────────────────
  13 ┌   externalTrafficPolicy: Local
  14 │   ipFamilies:
  15 │   - IPv4
  16 │   ipFamilyPolicy: SingleStack
  17 │   ports:
  18 │   - appProtocol: http
  19 │     name: http
  20 │     port: 80
  21 └     protocol: TCP
  ..   
────────────────────────────────────────



ingress-geral_12.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-geral_12.yaml:13-22
────────────────────────────────────────
  13 ┌   ports:
  14 │   - appProtocol: https
  15 │     name: https-webhook
  16 │     port: 443
  17 │     targetPort: webhook
  18 │   selector:
  19 │     app.kubernetes.io/component: controller
  20 │     app.kubernetes.io/instance: ingress-nginx
  21 │     app.kubernetes.io/name: ingress-nginx
  22 └   type: ClusterIP
────────────────────────────────────────



ingress-geral_13.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 6, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ingress-geral_13.yaml:34-108
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-geral_13.yaml:34-108
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ingress-geral_13.yaml:34-108
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-geral_13.yaml:34-108
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-geral_13.yaml:34-108
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-geral_13.yaml:34-108
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'controller' of Deployment 'ingress-nginx-controller' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-geral_13.yaml:34-108
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'controller' of Deployment 'ingress-nginx-controller' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 ingress-geral_13.yaml:34-108
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-geral_13.yaml:34-108
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-geral_13.yaml:13-117
────────────────────────────────────────
  13 ┌   minReadySeconds: 0
  14 │   revisionHistoryLimit: 10
  15 │   selector:
  16 │     matchLabels:
  17 │       app.kubernetes.io/component: controller
  18 │       app.kubernetes.io/instance: ingress-nginx
  19 │       app.kubernetes.io/name: ingress-nginx
  20 │   strategy:
  21 └     rollingUpdate:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "controller" of deployment "ingress-nginx-controller" in "cattle-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-geral_13.yaml:34-108
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ingress-nginx-controller in cattle-system namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ingress-nginx-controller in cattle-system namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ingress-geral_13.yaml:33-117
────────────────────────────────────────
  33 ┌       containers:
  34 │       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 └         - --validating-webhook=:8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container controller in deployment ingress-nginx-controller (namespace: cattle-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-geral_13.yaml:34-108
────────────────────────────────────────
  34 ┌       - args:
  35 │         - /nginx-ingress-controller
  36 │         - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
  37 │         - --election-id=ingress-nginx-leader
  38 │         - --controller-class=k8s.io/ingress-nginx
  39 │         - --ingress-class=nginx
  40 │         - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
  41 │         - --validating-webhook=:8443
  42 └         - --validating-webhook-certificate=/usr/local/certificates/cert
  ..   
────────────────────────────────────────



ingress-geral_14.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-geral_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'create' of 'job' 'ingress-nginx-admission-create' in 'cattle-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-geral_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-geral_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-geral_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-geral_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-geral_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-geral_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-geral_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'create' of Job 'ingress-nginx-admission-create' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-geral_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-geral_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-geral_14.yaml:13-46
────────────────────────────────────────
  13 ┌   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/component: admission-webhook
  17 │         app.kubernetes.io/instance: ingress-nginx
  18 │         app.kubernetes.io/name: ingress-nginx
  19 │         app.kubernetes.io/part-of: ingress-nginx
  20 │         app.kubernetes.io/version: 1.8.2
  21 └       name: ingress-nginx-admission-create
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "create" of job "ingress-nginx-admission-create" in "cattle-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-geral_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-geral_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container create in job ingress-nginx-admission-create (namespace: cattle-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-geral_14.yaml:24-38
────────────────────────────────────────
  24 ┌       - args:
  25 │         - create
  26 │         - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --secret-name=ingress-nginx-admission
  29 │         env:
  30 │         - name: POD_NAMESPACE
  31 │           valueFrom:
  32 └             fieldRef:
  ..   
────────────────────────────────────────



ingress-geral_15.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 11, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ingress-geral_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'patch' of 'job' 'ingress-nginx-admission-patch' in 'cattle-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ingress-geral_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 ingress-geral_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ingress-geral_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 ingress-geral_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 ingress-geral_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 ingress-geral_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ingress-geral_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'patch' of Job 'ingress-nginx-admission-patch' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ingress-geral_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ingress-geral_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-geral_15.yaml:13-48
────────────────────────────────────────
  13 ┌   template:
  14 │     metadata:
  15 │       labels:
  16 │         app.kubernetes.io/component: admission-webhook
  17 │         app.kubernetes.io/instance: ingress-nginx
  18 │         app.kubernetes.io/name: ingress-nginx
  19 │         app.kubernetes.io/part-of: ingress-nginx
  20 │         app.kubernetes.io/version: 1.8.2
  21 └       name: ingress-nginx-admission-patch
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "patch" of job "ingress-nginx-admission-patch" in "cattle-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ingress-geral_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ingress-geral_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container patch in job ingress-nginx-admission-patch (namespace: cattle-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 ingress-geral_15.yaml:24-40
────────────────────────────────────────
  24 ┌       - args:
  25 │         - patch
  26 │         - --webhook-name=ingress-nginx-admission
  27 │         - --namespace=$(POD_NAMESPACE)
  28 │         - --patch-mutating=false
  29 │         - --secret-name=ingress-nginx-admission
  30 │         - --patch-failure-policy=Fail
  31 │         env:
  32 └         - name: POD_NAMESPACE
  ..   
────────────────────────────────────────



ingress-geral_16.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-geral_16.yaml:12
────────────────────────────────────────
  12 [   controller: k8s.io/ingress-nginx
────────────────────────────────────────



ingress-geral_2.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx' shouldn't have access to manage secrets in namespace 'cattle-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-geral_2.yaml:19-29
────────────────────────────────────────
  19 ┌ - apiGroups:
  20 │   - ''
  21 │   resources:
  22 │   - configmaps
  23 │   - pods
  24 │   - secrets
  25 │   - endpoints
  26 │   verbs:
  27 └   - get
  ..   
────────────────────────────────────────



ingress-geral_3.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'ingress-nginx-admission' shouldn't have access to manage secrets in namespace 'cattle-system'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ingress-geral_3.yaml:13-19
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 └   - create
────────────────────────────────────────



ingress-geral_4.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'ingress-nginx' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 ingress-geral_4.yaml:11-22
────────────────────────────────────────
  11 ┌ - apiGroups:
  12 │   - ''
  13 │   resources:
  14 │   - configmaps
  15 │   - endpoints
  16 │   - nodes
  17 │   - pods
  18 │   - secrets
  19 └   - namespaces
  ..   
────────────────────────────────────────



ingress-geral_5.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0114 (CRITICAL): ClusterRole 'ingress-nginx-admission' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 ingress-geral_5.yaml:12-18
────────────────────────────────────────
  12 ┌ - apiGroups:
  13 │   - admissionregistration.k8s.io
  14 │   resources:
  15 │   - validatingwebhookconfigurations
  16 │   verbs:
  17 │   - get
  18 └   - update
────────────────────────────────────────



ingress-giropops-aws-dominio.yaml (kubernetes)
==============================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-giropops-aws-dominio.yaml:8-19
────────────────────────────────────────
   8 ┌   ingressClassName: nginx # necessario quando for um Ingress na Cloud
   9 │   rules:
  10 │   - host: giropops.containers.k8s.export # Dominio que deverá ser criado para chamar a aplicação no browser
  11 │     http:
  12 │       paths:
  13 │       - pathType: Prefix
  14 │         path: "/" # esse é o path correto que a aplicação giropops-senhas responde
  15 │         backend:
  16 └           service:
  ..   
────────────────────────────────────────



ingress-giropops-aws.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-giropops-aws.yaml:8-19
────────────────────────────────────────
   8 ┌   ingressClassName: nginx # necessario quando for um Ingress na Cloud
   9 │   rules:
  10 │   #- host: giropops-senhas.local # comentando o HOST para usar o DNS da AWS que gera automático
  11 │   - http:
  12 │       paths:
  13 │       - pathType: Prefix
  14 │         path: "/" # esse é o path correto que a aplicação giropops-senhas responde
  15 │         backend:
  16 └           service:
  ..   
────────────────────────────────────────



ingress-giropops-senhas.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-giropops-senhas.yaml:8-19
────────────────────────────────────────
   8 ┌   ingressClassName: nginx
   9 │   rules:
  10 │   - host: giropops.diogofiaminghi.com.br #usar aqui meu dominio valido apontando para o endereco LoadBalance
  11 │     http:
  12 │       paths:
  13 │       - path: /
  14 │         pathType: Prefix
  15 │         backend:
  16 └           service:
  ..   
────────────────────────────────────────



ingress-giropops.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-giropops.yaml:26-37
────────────────────────────────────────
  26 ┌   ingressClassName: nome-da-sua-classe-ingress # Substitua por sua classe de Ingress
  27 │   rules:
  28 │   - host: giropopssenhaslocal.com
  29 │     http:
  30 │       paths:
  31 │       - path: /
  32 │         pathType: Prefix
  33 │         backend:
  34 └           service:
  ..   
────────────────────────────────────────



ingress-giropops1.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-giropops1.yaml:26-37
────────────────────────────────────────
  26 ┌   ingressClassName: nome-da-sua-classe-ingress # Substitua por sua classe de Ingress
  27 │   rules:
  28 │   - host: giropopssenhaslocal.com
  29 │     http:
  30 │       paths:
  31 │       - path: /
  32 │         pathType: Prefix
  33 │         backend:
  34 └           service:
  ..   
────────────────────────────────────────



ingress-good.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-good.yaml:6-20
────────────────────────────────────────
   6 ┌   ingressClassName: someingress
   7 │   rules:
   8 │   - host: endpoint01
   9 │     http:
  10 │       paths:
  11 │       - backend:
  12 │           service:
  13 │             name: demo-svc
  14 └             port:
  ..   
────────────────────────────────────────



ingress-good1.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-good1.yaml:9-23
────────────────────────────────────────
   9 ┌   ingressClassName: someingress
  10 │   rules:
  11 │   - host: endpoint01
  12 │     https:
  13 │       paths:
  14 │       - backend:
  15 │           service:
  16 │             name: demo-svc
  17 └             port:
  ..   
────────────────────────────────────────



ingress-good10.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-good10.yaml:9-19
────────────────────────────────────────
   9 ┌   rules:
  10 │   - host: endpoint01
  11 │     https:
  12 │       paths:
  13 │       - backend:
  14 │           service:
  15 │             name: demo-svc
  16 │             port:
  17 └               number: 8080
  ..   
────────────────────────────────────────



ingress-good10_1.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-good10_1.yaml:9-19
────────────────────────────────────────
   9 ┌   rules:
  10 │   - host: endpoint01
  11 │     https:
  12 │       paths:
  13 │       - path: /testpath
  14 │         pathType: Prefix
  15 │         backend:
  16 │           service:
  17 └             name: test
  ..   
────────────────────────────────────────



ingress-good11.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-good11.yaml:6-16
────────────────────────────────────────
   6 ┌   rules:
   7 │   - host: endpoint01
   8 │     https:
   9 │       paths:
  10 │       - backend:
  11 │           service:
  12 │             name: demo-svc
  13 │             port:
  14 └               number: 8080
  ..   
────────────────────────────────────────



ingress-good11_1.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-good11_1.yaml:6-16
────────────────────────────────────────
   6 ┌   rules:
   7 │   - host: endpoint01
   8 │     https:
   9 │       paths:
  10 │       - path: /testpath
  11 │         pathType: Prefix
  12 │         backend:
  13 │           service:
  14 └             name: test
  ..   
────────────────────────────────────────



ingress-good12.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-good12.yaml:6-16
────────────────────────────────────────
   6 ┌   rules:
   7 │   - host: endpoint01
   8 │     https:
   9 │       paths:
  10 │       - backend:
  11 │           service:
  12 │             name: demo-svc
  13 │             port:
  14 └               number: 8080
  ..   
────────────────────────────────────────



ingress-good12_1.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-good12_1.yaml:6-16
────────────────────────────────────────
   6 ┌   rules:
   7 │   - host: endpoint02
   8 │     https:
   9 │       paths:
  10 │       - path: /testpath
  11 │         pathType: Prefix
  12 │         backend:
  13 │           service:
  14 └             name: test
  ..   
────────────────────────────────────────



ingress-good13.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-good13.yaml:6-16
────────────────────────────────────────
   6 ┌   rules:
   7 │   - host: endpoint01
   8 │     https:
   9 │       paths:
  10 │       - backend:
  11 │           service:
  12 │             name: demo-svc
  13 │             port:
  14 └               number: 8080
  ..   
────────────────────────────────────────



ingress-good13_1.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-good13_1.yaml:6-26
────────────────────────────────────────
   6 ┌   rules:
   7 │   - host: endpoint02
   8 │     https:
   9 │       paths:
  10 │       - path: /testpath
  11 │         pathType: Prefix
  12 │         backend:
  13 │           service:
  14 └             name: test
  ..   
────────────────────────────────────────



ingress-good14.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-good14.yaml:6-16
────────────────────────────────────────
   6 ┌   rules:
   7 │   - host: bar
   8 │     http:
   9 │       paths:
  10 │       - backend:
  11 │           service:
  12 │             name: demo-svc
  13 │             port:
  14 └               number: 8080
  ..   
────────────────────────────────────────



ingress-good14_1.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-good14_1.yaml:6-23
────────────────────────────────────────
   6 ┌   rules:
   7 │   - host: foo
   8 │     http:
   9 │       paths:
  10 │       - path: /bar
  11 │         pathType: Prefix
  12 │         backend:
  13 │           service:
  14 └             name: test
  ..   
────────────────────────────────────────



ingress-good14_2.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-good14_2.yaml:6-16
────────────────────────────────────────
   6 ┌   rules:
   7 │   - host: host01
   8 │     http:
   9 │       paths:
  10 │       - path: /host01
  11 │         pathType: Prefix
  12 │         backend:
  13 │           service:
  14 └             name: test
  ..   
────────────────────────────────────────



ingress-good15.yaml (kubernetes)
================================
Tests: 115 (SUCCESSES: 114, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0039 (LOW): A LimitRange policy with a default requests and limits for each container should be configured
════════════════════════════════════════
Ensure that a LimitRange policy is configured to limit resource usage for namespaces or nodes

See https://avd.aquasec.com/misconfig/ksv039
────────────────────────────────────────
 ingress-good15.yaml:7-41
────────────────────────────────────────
   7 ┌   rules:
   8 │   - host: endpoint01
   9 │     http:
  10 │       paths:
  11 │       - backend:
  12 │           service:
  13 │             name: demo-svc
  14 │             port:
  15 └               number: 8080
  ..   
────────────────────────────────────────


