
Report Summary

┌───────────────────────────────────────────────┬────────────┬───────────────────┐
│                    Target                     │    Type    │ Misconfigurations │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Seq-Deployment.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Seq-Deployment_1.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Seq-Deployment_2.yaml                         │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Seq-Deployment_3.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Service(PHP).yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Service(backend).yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Service(frontend).yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Service(httpd).yaml                           │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Service(nginx).yaml                           │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Service(redis-master).yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ Service(redis-slave).yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ selinuxoptions4910.yaml                       │ kubernetes │        30         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ selinuxoptions4911.yaml                       │ kubernetes │        30         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ selinuxoptions492.yaml                        │ kubernetes │        28         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ selinuxoptions493.yaml                        │ kubernetes │        28         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ selinuxoptions494.yaml                        │ kubernetes │        28         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ selinuxoptions495.yaml                        │ kubernetes │        28         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ selinuxoptions496.yaml                        │ kubernetes │        28         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ selinuxoptions497.yaml                        │ kubernetes │        24         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ selinuxoptions498.yaml                        │ kubernetes │        30         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ selinuxoptions499.yaml                        │ kubernetes │        24         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ sem-volume.yaml                               │ kubernetes │        35         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ sem-volume1.yaml                              │ kubernetes │        35         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ sem-volume2.yaml                              │ kubernetes │        35         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ semaphore-deployment.yaml                     │ kubernetes │        16         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ semaphore-postgres-persistentvolumeclaim.yaml │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ semaphore-service.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ semaphore1_1.yaml                             │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ senario11.yaml                                │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ senario11_1.yaml                              │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ senario11_2.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ senario13.yaml                                │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ senario13_1.yaml                              │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ senario13_2.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ senario15.yaml                                │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ senario15_1.yaml                              │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ senario15_2.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ senario17.yaml                                │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ senario17_1.yaml                              │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ senario17_2.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ send_mail.yaml                                │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ send_mail_1.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ senhasegura-dsm-secret.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ senior-deployment.yaml                        │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ senior.yaml                                   │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ senior1.yaml                                  │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ senior1_1.yaml                                │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ senior1_2.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ senior1_3.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ senior1_4.yaml                                │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ senior1_5.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ senior_1.yaml                                 │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ senior_2.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ senior_3.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ senior_4.yaml                                 │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ senior_5.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ sentiment-classification.yaml                 │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ sentiment-classification1.yaml                │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ sentiment-classification1_1.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ sentiment-classification_1.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ sentiment-deployment.yaml                     │ kubernetes │        15         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ sentiment-deployment_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ sentinel-statefulset.yaml                     │ kubernetes │        32         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ sentinel-statefulset1.yaml                    │ kubernetes │        32         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ sentinel-statefulset1_1.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ sentinel-statefulset2.yaml                    │ kubernetes │        32         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ sentinel-statefulset2_1.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ sentinel-statefulset3.yaml                    │ kubernetes │        32         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ sentinel-statefulset3_1.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ sentinel-statefulset_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ sentry4.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ sentry4_1.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ sentry4_2.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ sentry4_3.yaml                                │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ sentry4_4.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ seq-pvc.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ ser-backend.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ ser-frontend.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ ser-samba.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ sercvice.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ serivce-definition.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ serrvice.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ serrvice1.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ servarr-env-configmap.yaml                    │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-app-configs.yaml                       │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-app-configs1.yaml                      │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-app-deploy.yaml                        │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-app-deploy1.yaml                       │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-app-service.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-app-service1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-ip-service.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-ip-service1.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-ip-service10.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-ip-service11.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-ip-service12.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-ip-service13.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-ip-service14.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-ip-service15.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-ip-service16.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-ip-service17.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-ip-service18.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-ip-service19.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-ip-service2.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-ip-service20.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-ip-service21.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-ip-service22.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-ip-service23.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-ip-service24.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-ip-service25.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-ip-service26.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-ip-service27.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-ip-service28.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-ip-service29.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-ip-service3.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-ip-service30.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-ip-service31.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-ip-service32.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-ip-service33.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-ip-service34.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-ip-service35.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-ip-service36.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-ip-service4.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-ip-service5.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-ip-service6.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-ip-service7.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-ip-service8.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-ip-service9.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-roles1.yaml                    │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-cluster-roles1_1.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-clusterip-service.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-config-configmap.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-config-configmap1.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-configMap4.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-configmap.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-configmap1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-configmap2.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-configmap3.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-depl.yaml                              │ kubernetes │        16         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-depl_1.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deploy.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deploy_1.yaml                          │ kubernetes │        16         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deploy_2.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment.yaml                        │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment1.yaml                       │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment10.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment12.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment13.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment14.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment16.yaml                      │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment17.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment19.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment2.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment20.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment21.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment22.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment23.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment24.yaml                      │ kubernetes │        20         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment25.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment26.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment27.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment28.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment29.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment2_1.yaml                     │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment3.yaml                       │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment30.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment32.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment33.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment34.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment35.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment36.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment37.yaml                      │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment38.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment39.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment42.yaml                      │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment43.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment45.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment46.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment47.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment48.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment49.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment5.yaml                       │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment50.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment51.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment52.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment53.yaml                      │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment6.yaml                       │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment7.yaml                       │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment8.yaml                       │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment9.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-deployment9_1.yaml                     │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-pv.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-pv1.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-pvc.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-pvc1.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-service.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-service12.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-service2.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-service7.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-service8.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-serviceaccount.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-serviceaccount1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-side-password.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-statefulset.yaml                       │ kubernetes │        31         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-statefulset1.yaml                      │ kubernetes │        31         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server-user.yaml                              │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server.deployment.yaml                        │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server.deployment1.yaml                       │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server.deployment2.yaml                       │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server.deployment3.yaml                       │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server.deployment4.yaml                       │ kubernetes │        16         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server.deployment4_1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server.deployment5.yaml                       │ kubernetes │        16         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server.deployment5_1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server.service.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server.service1.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server.service1_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server.service2.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server.service3.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server.service3_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server.yaml                                   │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server1.yaml                                  │ kubernetes │        13         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server10.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server10_1.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server10_2.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server10_3.yaml                               │ kubernetes │        14         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server10_4.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server10_5.yaml                               │ kubernetes │        14         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server11.yaml                                 │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server11_1.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server12.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server12_1.yaml                               │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server13.yaml                                 │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server13_1.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server1_1.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server1_2.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server27.yaml                                 │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server3.yaml                                  │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server31.yaml                                 │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server33.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server34.yaml                                 │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server34_1.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server35.yaml                                 │ kubernetes │        14         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server36.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server36_1.yaml                               │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server37.yaml                                 │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server37_1.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server3_1.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server3_2.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server4.yaml                                  │ kubernetes │        13         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server4_1.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server4_2.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server6.yaml                                  │ kubernetes │        15         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server6_1.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server7.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server7_1.yaml                                │ kubernetes │        14         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server7_2.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server8.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server8_1.yaml                                │ kubernetes │        14         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server8_2.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server9.yaml                                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server9_1.yaml                                │ kubernetes │        14         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server9_2.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ serverDeploy.yaml                             │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ serverService.yaml                            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server_1.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server_2.yaml                                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server_configmap.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server_configmap1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server_configmap2.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server_configmap3.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server_configmap4.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server_deployment.yaml                        │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server_deployment1.yaml                       │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server_deployment2.yaml                       │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server_deployment3.yaml                       │ kubernetes │        17         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server_editor_role.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server_editor_role2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server_service.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server_service1.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server_viewer_role.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ server_viewer_role2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ serverbootconfiguration_editor_role.yaml      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ serverbootconfiguration_viewer_role.yaml      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ serverclaim_editor_role.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ serverclaim_viewer_role.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ serverless-cli.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ serverless-cli1.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ serverless-cli1_1.yaml                        │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ serverless-cli1_2.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ serverless-cli2.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ serverless-cli2_1.yaml                        │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ serverless-cli2_2.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ serverless-cli3.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ serverless-cli3_1.yaml                        │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ serverless-cli3_2.yaml                        │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ serverless-cli_1.yaml                         │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ serverless-cli_2.yaml                         │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ servers-cm.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ servers-cm1.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ servers-cm2.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ servers-cm3.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ servers-cm4.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ servers-cm5.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ servers-configmap.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ servers-configmap1.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ servers-secret.yaml                           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ servers-secret1.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ servers-secret2.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ servers-secret3.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ servers-secret4.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ servers_configmap.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ servers_configmap1.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ servers_configmap2.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ servers_configmap3.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ servers_configmap4.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-0.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-00-original.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-00-original1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-01.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-011.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-02.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-021.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-03.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-04.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-1-loadbalancer.yaml                   │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-1-loadbalancer1.yaml                  │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-1-loadbalancer1_1.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-1-loadbalancer_1.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-1.yaml                                │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-11.yaml                               │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-11_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-1_1.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-2-multi.yaml                          │ kubernetes │        36         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-2-multi_1.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-2.yaml                                │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-2048.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-2_1.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-3-autoscaler.yaml                     │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-3-autoscaler_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-3-autoscaler_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-4-cluster-ip.yaml                     │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-4-cluster-ip_1.yaml                   │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-4-cluster-ip_2.yaml                   │ kubernetes │        19         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-4-cluster-ip_3.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-4-cluster-ip_4.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-4-cluster-ip_5.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-4-cluster-ip_6.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-4-cluster-ip_7.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-4-cluster-ip_8.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-4k.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-4k1.yaml                              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-a.yaml                                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-a1.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-a1_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-a1_2.yaml                             │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-a1_3.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-a2.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-a3.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-a3_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-a3_2.yaml                             │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-a3_3.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-a4.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-a4_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-a4_2.yaml                             │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-a4_3.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-a5.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-a6.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-a6_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-a6_2.yaml                             │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-a6_3.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-a7.yaml                               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-a7_1.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-a7_2.yaml                             │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-a7_3.yaml                             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-adservice.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-adservice1.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-adservice2.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-adservice3.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-adservice4.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-adservice5.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-adservice6.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-adservice7.yaml               │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-binding.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-cartservice.yaml              │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-cartservice1.yaml             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-cartservice2.yaml             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-cartservice3.yaml             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-cartservice4.yaml             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-cartservice5.yaml             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-cartservice6.yaml             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-cartservice7.yaml             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-checkoutservice.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-checkoutservice1.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-checkoutservice2.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-checkoutservice3.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-checkoutservice4.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-checkoutservice5.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-checkoutservice6.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-checkoutservice7.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-currencyservice.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-currencyservice1.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-currencyservice2.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-currencyservice3.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-currencyservice4.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-currencyservice5.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-currencyservice6.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-currencyservice7.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-custom.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-difference-strategy.yaml      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-emailservice.yaml             │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-emailservice1.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-emailservice2.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-emailservice3.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-emailservice4.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-emailservice5.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-emailservice6.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-emailservice7.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-frontend.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-frontend1.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-frontend2.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-frontend3.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-frontend4.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-frontend5.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-frontend6.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-frontend7.yaml                │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-loadgenerator.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-loadgenerator1.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-loadgenerator2.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-loadgenerator3.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-loadgenerator4.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-loadgenerator5.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-loadgenerator6.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-loadgenerator7.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-normal.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-patch.yaml                    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-patch_1.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-patch_10.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-patch_11.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-patch_12.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-patch_13.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-patch_14.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-patch_15.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-patch_16.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-patch_2.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-patch_3.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-patch_4.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-patch_5.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-patch_6.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-patch_7.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-patch_8.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-patch_9.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-paymentservice.yaml           │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-paymentservice1.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-paymentservice2.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-paymentservice3.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-paymentservice4.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-paymentservice5.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-paymentservice6.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-paymentservice7.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-pod.yaml                      │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-pod1.yaml                     │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-pod2.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-pod2_1.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-pod2_2.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-pod2_3.yaml                   │ kubernetes │        18         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-productcatalogservice.yaml    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-productcatalogservice1.yaml   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-productcatalogservice2.yaml   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-productcatalogservice3.yaml   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-productcatalogservice4.yaml   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-productcatalogservice5.yaml   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-productcatalogservice6.yaml   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-productcatalogservice7.yaml   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-recommendationservice.yaml    │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-recommendationservice1.yaml   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-recommendationservice2.yaml   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-recommendationservice3.yaml   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-recommendationservice4.yaml   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-recommendationservice5.yaml   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-recommendationservice6.yaml   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-recommendationservice7.yaml   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-secret.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-secret1.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-secret2.yaml                  │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-shippingservice.yaml          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-shippingservice1.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-shippingservice2.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-shippingservice3.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-shippingservice4.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-shippingservice5.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-shippingservice6.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-shippingservice7.yaml         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-template.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-viewer.yaml                   │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account-viewer_1.yaml                 │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account.yaml                          │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account.yaml.verified.yaml            │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account1.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account10.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account100.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account101.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account102.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account103.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account104.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account11.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account114.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account115.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account116.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account117.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account118.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account119.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account12.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account120.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account121.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account122.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account123.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account124.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account125.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account13.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account132.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account135.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account136.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account137.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account138.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account139.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account14.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account140.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account141.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account142.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account143.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account144.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account145.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account146.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account147.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account148.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account151.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account152.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account16.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account162.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account167.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account168.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account169.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account17.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account171.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account173.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account174.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account175.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account176.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account177.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account18.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account180.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account181.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account182.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account183.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account184.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account19.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account193.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account195.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account195_1.yaml                     │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account195_2.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account196.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account197.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account198.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account199.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account1_1.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account1_2.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account2.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account20.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account200.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account201.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account202.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account203.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account204.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account205.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account206.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account207.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account208.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account209.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account21.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account210.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account211.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account212.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account213.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account214.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account215.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account216.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account217.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account218.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account219.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account22.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account220.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account222.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account223.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account224.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account224_1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account224_2.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account224_3.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account224_4.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account224_5.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account224_6.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account225.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account225_1.yaml                     │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account225_2.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account227.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account227_1.yaml                     │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account228.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account229.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account23.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account230.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account231.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account232.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account233.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account234.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account235.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account236.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account237.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account238.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account239.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account24.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account240.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account241.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account242.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account243.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account244.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account245.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account246.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account247.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account248.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account249.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account25.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account250.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account251.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account252.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account253.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account254.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account255.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account256.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account257.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account258.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account259.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account26.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account260.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account261.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account261_1.yaml                     │ kubernetes │         2         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account261_2.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account262.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account263.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account264.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account269.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account27.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account270.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account271.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account272.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account272_1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account272_2.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account276.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account277.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account278.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account279.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account28.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account280.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account281.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account281_1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account281_2.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account282.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account283.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account284.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account285.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account286.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account287.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account288.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account289.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account29.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account290.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account291.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account292.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account293.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account294.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account295.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account296.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account296_1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account296_2.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account2_1.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account2_2.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account3.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account30.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account301.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account302.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account303.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account304.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account305.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account306.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account307.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account308.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account309.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account31.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account310.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account311.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account312.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account314.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account315.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account32.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account323.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account324.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account325.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account33.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account332.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account333.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account334.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account335.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account336.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account337.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account338.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account339.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account33_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account33_2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account34.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account340.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account341.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account342.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account343.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account344.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account345.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account346.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account347.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account348.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account349.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account34_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account34_2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account35.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account350.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account351.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account352.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account353.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account354.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account355.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account356.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account357.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account358.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account359.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account36.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account360.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account361.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account362.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account363.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account364.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account366.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account366_1.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account372.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account373.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account374.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account375.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account376.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account377.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account378.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account38.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account380.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account38_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account38_2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account39.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account393.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account394.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account395.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account396.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account397.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account398.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account39_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account39_2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account3_1.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account3_2.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account3_3.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account4.yaml                         │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account40.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account400.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account401.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account402.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account404.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account405.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account409.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account40_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account40_2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account41.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account411.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account412.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account413.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account414.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account414_1.yaml                     │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account414_2.yaml                     │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account416.yaml                       │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account41_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account41_2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account41_3.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account42.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account42_1.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account43.yaml                        │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account43_1.yaml                      │ kubernetes │         1         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account43_2.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account43_3.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account43_4.yaml                      │ kubernetes │         0         │
├───────────────────────────────────────────────┼────────────┼───────────────────┤
│ service-account44.yaml                        │ kubernetes │         0         │
└───────────────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


Seq-Deployment_2.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 10, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'seq' of Deployment 'seq' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 Seq-Deployment_2.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: seq
  18 │         image: datalust/seq:latest
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 80
  22 │         - containerPort: 5341
  23 │         env:
  24 │         - name: ACCEPT_EULA
  25 └           value: Y
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'seq' of Deployment 'seq' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 Seq-Deployment_2.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: seq
  18 │         image: datalust/seq:latest
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 80
  22 │         - containerPort: 5341
  23 │         env:
  24 │         - name: ACCEPT_EULA
  25 └           value: Y
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'seq' of 'deployment' 'seq' in 'madworldnl' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 Seq-Deployment_2.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: seq
  18 │         image: datalust/seq:latest
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 80
  22 │         - containerPort: 5341
  23 │         env:
  24 │         - name: ACCEPT_EULA
  25 └           value: Y
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'seq' of Deployment 'seq' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 Seq-Deployment_2.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: seq
  18 │         image: datalust/seq:latest
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 80
  22 │         - containerPort: 5341
  23 │         env:
  24 │         - name: ACCEPT_EULA
  25 └           value: Y
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'seq' of Deployment 'seq' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 Seq-Deployment_2.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: seq
  18 │         image: datalust/seq:latest
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 80
  22 │         - containerPort: 5341
  23 │         env:
  24 │         - name: ACCEPT_EULA
  25 └           value: Y
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'seq' of Deployment 'seq' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 Seq-Deployment_2.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: seq
  18 │         image: datalust/seq:latest
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 80
  22 │         - containerPort: 5341
  23 │         env:
  24 │         - name: ACCEPT_EULA
  25 └           value: Y
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'seq' of Deployment 'seq' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 Seq-Deployment_2.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: seq
  18 │         image: datalust/seq:latest
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 80
  22 │         - containerPort: 5341
  23 │         env:
  24 │         - name: ACCEPT_EULA
  25 └           value: Y
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'seq' of Deployment 'seq' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 Seq-Deployment_2.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: seq
  18 │         image: datalust/seq:latest
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 80
  22 │         - containerPort: 5341
  23 │         env:
  24 │         - name: ACCEPT_EULA
  25 └           value: Y
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'seq' of Deployment 'seq' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 Seq-Deployment_2.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: seq
  18 │         image: datalust/seq:latest
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 80
  22 │         - containerPort: 5341
  23 │         env:
  24 │         - name: ACCEPT_EULA
  25 └           value: Y
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'seq' of Deployment 'seq' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 Seq-Deployment_2.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: seq
  18 │         image: datalust/seq:latest
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 80
  22 │         - containerPort: 5341
  23 │         env:
  24 │         - name: ACCEPT_EULA
  25 └           value: Y
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'seq' of Deployment 'seq' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 Seq-Deployment_2.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: seq
  18 │         image: datalust/seq:latest
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 80
  22 │         - containerPort: 5341
  23 │         env:
  24 │         - name: ACCEPT_EULA
  25 └           value: Y
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'seq' of Deployment 'seq' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 Seq-Deployment_2.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: seq
  18 │         image: datalust/seq:latest
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 80
  22 │         - containerPort: 5341
  23 │         env:
  24 │         - name: ACCEPT_EULA
  25 └           value: Y
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 Seq-Deployment_2.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: seq
  18 │         image: datalust/seq:latest
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 80
  22 │         - containerPort: 5341
  23 │         env:
  24 │         - name: ACCEPT_EULA
  25 └           value: Y
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "seq" of deployment "seq" in "madworldnl" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 Seq-Deployment_2.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: seq
  18 │         image: datalust/seq:latest
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 80
  22 │         - containerPort: 5341
  23 │         env:
  24 │         - name: ACCEPT_EULA
  25 └           value: Y
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 Seq-Deployment_2.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: seq
  18 │         image: datalust/seq:latest
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 80
  22 │         - containerPort: 5341
  23 │         env:
  24 │         - name: ACCEPT_EULA
  25 └           value: Y
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment seq in madworldnl namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container seq in madworldnl namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Seq-Deployment_2.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: seq
  18 │         image: datalust/seq:latest
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 80
  22 │         - containerPort: 5341
  23 │         env:
  24 │         - name: ACCEPT_EULA
  25 └           value: Y
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment seq in madworldnl namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 Seq-Deployment_2.yaml:16-39
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: seq
  18 │         image: datalust/seq:latest
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 80
  22 │         - containerPort: 5341
  23 │         env:
  24 └         - name: ACCEPT_EULA
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container seq in deployment seq (namespace: madworldnl) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 Seq-Deployment_2.yaml:17-35
────────────────────────────────────────
  17 ┌       - name: seq
  18 │         image: datalust/seq:latest
  19 │         imagePullPolicy: IfNotPresent
  20 │         ports:
  21 │         - containerPort: 80
  22 │         - containerPort: 5341
  23 │         env:
  24 │         - name: ACCEPT_EULA
  25 └           value: Y
  ..   
────────────────────────────────────────



Service(httpd).yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'httpd-service' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



Service(nginx).yaml (kubernetes)
================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'nginx-service' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



selinuxoptions4910.yaml (kubernetes)
====================================
Tests: 128 (SUCCESSES: 98, FAILURES: 30)
Failures: 30 (UNKNOWN: 0, LOW: 21, MEDIUM: 7, HIGH: 2, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'container1' of Pod 'selinuxoptions4' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 selinuxoptions4910.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: registry.k8s.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 selinuxoptions4910.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: registry.k8s.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container1' of 'pod' 'selinuxoptions4' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 selinuxoptions4910.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: registry.k8s.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'initcontainer1' of 'pod' 'selinuxoptions4' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 selinuxoptions4910.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: registry.k8s.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 selinuxoptions4910.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: registry.k8s.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 selinuxoptions4910.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: registry.k8s.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container1' of Pod 'selinuxoptions4' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 selinuxoptions4910.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: registry.k8s.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'initcontainer1' of Pod 'selinuxoptions4' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 selinuxoptions4910.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: registry.k8s.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container1' of Pod 'selinuxoptions4' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 selinuxoptions4910.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: registry.k8s.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 selinuxoptions4910.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: registry.k8s.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 selinuxoptions4910.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: registry.k8s.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 selinuxoptions4910.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: registry.k8s.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 selinuxoptions4910.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: registry.k8s.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 selinuxoptions4910.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: registry.k8s.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 selinuxoptions4910.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: registry.k8s.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 selinuxoptions4910.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: registry.k8s.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 selinuxoptions4910.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: registry.k8s.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 selinuxoptions4910.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: registry.k8s.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 selinuxoptions4910.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: registry.k8s.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 selinuxoptions4910.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: registry.k8s.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0025 (MEDIUM): Pod 'selinuxoptions4' uses restricted properties in seLinuxOptions: ('role')
════════════════════════════════════════
According to pod security standard 'SElinux', setting custom SELinux options should be disallowed.

See https://avd.aquasec.com/misconfig/ksv025
────────────────────────────────────────
 selinuxoptions4910.yaml:6-21
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: registry.k8s.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 │       seLinuxOptions: {}
  12 │   initContainers:
  13 │   - image: registry.k8s.io/pause
  14 └     name: initcontainer1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 selinuxoptions4910.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: registry.k8s.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 selinuxoptions4910.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: registry.k8s.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container1" of pod "selinuxoptions4" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 selinuxoptions4910.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: registry.k8s.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "initcontainer1" of pod "selinuxoptions4" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 selinuxoptions4910.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: registry.k8s.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 selinuxoptions4910.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: registry.k8s.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 selinuxoptions4910.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: registry.k8s.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod selinuxoptions4 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 selinuxoptions4910.yaml:4
────────────────────────────────────────
   4 [   name: selinuxoptions4
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container container1 in pod selinuxoptions4 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 selinuxoptions4910.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: registry.k8s.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container initcontainer1 in pod selinuxoptions4 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 selinuxoptions4910.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: registry.k8s.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────



selinuxoptions4911.yaml (kubernetes)
====================================
Tests: 128 (SUCCESSES: 98, FAILURES: 30)
Failures: 30 (UNKNOWN: 0, LOW: 21, MEDIUM: 7, HIGH: 2, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'container1' of Pod 'selinuxoptions4' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 selinuxoptions4911.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: registry.k8s.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 selinuxoptions4911.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: registry.k8s.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container1' of 'pod' 'selinuxoptions4' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 selinuxoptions4911.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: registry.k8s.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'initcontainer1' of 'pod' 'selinuxoptions4' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 selinuxoptions4911.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: registry.k8s.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 selinuxoptions4911.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: registry.k8s.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 selinuxoptions4911.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: registry.k8s.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container1' of Pod 'selinuxoptions4' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 selinuxoptions4911.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: registry.k8s.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'initcontainer1' of Pod 'selinuxoptions4' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 selinuxoptions4911.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: registry.k8s.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container1' of Pod 'selinuxoptions4' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 selinuxoptions4911.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: registry.k8s.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 selinuxoptions4911.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: registry.k8s.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 selinuxoptions4911.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: registry.k8s.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 selinuxoptions4911.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: registry.k8s.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 selinuxoptions4911.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: registry.k8s.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 selinuxoptions4911.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: registry.k8s.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 selinuxoptions4911.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: registry.k8s.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 selinuxoptions4911.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: registry.k8s.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 selinuxoptions4911.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: registry.k8s.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 selinuxoptions4911.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: registry.k8s.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 selinuxoptions4911.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: registry.k8s.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 selinuxoptions4911.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: registry.k8s.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0025 (MEDIUM): Pod 'selinuxoptions4' uses restricted properties in seLinuxOptions: ('role')
════════════════════════════════════════
According to pod security standard 'SElinux', setting custom SELinux options should be disallowed.

See https://avd.aquasec.com/misconfig/ksv025
────────────────────────────────────────
 selinuxoptions4911.yaml:6-21
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: registry.k8s.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 │       seLinuxOptions: {}
  12 │   initContainers:
  13 │   - image: registry.k8s.io/pause
  14 └     name: initcontainer1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 selinuxoptions4911.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: registry.k8s.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 selinuxoptions4911.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: registry.k8s.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container1" of pod "selinuxoptions4" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 selinuxoptions4911.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: registry.k8s.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "initcontainer1" of pod "selinuxoptions4" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 selinuxoptions4911.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: registry.k8s.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 selinuxoptions4911.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: registry.k8s.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 selinuxoptions4911.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: registry.k8s.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod selinuxoptions4 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 selinuxoptions4911.yaml:4
────────────────────────────────────────
   4 [   name: selinuxoptions4
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container container1 in pod selinuxoptions4 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 selinuxoptions4911.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: registry.k8s.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container initcontainer1 in pod selinuxoptions4 (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 selinuxoptions4911.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: registry.k8s.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────



selinuxoptions492.yaml (kubernetes)
===================================
Tests: 127 (SUCCESSES: 99, FAILURES: 28)
Failures: 28 (UNKNOWN: 0, LOW: 21, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'container1' of Pod 'selinuxoptions4' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 selinuxoptions492.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 selinuxoptions492.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container1' of 'pod' 'selinuxoptions4' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 selinuxoptions492.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'initcontainer1' of 'pod' 'selinuxoptions4' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 selinuxoptions492.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 selinuxoptions492.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 selinuxoptions492.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container1' of Pod 'selinuxoptions4' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 selinuxoptions492.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'initcontainer1' of Pod 'selinuxoptions4' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 selinuxoptions492.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container1' of Pod 'selinuxoptions4' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 selinuxoptions492.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 selinuxoptions492.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 selinuxoptions492.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 selinuxoptions492.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 selinuxoptions492.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 selinuxoptions492.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 selinuxoptions492.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 selinuxoptions492.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 selinuxoptions492.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 selinuxoptions492.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 selinuxoptions492.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 selinuxoptions492.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0025 (MEDIUM): Pod 'selinuxoptions4' uses restricted properties in seLinuxOptions: ('role')
════════════════════════════════════════
According to pod security standard 'SElinux', setting custom SELinux options should be disallowed.

See https://avd.aquasec.com/misconfig/ksv025
────────────────────────────────────────
 selinuxoptions492.yaml:6-21
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 │       seLinuxOptions: {}
  12 │   initContainers:
  13 │   - image: k8s.gcr.io/pause
  14 └     name: initcontainer1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 selinuxoptions492.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 selinuxoptions492.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container1" of pod "selinuxoptions4" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 selinuxoptions492.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "initcontainer1" of pod "selinuxoptions4" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 selinuxoptions492.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 selinuxoptions492.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 selinuxoptions492.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod selinuxoptions4 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 selinuxoptions492.yaml:4
────────────────────────────────────────
   4 [   name: selinuxoptions4
────────────────────────────────────────



selinuxoptions493.yaml (kubernetes)
===================================
Tests: 127 (SUCCESSES: 99, FAILURES: 28)
Failures: 28 (UNKNOWN: 0, LOW: 21, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'container1' of Pod 'selinuxoptions4' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 selinuxoptions493.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 selinuxoptions493.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container1' of 'pod' 'selinuxoptions4' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 selinuxoptions493.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'initcontainer1' of 'pod' 'selinuxoptions4' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 selinuxoptions493.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 selinuxoptions493.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 selinuxoptions493.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container1' of Pod 'selinuxoptions4' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 selinuxoptions493.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'initcontainer1' of Pod 'selinuxoptions4' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 selinuxoptions493.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container1' of Pod 'selinuxoptions4' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 selinuxoptions493.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 selinuxoptions493.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 selinuxoptions493.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 selinuxoptions493.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 selinuxoptions493.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 selinuxoptions493.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 selinuxoptions493.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 selinuxoptions493.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 selinuxoptions493.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 selinuxoptions493.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 selinuxoptions493.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 selinuxoptions493.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0025 (MEDIUM): Pod 'selinuxoptions4' uses restricted properties in seLinuxOptions: ('role')
════════════════════════════════════════
According to pod security standard 'SElinux', setting custom SELinux options should be disallowed.

See https://avd.aquasec.com/misconfig/ksv025
────────────────────────────────────────
 selinuxoptions493.yaml:6-21
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 │       seLinuxOptions: {}
  12 │   initContainers:
  13 │   - image: k8s.gcr.io/pause
  14 └     name: initcontainer1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 selinuxoptions493.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 selinuxoptions493.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container1" of pod "selinuxoptions4" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 selinuxoptions493.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "initcontainer1" of pod "selinuxoptions4" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 selinuxoptions493.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 selinuxoptions493.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 selinuxoptions493.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod selinuxoptions4 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 selinuxoptions493.yaml:4
────────────────────────────────────────
   4 [   name: selinuxoptions4
────────────────────────────────────────



selinuxoptions494.yaml (kubernetes)
===================================
Tests: 127 (SUCCESSES: 99, FAILURES: 28)
Failures: 28 (UNKNOWN: 0, LOW: 21, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'container1' of Pod 'selinuxoptions4' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 selinuxoptions494.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 selinuxoptions494.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container1' of 'pod' 'selinuxoptions4' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 selinuxoptions494.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'initcontainer1' of 'pod' 'selinuxoptions4' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 selinuxoptions494.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 selinuxoptions494.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 selinuxoptions494.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container1' of Pod 'selinuxoptions4' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 selinuxoptions494.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'initcontainer1' of Pod 'selinuxoptions4' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 selinuxoptions494.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container1' of Pod 'selinuxoptions4' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 selinuxoptions494.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 selinuxoptions494.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 selinuxoptions494.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 selinuxoptions494.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 selinuxoptions494.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 selinuxoptions494.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 selinuxoptions494.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 selinuxoptions494.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 selinuxoptions494.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 selinuxoptions494.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 selinuxoptions494.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 selinuxoptions494.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0025 (MEDIUM): Pod 'selinuxoptions4' uses restricted properties in seLinuxOptions: ('role')
════════════════════════════════════════
According to pod security standard 'SElinux', setting custom SELinux options should be disallowed.

See https://avd.aquasec.com/misconfig/ksv025
────────────────────────────────────────
 selinuxoptions494.yaml:6-21
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 │       seLinuxOptions: {}
  12 │   initContainers:
  13 │   - image: k8s.gcr.io/pause
  14 └     name: initcontainer1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 selinuxoptions494.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 selinuxoptions494.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container1" of pod "selinuxoptions4" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 selinuxoptions494.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "initcontainer1" of pod "selinuxoptions4" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 selinuxoptions494.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 selinuxoptions494.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 selinuxoptions494.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod selinuxoptions4 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 selinuxoptions494.yaml:4
────────────────────────────────────────
   4 [   name: selinuxoptions4
────────────────────────────────────────



selinuxoptions495.yaml (kubernetes)
===================================
Tests: 127 (SUCCESSES: 99, FAILURES: 28)
Failures: 28 (UNKNOWN: 0, LOW: 21, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'container1' of Pod 'selinuxoptions4' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 selinuxoptions495.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 selinuxoptions495.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container1' of 'pod' 'selinuxoptions4' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 selinuxoptions495.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'initcontainer1' of 'pod' 'selinuxoptions4' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 selinuxoptions495.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 selinuxoptions495.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 selinuxoptions495.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container1' of Pod 'selinuxoptions4' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 selinuxoptions495.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'initcontainer1' of Pod 'selinuxoptions4' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 selinuxoptions495.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container1' of Pod 'selinuxoptions4' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 selinuxoptions495.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 selinuxoptions495.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 selinuxoptions495.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 selinuxoptions495.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 selinuxoptions495.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 selinuxoptions495.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 selinuxoptions495.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 selinuxoptions495.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 selinuxoptions495.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 selinuxoptions495.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 selinuxoptions495.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 selinuxoptions495.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0025 (MEDIUM): Pod 'selinuxoptions4' uses restricted properties in seLinuxOptions: ('role')
════════════════════════════════════════
According to pod security standard 'SElinux', setting custom SELinux options should be disallowed.

See https://avd.aquasec.com/misconfig/ksv025
────────────────────────────────────────
 selinuxoptions495.yaml:6-21
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 │       seLinuxOptions: {}
  12 │   initContainers:
  13 │   - image: k8s.gcr.io/pause
  14 └     name: initcontainer1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 selinuxoptions495.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 selinuxoptions495.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container1" of pod "selinuxoptions4" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 selinuxoptions495.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "initcontainer1" of pod "selinuxoptions4" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 selinuxoptions495.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 selinuxoptions495.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 selinuxoptions495.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod selinuxoptions4 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 selinuxoptions495.yaml:4
────────────────────────────────────────
   4 [   name: selinuxoptions4
────────────────────────────────────────



selinuxoptions496.yaml (kubernetes)
===================================
Tests: 127 (SUCCESSES: 99, FAILURES: 28)
Failures: 28 (UNKNOWN: 0, LOW: 21, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'container1' of Pod 'selinuxoptions4' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 selinuxoptions496.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 selinuxoptions496.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container1' of 'pod' 'selinuxoptions4' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 selinuxoptions496.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'initcontainer1' of 'pod' 'selinuxoptions4' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 selinuxoptions496.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 selinuxoptions496.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 selinuxoptions496.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container1' of Pod 'selinuxoptions4' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 selinuxoptions496.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'initcontainer1' of Pod 'selinuxoptions4' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 selinuxoptions496.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container1' of Pod 'selinuxoptions4' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 selinuxoptions496.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 selinuxoptions496.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 selinuxoptions496.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 selinuxoptions496.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 selinuxoptions496.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 selinuxoptions496.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 selinuxoptions496.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 selinuxoptions496.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 selinuxoptions496.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 selinuxoptions496.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 selinuxoptions496.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 selinuxoptions496.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0025 (MEDIUM): Pod 'selinuxoptions4' uses restricted properties in seLinuxOptions: ('role')
════════════════════════════════════════
According to pod security standard 'SElinux', setting custom SELinux options should be disallowed.

See https://avd.aquasec.com/misconfig/ksv025
────────────────────────────────────────
 selinuxoptions496.yaml:6-21
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 │       seLinuxOptions: {}
  12 │   initContainers:
  13 │   - image: k8s.gcr.io/pause
  14 └     name: initcontainer1
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 selinuxoptions496.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 selinuxoptions496.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container1" of pod "selinuxoptions4" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 selinuxoptions496.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "initcontainer1" of pod "selinuxoptions4" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 selinuxoptions496.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 selinuxoptions496.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 selinuxoptions496.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod selinuxoptions4 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 selinuxoptions496.yaml:4
────────────────────────────────────────
   4 [   name: selinuxoptions4
────────────────────────────────────────



selinuxoptions497.yaml (kubernetes)
===================================
Tests: 125 (SUCCESSES: 101, FAILURES: 24)
Failures: 24 (UNKNOWN: 0, LOW: 19, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'container1' of Pod 'selinuxoptions4' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 selinuxoptions497.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 selinuxoptions497.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container1' of 'pod' 'selinuxoptions4' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 selinuxoptions497.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'initcontainer1' of 'pod' 'selinuxoptions4' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 selinuxoptions497.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 selinuxoptions497.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 selinuxoptions497.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container1' of Pod 'selinuxoptions4' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 selinuxoptions497.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'initcontainer1' of Pod 'selinuxoptions4' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 selinuxoptions497.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container1' of Pod 'selinuxoptions4' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 selinuxoptions497.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 selinuxoptions497.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 selinuxoptions497.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 selinuxoptions497.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 selinuxoptions497.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 selinuxoptions497.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 selinuxoptions497.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 selinuxoptions497.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 selinuxoptions497.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 selinuxoptions497.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 selinuxoptions497.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 selinuxoptions497.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0025 (MEDIUM): Pod 'selinuxoptions4' uses restricted properties in seLinuxOptions: ('role')
════════════════════════════════════════
According to pod security standard 'SElinux', setting custom SELinux options should be disallowed.

See https://avd.aquasec.com/misconfig/ksv025
────────────────────────────────────────
 selinuxoptions497.yaml:6-23
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 │       seLinuxOptions: {}
  12 │   initContainers:
  13 │   - image: k8s.gcr.io/pause
  14 └     name: initcontainer1
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 selinuxoptions497.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 selinuxoptions497.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod selinuxoptions4 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 selinuxoptions497.yaml:4
────────────────────────────────────────
   4 [   name: selinuxoptions4
────────────────────────────────────────



selinuxoptions498.yaml (kubernetes)
===================================
Tests: 128 (SUCCESSES: 98, FAILURES: 30)
Failures: 30 (UNKNOWN: 0, LOW: 21, MEDIUM: 7, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'container1' of Pod 'selinuxoptions4' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 selinuxoptions498.yaml:7-10
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 selinuxoptions498.yaml:12-15
────────────────────────────────────────
  12 ┌   - image: k8s.gcr.io/pause
  13 │     name: initcontainer1
  14 │     securityContext:
  15 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'container1' of Pod 'selinuxoptions4' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 selinuxoptions498.yaml:7-10
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 selinuxoptions498.yaml:12-15
────────────────────────────────────────
  12 ┌   - image: k8s.gcr.io/pause
  13 │     name: initcontainer1
  14 │     securityContext:
  15 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container1' of 'pod' 'selinuxoptions4' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 selinuxoptions498.yaml:7-10
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'initcontainer1' of 'pod' 'selinuxoptions4' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 selinuxoptions498.yaml:12-15
────────────────────────────────────────
  12 ┌   - image: k8s.gcr.io/pause
  13 │     name: initcontainer1
  14 │     securityContext:
  15 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 selinuxoptions498.yaml:7-10
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 selinuxoptions498.yaml:12-15
────────────────────────────────────────
  12 ┌   - image: k8s.gcr.io/pause
  13 │     name: initcontainer1
  14 │     securityContext:
  15 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container1' of Pod 'selinuxoptions4' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 selinuxoptions498.yaml:7-10
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'initcontainer1' of Pod 'selinuxoptions4' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 selinuxoptions498.yaml:12-15
────────────────────────────────────────
  12 ┌   - image: k8s.gcr.io/pause
  13 │     name: initcontainer1
  14 │     securityContext:
  15 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container1' of Pod 'selinuxoptions4' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 selinuxoptions498.yaml:7-10
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 selinuxoptions498.yaml:12-15
────────────────────────────────────────
  12 ┌   - image: k8s.gcr.io/pause
  13 │     name: initcontainer1
  14 │     securityContext:
  15 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 selinuxoptions498.yaml:7-10
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 selinuxoptions498.yaml:12-15
────────────────────────────────────────
  12 ┌   - image: k8s.gcr.io/pause
  13 │     name: initcontainer1
  14 │     securityContext:
  15 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 selinuxoptions498.yaml:7-10
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 selinuxoptions498.yaml:12-15
────────────────────────────────────────
  12 ┌   - image: k8s.gcr.io/pause
  13 │     name: initcontainer1
  14 │     securityContext:
  15 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 selinuxoptions498.yaml:7-10
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 selinuxoptions498.yaml:12-15
────────────────────────────────────────
  12 ┌   - image: k8s.gcr.io/pause
  13 │     name: initcontainer1
  14 │     securityContext:
  15 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 selinuxoptions498.yaml:7-10
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 selinuxoptions498.yaml:12-15
────────────────────────────────────────
  12 ┌   - image: k8s.gcr.io/pause
  13 │     name: initcontainer1
  14 │     securityContext:
  15 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 selinuxoptions498.yaml:7-10
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 selinuxoptions498.yaml:12-15
────────────────────────────────────────
  12 ┌   - image: k8s.gcr.io/pause
  13 │     name: initcontainer1
  14 │     securityContext:
  15 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0025 (MEDIUM): Pod 'selinuxoptions4' uses restricted properties in seLinuxOptions: ('role')
════════════════════════════════════════
According to pod security standard 'SElinux', setting custom SELinux options should be disallowed.

See https://avd.aquasec.com/misconfig/ksv025
────────────────────────────────────────
 selinuxoptions498.yaml:6-19
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       seLinuxOptions: {}
  11 │   initContainers:
  12 │   - image: k8s.gcr.io/pause
  13 │     name: initcontainer1
  14 └     securityContext:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 selinuxoptions498.yaml:12-15
────────────────────────────────────────
  12 ┌   - image: k8s.gcr.io/pause
  13 │     name: initcontainer1
  14 │     securityContext:
  15 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 selinuxoptions498.yaml:7-10
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container1" of pod "selinuxoptions4" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 selinuxoptions498.yaml:7-10
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "initcontainer1" of pod "selinuxoptions4" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 selinuxoptions498.yaml:12-15
────────────────────────────────────────
  12 ┌   - image: k8s.gcr.io/pause
  13 │     name: initcontainer1
  14 │     securityContext:
  15 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 selinuxoptions498.yaml:12-15
────────────────────────────────────────
  12 ┌   - image: k8s.gcr.io/pause
  13 │     name: initcontainer1
  14 │     securityContext:
  15 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 selinuxoptions498.yaml:7-10
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod selinuxoptions4 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 selinuxoptions498.yaml:4
────────────────────────────────────────
   4 [   name: selinuxoptions4
────────────────────────────────────────



selinuxoptions499.yaml (kubernetes)
===================================
Tests: 125 (SUCCESSES: 101, FAILURES: 24)
Failures: 24 (UNKNOWN: 0, LOW: 19, MEDIUM: 3, HIGH: 2, CRITICAL: 0)

AVD-KSV-0003 (LOW): Container 'container1' of Pod 'selinuxoptions4' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 selinuxoptions499.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 selinuxoptions499.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container1' of 'pod' 'selinuxoptions4' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 selinuxoptions499.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'initcontainer1' of 'pod' 'selinuxoptions4' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 selinuxoptions499.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 selinuxoptions499.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 selinuxoptions499.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container1' of Pod 'selinuxoptions4' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 selinuxoptions499.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'initcontainer1' of Pod 'selinuxoptions4' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 selinuxoptions499.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container1' of Pod 'selinuxoptions4' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 selinuxoptions499.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 selinuxoptions499.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 selinuxoptions499.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 selinuxoptions499.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 selinuxoptions499.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 selinuxoptions499.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 selinuxoptions499.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 selinuxoptions499.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 selinuxoptions499.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 selinuxoptions499.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container1' of Pod 'selinuxoptions4' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 selinuxoptions499.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'initcontainer1' of Pod 'selinuxoptions4' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 selinuxoptions499.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0025 (MEDIUM): Pod 'selinuxoptions4' uses restricted properties in seLinuxOptions: ('role')
════════════════════════════════════════
According to pod security standard 'SElinux', setting custom SELinux options should be disallowed.

See https://avd.aquasec.com/misconfig/ksv025
────────────────────────────────────────
 selinuxoptions499.yaml:6-23
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 │       seLinuxOptions: {}
  12 │   initContainers:
  13 │   - image: k8s.gcr.io/pause
  14 └     name: initcontainer1
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 selinuxoptions499.yaml:7-11
────────────────────────────────────────
   7 ┌   - image: k8s.gcr.io/pause
   8 │     name: container1
   9 │     securityContext:
  10 │       allowPrivilegeEscalation: false
  11 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 selinuxoptions499.yaml:13-17
────────────────────────────────────────
  13 ┌   - image: k8s.gcr.io/pause
  14 │     name: initcontainer1
  15 │     securityContext:
  16 │       allowPrivilegeEscalation: false
  17 └       seLinuxOptions: {}
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod selinuxoptions4 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 selinuxoptions499.yaml:4
────────────────────────────────────────
   4 [   name: selinuxoptions4
────────────────────────────────────────



sem-volume.yaml (kubernetes)
============================
Tests: 131 (SUCCESSES: 96, FAILURES: 35)
Failures: 35 (UNKNOWN: 0, LOW: 21, MEDIUM: 9, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'read' of Pod 'volume-demo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 sem-volume.yaml:13-21
────────────────────────────────────────
  13 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │     name: read
  15 │     imagePullPolicy: Always
  16 │     ports:
  17 │     - containerPort: 8080
  18 │       protocol: TCP
  19 │     env:
  20 │     - name: ASPNETCORE_URLS
  21 └       value: http://*:8080
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'write' of Pod 'volume-demo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 sem-volume.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     imagePullPolicy: Always
  10 │     ports:
  11 │     - containerPort: 80
  12 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'read' of Pod 'volume-demo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 sem-volume.yaml:13-21
────────────────────────────────────────
  13 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │     name: read
  15 │     imagePullPolicy: Always
  16 │     ports:
  17 │     - containerPort: 8080
  18 │       protocol: TCP
  19 │     env:
  20 │     - name: ASPNETCORE_URLS
  21 └       value: http://*:8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'write' of Pod 'volume-demo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 sem-volume.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     imagePullPolicy: Always
  10 │     ports:
  11 │     - containerPort: 80
  12 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'read' of 'pod' 'volume-demo' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 sem-volume.yaml:13-21
────────────────────────────────────────
  13 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │     name: read
  15 │     imagePullPolicy: Always
  16 │     ports:
  17 │     - containerPort: 8080
  18 │       protocol: TCP
  19 │     env:
  20 │     - name: ASPNETCORE_URLS
  21 └       value: http://*:8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'write' of 'pod' 'volume-demo' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 sem-volume.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     imagePullPolicy: Always
  10 │     ports:
  11 │     - containerPort: 80
  12 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'read' of Pod 'volume-demo' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 sem-volume.yaml:13-21
────────────────────────────────────────
  13 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │     name: read
  15 │     imagePullPolicy: Always
  16 │     ports:
  17 │     - containerPort: 8080
  18 │       protocol: TCP
  19 │     env:
  20 │     - name: ASPNETCORE_URLS
  21 └       value: http://*:8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'write' of Pod 'volume-demo' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 sem-volume.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     imagePullPolicy: Always
  10 │     ports:
  11 │     - containerPort: 80
  12 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'read' of Pod 'volume-demo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 sem-volume.yaml:13-21
────────────────────────────────────────
  13 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │     name: read
  15 │     imagePullPolicy: Always
  16 │     ports:
  17 │     - containerPort: 8080
  18 │       protocol: TCP
  19 │     env:
  20 │     - name: ASPNETCORE_URLS
  21 └       value: http://*:8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'write' of Pod 'volume-demo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 sem-volume.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     imagePullPolicy: Always
  10 │     ports:
  11 │     - containerPort: 80
  12 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'read' of Pod 'volume-demo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 sem-volume.yaml:13-21
────────────────────────────────────────
  13 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │     name: read
  15 │     imagePullPolicy: Always
  16 │     ports:
  17 │     - containerPort: 8080
  18 │       protocol: TCP
  19 │     env:
  20 │     - name: ASPNETCORE_URLS
  21 └       value: http://*:8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'write' of Pod 'volume-demo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 sem-volume.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     imagePullPolicy: Always
  10 │     ports:
  11 │     - containerPort: 80
  12 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'read' of Pod 'volume-demo' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 sem-volume.yaml:13-21
────────────────────────────────────────
  13 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │     name: read
  15 │     imagePullPolicy: Always
  16 │     ports:
  17 │     - containerPort: 8080
  18 │       protocol: TCP
  19 │     env:
  20 │     - name: ASPNETCORE_URLS
  21 └       value: http://*:8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'write' of Pod 'volume-demo' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 sem-volume.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     imagePullPolicy: Always
  10 │     ports:
  11 │     - containerPort: 80
  12 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'read' of Pod 'volume-demo' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 sem-volume.yaml:13-21
────────────────────────────────────────
  13 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │     name: read
  15 │     imagePullPolicy: Always
  16 │     ports:
  17 │     - containerPort: 8080
  18 │       protocol: TCP
  19 │     env:
  20 │     - name: ASPNETCORE_URLS
  21 └       value: http://*:8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'write' of Pod 'volume-demo' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 sem-volume.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     imagePullPolicy: Always
  10 │     ports:
  11 │     - containerPort: 80
  12 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'read' of Pod 'volume-demo' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 sem-volume.yaml:13-21
────────────────────────────────────────
  13 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │     name: read
  15 │     imagePullPolicy: Always
  16 │     ports:
  17 │     - containerPort: 8080
  18 │       protocol: TCP
  19 │     env:
  20 │     - name: ASPNETCORE_URLS
  21 └       value: http://*:8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'write' of Pod 'volume-demo' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 sem-volume.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     imagePullPolicy: Always
  10 │     ports:
  11 │     - containerPort: 80
  12 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'read' of Pod 'volume-demo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 sem-volume.yaml:13-21
────────────────────────────────────────
  13 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │     name: read
  15 │     imagePullPolicy: Always
  16 │     ports:
  17 │     - containerPort: 8080
  18 │       protocol: TCP
  19 │     env:
  20 │     - name: ASPNETCORE_URLS
  21 └       value: http://*:8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'write' of Pod 'volume-demo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 sem-volume.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     imagePullPolicy: Always
  10 │     ports:
  11 │     - containerPort: 80
  12 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'read' of Pod 'volume-demo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 sem-volume.yaml:13-21
────────────────────────────────────────
  13 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │     name: read
  15 │     imagePullPolicy: Always
  16 │     ports:
  17 │     - containerPort: 8080
  18 │       protocol: TCP
  19 │     env:
  20 │     - name: ASPNETCORE_URLS
  21 └       value: http://*:8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'write' of Pod 'volume-demo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 sem-volume.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     imagePullPolicy: Always
  10 │     ports:
  11 │     - containerPort: 80
  12 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 sem-volume.yaml:13-21
────────────────────────────────────────
  13 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │     name: read
  15 │     imagePullPolicy: Always
  16 │     ports:
  17 │     - containerPort: 8080
  18 │       protocol: TCP
  19 │     env:
  20 │     - name: ASPNETCORE_URLS
  21 └       value: http://*:8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 sem-volume.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     imagePullPolicy: Always
  10 │     ports:
  11 │     - containerPort: 80
  12 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "read" of pod "volume-demo" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 sem-volume.yaml:13-21
────────────────────────────────────────
  13 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │     name: read
  15 │     imagePullPolicy: Always
  16 │     ports:
  17 │     - containerPort: 8080
  18 │       protocol: TCP
  19 │     env:
  20 │     - name: ASPNETCORE_URLS
  21 └       value: http://*:8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "write" of pod "volume-demo" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 sem-volume.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     imagePullPolicy: Always
  10 │     ports:
  11 │     - containerPort: 80
  12 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 sem-volume.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     imagePullPolicy: Always
  10 │     ports:
  11 │     - containerPort: 80
  12 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 sem-volume.yaml:13-21
────────────────────────────────────────
  13 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │     name: read
  15 │     imagePullPolicy: Always
  16 │     ports:
  17 │     - containerPort: 8080
  18 │       protocol: TCP
  19 │     env:
  20 │     - name: ASPNETCORE_URLS
  21 └       value: http://*:8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod volume-demo in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 sem-volume.yaml:4
────────────────────────────────────────
   4 [   name: volume-demo
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod volume-demo in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container volume-demo in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sem-volume.yaml:13-21
────────────────────────────────────────
  13 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │     name: read
  15 │     imagePullPolicy: Always
  16 │     ports:
  17 │     - containerPort: 8080
  18 │       protocol: TCP
  19 │     env:
  20 │     - name: ASPNETCORE_URLS
  21 └       value: http://*:8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container volume-demo in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sem-volume.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     imagePullPolicy: Always
  10 │     ports:
  11 │     - containerPort: 80
  12 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod volume-demo in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sem-volume.yaml:6-21
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     imagePullPolicy: Always
  10 │     ports:
  11 │     - containerPort: 80
  12 │       protocol: TCP
  13 │   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 └     name: read
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container read in pod volume-demo (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 sem-volume.yaml:13-21
────────────────────────────────────────
  13 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │     name: read
  15 │     imagePullPolicy: Always
  16 │     ports:
  17 │     - containerPort: 8080
  18 │       protocol: TCP
  19 │     env:
  20 │     - name: ASPNETCORE_URLS
  21 └       value: http://*:8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container write in pod volume-demo (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 sem-volume.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     imagePullPolicy: Always
  10 │     ports:
  11 │     - containerPort: 80
  12 └       protocol: TCP
────────────────────────────────────────



sem-volume1.yaml (kubernetes)
=============================
Tests: 131 (SUCCESSES: 96, FAILURES: 35)
Failures: 35 (UNKNOWN: 0, LOW: 21, MEDIUM: 9, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'read' of Pod 'volume-demo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 sem-volume1.yaml:13-21
────────────────────────────────────────
  13 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │     name: read
  15 │     imagePullPolicy: Always
  16 │     ports:
  17 │     - containerPort: 8080
  18 │       protocol: TCP
  19 │     env:
  20 │     - name: ASPNETCORE_URLS
  21 └       value: http://*:8080
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'write' of Pod 'volume-demo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 sem-volume1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     imagePullPolicy: Always
  10 │     ports:
  11 │     - containerPort: 80
  12 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'read' of Pod 'volume-demo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 sem-volume1.yaml:13-21
────────────────────────────────────────
  13 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │     name: read
  15 │     imagePullPolicy: Always
  16 │     ports:
  17 │     - containerPort: 8080
  18 │       protocol: TCP
  19 │     env:
  20 │     - name: ASPNETCORE_URLS
  21 └       value: http://*:8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'write' of Pod 'volume-demo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 sem-volume1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     imagePullPolicy: Always
  10 │     ports:
  11 │     - containerPort: 80
  12 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'read' of 'pod' 'volume-demo' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 sem-volume1.yaml:13-21
────────────────────────────────────────
  13 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │     name: read
  15 │     imagePullPolicy: Always
  16 │     ports:
  17 │     - containerPort: 8080
  18 │       protocol: TCP
  19 │     env:
  20 │     - name: ASPNETCORE_URLS
  21 └       value: http://*:8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'write' of 'pod' 'volume-demo' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 sem-volume1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     imagePullPolicy: Always
  10 │     ports:
  11 │     - containerPort: 80
  12 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'read' of Pod 'volume-demo' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 sem-volume1.yaml:13-21
────────────────────────────────────────
  13 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │     name: read
  15 │     imagePullPolicy: Always
  16 │     ports:
  17 │     - containerPort: 8080
  18 │       protocol: TCP
  19 │     env:
  20 │     - name: ASPNETCORE_URLS
  21 └       value: http://*:8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'write' of Pod 'volume-demo' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 sem-volume1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     imagePullPolicy: Always
  10 │     ports:
  11 │     - containerPort: 80
  12 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'read' of Pod 'volume-demo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 sem-volume1.yaml:13-21
────────────────────────────────────────
  13 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │     name: read
  15 │     imagePullPolicy: Always
  16 │     ports:
  17 │     - containerPort: 8080
  18 │       protocol: TCP
  19 │     env:
  20 │     - name: ASPNETCORE_URLS
  21 └       value: http://*:8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'write' of Pod 'volume-demo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 sem-volume1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     imagePullPolicy: Always
  10 │     ports:
  11 │     - containerPort: 80
  12 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'read' of Pod 'volume-demo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 sem-volume1.yaml:13-21
────────────────────────────────────────
  13 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │     name: read
  15 │     imagePullPolicy: Always
  16 │     ports:
  17 │     - containerPort: 8080
  18 │       protocol: TCP
  19 │     env:
  20 │     - name: ASPNETCORE_URLS
  21 └       value: http://*:8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'write' of Pod 'volume-demo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 sem-volume1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     imagePullPolicy: Always
  10 │     ports:
  11 │     - containerPort: 80
  12 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'read' of Pod 'volume-demo' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 sem-volume1.yaml:13-21
────────────────────────────────────────
  13 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │     name: read
  15 │     imagePullPolicy: Always
  16 │     ports:
  17 │     - containerPort: 8080
  18 │       protocol: TCP
  19 │     env:
  20 │     - name: ASPNETCORE_URLS
  21 └       value: http://*:8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'write' of Pod 'volume-demo' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 sem-volume1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     imagePullPolicy: Always
  10 │     ports:
  11 │     - containerPort: 80
  12 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'read' of Pod 'volume-demo' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 sem-volume1.yaml:13-21
────────────────────────────────────────
  13 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │     name: read
  15 │     imagePullPolicy: Always
  16 │     ports:
  17 │     - containerPort: 8080
  18 │       protocol: TCP
  19 │     env:
  20 │     - name: ASPNETCORE_URLS
  21 └       value: http://*:8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'write' of Pod 'volume-demo' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 sem-volume1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     imagePullPolicy: Always
  10 │     ports:
  11 │     - containerPort: 80
  12 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'read' of Pod 'volume-demo' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 sem-volume1.yaml:13-21
────────────────────────────────────────
  13 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │     name: read
  15 │     imagePullPolicy: Always
  16 │     ports:
  17 │     - containerPort: 8080
  18 │       protocol: TCP
  19 │     env:
  20 │     - name: ASPNETCORE_URLS
  21 └       value: http://*:8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'write' of Pod 'volume-demo' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 sem-volume1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     imagePullPolicy: Always
  10 │     ports:
  11 │     - containerPort: 80
  12 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'read' of Pod 'volume-demo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 sem-volume1.yaml:13-21
────────────────────────────────────────
  13 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │     name: read
  15 │     imagePullPolicy: Always
  16 │     ports:
  17 │     - containerPort: 8080
  18 │       protocol: TCP
  19 │     env:
  20 │     - name: ASPNETCORE_URLS
  21 └       value: http://*:8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'write' of Pod 'volume-demo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 sem-volume1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     imagePullPolicy: Always
  10 │     ports:
  11 │     - containerPort: 80
  12 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'read' of Pod 'volume-demo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 sem-volume1.yaml:13-21
────────────────────────────────────────
  13 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │     name: read
  15 │     imagePullPolicy: Always
  16 │     ports:
  17 │     - containerPort: 8080
  18 │       protocol: TCP
  19 │     env:
  20 │     - name: ASPNETCORE_URLS
  21 └       value: http://*:8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'write' of Pod 'volume-demo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 sem-volume1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     imagePullPolicy: Always
  10 │     ports:
  11 │     - containerPort: 80
  12 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 sem-volume1.yaml:13-21
────────────────────────────────────────
  13 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │     name: read
  15 │     imagePullPolicy: Always
  16 │     ports:
  17 │     - containerPort: 8080
  18 │       protocol: TCP
  19 │     env:
  20 │     - name: ASPNETCORE_URLS
  21 └       value: http://*:8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 sem-volume1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     imagePullPolicy: Always
  10 │     ports:
  11 │     - containerPort: 80
  12 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "read" of pod "volume-demo" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 sem-volume1.yaml:13-21
────────────────────────────────────────
  13 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │     name: read
  15 │     imagePullPolicy: Always
  16 │     ports:
  17 │     - containerPort: 8080
  18 │       protocol: TCP
  19 │     env:
  20 │     - name: ASPNETCORE_URLS
  21 └       value: http://*:8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "write" of pod "volume-demo" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 sem-volume1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     imagePullPolicy: Always
  10 │     ports:
  11 │     - containerPort: 80
  12 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 sem-volume1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     imagePullPolicy: Always
  10 │     ports:
  11 │     - containerPort: 80
  12 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 sem-volume1.yaml:13-21
────────────────────────────────────────
  13 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │     name: read
  15 │     imagePullPolicy: Always
  16 │     ports:
  17 │     - containerPort: 8080
  18 │       protocol: TCP
  19 │     env:
  20 │     - name: ASPNETCORE_URLS
  21 └       value: http://*:8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod volume-demo in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 sem-volume1.yaml:4
────────────────────────────────────────
   4 [   name: volume-demo
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod volume-demo in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container volume-demo in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sem-volume1.yaml:13-21
────────────────────────────────────────
  13 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │     name: read
  15 │     imagePullPolicy: Always
  16 │     ports:
  17 │     - containerPort: 8080
  18 │       protocol: TCP
  19 │     env:
  20 │     - name: ASPNETCORE_URLS
  21 └       value: http://*:8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container volume-demo in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sem-volume1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     imagePullPolicy: Always
  10 │     ports:
  11 │     - containerPort: 80
  12 └       protocol: TCP
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod volume-demo in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sem-volume1.yaml:6-21
────────────────────────────────────────
   6 ┌   containers:
   7 │   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     imagePullPolicy: Always
  10 │     ports:
  11 │     - containerPort: 80
  12 │       protocol: TCP
  13 │   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 └     name: read
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container read in pod volume-demo (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 sem-volume1.yaml:13-21
────────────────────────────────────────
  13 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │     name: read
  15 │     imagePullPolicy: Always
  16 │     ports:
  17 │     - containerPort: 8080
  18 │       protocol: TCP
  19 │     env:
  20 │     - name: ASPNETCORE_URLS
  21 └       value: http://*:8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container write in pod volume-demo (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 sem-volume1.yaml:7-12
────────────────────────────────────────
   7 ┌   - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │     name: write
   9 │     imagePullPolicy: Always
  10 │     ports:
  11 │     - containerPort: 80
  12 └       protocol: TCP
────────────────────────────────────────



sem-volume2.yaml (kubernetes)
=============================
Tests: 131 (SUCCESSES: 96, FAILURES: 35)
Failures: 35 (UNKNOWN: 0, LOW: 21, MEDIUM: 9, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'read' of Pod 'volume-demo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 sem-volume2.yaml:13-21
────────────────────────────────────────
  13 ┌     - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │       name: read
  15 │       imagePullPolicy: Always
  16 │       ports:
  17 │         - containerPort: 8080
  18 │           protocol: TCP
  19 │       env:
  20 │         - name: ASPNETCORE_URLS #Para evitar conflito de porta nos containers, sendo que esta em um unico pod
  21 └           value: http://*:8080
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'write' of Pod 'volume-demo' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 sem-volume2.yaml:7-12
────────────────────────────────────────
   7 ┌     - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │       name: write
   9 │       imagePullPolicy: Always
  10 │       ports:
  11 │         - containerPort: 80
  12 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'read' of Pod 'volume-demo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 sem-volume2.yaml:13-21
────────────────────────────────────────
  13 ┌     - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │       name: read
  15 │       imagePullPolicy: Always
  16 │       ports:
  17 │         - containerPort: 8080
  18 │           protocol: TCP
  19 │       env:
  20 │         - name: ASPNETCORE_URLS #Para evitar conflito de porta nos containers, sendo que esta em um unico pod
  21 └           value: http://*:8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'write' of Pod 'volume-demo' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 sem-volume2.yaml:7-12
────────────────────────────────────────
   7 ┌     - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │       name: write
   9 │       imagePullPolicy: Always
  10 │       ports:
  11 │         - containerPort: 80
  12 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'read' of 'pod' 'volume-demo' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 sem-volume2.yaml:13-21
────────────────────────────────────────
  13 ┌     - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │       name: read
  15 │       imagePullPolicy: Always
  16 │       ports:
  17 │         - containerPort: 8080
  18 │           protocol: TCP
  19 │       env:
  20 │         - name: ASPNETCORE_URLS #Para evitar conflito de porta nos containers, sendo que esta em um unico pod
  21 └           value: http://*:8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'write' of 'pod' 'volume-demo' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 sem-volume2.yaml:7-12
────────────────────────────────────────
   7 ┌     - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │       name: write
   9 │       imagePullPolicy: Always
  10 │       ports:
  11 │         - containerPort: 80
  12 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'read' of Pod 'volume-demo' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 sem-volume2.yaml:13-21
────────────────────────────────────────
  13 ┌     - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │       name: read
  15 │       imagePullPolicy: Always
  16 │       ports:
  17 │         - containerPort: 8080
  18 │           protocol: TCP
  19 │       env:
  20 │         - name: ASPNETCORE_URLS #Para evitar conflito de porta nos containers, sendo que esta em um unico pod
  21 └           value: http://*:8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'write' of Pod 'volume-demo' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 sem-volume2.yaml:7-12
────────────────────────────────────────
   7 ┌     - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │       name: write
   9 │       imagePullPolicy: Always
  10 │       ports:
  11 │         - containerPort: 80
  12 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'read' of Pod 'volume-demo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 sem-volume2.yaml:13-21
────────────────────────────────────────
  13 ┌     - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │       name: read
  15 │       imagePullPolicy: Always
  16 │       ports:
  17 │         - containerPort: 8080
  18 │           protocol: TCP
  19 │       env:
  20 │         - name: ASPNETCORE_URLS #Para evitar conflito de porta nos containers, sendo que esta em um unico pod
  21 └           value: http://*:8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'write' of Pod 'volume-demo' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 sem-volume2.yaml:7-12
────────────────────────────────────────
   7 ┌     - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │       name: write
   9 │       imagePullPolicy: Always
  10 │       ports:
  11 │         - containerPort: 80
  12 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'read' of Pod 'volume-demo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 sem-volume2.yaml:13-21
────────────────────────────────────────
  13 ┌     - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │       name: read
  15 │       imagePullPolicy: Always
  16 │       ports:
  17 │         - containerPort: 8080
  18 │           protocol: TCP
  19 │       env:
  20 │         - name: ASPNETCORE_URLS #Para evitar conflito de porta nos containers, sendo que esta em um unico pod
  21 └           value: http://*:8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'write' of Pod 'volume-demo' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 sem-volume2.yaml:7-12
────────────────────────────────────────
   7 ┌     - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │       name: write
   9 │       imagePullPolicy: Always
  10 │       ports:
  11 │         - containerPort: 80
  12 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'read' of Pod 'volume-demo' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 sem-volume2.yaml:13-21
────────────────────────────────────────
  13 ┌     - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │       name: read
  15 │       imagePullPolicy: Always
  16 │       ports:
  17 │         - containerPort: 8080
  18 │           protocol: TCP
  19 │       env:
  20 │         - name: ASPNETCORE_URLS #Para evitar conflito de porta nos containers, sendo que esta em um unico pod
  21 └           value: http://*:8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'write' of Pod 'volume-demo' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 sem-volume2.yaml:7-12
────────────────────────────────────────
   7 ┌     - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │       name: write
   9 │       imagePullPolicy: Always
  10 │       ports:
  11 │         - containerPort: 80
  12 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'read' of Pod 'volume-demo' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 sem-volume2.yaml:13-21
────────────────────────────────────────
  13 ┌     - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │       name: read
  15 │       imagePullPolicy: Always
  16 │       ports:
  17 │         - containerPort: 8080
  18 │           protocol: TCP
  19 │       env:
  20 │         - name: ASPNETCORE_URLS #Para evitar conflito de porta nos containers, sendo que esta em um unico pod
  21 └           value: http://*:8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'write' of Pod 'volume-demo' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 sem-volume2.yaml:7-12
────────────────────────────────────────
   7 ┌     - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │       name: write
   9 │       imagePullPolicy: Always
  10 │       ports:
  11 │         - containerPort: 80
  12 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'read' of Pod 'volume-demo' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 sem-volume2.yaml:13-21
────────────────────────────────────────
  13 ┌     - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │       name: read
  15 │       imagePullPolicy: Always
  16 │       ports:
  17 │         - containerPort: 8080
  18 │           protocol: TCP
  19 │       env:
  20 │         - name: ASPNETCORE_URLS #Para evitar conflito de porta nos containers, sendo que esta em um unico pod
  21 └           value: http://*:8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'write' of Pod 'volume-demo' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 sem-volume2.yaml:7-12
────────────────────────────────────────
   7 ┌     - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │       name: write
   9 │       imagePullPolicy: Always
  10 │       ports:
  11 │         - containerPort: 80
  12 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'read' of Pod 'volume-demo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 sem-volume2.yaml:13-21
────────────────────────────────────────
  13 ┌     - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │       name: read
  15 │       imagePullPolicy: Always
  16 │       ports:
  17 │         - containerPort: 8080
  18 │           protocol: TCP
  19 │       env:
  20 │         - name: ASPNETCORE_URLS #Para evitar conflito de porta nos containers, sendo que esta em um unico pod
  21 └           value: http://*:8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'write' of Pod 'volume-demo' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 sem-volume2.yaml:7-12
────────────────────────────────────────
   7 ┌     - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │       name: write
   9 │       imagePullPolicy: Always
  10 │       ports:
  11 │         - containerPort: 80
  12 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'read' of Pod 'volume-demo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 sem-volume2.yaml:13-21
────────────────────────────────────────
  13 ┌     - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │       name: read
  15 │       imagePullPolicy: Always
  16 │       ports:
  17 │         - containerPort: 8080
  18 │           protocol: TCP
  19 │       env:
  20 │         - name: ASPNETCORE_URLS #Para evitar conflito de porta nos containers, sendo que esta em um unico pod
  21 └           value: http://*:8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'write' of Pod 'volume-demo' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 sem-volume2.yaml:7-12
────────────────────────────────────────
   7 ┌     - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │       name: write
   9 │       imagePullPolicy: Always
  10 │       ports:
  11 │         - containerPort: 80
  12 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 sem-volume2.yaml:13-21
────────────────────────────────────────
  13 ┌     - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │       name: read
  15 │       imagePullPolicy: Always
  16 │       ports:
  17 │         - containerPort: 8080
  18 │           protocol: TCP
  19 │       env:
  20 │         - name: ASPNETCORE_URLS #Para evitar conflito de porta nos containers, sendo que esta em um unico pod
  21 └           value: http://*:8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 sem-volume2.yaml:7-12
────────────────────────────────────────
   7 ┌     - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │       name: write
   9 │       imagePullPolicy: Always
  10 │       ports:
  11 │         - containerPort: 80
  12 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "read" of pod "volume-demo" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 sem-volume2.yaml:13-21
────────────────────────────────────────
  13 ┌     - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │       name: read
  15 │       imagePullPolicy: Always
  16 │       ports:
  17 │         - containerPort: 8080
  18 │           protocol: TCP
  19 │       env:
  20 │         - name: ASPNETCORE_URLS #Para evitar conflito de porta nos containers, sendo que esta em um unico pod
  21 └           value: http://*:8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "write" of pod "volume-demo" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 sem-volume2.yaml:7-12
────────────────────────────────────────
   7 ┌     - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │       name: write
   9 │       imagePullPolicy: Always
  10 │       ports:
  11 │         - containerPort: 80
  12 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 sem-volume2.yaml:7-12
────────────────────────────────────────
   7 ┌     - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │       name: write
   9 │       imagePullPolicy: Always
  10 │       ports:
  11 │         - containerPort: 80
  12 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 sem-volume2.yaml:13-21
────────────────────────────────────────
  13 ┌     - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │       name: read
  15 │       imagePullPolicy: Always
  16 │       ports:
  17 │         - containerPort: 8080
  18 │           protocol: TCP
  19 │       env:
  20 │         - name: ASPNETCORE_URLS #Para evitar conflito de porta nos containers, sendo que esta em um unico pod
  21 └           value: http://*:8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod volume-demo in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 sem-volume2.yaml:4
────────────────────────────────────────
   4 [   name: volume-demo
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod volume-demo in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container volume-demo in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sem-volume2.yaml:13-21
────────────────────────────────────────
  13 ┌     - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │       name: read
  15 │       imagePullPolicy: Always
  16 │       ports:
  17 │         - containerPort: 8080
  18 │           protocol: TCP
  19 │       env:
  20 │         - name: ASPNETCORE_URLS #Para evitar conflito de porta nos containers, sendo que esta em um unico pod
  21 └           value: http://*:8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container volume-demo in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sem-volume2.yaml:7-12
────────────────────────────────────────
   7 ┌     - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │       name: write
   9 │       imagePullPolicy: Always
  10 │       ports:
  11 │         - containerPort: 80
  12 └           protocol: TCP
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod volume-demo in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sem-volume2.yaml:6-21
────────────────────────────────────────
   6 ┌   containers:
   7 │     - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │       name: write
   9 │       imagePullPolicy: Always
  10 │       ports:
  11 │         - containerPort: 80
  12 │           protocol: TCP
  13 │     - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 └       name: read
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container read in pod volume-demo (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 sem-volume2.yaml:13-21
────────────────────────────────────────
  13 ┌     - image: desenvolvedorio/dominando-kubernetes:volume-demo-read
  14 │       name: read
  15 │       imagePullPolicy: Always
  16 │       ports:
  17 │         - containerPort: 8080
  18 │           protocol: TCP
  19 │       env:
  20 │         - name: ASPNETCORE_URLS #Para evitar conflito de porta nos containers, sendo que esta em um unico pod
  21 └           value: http://*:8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container write in pod volume-demo (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 sem-volume2.yaml:7-12
────────────────────────────────────────
   7 ┌     - image: desenvolvedorio/dominando-kubernetes:volume-demo-create
   8 │       name: write
   9 │       imagePullPolicy: Always
  10 │       ports:
  11 │         - containerPort: 80
  12 └           protocol: TCP
────────────────────────────────────────



semaphore-deployment.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'semaphore' of Deployment 'semaphore' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 semaphore-deployment.yaml:18-73
────────────────────────────────────────
  18 ┌         - env:
  19 │             - name: SEMAPHORE_ACCESS_KEY_ENCRYPTION
  20 │               value: gs72mPntFATGJs9qK0pQ0rKtfidlexiMjYCH9gWKhTU=
  21 │             - name: SEMAPHORE_ADMIN
  22 │               value: admin
  23 │             - name: SEMAPHORE_ADMIN_EMAIL
  24 │               value: admin@localhost
  25 │             - name: SEMAPHORE_ADMIN_NAME
  26 └               value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'semaphore' of Deployment 'semaphore' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 semaphore-deployment.yaml:18-73
────────────────────────────────────────
  18 ┌         - env:
  19 │             - name: SEMAPHORE_ACCESS_KEY_ENCRYPTION
  20 │               value: gs72mPntFATGJs9qK0pQ0rKtfidlexiMjYCH9gWKhTU=
  21 │             - name: SEMAPHORE_ADMIN
  22 │               value: admin
  23 │             - name: SEMAPHORE_ADMIN_EMAIL
  24 │               value: admin@localhost
  25 │             - name: SEMAPHORE_ADMIN_NAME
  26 └               value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'semaphore' of 'deployment' 'semaphore' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 semaphore-deployment.yaml:18-73
────────────────────────────────────────
  18 ┌         - env:
  19 │             - name: SEMAPHORE_ACCESS_KEY_ENCRYPTION
  20 │               value: gs72mPntFATGJs9qK0pQ0rKtfidlexiMjYCH9gWKhTU=
  21 │             - name: SEMAPHORE_ADMIN
  22 │               value: admin
  23 │             - name: SEMAPHORE_ADMIN_EMAIL
  24 │               value: admin@localhost
  25 │             - name: SEMAPHORE_ADMIN_NAME
  26 └               value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'semaphore' of Deployment 'semaphore' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 semaphore-deployment.yaml:18-73
────────────────────────────────────────
  18 ┌         - env:
  19 │             - name: SEMAPHORE_ACCESS_KEY_ENCRYPTION
  20 │               value: gs72mPntFATGJs9qK0pQ0rKtfidlexiMjYCH9gWKhTU=
  21 │             - name: SEMAPHORE_ADMIN
  22 │               value: admin
  23 │             - name: SEMAPHORE_ADMIN_EMAIL
  24 │               value: admin@localhost
  25 │             - name: SEMAPHORE_ADMIN_NAME
  26 └               value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'semaphore' of Deployment 'semaphore' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 semaphore-deployment.yaml:18-73
────────────────────────────────────────
  18 ┌         - env:
  19 │             - name: SEMAPHORE_ACCESS_KEY_ENCRYPTION
  20 │               value: gs72mPntFATGJs9qK0pQ0rKtfidlexiMjYCH9gWKhTU=
  21 │             - name: SEMAPHORE_ADMIN
  22 │               value: admin
  23 │             - name: SEMAPHORE_ADMIN_EMAIL
  24 │               value: admin@localhost
  25 │             - name: SEMAPHORE_ADMIN_NAME
  26 └               value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'semaphore' of Deployment 'semaphore' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 semaphore-deployment.yaml:18-73
────────────────────────────────────────
  18 ┌         - env:
  19 │             - name: SEMAPHORE_ACCESS_KEY_ENCRYPTION
  20 │               value: gs72mPntFATGJs9qK0pQ0rKtfidlexiMjYCH9gWKhTU=
  21 │             - name: SEMAPHORE_ADMIN
  22 │               value: admin
  23 │             - name: SEMAPHORE_ADMIN_EMAIL
  24 │               value: admin@localhost
  25 │             - name: SEMAPHORE_ADMIN_NAME
  26 └               value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'semaphore' of Deployment 'semaphore' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 semaphore-deployment.yaml:18-73
────────────────────────────────────────
  18 ┌         - env:
  19 │             - name: SEMAPHORE_ACCESS_KEY_ENCRYPTION
  20 │               value: gs72mPntFATGJs9qK0pQ0rKtfidlexiMjYCH9gWKhTU=
  21 │             - name: SEMAPHORE_ADMIN
  22 │               value: admin
  23 │             - name: SEMAPHORE_ADMIN_EMAIL
  24 │               value: admin@localhost
  25 │             - name: SEMAPHORE_ADMIN_NAME
  26 └               value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'semaphore' of Deployment 'semaphore' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 semaphore-deployment.yaml:18-73
────────────────────────────────────────
  18 ┌         - env:
  19 │             - name: SEMAPHORE_ACCESS_KEY_ENCRYPTION
  20 │               value: gs72mPntFATGJs9qK0pQ0rKtfidlexiMjYCH9gWKhTU=
  21 │             - name: SEMAPHORE_ADMIN
  22 │               value: admin
  23 │             - name: SEMAPHORE_ADMIN_EMAIL
  24 │               value: admin@localhost
  25 │             - name: SEMAPHORE_ADMIN_NAME
  26 └               value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'semaphore' of Deployment 'semaphore' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 semaphore-deployment.yaml:18-73
────────────────────────────────────────
  18 ┌         - env:
  19 │             - name: SEMAPHORE_ACCESS_KEY_ENCRYPTION
  20 │               value: gs72mPntFATGJs9qK0pQ0rKtfidlexiMjYCH9gWKhTU=
  21 │             - name: SEMAPHORE_ADMIN
  22 │               value: admin
  23 │             - name: SEMAPHORE_ADMIN_EMAIL
  24 │               value: admin@localhost
  25 │             - name: SEMAPHORE_ADMIN_NAME
  26 └               value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 semaphore-deployment.yaml:18-73
────────────────────────────────────────
  18 ┌         - env:
  19 │             - name: SEMAPHORE_ACCESS_KEY_ENCRYPTION
  20 │               value: gs72mPntFATGJs9qK0pQ0rKtfidlexiMjYCH9gWKhTU=
  21 │             - name: SEMAPHORE_ADMIN
  22 │               value: admin
  23 │             - name: SEMAPHORE_ADMIN_EMAIL
  24 │               value: admin@localhost
  25 │             - name: SEMAPHORE_ADMIN_NAME
  26 └               value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "semaphore" of deployment "semaphore" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 semaphore-deployment.yaml:18-73
────────────────────────────────────────
  18 ┌         - env:
  19 │             - name: SEMAPHORE_ACCESS_KEY_ENCRYPTION
  20 │               value: gs72mPntFATGJs9qK0pQ0rKtfidlexiMjYCH9gWKhTU=
  21 │             - name: SEMAPHORE_ADMIN
  22 │               value: admin
  23 │             - name: SEMAPHORE_ADMIN_EMAIL
  24 │               value: admin@localhost
  25 │             - name: SEMAPHORE_ADMIN_NAME
  26 └               value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 semaphore-deployment.yaml:18-73
────────────────────────────────────────
  18 ┌         - env:
  19 │             - name: SEMAPHORE_ACCESS_KEY_ENCRYPTION
  20 │               value: gs72mPntFATGJs9qK0pQ0rKtfidlexiMjYCH9gWKhTU=
  21 │             - name: SEMAPHORE_ADMIN
  22 │               value: admin
  23 │             - name: SEMAPHORE_ADMIN_EMAIL
  24 │               value: admin@localhost
  25 │             - name: SEMAPHORE_ADMIN_NAME
  26 └               value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment semaphore in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 semaphore-deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: semaphore
   6 └   name: semaphore
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container semaphore in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 semaphore-deployment.yaml:18-73
────────────────────────────────────────
  18 ┌         - env:
  19 │             - name: SEMAPHORE_ACCESS_KEY_ENCRYPTION
  20 │               value: gs72mPntFATGJs9qK0pQ0rKtfidlexiMjYCH9gWKhTU=
  21 │             - name: SEMAPHORE_ADMIN
  22 │               value: admin
  23 │             - name: SEMAPHORE_ADMIN_EMAIL
  24 │               value: admin@localhost
  25 │             - name: SEMAPHORE_ADMIN_NAME
  26 └               value: admin
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment semaphore in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 semaphore-deployment.yaml:17-74
────────────────────────────────────────
  17 ┌       containers:
  18 │         - env:
  19 │             - name: SEMAPHORE_ACCESS_KEY_ENCRYPTION
  20 │               value: gs72mPntFATGJs9qK0pQ0rKtfidlexiMjYCH9gWKhTU=
  21 │             - name: SEMAPHORE_ADMIN
  22 │               value: admin
  23 │             - name: SEMAPHORE_ADMIN_EMAIL
  24 │               value: admin@localhost
  25 └             - name: SEMAPHORE_ADMIN_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container semaphore in deployment semaphore (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 semaphore-deployment.yaml:18-73
────────────────────────────────────────
  18 ┌         - env:
  19 │             - name: SEMAPHORE_ACCESS_KEY_ENCRYPTION
  20 │               value: gs72mPntFATGJs9qK0pQ0rKtfidlexiMjYCH9gWKhTU=
  21 │             - name: SEMAPHORE_ADMIN
  22 │               value: admin
  23 │             - name: SEMAPHORE_ADMIN_EMAIL
  24 │               value: admin@localhost
  25 │             - name: SEMAPHORE_ADMIN_NAME
  26 └               value: admin
  ..   
────────────────────────────────────────



semaphore1_1.yaml (kubernetes)
==============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'semaphore' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



senario11.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'frontend' of ReplicationController 'frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 senario11.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'frontend' of ReplicationController 'frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 senario11.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'frontend' of 'replicationcontroller' 'frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 senario11.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'frontend' of ReplicationController 'frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 senario11.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'frontend' of ReplicationController 'frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 senario11.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'frontend' of ReplicationController 'frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 senario11.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'frontend' of ReplicationController 'frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 senario11.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'frontend' of ReplicationController 'frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 senario11.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'frontend' of ReplicationController 'frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 senario11.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'frontend' of ReplicationController 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 senario11.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'frontend' of ReplicationController 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 senario11.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 senario11.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "frontend" of replicationcontroller "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 senario11.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 senario11.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 senario11.yaml:4-6
────────────────────────────────────────
   4 ┌   name: frontend
   5 │   labels:
   6 └     name: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 senario11.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 senario11.yaml:16-30
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 └           timeoutSeconds: 1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container frontend in replicationcontroller frontend (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 senario11.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────



senario11_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'bad-frontend' of ReplicationController 'bad-frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 senario11_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'bad-frontend' of ReplicationController 'bad-frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 senario11_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'bad-frontend' of 'replicationcontroller' 'bad-frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 senario11_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'bad-frontend' of ReplicationController 'bad-frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 senario11_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'bad-frontend' of ReplicationController 'bad-frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 senario11_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'bad-frontend' of ReplicationController 'bad-frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 senario11_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'bad-frontend' of ReplicationController 'bad-frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 senario11_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'bad-frontend' of ReplicationController 'bad-frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 senario11_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'bad-frontend' of ReplicationController 'bad-frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 senario11_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'bad-frontend' of ReplicationController 'bad-frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 senario11_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'bad-frontend' of ReplicationController 'bad-frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 senario11_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 senario11_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "bad-frontend" of replicationcontroller "bad-frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 senario11_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 senario11_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller bad-frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 senario11_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: bad-frontend
   5 │   labels:
   6 └     name: bad-frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container bad-frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 senario11_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller bad-frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 senario11_1.yaml:16-30
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 └           timeoutSeconds: 1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container bad-frontend in replicationcontroller bad-frontend (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 senario11_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────



senario13.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'frontend' of ReplicationController 'frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 senario13.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'frontend' of ReplicationController 'frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 senario13.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'frontend' of 'replicationcontroller' 'frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 senario13.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'frontend' of ReplicationController 'frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 senario13.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'frontend' of ReplicationController 'frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 senario13.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'frontend' of ReplicationController 'frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 senario13.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'frontend' of ReplicationController 'frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 senario13.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'frontend' of ReplicationController 'frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 senario13.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'frontend' of ReplicationController 'frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 senario13.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'frontend' of ReplicationController 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 senario13.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'frontend' of ReplicationController 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 senario13.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 senario13.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "frontend" of replicationcontroller "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 senario13.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 senario13.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 senario13.yaml:4-6
────────────────────────────────────────
   4 ┌   name: frontend
   5 │   labels:
   6 └     name: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 senario13.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 senario13.yaml:16-30
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 └           timeoutSeconds: 1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container frontend in replicationcontroller frontend (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 senario13.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────



senario13_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'bad-frontend' of ReplicationController 'bad-frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 senario13_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'bad-frontend' of ReplicationController 'bad-frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 senario13_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'bad-frontend' of 'replicationcontroller' 'bad-frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 senario13_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'bad-frontend' of ReplicationController 'bad-frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 senario13_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'bad-frontend' of ReplicationController 'bad-frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 senario13_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'bad-frontend' of ReplicationController 'bad-frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 senario13_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'bad-frontend' of ReplicationController 'bad-frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 senario13_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'bad-frontend' of ReplicationController 'bad-frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 senario13_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'bad-frontend' of ReplicationController 'bad-frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 senario13_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'bad-frontend' of ReplicationController 'bad-frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 senario13_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'bad-frontend' of ReplicationController 'bad-frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 senario13_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 senario13_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "bad-frontend" of replicationcontroller "bad-frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 senario13_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 senario13_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller bad-frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 senario13_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: bad-frontend
   5 │   labels:
   6 └     name: bad-frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container bad-frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 senario13_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller bad-frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 senario13_1.yaml:16-30
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 └           timeoutSeconds: 1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container bad-frontend in replicationcontroller bad-frontend (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 senario13_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────



senario15.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'frontend' of ReplicationController 'frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 senario15.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'frontend' of ReplicationController 'frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 senario15.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'frontend' of 'replicationcontroller' 'frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 senario15.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'frontend' of ReplicationController 'frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 senario15.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'frontend' of ReplicationController 'frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 senario15.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'frontend' of ReplicationController 'frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 senario15.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'frontend' of ReplicationController 'frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 senario15.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'frontend' of ReplicationController 'frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 senario15.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'frontend' of ReplicationController 'frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 senario15.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'frontend' of ReplicationController 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 senario15.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'frontend' of ReplicationController 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 senario15.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 senario15.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "frontend" of replicationcontroller "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 senario15.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 senario15.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 senario15.yaml:4-6
────────────────────────────────────────
   4 ┌   name: frontend
   5 │   labels:
   6 └     name: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 senario15.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 senario15.yaml:16-30
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 └           timeoutSeconds: 1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container frontend in replicationcontroller frontend (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 senario15.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────



senario15_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'bad-frontend' of ReplicationController 'bad-frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 senario15_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'bad-frontend' of ReplicationController 'bad-frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 senario15_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'bad-frontend' of 'replicationcontroller' 'bad-frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 senario15_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'bad-frontend' of ReplicationController 'bad-frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 senario15_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'bad-frontend' of ReplicationController 'bad-frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 senario15_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'bad-frontend' of ReplicationController 'bad-frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 senario15_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'bad-frontend' of ReplicationController 'bad-frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 senario15_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'bad-frontend' of ReplicationController 'bad-frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 senario15_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'bad-frontend' of ReplicationController 'bad-frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 senario15_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'bad-frontend' of ReplicationController 'bad-frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 senario15_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'bad-frontend' of ReplicationController 'bad-frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 senario15_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 senario15_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "bad-frontend" of replicationcontroller "bad-frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 senario15_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 senario15_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller bad-frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 senario15_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: bad-frontend
   5 │   labels:
   6 └     name: bad-frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container bad-frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 senario15_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller bad-frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 senario15_1.yaml:16-30
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 └           timeoutSeconds: 1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container bad-frontend in replicationcontroller bad-frontend (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 senario15_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────



senario17.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'frontend' of ReplicationController 'frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 senario17.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'frontend' of ReplicationController 'frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 senario17.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'frontend' of 'replicationcontroller' 'frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 senario17.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'frontend' of ReplicationController 'frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 senario17.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'frontend' of ReplicationController 'frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 senario17.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'frontend' of ReplicationController 'frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 senario17.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'frontend' of ReplicationController 'frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 senario17.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'frontend' of ReplicationController 'frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 senario17.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'frontend' of ReplicationController 'frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 senario17.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'frontend' of ReplicationController 'frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 senario17.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'frontend' of ReplicationController 'frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 senario17.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 senario17.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "frontend" of replicationcontroller "frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 senario17.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 senario17.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 senario17.yaml:4-6
────────────────────────────────────────
   4 ┌   name: frontend
   5 │   labels:
   6 └     name: frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 senario17.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 senario17.yaml:16-30
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 └           timeoutSeconds: 1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container frontend in replicationcontroller frontend (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 senario17.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: frontend
  18 │         image: katacoda/docker-http-server:health
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────



senario17_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'bad-frontend' of ReplicationController 'bad-frontend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 senario17_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'bad-frontend' of ReplicationController 'bad-frontend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 senario17_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'bad-frontend' of 'replicationcontroller' 'bad-frontend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 senario17_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'bad-frontend' of ReplicationController 'bad-frontend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 senario17_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'bad-frontend' of ReplicationController 'bad-frontend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 senario17_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'bad-frontend' of ReplicationController 'bad-frontend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 senario17_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'bad-frontend' of ReplicationController 'bad-frontend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 senario17_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'bad-frontend' of ReplicationController 'bad-frontend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 senario17_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'bad-frontend' of ReplicationController 'bad-frontend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 senario17_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'bad-frontend' of ReplicationController 'bad-frontend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 senario17_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'bad-frontend' of ReplicationController 'bad-frontend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 senario17_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 senario17_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "bad-frontend" of replicationcontroller "bad-frontend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 senario17_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 senario17_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): replicationcontroller bad-frontend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 senario17_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: bad-frontend
   5 │   labels:
   6 └     name: bad-frontend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container bad-frontend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 senario17_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): replicationcontroller bad-frontend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 senario17_1.yaml:16-30
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 └           timeoutSeconds: 1
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container bad-frontend in replicationcontroller bad-frontend (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 senario17_1.yaml:17-30
────────────────────────────────────────
  17 ┌       - name: bad-frontend
  18 │         image: katacoda/docker-http-server:unhealthy
  19 │         readinessProbe:
  20 │           httpGet:
  21 │             path: /
  22 │             port: 80
  23 │           initialDelaySeconds: 1
  24 │           timeoutSeconds: 1
  25 └         livenessProbe:
  ..   
────────────────────────────────────────



send_mail.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'send-mail' of Deployment 'send-mail-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 send_mail.yaml:16-35
────────────────────────────────────────
  16 ┌       - name: send-mail
  17 │         image: hasanasif/send-mail
  18 │         ports:
  19 │         - containerPort: 5001
  20 │         env:
  21 │         - name: SMTP_USERNAME
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: smtp-secret
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'send-mail' of Deployment 'send-mail-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 send_mail.yaml:16-35
────────────────────────────────────────
  16 ┌       - name: send-mail
  17 │         image: hasanasif/send-mail
  18 │         ports:
  19 │         - containerPort: 5001
  20 │         env:
  21 │         - name: SMTP_USERNAME
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: smtp-secret
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'send-mail' of 'deployment' 'send-mail-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 send_mail.yaml:16-35
────────────────────────────────────────
  16 ┌       - name: send-mail
  17 │         image: hasanasif/send-mail
  18 │         ports:
  19 │         - containerPort: 5001
  20 │         env:
  21 │         - name: SMTP_USERNAME
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: smtp-secret
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'send-mail' of Deployment 'send-mail-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 send_mail.yaml:16-35
────────────────────────────────────────
  16 ┌       - name: send-mail
  17 │         image: hasanasif/send-mail
  18 │         ports:
  19 │         - containerPort: 5001
  20 │         env:
  21 │         - name: SMTP_USERNAME
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: smtp-secret
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'send-mail' of Deployment 'send-mail-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 send_mail.yaml:16-35
────────────────────────────────────────
  16 ┌       - name: send-mail
  17 │         image: hasanasif/send-mail
  18 │         ports:
  19 │         - containerPort: 5001
  20 │         env:
  21 │         - name: SMTP_USERNAME
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: smtp-secret
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'send-mail' of Deployment 'send-mail-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 send_mail.yaml:16-35
────────────────────────────────────────
  16 ┌       - name: send-mail
  17 │         image: hasanasif/send-mail
  18 │         ports:
  19 │         - containerPort: 5001
  20 │         env:
  21 │         - name: SMTP_USERNAME
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: smtp-secret
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'send-mail' of Deployment 'send-mail-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 send_mail.yaml:16-35
────────────────────────────────────────
  16 ┌       - name: send-mail
  17 │         image: hasanasif/send-mail
  18 │         ports:
  19 │         - containerPort: 5001
  20 │         env:
  21 │         - name: SMTP_USERNAME
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: smtp-secret
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'send-mail' of Deployment 'send-mail-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 send_mail.yaml:16-35
────────────────────────────────────────
  16 ┌       - name: send-mail
  17 │         image: hasanasif/send-mail
  18 │         ports:
  19 │         - containerPort: 5001
  20 │         env:
  21 │         - name: SMTP_USERNAME
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: smtp-secret
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'send-mail' of Deployment 'send-mail-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 send_mail.yaml:16-35
────────────────────────────────────────
  16 ┌       - name: send-mail
  17 │         image: hasanasif/send-mail
  18 │         ports:
  19 │         - containerPort: 5001
  20 │         env:
  21 │         - name: SMTP_USERNAME
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: smtp-secret
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'send-mail' of Deployment 'send-mail-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 send_mail.yaml:16-35
────────────────────────────────────────
  16 ┌       - name: send-mail
  17 │         image: hasanasif/send-mail
  18 │         ports:
  19 │         - containerPort: 5001
  20 │         env:
  21 │         - name: SMTP_USERNAME
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: smtp-secret
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'send-mail' of Deployment 'send-mail-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 send_mail.yaml:16-35
────────────────────────────────────────
  16 ┌       - name: send-mail
  17 │         image: hasanasif/send-mail
  18 │         ports:
  19 │         - containerPort: 5001
  20 │         env:
  21 │         - name: SMTP_USERNAME
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: smtp-secret
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'send-mail' of Deployment 'send-mail-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 send_mail.yaml:16-35
────────────────────────────────────────
  16 ┌       - name: send-mail
  17 │         image: hasanasif/send-mail
  18 │         ports:
  19 │         - containerPort: 5001
  20 │         env:
  21 │         - name: SMTP_USERNAME
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: smtp-secret
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 send_mail.yaml:16-35
────────────────────────────────────────
  16 ┌       - name: send-mail
  17 │         image: hasanasif/send-mail
  18 │         ports:
  19 │         - containerPort: 5001
  20 │         env:
  21 │         - name: SMTP_USERNAME
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: smtp-secret
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "send-mail" of deployment "send-mail-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 send_mail.yaml:16-35
────────────────────────────────────────
  16 ┌       - name: send-mail
  17 │         image: hasanasif/send-mail
  18 │         ports:
  19 │         - containerPort: 5001
  20 │         env:
  21 │         - name: SMTP_USERNAME
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: smtp-secret
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 send_mail.yaml:16-35
────────────────────────────────────────
  16 ┌       - name: send-mail
  17 │         image: hasanasif/send-mail
  18 │         ports:
  19 │         - containerPort: 5001
  20 │         env:
  21 │         - name: SMTP_USERNAME
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: smtp-secret
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment send-mail-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 send_mail.yaml:4
────────────────────────────────────────
   4 [   name: send-mail-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container send-mail-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 send_mail.yaml:16-35
────────────────────────────────────────
  16 ┌       - name: send-mail
  17 │         image: hasanasif/send-mail
  18 │         ports:
  19 │         - containerPort: 5001
  20 │         env:
  21 │         - name: SMTP_USERNAME
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: smtp-secret
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment send-mail-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 send_mail.yaml:15-35
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: send-mail
  17 │         image: hasanasif/send-mail
  18 │         ports:
  19 │         - containerPort: 5001
  20 │         env:
  21 │         - name: SMTP_USERNAME
  22 │           valueFrom:
  23 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container send-mail in deployment send-mail-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 send_mail.yaml:16-35
────────────────────────────────────────
  16 ┌       - name: send-mail
  17 │         image: hasanasif/send-mail
  18 │         ports:
  19 │         - containerPort: 5001
  20 │         env:
  21 │         - name: SMTP_USERNAME
  22 │           valueFrom:
  23 │             secretKeyRef:
  24 └               name: smtp-secret
  ..   
────────────────────────────────────────



senior-deployment.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'senior-app' of Deployment 'senior-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 senior-deployment.yaml:16-36
────────────────────────────────────────
  16 ┌         - name: senior-app 
  17 │           image: senior-app:v1
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: PORT
  22 │               value: "3000"
  23 │             - name: SESSION_SECRET
  24 └               value: "secret$%^134"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'senior-app' of Deployment 'senior-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 senior-deployment.yaml:16-36
────────────────────────────────────────
  16 ┌         - name: senior-app 
  17 │           image: senior-app:v1
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: PORT
  22 │               value: "3000"
  23 │             - name: SESSION_SECRET
  24 └               value: "secret$%^134"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'senior-app' of 'deployment' 'senior-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 senior-deployment.yaml:16-36
────────────────────────────────────────
  16 ┌         - name: senior-app 
  17 │           image: senior-app:v1
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: PORT
  22 │               value: "3000"
  23 │             - name: SESSION_SECRET
  24 └               value: "secret$%^134"
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'senior-app' of Deployment 'senior-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 senior-deployment.yaml:16-36
────────────────────────────────────────
  16 ┌         - name: senior-app 
  17 │           image: senior-app:v1
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: PORT
  22 │               value: "3000"
  23 │             - name: SESSION_SECRET
  24 └               value: "secret$%^134"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'senior-app' of Deployment 'senior-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 senior-deployment.yaml:16-36
────────────────────────────────────────
  16 ┌         - name: senior-app 
  17 │           image: senior-app:v1
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: PORT
  22 │               value: "3000"
  23 │             - name: SESSION_SECRET
  24 └               value: "secret$%^134"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'senior-app' of Deployment 'senior-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 senior-deployment.yaml:16-36
────────────────────────────────────────
  16 ┌         - name: senior-app 
  17 │           image: senior-app:v1
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: PORT
  22 │               value: "3000"
  23 │             - name: SESSION_SECRET
  24 └               value: "secret$%^134"
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'senior-app' of Deployment 'senior-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 senior-deployment.yaml:16-36
────────────────────────────────────────
  16 ┌         - name: senior-app 
  17 │           image: senior-app:v1
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: PORT
  22 │               value: "3000"
  23 │             - name: SESSION_SECRET
  24 └               value: "secret$%^134"
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'senior-app' of Deployment 'senior-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 senior-deployment.yaml:16-36
────────────────────────────────────────
  16 ┌         - name: senior-app 
  17 │           image: senior-app:v1
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: PORT
  22 │               value: "3000"
  23 │             - name: SESSION_SECRET
  24 └               value: "secret$%^134"
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'senior-app' of Deployment 'senior-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 senior-deployment.yaml:16-36
────────────────────────────────────────
  16 ┌         - name: senior-app 
  17 │           image: senior-app:v1
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: PORT
  22 │               value: "3000"
  23 │             - name: SESSION_SECRET
  24 └               value: "secret$%^134"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'senior-app' of Deployment 'senior-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 senior-deployment.yaml:16-36
────────────────────────────────────────
  16 ┌         - name: senior-app 
  17 │           image: senior-app:v1
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: PORT
  22 │               value: "3000"
  23 │             - name: SESSION_SECRET
  24 └               value: "secret$%^134"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'senior-app' of Deployment 'senior-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 senior-deployment.yaml:16-36
────────────────────────────────────────
  16 ┌         - name: senior-app 
  17 │           image: senior-app:v1
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: PORT
  22 │               value: "3000"
  23 │             - name: SESSION_SECRET
  24 └               value: "secret$%^134"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 senior-deployment.yaml:16-36
────────────────────────────────────────
  16 ┌         - name: senior-app 
  17 │           image: senior-app:v1
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: PORT
  22 │               value: "3000"
  23 │             - name: SESSION_SECRET
  24 └               value: "secret$%^134"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "senior-app" of deployment "senior-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 senior-deployment.yaml:16-36
────────────────────────────────────────
  16 ┌         - name: senior-app 
  17 │           image: senior-app:v1
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: PORT
  22 │               value: "3000"
  23 │             - name: SESSION_SECRET
  24 └               value: "secret$%^134"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 senior-deployment.yaml:16-36
────────────────────────────────────────
  16 ┌         - name: senior-app 
  17 │           image: senior-app:v1
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: PORT
  22 │               value: "3000"
  23 │             - name: SESSION_SECRET
  24 └               value: "secret$%^134"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment senior-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 senior-deployment.yaml:4
────────────────────────────────────────
   4 [   name: senior-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container senior-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 senior-deployment.yaml:16-36
────────────────────────────────────────
  16 ┌         - name: senior-app 
  17 │           image: senior-app:v1
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: PORT
  22 │               value: "3000"
  23 │             - name: SESSION_SECRET
  24 └               value: "secret$%^134"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment senior-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 senior-deployment.yaml:15-36
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: senior-app 
  17 │           image: senior-app:v1
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: PORT
  22 │               value: "3000"
  23 └             - name: SESSION_SECRET
  ..   
────────────────────────────────────────



senior.yaml (kubernetes)
========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0112 (CRITICAL): Role 'senior-test' shouldn't manage all resources at the namespace 'test'
════════════════════════════════════════
Full control of the resources within a namespace.  In some cluster configurations, this is excessive. In others, this is normal (a gitops deployment operator like flux)

See https://avd.aquasec.com/misconfig/ksv112
────────────────────────────────────────
 senior.yaml:7-12
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - '*'
  11 │   verbs:
  12 └   - '*'
────────────────────────────────────────



senior1.yaml (kubernetes)
=========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0112 (CRITICAL): Role 'senior-test' shouldn't manage all resources at the namespace 'test'
════════════════════════════════════════
Full control of the resources within a namespace.  In some cluster configurations, this is excessive. In others, this is normal (a gitops deployment operator like flux)

See https://avd.aquasec.com/misconfig/ksv112
────────────────────────────────────────
 senior1.yaml:7-12
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - '*'
  11 │   verbs:
  12 └   - '*'
────────────────────────────────────────



senior1_1.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0112 (CRITICAL): Role 'senior-production' shouldn't manage all resources at the namespace 'production'
════════════════════════════════════════
Full control of the resources within a namespace.  In some cluster configurations, this is excessive. In others, this is normal (a gitops deployment operator like flux)

See https://avd.aquasec.com/misconfig/ksv112
────────────────────────────────────────
 senior1_1.yaml:7-12
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - '*'
  11 │   verbs:
  12 └   - '*'
────────────────────────────────────────



senior1_4.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'senior-resource' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 senior1_4.yaml:6-12
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - '*'
  10 │   verbs:
  11 │   - get
  12 └   - list
────────────────────────────────────────



senior_1.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0112 (CRITICAL): Role 'senior-production' shouldn't manage all resources at the namespace 'production'
════════════════════════════════════════
Full control of the resources within a namespace.  In some cluster configurations, this is excessive. In others, this is normal (a gitops deployment operator like flux)

See https://avd.aquasec.com/misconfig/ksv112
────────────────────────────────────────
 senior_1.yaml:7-12
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - '*'
  11 │   verbs:
  12 └   - '*'
────────────────────────────────────────



senior_4.yaml (kubernetes)
==========================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'senior-resource' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 senior_4.yaml:6-12
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - '*'
  10 │   verbs:
  11 │   - get
  12 └   - list
────────────────────────────────────────



sentiment-classification.yaml (kubernetes)
==========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'sentiment-classification' of Deployment 'sentiment-classification' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 sentiment-classification.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: sentiment-classification
  17 │         image: quay.io/codait/max-text-sentiment-classifier:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sentiment-classification' of Deployment 'sentiment-classification' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 sentiment-classification.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: sentiment-classification
  17 │         image: quay.io/codait/max-text-sentiment-classifier:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sentiment-classification' of 'deployment' 'sentiment-classification' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 sentiment-classification.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: sentiment-classification
  17 │         image: quay.io/codait/max-text-sentiment-classifier:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sentiment-classification' of Deployment 'sentiment-classification' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 sentiment-classification.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: sentiment-classification
  17 │         image: quay.io/codait/max-text-sentiment-classifier:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sentiment-classification' of Deployment 'sentiment-classification' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 sentiment-classification.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: sentiment-classification
  17 │         image: quay.io/codait/max-text-sentiment-classifier:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'sentiment-classification' of Deployment 'sentiment-classification' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 sentiment-classification.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: sentiment-classification
  17 │         image: quay.io/codait/max-text-sentiment-classifier:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sentiment-classification' of Deployment 'sentiment-classification' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 sentiment-classification.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: sentiment-classification
  17 │         image: quay.io/codait/max-text-sentiment-classifier:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sentiment-classification' of Deployment 'sentiment-classification' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 sentiment-classification.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: sentiment-classification
  17 │         image: quay.io/codait/max-text-sentiment-classifier:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sentiment-classification' of Deployment 'sentiment-classification' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 sentiment-classification.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: sentiment-classification
  17 │         image: quay.io/codait/max-text-sentiment-classifier:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sentiment-classification' of Deployment 'sentiment-classification' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 sentiment-classification.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: sentiment-classification
  17 │         image: quay.io/codait/max-text-sentiment-classifier:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sentiment-classification' of Deployment 'sentiment-classification' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 sentiment-classification.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: sentiment-classification
  17 │         image: quay.io/codait/max-text-sentiment-classifier:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sentiment-classification' of Deployment 'sentiment-classification' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 sentiment-classification.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: sentiment-classification
  17 │         image: quay.io/codait/max-text-sentiment-classifier:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 sentiment-classification.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: sentiment-classification
  17 │         image: quay.io/codait/max-text-sentiment-classifier:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sentiment-classification" of deployment "sentiment-classification" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 sentiment-classification.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: sentiment-classification
  17 │         image: quay.io/codait/max-text-sentiment-classifier:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 sentiment-classification.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: sentiment-classification
  17 │         image: quay.io/codait/max-text-sentiment-classifier:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment sentiment-classification in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 sentiment-classification.yaml:4
────────────────────────────────────────
   4 [   name: sentiment-classification
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container sentiment-classification in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sentiment-classification.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: sentiment-classification
  17 │         image: quay.io/codait/max-text-sentiment-classifier:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment sentiment-classification in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sentiment-classification.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: sentiment-classification
  17 │         image: quay.io/codait/max-text-sentiment-classifier:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container sentiment-classification in deployment sentiment-classification (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 sentiment-classification.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: sentiment-classification
  17 │         image: quay.io/codait/max-text-sentiment-classifier:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────



sentiment-classification1.yaml (kubernetes)
===========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'sentiment-classification' of Deployment 'sentiment-classification' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 sentiment-classification1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: sentiment-classification
  17 │         image: quay.io/codait/max-text-sentiment-classifier:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sentiment-classification' of Deployment 'sentiment-classification' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 sentiment-classification1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: sentiment-classification
  17 │         image: quay.io/codait/max-text-sentiment-classifier:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sentiment-classification' of 'deployment' 'sentiment-classification' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 sentiment-classification1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: sentiment-classification
  17 │         image: quay.io/codait/max-text-sentiment-classifier:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sentiment-classification' of Deployment 'sentiment-classification' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 sentiment-classification1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: sentiment-classification
  17 │         image: quay.io/codait/max-text-sentiment-classifier:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sentiment-classification' of Deployment 'sentiment-classification' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 sentiment-classification1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: sentiment-classification
  17 │         image: quay.io/codait/max-text-sentiment-classifier:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'sentiment-classification' of Deployment 'sentiment-classification' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 sentiment-classification1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: sentiment-classification
  17 │         image: quay.io/codait/max-text-sentiment-classifier:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sentiment-classification' of Deployment 'sentiment-classification' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 sentiment-classification1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: sentiment-classification
  17 │         image: quay.io/codait/max-text-sentiment-classifier:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sentiment-classification' of Deployment 'sentiment-classification' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 sentiment-classification1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: sentiment-classification
  17 │         image: quay.io/codait/max-text-sentiment-classifier:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sentiment-classification' of Deployment 'sentiment-classification' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 sentiment-classification1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: sentiment-classification
  17 │         image: quay.io/codait/max-text-sentiment-classifier:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sentiment-classification' of Deployment 'sentiment-classification' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 sentiment-classification1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: sentiment-classification
  17 │         image: quay.io/codait/max-text-sentiment-classifier:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sentiment-classification' of Deployment 'sentiment-classification' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 sentiment-classification1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: sentiment-classification
  17 │         image: quay.io/codait/max-text-sentiment-classifier:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sentiment-classification' of Deployment 'sentiment-classification' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 sentiment-classification1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: sentiment-classification
  17 │         image: quay.io/codait/max-text-sentiment-classifier:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 sentiment-classification1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: sentiment-classification
  17 │         image: quay.io/codait/max-text-sentiment-classifier:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sentiment-classification" of deployment "sentiment-classification" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 sentiment-classification1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: sentiment-classification
  17 │         image: quay.io/codait/max-text-sentiment-classifier:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 sentiment-classification1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: sentiment-classification
  17 │         image: quay.io/codait/max-text-sentiment-classifier:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment sentiment-classification in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 sentiment-classification1.yaml:4
────────────────────────────────────────
   4 [   name: sentiment-classification
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container sentiment-classification in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sentiment-classification1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: sentiment-classification
  17 │         image: quay.io/codait/max-text-sentiment-classifier:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment sentiment-classification in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sentiment-classification1.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: sentiment-classification
  17 │         image: quay.io/codait/max-text-sentiment-classifier:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container sentiment-classification in deployment sentiment-classification (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 sentiment-classification1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: sentiment-classification
  17 │         image: quay.io/codait/max-text-sentiment-classifier:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────



sentiment-deployment.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'sentiment' of Deployment 'sentiment-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 sentiment-deployment.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: sentiment
  17 │         image: mcr.microsoft.com/azure-cognitive-services/textanalytics/sentiment:latest
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: '1'
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sentiment' of Deployment 'sentiment-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 sentiment-deployment.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: sentiment
  17 │         image: mcr.microsoft.com/azure-cognitive-services/textanalytics/sentiment:latest
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: '1'
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sentiment' of 'deployment' 'sentiment-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 sentiment-deployment.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: sentiment
  17 │         image: mcr.microsoft.com/azure-cognitive-services/textanalytics/sentiment:latest
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: '1'
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sentiment' of Deployment 'sentiment-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 sentiment-deployment.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: sentiment
  17 │         image: mcr.microsoft.com/azure-cognitive-services/textanalytics/sentiment:latest
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: '1'
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'sentiment' of Deployment 'sentiment-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 sentiment-deployment.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: sentiment
  17 │         image: mcr.microsoft.com/azure-cognitive-services/textanalytics/sentiment:latest
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: '1'
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sentiment' of Deployment 'sentiment-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 sentiment-deployment.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: sentiment
  17 │         image: mcr.microsoft.com/azure-cognitive-services/textanalytics/sentiment:latest
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: '1'
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sentiment' of Deployment 'sentiment-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 sentiment-deployment.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: sentiment
  17 │         image: mcr.microsoft.com/azure-cognitive-services/textanalytics/sentiment:latest
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: '1'
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sentiment' of Deployment 'sentiment-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 sentiment-deployment.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: sentiment
  17 │         image: mcr.microsoft.com/azure-cognitive-services/textanalytics/sentiment:latest
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: '1'
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 sentiment-deployment.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: sentiment
  17 │         image: mcr.microsoft.com/azure-cognitive-services/textanalytics/sentiment:latest
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: '1'
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sentiment" of deployment "sentiment-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 sentiment-deployment.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: sentiment
  17 │         image: mcr.microsoft.com/azure-cognitive-services/textanalytics/sentiment:latest
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: '1'
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 sentiment-deployment.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: sentiment
  17 │         image: mcr.microsoft.com/azure-cognitive-services/textanalytics/sentiment:latest
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: '1'
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment sentiment-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 sentiment-deployment.yaml:4
────────────────────────────────────────
   4 [   name: sentiment-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container sentiment-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sentiment-deployment.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: sentiment
  17 │         image: mcr.microsoft.com/azure-cognitive-services/textanalytics/sentiment:latest
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: '1'
  24 └           requests:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment sentiment-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sentiment-deployment.yaml:15-35
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: sentiment
  17 │         image: mcr.microsoft.com/azure-cognitive-services/textanalytics/sentiment:latest
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 └             cpu: '1'
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container sentiment in deployment sentiment-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 sentiment-deployment.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: sentiment
  17 │         image: mcr.microsoft.com/azure-cognitive-services/textanalytics/sentiment:latest
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         resources:
  21 │           limits:
  22 │             memory: 8Gi
  23 │             cpu: '1'
  24 └           requests:
  ..   
────────────────────────────────────────



sentinel-statefulset.yaml (kubernetes)
======================================
Tests: 130 (SUCCESSES: 98, FAILURES: 32)
Failures: 32 (UNKNOWN: 0, LOW: 21, MEDIUM: 6, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'config' of StatefulSet 'sentinel' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 sentinel-statefulset.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'sentinel' of StatefulSet 'sentinel' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 sentinel-statefulset.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'config' of StatefulSet 'sentinel' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 sentinel-statefulset.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sentinel' of StatefulSet 'sentinel' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 sentinel-statefulset.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'config' of 'statefulset' 'sentinel' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 sentinel-statefulset.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sentinel' of 'statefulset' 'sentinel' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 sentinel-statefulset.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'config' of StatefulSet 'sentinel' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 sentinel-statefulset.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sentinel' of StatefulSet 'sentinel' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 sentinel-statefulset.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'config' of StatefulSet 'sentinel' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 sentinel-statefulset.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sentinel' of StatefulSet 'sentinel' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 sentinel-statefulset.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'config' of StatefulSet 'sentinel' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 sentinel-statefulset.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sentinel' of StatefulSet 'sentinel' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 sentinel-statefulset.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'config' of StatefulSet 'sentinel' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 sentinel-statefulset.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sentinel' of StatefulSet 'sentinel' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 sentinel-statefulset.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'config' of StatefulSet 'sentinel' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 sentinel-statefulset.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sentinel' of StatefulSet 'sentinel' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 sentinel-statefulset.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'config' of StatefulSet 'sentinel' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 sentinel-statefulset.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sentinel' of StatefulSet 'sentinel' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 sentinel-statefulset.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'config' of StatefulSet 'sentinel' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 sentinel-statefulset.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sentinel' of StatefulSet 'sentinel' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 sentinel-statefulset.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'config' of StatefulSet 'sentinel' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 sentinel-statefulset.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sentinel' of StatefulSet 'sentinel' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 sentinel-statefulset.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 sentinel-statefulset.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 sentinel-statefulset.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "config" of statefulset "sentinel" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 sentinel-statefulset.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sentinel" of statefulset "sentinel" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 sentinel-statefulset.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 sentinel-statefulset.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 sentinel-statefulset.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset sentinel in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 sentinel-statefulset.yaml:4
────────────────────────────────────────
   4 [   name: sentinel
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container sentinel in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sentinel-statefulset.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container sentinel in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sentinel-statefulset.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset sentinel in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sentinel-statefulset.yaml:16-55
────────────────────────────────────────
  16 ┌       initContainers:
  17 │       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 └           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  ..   
────────────────────────────────────────



sentinel-statefulset1.yaml (kubernetes)
=======================================
Tests: 130 (SUCCESSES: 98, FAILURES: 32)
Failures: 32 (UNKNOWN: 0, LOW: 21, MEDIUM: 6, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'config' of StatefulSet 'sentinel' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 sentinel-statefulset1.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'sentinel' of StatefulSet 'sentinel' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 sentinel-statefulset1.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'config' of StatefulSet 'sentinel' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 sentinel-statefulset1.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sentinel' of StatefulSet 'sentinel' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 sentinel-statefulset1.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'config' of 'statefulset' 'sentinel' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 sentinel-statefulset1.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sentinel' of 'statefulset' 'sentinel' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 sentinel-statefulset1.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'config' of StatefulSet 'sentinel' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 sentinel-statefulset1.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sentinel' of StatefulSet 'sentinel' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 sentinel-statefulset1.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'config' of StatefulSet 'sentinel' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 sentinel-statefulset1.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sentinel' of StatefulSet 'sentinel' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 sentinel-statefulset1.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'config' of StatefulSet 'sentinel' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 sentinel-statefulset1.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sentinel' of StatefulSet 'sentinel' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 sentinel-statefulset1.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'config' of StatefulSet 'sentinel' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 sentinel-statefulset1.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sentinel' of StatefulSet 'sentinel' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 sentinel-statefulset1.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'config' of StatefulSet 'sentinel' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 sentinel-statefulset1.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sentinel' of StatefulSet 'sentinel' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 sentinel-statefulset1.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'config' of StatefulSet 'sentinel' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 sentinel-statefulset1.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sentinel' of StatefulSet 'sentinel' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 sentinel-statefulset1.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'config' of StatefulSet 'sentinel' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 sentinel-statefulset1.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sentinel' of StatefulSet 'sentinel' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 sentinel-statefulset1.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'config' of StatefulSet 'sentinel' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 sentinel-statefulset1.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sentinel' of StatefulSet 'sentinel' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 sentinel-statefulset1.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 sentinel-statefulset1.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 sentinel-statefulset1.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "config" of statefulset "sentinel" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 sentinel-statefulset1.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sentinel" of statefulset "sentinel" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 sentinel-statefulset1.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 sentinel-statefulset1.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 sentinel-statefulset1.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset sentinel in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 sentinel-statefulset1.yaml:4
────────────────────────────────────────
   4 [   name: sentinel
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container sentinel in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sentinel-statefulset1.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container sentinel in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sentinel-statefulset1.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset sentinel in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sentinel-statefulset1.yaml:16-55
────────────────────────────────────────
  16 ┌       initContainers:
  17 │       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 └           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  ..   
────────────────────────────────────────



sentinel-statefulset2.yaml (kubernetes)
=======================================
Tests: 130 (SUCCESSES: 98, FAILURES: 32)
Failures: 32 (UNKNOWN: 0, LOW: 21, MEDIUM: 6, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'config' of StatefulSet 'sentinel' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 sentinel-statefulset2.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'sentinel' of StatefulSet 'sentinel' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 sentinel-statefulset2.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'config' of StatefulSet 'sentinel' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 sentinel-statefulset2.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sentinel' of StatefulSet 'sentinel' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 sentinel-statefulset2.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'config' of 'statefulset' 'sentinel' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 sentinel-statefulset2.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sentinel' of 'statefulset' 'sentinel' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 sentinel-statefulset2.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'config' of StatefulSet 'sentinel' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 sentinel-statefulset2.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sentinel' of StatefulSet 'sentinel' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 sentinel-statefulset2.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'config' of StatefulSet 'sentinel' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 sentinel-statefulset2.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sentinel' of StatefulSet 'sentinel' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 sentinel-statefulset2.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'config' of StatefulSet 'sentinel' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 sentinel-statefulset2.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sentinel' of StatefulSet 'sentinel' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 sentinel-statefulset2.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'config' of StatefulSet 'sentinel' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 sentinel-statefulset2.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sentinel' of StatefulSet 'sentinel' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 sentinel-statefulset2.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'config' of StatefulSet 'sentinel' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 sentinel-statefulset2.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sentinel' of StatefulSet 'sentinel' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 sentinel-statefulset2.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'config' of StatefulSet 'sentinel' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 sentinel-statefulset2.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sentinel' of StatefulSet 'sentinel' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 sentinel-statefulset2.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'config' of StatefulSet 'sentinel' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 sentinel-statefulset2.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sentinel' of StatefulSet 'sentinel' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 sentinel-statefulset2.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'config' of StatefulSet 'sentinel' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 sentinel-statefulset2.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sentinel' of StatefulSet 'sentinel' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 sentinel-statefulset2.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 sentinel-statefulset2.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 sentinel-statefulset2.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "config" of statefulset "sentinel" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 sentinel-statefulset2.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sentinel" of statefulset "sentinel" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 sentinel-statefulset2.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 sentinel-statefulset2.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 sentinel-statefulset2.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset sentinel in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 sentinel-statefulset2.yaml:4
────────────────────────────────────────
   4 [   name: sentinel
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container sentinel in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sentinel-statefulset2.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container sentinel in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sentinel-statefulset2.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset sentinel in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sentinel-statefulset2.yaml:16-55
────────────────────────────────────────
  16 ┌       initContainers:
  17 │       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 └           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  ..   
────────────────────────────────────────



sentinel-statefulset3.yaml (kubernetes)
=======================================
Tests: 130 (SUCCESSES: 98, FAILURES: 32)
Failures: 32 (UNKNOWN: 0, LOW: 21, MEDIUM: 6, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'config' of StatefulSet 'sentinel' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 sentinel-statefulset3.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'sentinel' of StatefulSet 'sentinel' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 sentinel-statefulset3.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'config' of StatefulSet 'sentinel' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 sentinel-statefulset3.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sentinel' of StatefulSet 'sentinel' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 sentinel-statefulset3.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'config' of 'statefulset' 'sentinel' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 sentinel-statefulset3.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sentinel' of 'statefulset' 'sentinel' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 sentinel-statefulset3.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'config' of StatefulSet 'sentinel' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 sentinel-statefulset3.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sentinel' of StatefulSet 'sentinel' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 sentinel-statefulset3.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'config' of StatefulSet 'sentinel' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 sentinel-statefulset3.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sentinel' of StatefulSet 'sentinel' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 sentinel-statefulset3.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'config' of StatefulSet 'sentinel' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 sentinel-statefulset3.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sentinel' of StatefulSet 'sentinel' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 sentinel-statefulset3.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'config' of StatefulSet 'sentinel' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 sentinel-statefulset3.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sentinel' of StatefulSet 'sentinel' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 sentinel-statefulset3.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'config' of StatefulSet 'sentinel' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 sentinel-statefulset3.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sentinel' of StatefulSet 'sentinel' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 sentinel-statefulset3.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'config' of StatefulSet 'sentinel' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 sentinel-statefulset3.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sentinel' of StatefulSet 'sentinel' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 sentinel-statefulset3.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'config' of StatefulSet 'sentinel' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 sentinel-statefulset3.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sentinel' of StatefulSet 'sentinel' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 sentinel-statefulset3.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'config' of StatefulSet 'sentinel' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 sentinel-statefulset3.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sentinel' of StatefulSet 'sentinel' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 sentinel-statefulset3.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 sentinel-statefulset3.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 sentinel-statefulset3.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "config" of statefulset "sentinel" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 sentinel-statefulset3.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sentinel" of statefulset "sentinel" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 sentinel-statefulset3.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 sentinel-statefulset3.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 sentinel-statefulset3.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset sentinel in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 sentinel-statefulset3.yaml:4
────────────────────────────────────────
   4 [   name: sentinel
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container sentinel in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sentinel-statefulset3.yaml:39-52
────────────────────────────────────────
  39 ┌       - name: sentinel
  40 │         image: redis:7.0.10-alpine
  41 │         command:
  42 │         - redis-sentinel
  43 │         args:
  44 │         - /etc/redis/sentinel.conf
  45 │         ports:
  46 │         - containerPort: 5000
  47 └           name: sentinel
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container sentinel in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sentinel-statefulset3.yaml:17-37
────────────────────────────────────────
  17 ┌       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 │           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  25 └           \ \"finding master at $i\"\n    MASTER=$(redis-cli --no-auth-warning --raw\
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset sentinel in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sentinel-statefulset3.yaml:16-55
────────────────────────────────────────
  16 ┌       initContainers:
  17 │       - name: config
  18 │         image: redis:7.0.10-alpine
  19 │         command:
  20 │         - sh
  21 │         - -c
  22 │         args:
  23 │         - "REDIS_PASSWORD=a-very-complex-password-here\nnodes=redis-0.redis,redis-1.redis,redis-2.redis\n\
  24 └           loop=$(echo $nodes | sed -e \"s/,/\\n/g\")\n\nfor i in $loop\ndo\n    echo\
  ..   
────────────────────────────────────────



sentry4_3.yaml (kubernetes)
===========================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'dapr-sentry' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 sentry4_3.yaml:23-33
────────────────────────────────────────
  23 ┌ - apiGroups:
  24 │   - ''
  25 │   resources:
  26 │   - configmaps
  27 │   verbs:
  28 │   - get
  29 │   - update
  30 │   - watch
  31 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'dapr-sentry' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 sentry4_3.yaml:13-22
────────────────────────────────────────
  13 ┌ - apiGroups:
  14 │   - ''
  15 │   resources:
  16 │   - secrets
  17 │   verbs:
  18 │   - get
  19 │   - update
  20 │   - delete
  21 │   resourceNames:
  22 └   - dapr-trust-bundle
────────────────────────────────────────



servarr-env-configmap.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'servarr-env' in 'media' namespace stores sensitive contents in key(s) or value(s) '{"PGID", "PUID"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



server-app-configs.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'server-side-configs' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



server-app-configs1.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-01010 (MEDIUM): ConfigMap 'server-side-configs' in 'default' namespace stores sensitive contents in key(s) or value(s) '{"PORT"}'
════════════════════════════════════════
Storing sensitive content such as usernames and email addresses in configMaps is unsafe

See https://avd.aquasec.com/misconfig/avd-ksv-01010
────────────────────────────────────────



server-app-deploy.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'container1' of Deployment 'todo-server-app-deploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-app-deploy.yaml:16-25
────────────────────────────────────────
  16 ┌       - image: todo-server-kubernetes-app:latest
  17 │         name: container1
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         imagePullPolicy: IfNotPresent
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: server-side-configs
  24 │         - secretRef:
  25 └             name: server-side-secrets
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'container1' of Deployment 'todo-server-app-deploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-app-deploy.yaml:16-25
────────────────────────────────────────
  16 ┌       - image: todo-server-kubernetes-app:latest
  17 │         name: container1
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         imagePullPolicy: IfNotPresent
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: server-side-configs
  24 │         - secretRef:
  25 └             name: server-side-secrets
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container1' of 'deployment' 'todo-server-app-deploy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-app-deploy.yaml:16-25
────────────────────────────────────────
  16 ┌       - image: todo-server-kubernetes-app:latest
  17 │         name: container1
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         imagePullPolicy: IfNotPresent
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: server-side-configs
  24 │         - secretRef:
  25 └             name: server-side-secrets
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container1' of Deployment 'todo-server-app-deploy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-app-deploy.yaml:16-25
────────────────────────────────────────
  16 ┌       - image: todo-server-kubernetes-app:latest
  17 │         name: container1
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         imagePullPolicy: IfNotPresent
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: server-side-configs
  24 │         - secretRef:
  25 └             name: server-side-secrets
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'container1' of Deployment 'todo-server-app-deploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-app-deploy.yaml:16-25
────────────────────────────────────────
  16 ┌       - image: todo-server-kubernetes-app:latest
  17 │         name: container1
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         imagePullPolicy: IfNotPresent
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: server-side-configs
  24 │         - secretRef:
  25 └             name: server-side-secrets
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container1' of Deployment 'todo-server-app-deploy' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-app-deploy.yaml:16-25
────────────────────────────────────────
  16 ┌       - image: todo-server-kubernetes-app:latest
  17 │         name: container1
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         imagePullPolicy: IfNotPresent
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: server-side-configs
  24 │         - secretRef:
  25 └             name: server-side-secrets
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container1' of Deployment 'todo-server-app-deploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-app-deploy.yaml:16-25
────────────────────────────────────────
  16 ┌       - image: todo-server-kubernetes-app:latest
  17 │         name: container1
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         imagePullPolicy: IfNotPresent
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: server-side-configs
  24 │         - secretRef:
  25 └             name: server-side-secrets
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container1' of Deployment 'todo-server-app-deploy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-app-deploy.yaml:16-25
────────────────────────────────────────
  16 ┌       - image: todo-server-kubernetes-app:latest
  17 │         name: container1
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         imagePullPolicy: IfNotPresent
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: server-side-configs
  24 │         - secretRef:
  25 └             name: server-side-secrets
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container1' of Deployment 'todo-server-app-deploy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-app-deploy.yaml:16-25
────────────────────────────────────────
  16 ┌       - image: todo-server-kubernetes-app:latest
  17 │         name: container1
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         imagePullPolicy: IfNotPresent
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: server-side-configs
  24 │         - secretRef:
  25 └             name: server-side-secrets
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container1' of Deployment 'todo-server-app-deploy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-app-deploy.yaml:16-25
────────────────────────────────────────
  16 ┌       - image: todo-server-kubernetes-app:latest
  17 │         name: container1
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         imagePullPolicy: IfNotPresent
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: server-side-configs
  24 │         - secretRef:
  25 └             name: server-side-secrets
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container1' of Deployment 'todo-server-app-deploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-app-deploy.yaml:16-25
────────────────────────────────────────
  16 ┌       - image: todo-server-kubernetes-app:latest
  17 │         name: container1
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         imagePullPolicy: IfNotPresent
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: server-side-configs
  24 │         - secretRef:
  25 └             name: server-side-secrets
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container1' of Deployment 'todo-server-app-deploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-app-deploy.yaml:16-25
────────────────────────────────────────
  16 ┌       - image: todo-server-kubernetes-app:latest
  17 │         name: container1
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         imagePullPolicy: IfNotPresent
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: server-side-configs
  24 │         - secretRef:
  25 └             name: server-side-secrets
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-app-deploy.yaml:16-25
────────────────────────────────────────
  16 ┌       - image: todo-server-kubernetes-app:latest
  17 │         name: container1
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         imagePullPolicy: IfNotPresent
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: server-side-configs
  24 │         - secretRef:
  25 └             name: server-side-secrets
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container1" of deployment "todo-server-app-deploy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-app-deploy.yaml:16-25
────────────────────────────────────────
  16 ┌       - image: todo-server-kubernetes-app:latest
  17 │         name: container1
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         imagePullPolicy: IfNotPresent
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: server-side-configs
  24 │         - secretRef:
  25 └             name: server-side-secrets
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-app-deploy.yaml:16-25
────────────────────────────────────────
  16 ┌       - image: todo-server-kubernetes-app:latest
  17 │         name: container1
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         imagePullPolicy: IfNotPresent
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: server-side-configs
  24 │         - secretRef:
  25 └             name: server-side-secrets
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment todo-server-app-deploy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-app-deploy.yaml:4
────────────────────────────────────────
   4 [   name: todo-server-app-deploy
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container todo-server-app-deploy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-app-deploy.yaml:16-25
────────────────────────────────────────
  16 ┌       - image: todo-server-kubernetes-app:latest
  17 │         name: container1
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         imagePullPolicy: IfNotPresent
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: server-side-configs
  24 │         - secretRef:
  25 └             name: server-side-secrets
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment todo-server-app-deploy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-app-deploy.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - image: todo-server-kubernetes-app:latest
  17 │         name: container1
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         imagePullPolicy: IfNotPresent
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: server-side-configs
  ..   
────────────────────────────────────────



server-app-deploy1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'container1' of Deployment 'todo-server-app-deploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-app-deploy1.yaml:16-25
────────────────────────────────────────
  16 ┌       - image: todo-server-kubernetes-app:latest
  17 │         name: container1
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         imagePullPolicy: IfNotPresent
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: server-side-configs
  24 │         - secretRef:
  25 └             name: server-side-secrets
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'container1' of Deployment 'todo-server-app-deploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-app-deploy1.yaml:16-25
────────────────────────────────────────
  16 ┌       - image: todo-server-kubernetes-app:latest
  17 │         name: container1
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         imagePullPolicy: IfNotPresent
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: server-side-configs
  24 │         - secretRef:
  25 └             name: server-side-secrets
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'container1' of 'deployment' 'todo-server-app-deploy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-app-deploy1.yaml:16-25
────────────────────────────────────────
  16 ┌       - image: todo-server-kubernetes-app:latest
  17 │         name: container1
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         imagePullPolicy: IfNotPresent
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: server-side-configs
  24 │         - secretRef:
  25 └             name: server-side-secrets
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'container1' of Deployment 'todo-server-app-deploy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-app-deploy1.yaml:16-25
────────────────────────────────────────
  16 ┌       - image: todo-server-kubernetes-app:latest
  17 │         name: container1
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         imagePullPolicy: IfNotPresent
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: server-side-configs
  24 │         - secretRef:
  25 └             name: server-side-secrets
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'container1' of Deployment 'todo-server-app-deploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-app-deploy1.yaml:16-25
────────────────────────────────────────
  16 ┌       - image: todo-server-kubernetes-app:latest
  17 │         name: container1
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         imagePullPolicy: IfNotPresent
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: server-side-configs
  24 │         - secretRef:
  25 └             name: server-side-secrets
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'container1' of Deployment 'todo-server-app-deploy' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-app-deploy1.yaml:16-25
────────────────────────────────────────
  16 ┌       - image: todo-server-kubernetes-app:latest
  17 │         name: container1
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         imagePullPolicy: IfNotPresent
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: server-side-configs
  24 │         - secretRef:
  25 └             name: server-side-secrets
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'container1' of Deployment 'todo-server-app-deploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-app-deploy1.yaml:16-25
────────────────────────────────────────
  16 ┌       - image: todo-server-kubernetes-app:latest
  17 │         name: container1
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         imagePullPolicy: IfNotPresent
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: server-side-configs
  24 │         - secretRef:
  25 └             name: server-side-secrets
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'container1' of Deployment 'todo-server-app-deploy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-app-deploy1.yaml:16-25
────────────────────────────────────────
  16 ┌       - image: todo-server-kubernetes-app:latest
  17 │         name: container1
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         imagePullPolicy: IfNotPresent
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: server-side-configs
  24 │         - secretRef:
  25 └             name: server-side-secrets
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'container1' of Deployment 'todo-server-app-deploy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-app-deploy1.yaml:16-25
────────────────────────────────────────
  16 ┌       - image: todo-server-kubernetes-app:latest
  17 │         name: container1
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         imagePullPolicy: IfNotPresent
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: server-side-configs
  24 │         - secretRef:
  25 └             name: server-side-secrets
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'container1' of Deployment 'todo-server-app-deploy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-app-deploy1.yaml:16-25
────────────────────────────────────────
  16 ┌       - image: todo-server-kubernetes-app:latest
  17 │         name: container1
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         imagePullPolicy: IfNotPresent
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: server-side-configs
  24 │         - secretRef:
  25 └             name: server-side-secrets
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'container1' of Deployment 'todo-server-app-deploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-app-deploy1.yaml:16-25
────────────────────────────────────────
  16 ┌       - image: todo-server-kubernetes-app:latest
  17 │         name: container1
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         imagePullPolicy: IfNotPresent
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: server-side-configs
  24 │         - secretRef:
  25 └             name: server-side-secrets
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'container1' of Deployment 'todo-server-app-deploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-app-deploy1.yaml:16-25
────────────────────────────────────────
  16 ┌       - image: todo-server-kubernetes-app:latest
  17 │         name: container1
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         imagePullPolicy: IfNotPresent
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: server-side-configs
  24 │         - secretRef:
  25 └             name: server-side-secrets
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-app-deploy1.yaml:16-25
────────────────────────────────────────
  16 ┌       - image: todo-server-kubernetes-app:latest
  17 │         name: container1
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         imagePullPolicy: IfNotPresent
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: server-side-configs
  24 │         - secretRef:
  25 └             name: server-side-secrets
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "container1" of deployment "todo-server-app-deploy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-app-deploy1.yaml:16-25
────────────────────────────────────────
  16 ┌       - image: todo-server-kubernetes-app:latest
  17 │         name: container1
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         imagePullPolicy: IfNotPresent
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: server-side-configs
  24 │         - secretRef:
  25 └             name: server-side-secrets
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-app-deploy1.yaml:16-25
────────────────────────────────────────
  16 ┌       - image: todo-server-kubernetes-app:latest
  17 │         name: container1
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         imagePullPolicy: IfNotPresent
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: server-side-configs
  24 │         - secretRef:
  25 └             name: server-side-secrets
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment todo-server-app-deploy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-app-deploy1.yaml:4
────────────────────────────────────────
   4 [   name: todo-server-app-deploy
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container todo-server-app-deploy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-app-deploy1.yaml:16-25
────────────────────────────────────────
  16 ┌       - image: todo-server-kubernetes-app:latest
  17 │         name: container1
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         imagePullPolicy: IfNotPresent
  21 │         envFrom:
  22 │         - configMapRef:
  23 │             name: server-side-configs
  24 │         - secretRef:
  25 └             name: server-side-secrets
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment todo-server-app-deploy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-app-deploy1.yaml:15-25
────────────────────────────────────────
  15 ┌       containers:
  16 │       - image: todo-server-kubernetes-app:latest
  17 │         name: container1
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         imagePullPolicy: IfNotPresent
  21 │         envFrom:
  22 │         - configMapRef:
  23 └             name: server-side-configs
  ..   
────────────────────────────────────────



server-cluster-roles1.yaml (kubernetes)
=======================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'argoworkflows' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 server-cluster-roles1.yaml:38-43
────────────────────────────────────────
  38 ┌ - apiGroups:
  39 │   - ''
  40 │   resources:
  41 │   - secrets
  42 │   verbs:
  43 └   - get
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'argoworkflows' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 server-cluster-roles1.yaml:22-30
────────────────────────────────────────
  22 ┌ - apiGroups:
  23 │   - ''
  24 │   resources:
  25 │   - pods
  26 │   verbs:
  27 │   - get
  28 │   - list
  29 │   - watch
  30 └   - delete
────────────────────────────────────────



server-depl.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 9, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-depl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-depl.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: laithharb/server:v2
  19 │         resources:
  20 │           requests:
  21 │             memory: 200Mi
  22 │             cpu: 100m
  23 │         env:
  24 │         - name: MONGO_URL
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-depl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-depl.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: laithharb/server:v2
  19 │         resources:
  20 │           requests:
  21 │             memory: 200Mi
  22 │             cpu: 100m
  23 │         env:
  24 │         - name: MONGO_URL
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-depl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-depl.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: laithharb/server:v2
  19 │         resources:
  20 │           requests:
  21 │             memory: 200Mi
  22 │             cpu: 100m
  23 │         env:
  24 │         - name: MONGO_URL
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-depl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-depl.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: laithharb/server:v2
  19 │         resources:
  20 │           requests:
  21 │             memory: 200Mi
  22 │             cpu: 100m
  23 │         env:
  24 │         - name: MONGO_URL
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-depl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-depl.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: laithharb/server:v2
  19 │         resources:
  20 │           requests:
  21 │             memory: 200Mi
  22 │             cpu: 100m
  23 │         env:
  24 │         - name: MONGO_URL
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-depl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-depl.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: laithharb/server:v2
  19 │         resources:
  20 │           requests:
  21 │             memory: 200Mi
  22 │             cpu: 100m
  23 │         env:
  24 │         - name: MONGO_URL
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-depl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-depl.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: laithharb/server:v2
  19 │         resources:
  20 │           requests:
  21 │             memory: 200Mi
  22 │             cpu: 100m
  23 │         env:
  24 │         - name: MONGO_URL
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-depl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-depl.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: laithharb/server:v2
  19 │         resources:
  20 │           requests:
  21 │             memory: 200Mi
  22 │             cpu: 100m
  23 │         env:
  24 │         - name: MONGO_URL
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-depl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-depl.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: laithharb/server:v2
  19 │         resources:
  20 │           requests:
  21 │             memory: 200Mi
  22 │             cpu: 100m
  23 │         env:
  24 │         - name: MONGO_URL
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-depl.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: laithharb/server:v2
  19 │         resources:
  20 │           requests:
  21 │             memory: 200Mi
  22 │             cpu: 100m
  23 │         env:
  24 │         - name: MONGO_URL
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-depl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-depl.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: laithharb/server:v2
  19 │         resources:
  20 │           requests:
  21 │             memory: 200Mi
  22 │             cpu: 100m
  23 │         env:
  24 │         - name: MONGO_URL
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-depl.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: laithharb/server:v2
  19 │         resources:
  20 │           requests:
  21 │             memory: 200Mi
  22 │             cpu: 100m
  23 │         env:
  24 │         - name: MONGO_URL
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-depl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-depl.yaml:4
────────────────────────────────────────
   4 [   name: server-depl
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-depl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-depl.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: laithharb/server:v2
  19 │         resources:
  20 │           requests:
  21 │             memory: 200Mi
  22 │             cpu: 100m
  23 │         env:
  24 │         - name: MONGO_URL
  25 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-depl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-depl.yaml:16-28
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: server
  18 │         image: laithharb/server:v2
  19 │         resources:
  20 │           requests:
  21 │             memory: 200Mi
  22 │             cpu: 100m
  23 │         env:
  24 └         - name: MONGO_URL
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-depl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-depl.yaml:17-28
────────────────────────────────────────
  17 ┌       - name: server
  18 │         image: laithharb/server:v2
  19 │         resources:
  20 │           requests:
  21 │             memory: 200Mi
  22 │             cpu: 100m
  23 │         env:
  24 │         - name: MONGO_URL
  25 └           valueFrom:
  ..   
────────────────────────────────────────



server-deploy_1.yaml (kubernetes)
=================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'greeter-server' of Deployment 'greeter-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deploy_1.yaml:21-26
────────────────────────────────────────
  21 ┌       - name: greeter-server
  22 │         image: greeter-server:demo
  23 │         imagePullPolicy: Never
  24 │         env:
  25 │         - name: LISTEN_ADDR
  26 └           value: :8443
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'greeter-server' of Deployment 'greeter-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deploy_1.yaml:21-26
────────────────────────────────────────
  21 ┌       - name: greeter-server
  22 │         image: greeter-server:demo
  23 │         imagePullPolicy: Never
  24 │         env:
  25 │         - name: LISTEN_ADDR
  26 └           value: :8443
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'greeter-server' of 'deployment' 'greeter-server' in 'workload' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deploy_1.yaml:21-26
────────────────────────────────────────
  21 ┌       - name: greeter-server
  22 │         image: greeter-server:demo
  23 │         imagePullPolicy: Never
  24 │         env:
  25 │         - name: LISTEN_ADDR
  26 └           value: :8443
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'greeter-server' of Deployment 'greeter-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deploy_1.yaml:21-26
────────────────────────────────────────
  21 ┌       - name: greeter-server
  22 │         image: greeter-server:demo
  23 │         imagePullPolicy: Never
  24 │         env:
  25 │         - name: LISTEN_ADDR
  26 └           value: :8443
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'greeter-server' of Deployment 'greeter-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deploy_1.yaml:21-26
────────────────────────────────────────
  21 ┌       - name: greeter-server
  22 │         image: greeter-server:demo
  23 │         imagePullPolicy: Never
  24 │         env:
  25 │         - name: LISTEN_ADDR
  26 └           value: :8443
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'greeter-server' of Deployment 'greeter-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deploy_1.yaml:21-26
────────────────────────────────────────
  21 ┌       - name: greeter-server
  22 │         image: greeter-server:demo
  23 │         imagePullPolicy: Never
  24 │         env:
  25 │         - name: LISTEN_ADDR
  26 └           value: :8443
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'greeter-server' of Deployment 'greeter-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deploy_1.yaml:21-26
────────────────────────────────────────
  21 ┌       - name: greeter-server
  22 │         image: greeter-server:demo
  23 │         imagePullPolicy: Never
  24 │         env:
  25 │         - name: LISTEN_ADDR
  26 └           value: :8443
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'greeter-server' of Deployment 'greeter-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deploy_1.yaml:21-26
────────────────────────────────────────
  21 ┌       - name: greeter-server
  22 │         image: greeter-server:demo
  23 │         imagePullPolicy: Never
  24 │         env:
  25 │         - name: LISTEN_ADDR
  26 └           value: :8443
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'greeter-server' of Deployment 'greeter-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deploy_1.yaml:21-26
────────────────────────────────────────
  21 ┌       - name: greeter-server
  22 │         image: greeter-server:demo
  23 │         imagePullPolicy: Never
  24 │         env:
  25 │         - name: LISTEN_ADDR
  26 └           value: :8443
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'greeter-server' of Deployment 'greeter-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deploy_1.yaml:21-26
────────────────────────────────────────
  21 ┌       - name: greeter-server
  22 │         image: greeter-server:demo
  23 │         imagePullPolicy: Never
  24 │         env:
  25 │         - name: LISTEN_ADDR
  26 └           value: :8443
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'greeter-server' of Deployment 'greeter-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deploy_1.yaml:21-26
────────────────────────────────────────
  21 ┌       - name: greeter-server
  22 │         image: greeter-server:demo
  23 │         imagePullPolicy: Never
  24 │         env:
  25 │         - name: LISTEN_ADDR
  26 └           value: :8443
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deploy_1.yaml:21-26
────────────────────────────────────────
  21 ┌       - name: greeter-server
  22 │         image: greeter-server:demo
  23 │         imagePullPolicy: Never
  24 │         env:
  25 │         - name: LISTEN_ADDR
  26 └           value: :8443
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "greeter-server" of deployment "greeter-server" in "workload" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deploy_1.yaml:21-26
────────────────────────────────────────
  21 ┌       - name: greeter-server
  22 │         image: greeter-server:demo
  23 │         imagePullPolicy: Never
  24 │         env:
  25 │         - name: LISTEN_ADDR
  26 └           value: :8443
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deploy_1.yaml:21-26
────────────────────────────────────────
  21 ┌       - name: greeter-server
  22 │         image: greeter-server:demo
  23 │         imagePullPolicy: Never
  24 │         env:
  25 │         - name: LISTEN_ADDR
  26 └           value: :8443
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container greeter-server in workload namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deploy_1.yaml:21-26
────────────────────────────────────────
  21 ┌       - name: greeter-server
  22 │         image: greeter-server:demo
  23 │         imagePullPolicy: Never
  24 │         env:
  25 │         - name: LISTEN_ADDR
  26 └           value: :8443
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment greeter-server in workload namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deploy_1.yaml:19-26
────────────────────────────────────────
  19 ┌       serviceAccountName: greeter-server-sa
  20 │       containers:
  21 │       - name: greeter-server
  22 │         image: greeter-server:demo
  23 │         imagePullPolicy: Never
  24 │         env:
  25 │         - name: LISTEN_ADDR
  26 └           value: :8443
────────────────────────────────────────



server-deployment.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment.yaml:4
────────────────────────────────────────
   4 [   name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────



server-deployment1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment1.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: bryantto08/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment1.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: bryantto08/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment1.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: bryantto08/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment1.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: bryantto08/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment1.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: bryantto08/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment1.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: bryantto08/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment1.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: bryantto08/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment1.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: bryantto08/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment1.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: bryantto08/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment1.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: bryantto08/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment1.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: bryantto08/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment1.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: bryantto08/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment1.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: bryantto08/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment1.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: bryantto08/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment1.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: bryantto08/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment1.yaml:4
────────────────────────────────────────
   4 [   name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment1.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: bryantto08/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment1.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: server
  17 │           image: bryantto08/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment1.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: bryantto08/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────



server-deployment10.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment10.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: cygnetops/multi-server-pgfix-5-11
  18 │           image: stephengrider/multi-server
  19 │           ports:
  20 │             - containerPort: 5000 # listening port hardcoded in app code
  21 │           env:
  22 │             # STATIC VALUES (MAPPED using k8 service name)
  23 │             - name: REDIS_HOST
  24 └             # redis-cluster-ip-service: the name of the redis cluster ip
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment10.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: cygnetops/multi-server-pgfix-5-11
  18 │           image: stephengrider/multi-server
  19 │           ports:
  20 │             - containerPort: 5000 # listening port hardcoded in app code
  21 │           env:
  22 │             # STATIC VALUES (MAPPED using k8 service name)
  23 │             - name: REDIS_HOST
  24 └             # redis-cluster-ip-service: the name of the redis cluster ip
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment10.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: cygnetops/multi-server-pgfix-5-11
  18 │           image: stephengrider/multi-server
  19 │           ports:
  20 │             - containerPort: 5000 # listening port hardcoded in app code
  21 │           env:
  22 │             # STATIC VALUES (MAPPED using k8 service name)
  23 │             - name: REDIS_HOST
  24 └             # redis-cluster-ip-service: the name of the redis cluster ip
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment10.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: cygnetops/multi-server-pgfix-5-11
  18 │           image: stephengrider/multi-server
  19 │           ports:
  20 │             - containerPort: 5000 # listening port hardcoded in app code
  21 │           env:
  22 │             # STATIC VALUES (MAPPED using k8 service name)
  23 │             - name: REDIS_HOST
  24 └             # redis-cluster-ip-service: the name of the redis cluster ip
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment10.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: cygnetops/multi-server-pgfix-5-11
  18 │           image: stephengrider/multi-server
  19 │           ports:
  20 │             - containerPort: 5000 # listening port hardcoded in app code
  21 │           env:
  22 │             # STATIC VALUES (MAPPED using k8 service name)
  23 │             - name: REDIS_HOST
  24 └             # redis-cluster-ip-service: the name of the redis cluster ip
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment10.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: cygnetops/multi-server-pgfix-5-11
  18 │           image: stephengrider/multi-server
  19 │           ports:
  20 │             - containerPort: 5000 # listening port hardcoded in app code
  21 │           env:
  22 │             # STATIC VALUES (MAPPED using k8 service name)
  23 │             - name: REDIS_HOST
  24 └             # redis-cluster-ip-service: the name of the redis cluster ip
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment10.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: cygnetops/multi-server-pgfix-5-11
  18 │           image: stephengrider/multi-server
  19 │           ports:
  20 │             - containerPort: 5000 # listening port hardcoded in app code
  21 │           env:
  22 │             # STATIC VALUES (MAPPED using k8 service name)
  23 │             - name: REDIS_HOST
  24 └             # redis-cluster-ip-service: the name of the redis cluster ip
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment10.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: cygnetops/multi-server-pgfix-5-11
  18 │           image: stephengrider/multi-server
  19 │           ports:
  20 │             - containerPort: 5000 # listening port hardcoded in app code
  21 │           env:
  22 │             # STATIC VALUES (MAPPED using k8 service name)
  23 │             - name: REDIS_HOST
  24 └             # redis-cluster-ip-service: the name of the redis cluster ip
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment10.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: cygnetops/multi-server-pgfix-5-11
  18 │           image: stephengrider/multi-server
  19 │           ports:
  20 │             - containerPort: 5000 # listening port hardcoded in app code
  21 │           env:
  22 │             # STATIC VALUES (MAPPED using k8 service name)
  23 │             - name: REDIS_HOST
  24 └             # redis-cluster-ip-service: the name of the redis cluster ip
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment10.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: cygnetops/multi-server-pgfix-5-11
  18 │           image: stephengrider/multi-server
  19 │           ports:
  20 │             - containerPort: 5000 # listening port hardcoded in app code
  21 │           env:
  22 │             # STATIC VALUES (MAPPED using k8 service name)
  23 │             - name: REDIS_HOST
  24 └             # redis-cluster-ip-service: the name of the redis cluster ip
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment10.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: cygnetops/multi-server-pgfix-5-11
  18 │           image: stephengrider/multi-server
  19 │           ports:
  20 │             - containerPort: 5000 # listening port hardcoded in app code
  21 │           env:
  22 │             # STATIC VALUES (MAPPED using k8 service name)
  23 │             - name: REDIS_HOST
  24 └             # redis-cluster-ip-service: the name of the redis cluster ip
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment10.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: cygnetops/multi-server-pgfix-5-11
  18 │           image: stephengrider/multi-server
  19 │           ports:
  20 │             - containerPort: 5000 # listening port hardcoded in app code
  21 │           env:
  22 │             # STATIC VALUES (MAPPED using k8 service name)
  23 │             - name: REDIS_HOST
  24 └             # redis-cluster-ip-service: the name of the redis cluster ip
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment10.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: cygnetops/multi-server-pgfix-5-11
  18 │           image: stephengrider/multi-server
  19 │           ports:
  20 │             - containerPort: 5000 # listening port hardcoded in app code
  21 │           env:
  22 │             # STATIC VALUES (MAPPED using k8 service name)
  23 │             - name: REDIS_HOST
  24 └             # redis-cluster-ip-service: the name of the redis cluster ip
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment10.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: cygnetops/multi-server-pgfix-5-11
  18 │           image: stephengrider/multi-server
  19 │           ports:
  20 │             - containerPort: 5000 # listening port hardcoded in app code
  21 │           env:
  22 │             # STATIC VALUES (MAPPED using k8 service name)
  23 │             - name: REDIS_HOST
  24 └             # redis-cluster-ip-service: the name of the redis cluster ip
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment10.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: cygnetops/multi-server-pgfix-5-11
  18 │           image: stephengrider/multi-server
  19 │           ports:
  20 │             - containerPort: 5000 # listening port hardcoded in app code
  21 │           env:
  22 │             # STATIC VALUES (MAPPED using k8 service name)
  23 │             - name: REDIS_HOST
  24 └             # redis-cluster-ip-service: the name of the redis cluster ip
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment10.yaml:4
────────────────────────────────────────
   4 [   name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment10.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: cygnetops/multi-server-pgfix-5-11
  18 │           image: stephengrider/multi-server
  19 │           ports:
  20 │             - containerPort: 5000 # listening port hardcoded in app code
  21 │           env:
  22 │             # STATIC VALUES (MAPPED using k8 service name)
  23 │             - name: REDIS_HOST
  24 └             # redis-cluster-ip-service: the name of the redis cluster ip
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment10.yaml:15-45
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: server
  17 │           # image: cygnetops/multi-server-pgfix-5-11
  18 │           image: stephengrider/multi-server
  19 │           ports:
  20 │             - containerPort: 5000 # listening port hardcoded in app code
  21 │           env:
  22 │             # STATIC VALUES (MAPPED using k8 service name)
  23 └             - name: REDIS_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment10.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: cygnetops/multi-server-pgfix-5-11
  18 │           image: stephengrider/multi-server
  19 │           ports:
  20 │             - containerPort: 5000 # listening port hardcoded in app code
  21 │           env:
  22 │             # STATIC VALUES (MAPPED using k8 service name)
  23 │             - name: REDIS_HOST
  24 └             # redis-cluster-ip-service: the name of the redis cluster ip
  ..   
────────────────────────────────────────



server-deployment12.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment12.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment12.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment12.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment12.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment12.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment12.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment12.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment12.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment12.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment12.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment12.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment12.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment12.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment12.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment12.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment12.yaml:4
────────────────────────────────────────
   4 [   name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment12.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment12.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment12.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────



server-deployment13.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment13.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # no nerve to debug why my image is off, use course image for now
  18 │           image: rallycoding/multi-server
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               # same value as specced in redis-cluster-ip-service meta data
  24 └               value: redis-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment13.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # no nerve to debug why my image is off, use course image for now
  18 │           image: rallycoding/multi-server
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               # same value as specced in redis-cluster-ip-service meta data
  24 └               value: redis-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment13.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # no nerve to debug why my image is off, use course image for now
  18 │           image: rallycoding/multi-server
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               # same value as specced in redis-cluster-ip-service meta data
  24 └               value: redis-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment13.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # no nerve to debug why my image is off, use course image for now
  18 │           image: rallycoding/multi-server
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               # same value as specced in redis-cluster-ip-service meta data
  24 └               value: redis-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment13.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # no nerve to debug why my image is off, use course image for now
  18 │           image: rallycoding/multi-server
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               # same value as specced in redis-cluster-ip-service meta data
  24 └               value: redis-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment13.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # no nerve to debug why my image is off, use course image for now
  18 │           image: rallycoding/multi-server
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               # same value as specced in redis-cluster-ip-service meta data
  24 └               value: redis-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment13.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # no nerve to debug why my image is off, use course image for now
  18 │           image: rallycoding/multi-server
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               # same value as specced in redis-cluster-ip-service meta data
  24 └               value: redis-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment13.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # no nerve to debug why my image is off, use course image for now
  18 │           image: rallycoding/multi-server
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               # same value as specced in redis-cluster-ip-service meta data
  24 └               value: redis-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment13.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # no nerve to debug why my image is off, use course image for now
  18 │           image: rallycoding/multi-server
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               # same value as specced in redis-cluster-ip-service meta data
  24 └               value: redis-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment13.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # no nerve to debug why my image is off, use course image for now
  18 │           image: rallycoding/multi-server
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               # same value as specced in redis-cluster-ip-service meta data
  24 └               value: redis-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment13.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # no nerve to debug why my image is off, use course image for now
  18 │           image: rallycoding/multi-server
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               # same value as specced in redis-cluster-ip-service meta data
  24 └               value: redis-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment13.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # no nerve to debug why my image is off, use course image for now
  18 │           image: rallycoding/multi-server
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               # same value as specced in redis-cluster-ip-service meta data
  24 └               value: redis-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment13.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # no nerve to debug why my image is off, use course image for now
  18 │           image: rallycoding/multi-server
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               # same value as specced in redis-cluster-ip-service meta data
  24 └               value: redis-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment13.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # no nerve to debug why my image is off, use course image for now
  18 │           image: rallycoding/multi-server
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               # same value as specced in redis-cluster-ip-service meta data
  24 └               value: redis-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment13.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # no nerve to debug why my image is off, use course image for now
  18 │           image: rallycoding/multi-server
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               # same value as specced in redis-cluster-ip-service meta data
  24 └               value: redis-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment13.yaml:4
────────────────────────────────────────
   4 [   name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment13.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # no nerve to debug why my image is off, use course image for now
  18 │           image: rallycoding/multi-server
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               # same value as specced in redis-cluster-ip-service meta data
  24 └               value: redis-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment13.yaml:15-45
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: server
  17 │           # no nerve to debug why my image is off, use course image for now
  18 │           image: rallycoding/multi-server
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 └               # same value as specced in redis-cluster-ip-service meta data
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment13.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # no nerve to debug why my image is off, use course image for now
  18 │           image: rallycoding/multi-server
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               # same value as specced in redis-cluster-ip-service meta data
  24 └               value: redis-cluster-ip-service
  ..   
────────────────────────────────────────



server-deployment14.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment14.yaml:16-38
────────────────────────────────────────
  16 ┌                 - name: server
  17 │                   image: rallycoding/multi-server
  18 │                   ports:
  19 │                       - containerPort: 5000
  20 │                   env:
  21 │                       - name: REDIS_HOST
  22 │                         # Name of the clusterIP
  23 │                         value: redis-cluster-ip-service
  24 └                       - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment14.yaml:16-38
────────────────────────────────────────
  16 ┌                 - name: server
  17 │                   image: rallycoding/multi-server
  18 │                   ports:
  19 │                       - containerPort: 5000
  20 │                   env:
  21 │                       - name: REDIS_HOST
  22 │                         # Name of the clusterIP
  23 │                         value: redis-cluster-ip-service
  24 └                       - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment14.yaml:16-38
────────────────────────────────────────
  16 ┌                 - name: server
  17 │                   image: rallycoding/multi-server
  18 │                   ports:
  19 │                       - containerPort: 5000
  20 │                   env:
  21 │                       - name: REDIS_HOST
  22 │                         # Name of the clusterIP
  23 │                         value: redis-cluster-ip-service
  24 └                       - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment14.yaml:16-38
────────────────────────────────────────
  16 ┌                 - name: server
  17 │                   image: rallycoding/multi-server
  18 │                   ports:
  19 │                       - containerPort: 5000
  20 │                   env:
  21 │                       - name: REDIS_HOST
  22 │                         # Name of the clusterIP
  23 │                         value: redis-cluster-ip-service
  24 └                       - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment14.yaml:16-38
────────────────────────────────────────
  16 ┌                 - name: server
  17 │                   image: rallycoding/multi-server
  18 │                   ports:
  19 │                       - containerPort: 5000
  20 │                   env:
  21 │                       - name: REDIS_HOST
  22 │                         # Name of the clusterIP
  23 │                         value: redis-cluster-ip-service
  24 └                       - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment14.yaml:16-38
────────────────────────────────────────
  16 ┌                 - name: server
  17 │                   image: rallycoding/multi-server
  18 │                   ports:
  19 │                       - containerPort: 5000
  20 │                   env:
  21 │                       - name: REDIS_HOST
  22 │                         # Name of the clusterIP
  23 │                         value: redis-cluster-ip-service
  24 └                       - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment14.yaml:16-38
────────────────────────────────────────
  16 ┌                 - name: server
  17 │                   image: rallycoding/multi-server
  18 │                   ports:
  19 │                       - containerPort: 5000
  20 │                   env:
  21 │                       - name: REDIS_HOST
  22 │                         # Name of the clusterIP
  23 │                         value: redis-cluster-ip-service
  24 └                       - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment14.yaml:16-38
────────────────────────────────────────
  16 ┌                 - name: server
  17 │                   image: rallycoding/multi-server
  18 │                   ports:
  19 │                       - containerPort: 5000
  20 │                   env:
  21 │                       - name: REDIS_HOST
  22 │                         # Name of the clusterIP
  23 │                         value: redis-cluster-ip-service
  24 └                       - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment14.yaml:16-38
────────────────────────────────────────
  16 ┌                 - name: server
  17 │                   image: rallycoding/multi-server
  18 │                   ports:
  19 │                       - containerPort: 5000
  20 │                   env:
  21 │                       - name: REDIS_HOST
  22 │                         # Name of the clusterIP
  23 │                         value: redis-cluster-ip-service
  24 └                       - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment14.yaml:16-38
────────────────────────────────────────
  16 ┌                 - name: server
  17 │                   image: rallycoding/multi-server
  18 │                   ports:
  19 │                       - containerPort: 5000
  20 │                   env:
  21 │                       - name: REDIS_HOST
  22 │                         # Name of the clusterIP
  23 │                         value: redis-cluster-ip-service
  24 └                       - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment14.yaml:16-38
────────────────────────────────────────
  16 ┌                 - name: server
  17 │                   image: rallycoding/multi-server
  18 │                   ports:
  19 │                       - containerPort: 5000
  20 │                   env:
  21 │                       - name: REDIS_HOST
  22 │                         # Name of the clusterIP
  23 │                         value: redis-cluster-ip-service
  24 └                       - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment14.yaml:16-38
────────────────────────────────────────
  16 ┌                 - name: server
  17 │                   image: rallycoding/multi-server
  18 │                   ports:
  19 │                       - containerPort: 5000
  20 │                   env:
  21 │                       - name: REDIS_HOST
  22 │                         # Name of the clusterIP
  23 │                         value: redis-cluster-ip-service
  24 └                       - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment14.yaml:16-38
────────────────────────────────────────
  16 ┌                 - name: server
  17 │                   image: rallycoding/multi-server
  18 │                   ports:
  19 │                       - containerPort: 5000
  20 │                   env:
  21 │                       - name: REDIS_HOST
  22 │                         # Name of the clusterIP
  23 │                         value: redis-cluster-ip-service
  24 └                       - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment14.yaml:16-38
────────────────────────────────────────
  16 ┌                 - name: server
  17 │                   image: rallycoding/multi-server
  18 │                   ports:
  19 │                       - containerPort: 5000
  20 │                   env:
  21 │                       - name: REDIS_HOST
  22 │                         # Name of the clusterIP
  23 │                         value: redis-cluster-ip-service
  24 └                       - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment14.yaml:16-38
────────────────────────────────────────
  16 ┌                 - name: server
  17 │                   image: rallycoding/multi-server
  18 │                   ports:
  19 │                       - containerPort: 5000
  20 │                   env:
  21 │                       - name: REDIS_HOST
  22 │                         # Name of the clusterIP
  23 │                         value: redis-cluster-ip-service
  24 └                       - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment14.yaml:4
────────────────────────────────────────
   4 [     name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment14.yaml:16-38
────────────────────────────────────────
  16 ┌                 - name: server
  17 │                   image: rallycoding/multi-server
  18 │                   ports:
  19 │                       - containerPort: 5000
  20 │                   env:
  21 │                       - name: REDIS_HOST
  22 │                         # Name of the clusterIP
  23 │                         value: redis-cluster-ip-service
  24 └                       - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment14.yaml:15-38
────────────────────────────────────────
  15 ┌             containers:
  16 │                 - name: server
  17 │                   image: rallycoding/multi-server
  18 │                   ports:
  19 │                       - containerPort: 5000
  20 │                   env:
  21 │                       - name: REDIS_HOST
  22 │                         # Name of the clusterIP
  23 └                         value: redis-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment14.yaml:16-38
────────────────────────────────────────
  16 ┌                 - name: server
  17 │                   image: rallycoding/multi-server
  18 │                   ports:
  19 │                       - containerPort: 5000
  20 │                   env:
  21 │                       - name: REDIS_HOST
  22 │                         # Name of the clusterIP
  23 │                         value: redis-cluster-ip-service
  24 └                       - name: REDIS_PORT
  ..   
────────────────────────────────────────



server-deployment16.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ml-service' of Deployment 'ml-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment16.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: ml-service
  17 │         image: ghcr.io/converged-computing/lammps-stream-ml:server
  18 │         # These should be secrets, but OK to test
  19 │         # I'm putting them here so you know they exist
  20 │         env:
  21 │           - name: SHELVE_SECRET_KEY
  22 │             value: noodles
  23 │           - name: JWT_SECRET_KEY
  24 └             value: noodles
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ml-service' of Deployment 'ml-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment16.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: ml-service
  17 │         image: ghcr.io/converged-computing/lammps-stream-ml:server
  18 │         # These should be secrets, but OK to test
  19 │         # I'm putting them here so you know they exist
  20 │         env:
  21 │           - name: SHELVE_SECRET_KEY
  22 │             value: noodles
  23 │           - name: JWT_SECRET_KEY
  24 └             value: noodles
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ml-service' of 'deployment' 'ml-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment16.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: ml-service
  17 │         image: ghcr.io/converged-computing/lammps-stream-ml:server
  18 │         # These should be secrets, but OK to test
  19 │         # I'm putting them here so you know they exist
  20 │         env:
  21 │           - name: SHELVE_SECRET_KEY
  22 │             value: noodles
  23 │           - name: JWT_SECRET_KEY
  24 └             value: noodles
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'ml-service' of Deployment 'ml-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment16.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: ml-service
  17 │         image: ghcr.io/converged-computing/lammps-stream-ml:server
  18 │         # These should be secrets, but OK to test
  19 │         # I'm putting them here so you know they exist
  20 │         env:
  21 │           - name: SHELVE_SECRET_KEY
  22 │             value: noodles
  23 │           - name: JWT_SECRET_KEY
  24 └             value: noodles
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ml-service' of Deployment 'ml-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment16.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: ml-service
  17 │         image: ghcr.io/converged-computing/lammps-stream-ml:server
  18 │         # These should be secrets, but OK to test
  19 │         # I'm putting them here so you know they exist
  20 │         env:
  21 │           - name: SHELVE_SECRET_KEY
  22 │             value: noodles
  23 │           - name: JWT_SECRET_KEY
  24 └             value: noodles
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ml-service' of Deployment 'ml-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment16.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: ml-service
  17 │         image: ghcr.io/converged-computing/lammps-stream-ml:server
  18 │         # These should be secrets, but OK to test
  19 │         # I'm putting them here so you know they exist
  20 │         env:
  21 │           - name: SHELVE_SECRET_KEY
  22 │             value: noodles
  23 │           - name: JWT_SECRET_KEY
  24 └             value: noodles
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'ml-service' of Deployment 'ml-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment16.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: ml-service
  17 │         image: ghcr.io/converged-computing/lammps-stream-ml:server
  18 │         # These should be secrets, but OK to test
  19 │         # I'm putting them here so you know they exist
  20 │         env:
  21 │           - name: SHELVE_SECRET_KEY
  22 │             value: noodles
  23 │           - name: JWT_SECRET_KEY
  24 └             value: noodles
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'ml-service' of Deployment 'ml-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment16.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: ml-service
  17 │         image: ghcr.io/converged-computing/lammps-stream-ml:server
  18 │         # These should be secrets, but OK to test
  19 │         # I'm putting them here so you know they exist
  20 │         env:
  21 │           - name: SHELVE_SECRET_KEY
  22 │             value: noodles
  23 │           - name: JWT_SECRET_KEY
  24 └             value: noodles
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'ml-service' of Deployment 'ml-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment16.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: ml-service
  17 │         image: ghcr.io/converged-computing/lammps-stream-ml:server
  18 │         # These should be secrets, but OK to test
  19 │         # I'm putting them here so you know they exist
  20 │         env:
  21 │           - name: SHELVE_SECRET_KEY
  22 │             value: noodles
  23 │           - name: JWT_SECRET_KEY
  24 └             value: noodles
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ml-service' of Deployment 'ml-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment16.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: ml-service
  17 │         image: ghcr.io/converged-computing/lammps-stream-ml:server
  18 │         # These should be secrets, but OK to test
  19 │         # I'm putting them here so you know they exist
  20 │         env:
  21 │           - name: SHELVE_SECRET_KEY
  22 │             value: noodles
  23 │           - name: JWT_SECRET_KEY
  24 └             value: noodles
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ml-service' of Deployment 'ml-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment16.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: ml-service
  17 │         image: ghcr.io/converged-computing/lammps-stream-ml:server
  18 │         # These should be secrets, but OK to test
  19 │         # I'm putting them here so you know they exist
  20 │         env:
  21 │           - name: SHELVE_SECRET_KEY
  22 │             value: noodles
  23 │           - name: JWT_SECRET_KEY
  24 └             value: noodles
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'ml-service' of Deployment 'ml-server' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 server-deployment16.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: ml-service
  17 │         image: ghcr.io/converged-computing/lammps-stream-ml:server
  18 │         # These should be secrets, but OK to test
  19 │         # I'm putting them here so you know they exist
  20 │         env:
  21 │           - name: SHELVE_SECRET_KEY
  22 │             value: noodles
  23 │           - name: JWT_SECRET_KEY
  24 └             value: noodles
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment16.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: ml-service
  17 │         image: ghcr.io/converged-computing/lammps-stream-ml:server
  18 │         # These should be secrets, but OK to test
  19 │         # I'm putting them here so you know they exist
  20 │         env:
  21 │           - name: SHELVE_SECRET_KEY
  22 │             value: noodles
  23 │           - name: JWT_SECRET_KEY
  24 └             value: noodles
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ml-service" of deployment "ml-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment16.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: ml-service
  17 │         image: ghcr.io/converged-computing/lammps-stream-ml:server
  18 │         # These should be secrets, but OK to test
  19 │         # I'm putting them here so you know they exist
  20 │         env:
  21 │           - name: SHELVE_SECRET_KEY
  22 │             value: noodles
  23 │           - name: JWT_SECRET_KEY
  24 └             value: noodles
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment16.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: ml-service
  17 │         image: ghcr.io/converged-computing/lammps-stream-ml:server
  18 │         # These should be secrets, but OK to test
  19 │         # I'm putting them here so you know they exist
  20 │         env:
  21 │           - name: SHELVE_SECRET_KEY
  22 │             value: noodles
  23 │           - name: JWT_SECRET_KEY
  24 └             value: noodles
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment ml-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment16.yaml:4
────────────────────────────────────────
   4 [   name: ml-server
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ml-server in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ml-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment16.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: ml-service
  17 │         image: ghcr.io/converged-computing/lammps-stream-ml:server
  18 │         # These should be secrets, but OK to test
  19 │         # I'm putting them here so you know they exist
  20 │         env:
  21 │           - name: SHELVE_SECRET_KEY
  22 │             value: noodles
  23 │           - name: JWT_SECRET_KEY
  24 └             value: noodles
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ml-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment16.yaml:15-33
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: ml-service
  17 │         image: ghcr.io/converged-computing/lammps-stream-ml:server
  18 │         # These should be secrets, but OK to test
  19 │         # I'm putting them here so you know they exist
  20 │         env:
  21 │           - name: SHELVE_SECRET_KEY
  22 │             value: noodles
  23 └           - name: JWT_SECRET_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container ml-service in deployment ml-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment16.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: ml-service
  17 │         image: ghcr.io/converged-computing/lammps-stream-ml:server
  18 │         # These should be secrets, but OK to test
  19 │         # I'm putting them here so you know they exist
  20 │         env:
  21 │           - name: SHELVE_SECRET_KEY
  22 │             value: noodles
  23 │           - name: JWT_SECRET_KEY
  24 └             value: noodles
  ..   
────────────────────────────────────────



server-deployment17.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment17.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment17.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment17.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment17.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment17.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment17.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment17.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment17.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment17.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment17.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment17.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment17.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment17.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment17.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment17.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment17.yaml:4
────────────────────────────────────────
   4 [   name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment17.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment17.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment17.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────



server-deployment19.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment19.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: celestialowl/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service.yaml
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment19.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: celestialowl/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service.yaml
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment19.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: celestialowl/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service.yaml
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment19.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: celestialowl/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service.yaml
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment19.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: celestialowl/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service.yaml
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment19.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: celestialowl/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service.yaml
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment19.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: celestialowl/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service.yaml
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment19.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: celestialowl/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service.yaml
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment19.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: celestialowl/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service.yaml
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment19.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: celestialowl/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service.yaml
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment19.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: celestialowl/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service.yaml
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment19.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: celestialowl/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service.yaml
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment19.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: celestialowl/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service.yaml
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment19.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: celestialowl/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service.yaml
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment19.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: celestialowl/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service.yaml
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment19.yaml:4
────────────────────────────────────────
   4 [   name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment19.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: celestialowl/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service.yaml
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment19.yaml:15-34
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: server
  17 │           image: celestialowl/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service.yaml
  23 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment19.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: celestialowl/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service.yaml
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────



server-deployment20.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment20.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment20.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment20.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment20.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment20.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment20.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment20.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment20.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment20.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment20.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment20.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment20.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment20.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment20.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment20.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment20.yaml:4
────────────────────────────────────────
   4 [   name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment20.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment20.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment20.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────



server-deployment21.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment21.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: casperdamen/multi-server-pgfix-5-11
  18 │           env:
  19 │             - name: REDIS_HOST
  20 │               value: redis-cluster-ip-service
  21 │             - name: REDIS_PORT
  22 │               value: "6379"
  23 │             - name: PGUSER
  24 └               value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment21.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: casperdamen/multi-server-pgfix-5-11
  18 │           env:
  19 │             - name: REDIS_HOST
  20 │               value: redis-cluster-ip-service
  21 │             - name: REDIS_PORT
  22 │               value: "6379"
  23 │             - name: PGUSER
  24 └               value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment21.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: casperdamen/multi-server-pgfix-5-11
  18 │           env:
  19 │             - name: REDIS_HOST
  20 │               value: redis-cluster-ip-service
  21 │             - name: REDIS_PORT
  22 │               value: "6379"
  23 │             - name: PGUSER
  24 └               value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment21.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: casperdamen/multi-server-pgfix-5-11
  18 │           env:
  19 │             - name: REDIS_HOST
  20 │               value: redis-cluster-ip-service
  21 │             - name: REDIS_PORT
  22 │               value: "6379"
  23 │             - name: PGUSER
  24 └               value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment21.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: casperdamen/multi-server-pgfix-5-11
  18 │           env:
  19 │             - name: REDIS_HOST
  20 │               value: redis-cluster-ip-service
  21 │             - name: REDIS_PORT
  22 │               value: "6379"
  23 │             - name: PGUSER
  24 └               value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment21.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: casperdamen/multi-server-pgfix-5-11
  18 │           env:
  19 │             - name: REDIS_HOST
  20 │               value: redis-cluster-ip-service
  21 │             - name: REDIS_PORT
  22 │               value: "6379"
  23 │             - name: PGUSER
  24 └               value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment21.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: casperdamen/multi-server-pgfix-5-11
  18 │           env:
  19 │             - name: REDIS_HOST
  20 │               value: redis-cluster-ip-service
  21 │             - name: REDIS_PORT
  22 │               value: "6379"
  23 │             - name: PGUSER
  24 └               value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment21.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: casperdamen/multi-server-pgfix-5-11
  18 │           env:
  19 │             - name: REDIS_HOST
  20 │               value: redis-cluster-ip-service
  21 │             - name: REDIS_PORT
  22 │               value: "6379"
  23 │             - name: PGUSER
  24 └               value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment21.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: casperdamen/multi-server-pgfix-5-11
  18 │           env:
  19 │             - name: REDIS_HOST
  20 │               value: redis-cluster-ip-service
  21 │             - name: REDIS_PORT
  22 │               value: "6379"
  23 │             - name: PGUSER
  24 └               value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment21.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: casperdamen/multi-server-pgfix-5-11
  18 │           env:
  19 │             - name: REDIS_HOST
  20 │               value: redis-cluster-ip-service
  21 │             - name: REDIS_PORT
  22 │               value: "6379"
  23 │             - name: PGUSER
  24 └               value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment21.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: casperdamen/multi-server-pgfix-5-11
  18 │           env:
  19 │             - name: REDIS_HOST
  20 │               value: redis-cluster-ip-service
  21 │             - name: REDIS_PORT
  22 │               value: "6379"
  23 │             - name: PGUSER
  24 └               value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment21.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: casperdamen/multi-server-pgfix-5-11
  18 │           env:
  19 │             - name: REDIS_HOST
  20 │               value: redis-cluster-ip-service
  21 │             - name: REDIS_PORT
  22 │               value: "6379"
  23 │             - name: PGUSER
  24 └               value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment21.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: casperdamen/multi-server-pgfix-5-11
  18 │           env:
  19 │             - name: REDIS_HOST
  20 │               value: redis-cluster-ip-service
  21 │             - name: REDIS_PORT
  22 │               value: "6379"
  23 │             - name: PGUSER
  24 └               value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment21.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: casperdamen/multi-server-pgfix-5-11
  18 │           env:
  19 │             - name: REDIS_HOST
  20 │               value: redis-cluster-ip-service
  21 │             - name: REDIS_PORT
  22 │               value: "6379"
  23 │             - name: PGUSER
  24 └               value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment21.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: casperdamen/multi-server-pgfix-5-11
  18 │           env:
  19 │             - name: REDIS_HOST
  20 │               value: redis-cluster-ip-service
  21 │             - name: REDIS_PORT
  22 │               value: "6379"
  23 │             - name: PGUSER
  24 └               value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment21.yaml:4
────────────────────────────────────────
   4 [   name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment21.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: casperdamen/multi-server-pgfix-5-11
  18 │           env:
  19 │             - name: REDIS_HOST
  20 │               value: redis-cluster-ip-service
  21 │             - name: REDIS_PORT
  22 │               value: "6379"
  23 │             - name: PGUSER
  24 └               value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment21.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: server
  17 │           image: casperdamen/multi-server-pgfix-5-11
  18 │           env:
  19 │             - name: REDIS_HOST
  20 │               value: redis-cluster-ip-service
  21 │             - name: REDIS_PORT
  22 │               value: "6379"
  23 └             - name: PGUSER
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment21.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: casperdamen/multi-server-pgfix-5-11
  18 │           env:
  19 │             - name: REDIS_HOST
  20 │               value: redis-cluster-ip-service
  21 │             - name: REDIS_PORT
  22 │               value: "6379"
  23 │             - name: PGUSER
  24 └               value: postgres
  ..   
────────────────────────────────────────



server-deployment22.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment22.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: souhardya/multi-server-1
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env: 
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment22.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: souhardya/multi-server-1
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env: 
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment22.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: souhardya/multi-server-1
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env: 
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment22.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: souhardya/multi-server-1
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env: 
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment22.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: souhardya/multi-server-1
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env: 
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment22.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: souhardya/multi-server-1
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env: 
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment22.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: souhardya/multi-server-1
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env: 
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment22.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: souhardya/multi-server-1
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env: 
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment22.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: souhardya/multi-server-1
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env: 
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment22.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: souhardya/multi-server-1
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env: 
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment22.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: souhardya/multi-server-1
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env: 
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment22.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: souhardya/multi-server-1
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env: 
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment22.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: souhardya/multi-server-1
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env: 
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment22.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: souhardya/multi-server-1
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env: 
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment22.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: souhardya/multi-server-1
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env: 
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment22.yaml:4
────────────────────────────────────────
   4 [   name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment22.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: souhardya/multi-server-1
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env: 
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment22.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: server
  17 │           image: souhardya/multi-server-1
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env: 
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment22.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: souhardya/multi-server-1
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env: 
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────



server-deployment23.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment23.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379" 
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment23.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379" 
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment23.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379" 
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment23.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379" 
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment23.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379" 
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment23.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379" 
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment23.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379" 
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment23.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379" 
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment23.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379" 
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment23.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379" 
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment23.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379" 
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment23.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379" 
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment23.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379" 
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment23.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379" 
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment23.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379" 
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment23.yaml:4
────────────────────────────────────────
   4 [   name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment23.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379" 
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment23.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment23.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379" 
  ..   
────────────────────────────────────────



server-deployment24.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ml-service' of Deployment 'ml-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment24.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: ml-service
  17 │         image: ghcr.io/converged-computing/lammps-stream-ml:server-arm@sha256:b4effb8eb603a8672e5ab1160366a1922dfc4c6c5c53c62d1b11a1df32eee6e7
  18 │         # These should be secrets, but OK to test
  19 │         # I'm putting them here so you know they exist
  20 │         env:
  21 │           - name: SHELVE_SECRET_KEY
  22 │             value: noodles
  23 │           - name: JWT_SECRET_KEY
  24 └             value: noodles
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ml-service' of Deployment 'ml-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment24.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: ml-service
  17 │         image: ghcr.io/converged-computing/lammps-stream-ml:server-arm@sha256:b4effb8eb603a8672e5ab1160366a1922dfc4c6c5c53c62d1b11a1df32eee6e7
  18 │         # These should be secrets, but OK to test
  19 │         # I'm putting them here so you know they exist
  20 │         env:
  21 │           - name: SHELVE_SECRET_KEY
  22 │             value: noodles
  23 │           - name: JWT_SECRET_KEY
  24 └             value: noodles
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ml-service' of 'deployment' 'ml-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment24.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: ml-service
  17 │         image: ghcr.io/converged-computing/lammps-stream-ml:server-arm@sha256:b4effb8eb603a8672e5ab1160366a1922dfc4c6c5c53c62d1b11a1df32eee6e7
  18 │         # These should be secrets, but OK to test
  19 │         # I'm putting them here so you know they exist
  20 │         env:
  21 │           - name: SHELVE_SECRET_KEY
  22 │             value: noodles
  23 │           - name: JWT_SECRET_KEY
  24 └             value: noodles
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'ml-service' of Deployment 'ml-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment24.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: ml-service
  17 │         image: ghcr.io/converged-computing/lammps-stream-ml:server-arm@sha256:b4effb8eb603a8672e5ab1160366a1922dfc4c6c5c53c62d1b11a1df32eee6e7
  18 │         # These should be secrets, but OK to test
  19 │         # I'm putting them here so you know they exist
  20 │         env:
  21 │           - name: SHELVE_SECRET_KEY
  22 │             value: noodles
  23 │           - name: JWT_SECRET_KEY
  24 └             value: noodles
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ml-service' of Deployment 'ml-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment24.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: ml-service
  17 │         image: ghcr.io/converged-computing/lammps-stream-ml:server-arm@sha256:b4effb8eb603a8672e5ab1160366a1922dfc4c6c5c53c62d1b11a1df32eee6e7
  18 │         # These should be secrets, but OK to test
  19 │         # I'm putting them here so you know they exist
  20 │         env:
  21 │           - name: SHELVE_SECRET_KEY
  22 │             value: noodles
  23 │           - name: JWT_SECRET_KEY
  24 └             value: noodles
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ml-service' of Deployment 'ml-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment24.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: ml-service
  17 │         image: ghcr.io/converged-computing/lammps-stream-ml:server-arm@sha256:b4effb8eb603a8672e5ab1160366a1922dfc4c6c5c53c62d1b11a1df32eee6e7
  18 │         # These should be secrets, but OK to test
  19 │         # I'm putting them here so you know they exist
  20 │         env:
  21 │           - name: SHELVE_SECRET_KEY
  22 │             value: noodles
  23 │           - name: JWT_SECRET_KEY
  24 └             value: noodles
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'ml-service' of Deployment 'ml-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment24.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: ml-service
  17 │         image: ghcr.io/converged-computing/lammps-stream-ml:server-arm@sha256:b4effb8eb603a8672e5ab1160366a1922dfc4c6c5c53c62d1b11a1df32eee6e7
  18 │         # These should be secrets, but OK to test
  19 │         # I'm putting them here so you know they exist
  20 │         env:
  21 │           - name: SHELVE_SECRET_KEY
  22 │             value: noodles
  23 │           - name: JWT_SECRET_KEY
  24 └             value: noodles
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'ml-service' of Deployment 'ml-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment24.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: ml-service
  17 │         image: ghcr.io/converged-computing/lammps-stream-ml:server-arm@sha256:b4effb8eb603a8672e5ab1160366a1922dfc4c6c5c53c62d1b11a1df32eee6e7
  18 │         # These should be secrets, but OK to test
  19 │         # I'm putting them here so you know they exist
  20 │         env:
  21 │           - name: SHELVE_SECRET_KEY
  22 │             value: noodles
  23 │           - name: JWT_SECRET_KEY
  24 └             value: noodles
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'ml-service' of Deployment 'ml-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment24.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: ml-service
  17 │         image: ghcr.io/converged-computing/lammps-stream-ml:server-arm@sha256:b4effb8eb603a8672e5ab1160366a1922dfc4c6c5c53c62d1b11a1df32eee6e7
  18 │         # These should be secrets, but OK to test
  19 │         # I'm putting them here so you know they exist
  20 │         env:
  21 │           - name: SHELVE_SECRET_KEY
  22 │             value: noodles
  23 │           - name: JWT_SECRET_KEY
  24 └             value: noodles
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ml-service' of Deployment 'ml-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment24.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: ml-service
  17 │         image: ghcr.io/converged-computing/lammps-stream-ml:server-arm@sha256:b4effb8eb603a8672e5ab1160366a1922dfc4c6c5c53c62d1b11a1df32eee6e7
  18 │         # These should be secrets, but OK to test
  19 │         # I'm putting them here so you know they exist
  20 │         env:
  21 │           - name: SHELVE_SECRET_KEY
  22 │             value: noodles
  23 │           - name: JWT_SECRET_KEY
  24 └             value: noodles
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ml-service' of Deployment 'ml-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment24.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: ml-service
  17 │         image: ghcr.io/converged-computing/lammps-stream-ml:server-arm@sha256:b4effb8eb603a8672e5ab1160366a1922dfc4c6c5c53c62d1b11a1df32eee6e7
  18 │         # These should be secrets, but OK to test
  19 │         # I'm putting them here so you know they exist
  20 │         env:
  21 │           - name: SHELVE_SECRET_KEY
  22 │             value: noodles
  23 │           - name: JWT_SECRET_KEY
  24 └             value: noodles
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'ml-service' of Deployment 'ml-server' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 server-deployment24.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: ml-service
  17 │         image: ghcr.io/converged-computing/lammps-stream-ml:server-arm@sha256:b4effb8eb603a8672e5ab1160366a1922dfc4c6c5c53c62d1b11a1df32eee6e7
  18 │         # These should be secrets, but OK to test
  19 │         # I'm putting them here so you know they exist
  20 │         env:
  21 │           - name: SHELVE_SECRET_KEY
  22 │             value: noodles
  23 │           - name: JWT_SECRET_KEY
  24 └             value: noodles
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment24.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: ml-service
  17 │         image: ghcr.io/converged-computing/lammps-stream-ml:server-arm@sha256:b4effb8eb603a8672e5ab1160366a1922dfc4c6c5c53c62d1b11a1df32eee6e7
  18 │         # These should be secrets, but OK to test
  19 │         # I'm putting them here so you know they exist
  20 │         env:
  21 │           - name: SHELVE_SECRET_KEY
  22 │             value: noodles
  23 │           - name: JWT_SECRET_KEY
  24 └             value: noodles
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ml-service" of deployment "ml-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment24.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: ml-service
  17 │         image: ghcr.io/converged-computing/lammps-stream-ml:server-arm@sha256:b4effb8eb603a8672e5ab1160366a1922dfc4c6c5c53c62d1b11a1df32eee6e7
  18 │         # These should be secrets, but OK to test
  19 │         # I'm putting them here so you know they exist
  20 │         env:
  21 │           - name: SHELVE_SECRET_KEY
  22 │             value: noodles
  23 │           - name: JWT_SECRET_KEY
  24 └             value: noodles
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment24.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: ml-service
  17 │         image: ghcr.io/converged-computing/lammps-stream-ml:server-arm@sha256:b4effb8eb603a8672e5ab1160366a1922dfc4c6c5c53c62d1b11a1df32eee6e7
  18 │         # These should be secrets, but OK to test
  19 │         # I'm putting them here so you know they exist
  20 │         env:
  21 │           - name: SHELVE_SECRET_KEY
  22 │             value: noodles
  23 │           - name: JWT_SECRET_KEY
  24 └             value: noodles
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment ml-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment24.yaml:4
────────────────────────────────────────
   4 [   name: ml-server
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment ml-server in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ml-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment24.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: ml-service
  17 │         image: ghcr.io/converged-computing/lammps-stream-ml:server-arm@sha256:b4effb8eb603a8672e5ab1160366a1922dfc4c6c5c53c62d1b11a1df32eee6e7
  18 │         # These should be secrets, but OK to test
  19 │         # I'm putting them here so you know they exist
  20 │         env:
  21 │           - name: SHELVE_SECRET_KEY
  22 │             value: noodles
  23 │           - name: JWT_SECRET_KEY
  24 └             value: noodles
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment ml-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment24.yaml:15-33
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: ml-service
  17 │         image: ghcr.io/converged-computing/lammps-stream-ml:server-arm@sha256:b4effb8eb603a8672e5ab1160366a1922dfc4c6c5c53c62d1b11a1df32eee6e7
  18 │         # These should be secrets, but OK to test
  19 │         # I'm putting them here so you know they exist
  20 │         env:
  21 │           - name: SHELVE_SECRET_KEY
  22 │             value: noodles
  23 └           - name: JWT_SECRET_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container ml-service in deployment ml-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment24.yaml:16-33
────────────────────────────────────────
  16 ┌       - name: ml-service
  17 │         image: ghcr.io/converged-computing/lammps-stream-ml:server-arm@sha256:b4effb8eb603a8672e5ab1160366a1922dfc4c6c5c53c62d1b11a1df32eee6e7
  18 │         # These should be secrets, but OK to test
  19 │         # I'm putting them here so you know they exist
  20 │         env:
  21 │           - name: SHELVE_SECRET_KEY
  22 │             value: noodles
  23 │           - name: JWT_SECRET_KEY
  24 └             value: noodles
  ..   
────────────────────────────────────────



server-deployment25.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment25.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: myk3s/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment25.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: myk3s/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment25.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: myk3s/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment25.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: myk3s/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment25.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: myk3s/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment25.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: myk3s/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment25.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: myk3s/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment25.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: myk3s/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment25.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: myk3s/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment25.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: myk3s/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment25.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: myk3s/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment25.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: myk3s/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment25.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: myk3s/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment25.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: myk3s/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment25.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: myk3s/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment25.yaml:4
────────────────────────────────────────
   4 [   name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment25.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: myk3s/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment25.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: server
  17 │           image: myk3s/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment25.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: myk3s/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────



server-deployment26.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment26.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment26.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment26.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment26.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment26.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment26.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment26.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment26.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment26.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment26.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment26.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment26.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment26.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment26.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment26.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment26.yaml:4
────────────────────────────────────────
   4 [   name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment26.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment26.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment26.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────



server-deployment27.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment27.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment27.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment27.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment27.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment27.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment27.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment27.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment27.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment27.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment27.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment27.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment27.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment27.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment27.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment27.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment27.yaml:4
────────────────────────────────────────
   4 [   name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment27.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment27.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment27.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────



server-deployment28.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment28.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment28.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment28.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment28.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment28.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment28.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment28.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment28.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment28.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment28.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment28.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment28.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment28.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment28.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment28.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment28.yaml:4
────────────────────────────────────────
   4 [   name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment28.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment28.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment28.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────



server-deployment29.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment29.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment29.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment29.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment29.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment29.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment29.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment29.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment29.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment29.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment29.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment29.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment29.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment29.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment29.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment29.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment29.yaml:4
────────────────────────────────────────
   4 [   name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment29.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment29.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment29.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────



server-deployment2_1.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment2_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: nshankar13/server:main
  21 │         imagePullPolicy: Always
  22 │         command:
  23 └         - /server
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment2_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: nshankar13/server:main
  21 │         imagePullPolicy: Always
  22 │         command:
  23 └         - /server
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server' in 'server' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment2_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: nshankar13/server:main
  21 │         imagePullPolicy: Always
  22 │         command:
  23 └         - /server
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment2_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: nshankar13/server:main
  21 │         imagePullPolicy: Always
  22 │         command:
  23 └         - /server
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment2_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: nshankar13/server:main
  21 │         imagePullPolicy: Always
  22 │         command:
  23 └         - /server
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment2_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: nshankar13/server:main
  21 │         imagePullPolicy: Always
  22 │         command:
  23 └         - /server
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment2_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: nshankar13/server:main
  21 │         imagePullPolicy: Always
  22 │         command:
  23 └         - /server
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment2_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: nshankar13/server:main
  21 │         imagePullPolicy: Always
  22 │         command:
  23 └         - /server
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment2_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: nshankar13/server:main
  21 │         imagePullPolicy: Always
  22 │         command:
  23 └         - /server
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment2_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: nshankar13/server:main
  21 │         imagePullPolicy: Always
  22 │         command:
  23 └         - /server
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment2_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: nshankar13/server:main
  21 │         imagePullPolicy: Always
  22 │         command:
  23 └         - /server
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment2_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: nshankar13/server:main
  21 │         imagePullPolicy: Always
  22 │         command:
  23 └         - /server
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server" in "server" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment2_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: nshankar13/server:main
  21 │         imagePullPolicy: Always
  22 │         command:
  23 └         - /server
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment2_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: nshankar13/server:main
  21 │         imagePullPolicy: Always
  22 │         command:
  23 └         - /server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server in server namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment2_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: nshankar13/server:main
  21 │         imagePullPolicy: Always
  22 │         command:
  23 └         - /server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server in server namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment2_1.yaml:18-23
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: server
  20 │         image: nshankar13/server:main
  21 │         imagePullPolicy: Always
  22 │         command:
  23 └         - /server
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server (namespace: server) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment2_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: nshankar13/server:main
  21 │         imagePullPolicy: Always
  22 │         command:
  23 └         - /server
────────────────────────────────────────



server-deployment3.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment3.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: cygnetops/multi-server-pgfix-5-11
  18 │           image: stephengrider/multi-server
  19 │           ports:
  20 │             - containerPort: 5000 # listening port hardcoded in app code
  21 │           env:
  22 │             # STATIC VALUES (MAPPED using k8 service name)
  23 │             - name: REDIS_HOST
  24 └             # redis-cluster-ip-service: the name of the redis cluster ip
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment3.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: cygnetops/multi-server-pgfix-5-11
  18 │           image: stephengrider/multi-server
  19 │           ports:
  20 │             - containerPort: 5000 # listening port hardcoded in app code
  21 │           env:
  22 │             # STATIC VALUES (MAPPED using k8 service name)
  23 │             - name: REDIS_HOST
  24 └             # redis-cluster-ip-service: the name of the redis cluster ip
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment3.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: cygnetops/multi-server-pgfix-5-11
  18 │           image: stephengrider/multi-server
  19 │           ports:
  20 │             - containerPort: 5000 # listening port hardcoded in app code
  21 │           env:
  22 │             # STATIC VALUES (MAPPED using k8 service name)
  23 │             - name: REDIS_HOST
  24 └             # redis-cluster-ip-service: the name of the redis cluster ip
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment3.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: cygnetops/multi-server-pgfix-5-11
  18 │           image: stephengrider/multi-server
  19 │           ports:
  20 │             - containerPort: 5000 # listening port hardcoded in app code
  21 │           env:
  22 │             # STATIC VALUES (MAPPED using k8 service name)
  23 │             - name: REDIS_HOST
  24 └             # redis-cluster-ip-service: the name of the redis cluster ip
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment3.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: cygnetops/multi-server-pgfix-5-11
  18 │           image: stephengrider/multi-server
  19 │           ports:
  20 │             - containerPort: 5000 # listening port hardcoded in app code
  21 │           env:
  22 │             # STATIC VALUES (MAPPED using k8 service name)
  23 │             - name: REDIS_HOST
  24 └             # redis-cluster-ip-service: the name of the redis cluster ip
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment3.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: cygnetops/multi-server-pgfix-5-11
  18 │           image: stephengrider/multi-server
  19 │           ports:
  20 │             - containerPort: 5000 # listening port hardcoded in app code
  21 │           env:
  22 │             # STATIC VALUES (MAPPED using k8 service name)
  23 │             - name: REDIS_HOST
  24 └             # redis-cluster-ip-service: the name of the redis cluster ip
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment3.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: cygnetops/multi-server-pgfix-5-11
  18 │           image: stephengrider/multi-server
  19 │           ports:
  20 │             - containerPort: 5000 # listening port hardcoded in app code
  21 │           env:
  22 │             # STATIC VALUES (MAPPED using k8 service name)
  23 │             - name: REDIS_HOST
  24 └             # redis-cluster-ip-service: the name of the redis cluster ip
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment3.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: cygnetops/multi-server-pgfix-5-11
  18 │           image: stephengrider/multi-server
  19 │           ports:
  20 │             - containerPort: 5000 # listening port hardcoded in app code
  21 │           env:
  22 │             # STATIC VALUES (MAPPED using k8 service name)
  23 │             - name: REDIS_HOST
  24 └             # redis-cluster-ip-service: the name of the redis cluster ip
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment3.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: cygnetops/multi-server-pgfix-5-11
  18 │           image: stephengrider/multi-server
  19 │           ports:
  20 │             - containerPort: 5000 # listening port hardcoded in app code
  21 │           env:
  22 │             # STATIC VALUES (MAPPED using k8 service name)
  23 │             - name: REDIS_HOST
  24 └             # redis-cluster-ip-service: the name of the redis cluster ip
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment3.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: cygnetops/multi-server-pgfix-5-11
  18 │           image: stephengrider/multi-server
  19 │           ports:
  20 │             - containerPort: 5000 # listening port hardcoded in app code
  21 │           env:
  22 │             # STATIC VALUES (MAPPED using k8 service name)
  23 │             - name: REDIS_HOST
  24 └             # redis-cluster-ip-service: the name of the redis cluster ip
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment3.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: cygnetops/multi-server-pgfix-5-11
  18 │           image: stephengrider/multi-server
  19 │           ports:
  20 │             - containerPort: 5000 # listening port hardcoded in app code
  21 │           env:
  22 │             # STATIC VALUES (MAPPED using k8 service name)
  23 │             - name: REDIS_HOST
  24 └             # redis-cluster-ip-service: the name of the redis cluster ip
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment3.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: cygnetops/multi-server-pgfix-5-11
  18 │           image: stephengrider/multi-server
  19 │           ports:
  20 │             - containerPort: 5000 # listening port hardcoded in app code
  21 │           env:
  22 │             # STATIC VALUES (MAPPED using k8 service name)
  23 │             - name: REDIS_HOST
  24 └             # redis-cluster-ip-service: the name of the redis cluster ip
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment3.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: cygnetops/multi-server-pgfix-5-11
  18 │           image: stephengrider/multi-server
  19 │           ports:
  20 │             - containerPort: 5000 # listening port hardcoded in app code
  21 │           env:
  22 │             # STATIC VALUES (MAPPED using k8 service name)
  23 │             - name: REDIS_HOST
  24 └             # redis-cluster-ip-service: the name of the redis cluster ip
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment3.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: cygnetops/multi-server-pgfix-5-11
  18 │           image: stephengrider/multi-server
  19 │           ports:
  20 │             - containerPort: 5000 # listening port hardcoded in app code
  21 │           env:
  22 │             # STATIC VALUES (MAPPED using k8 service name)
  23 │             - name: REDIS_HOST
  24 └             # redis-cluster-ip-service: the name of the redis cluster ip
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment3.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: cygnetops/multi-server-pgfix-5-11
  18 │           image: stephengrider/multi-server
  19 │           ports:
  20 │             - containerPort: 5000 # listening port hardcoded in app code
  21 │           env:
  22 │             # STATIC VALUES (MAPPED using k8 service name)
  23 │             - name: REDIS_HOST
  24 └             # redis-cluster-ip-service: the name of the redis cluster ip
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment3.yaml:4
────────────────────────────────────────
   4 [   name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment3.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: cygnetops/multi-server-pgfix-5-11
  18 │           image: stephengrider/multi-server
  19 │           ports:
  20 │             - containerPort: 5000 # listening port hardcoded in app code
  21 │           env:
  22 │             # STATIC VALUES (MAPPED using k8 service name)
  23 │             - name: REDIS_HOST
  24 └             # redis-cluster-ip-service: the name of the redis cluster ip
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment3.yaml:15-45
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: server
  17 │           # image: cygnetops/multi-server-pgfix-5-11
  18 │           image: stephengrider/multi-server
  19 │           ports:
  20 │             - containerPort: 5000 # listening port hardcoded in app code
  21 │           env:
  22 │             # STATIC VALUES (MAPPED using k8 service name)
  23 └             - name: REDIS_HOST
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment3.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: cygnetops/multi-server-pgfix-5-11
  18 │           image: stephengrider/multi-server
  19 │           ports:
  20 │             - containerPort: 5000 # listening port hardcoded in app code
  21 │           env:
  22 │             # STATIC VALUES (MAPPED using k8 service name)
  23 │             - name: REDIS_HOST
  24 └             # redis-cluster-ip-service: the name of the redis cluster ip
  ..   
────────────────────────────────────────



server-deployment30.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment30.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/server-skaffold
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment30.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/server-skaffold
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment30.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/server-skaffold
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment30.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/server-skaffold
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment30.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/server-skaffold
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment30.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/server-skaffold
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment30.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/server-skaffold
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment30.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/server-skaffold
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment30.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/server-skaffold
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment30.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/server-skaffold
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment30.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/server-skaffold
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment30.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/server-skaffold
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment30.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/server-skaffold
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment30.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/server-skaffold
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment30.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/server-skaffold
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment30.yaml:4
────────────────────────────────────────
   4 [   name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment30.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/server-skaffold
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment30.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: server
  17 │           image: rallycoding/server-skaffold
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment30.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/server-skaffold
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────



server-deployment32.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment32.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment32.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment32.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment32.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment32.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment32.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment32.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment32.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment32.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment32.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment32.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment32.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment32.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment32.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment32.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment32.yaml:4
────────────────────────────────────────
   4 [   name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment32.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment32.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment32.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────



server-deployment33.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment33.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: yahyahaq/multi-server-without-ssl
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment33.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: yahyahaq/multi-server-without-ssl
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment33.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: yahyahaq/multi-server-without-ssl
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment33.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: yahyahaq/multi-server-without-ssl
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment33.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: yahyahaq/multi-server-without-ssl
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment33.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: yahyahaq/multi-server-without-ssl
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment33.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: yahyahaq/multi-server-without-ssl
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment33.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: yahyahaq/multi-server-without-ssl
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment33.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: yahyahaq/multi-server-without-ssl
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment33.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: yahyahaq/multi-server-without-ssl
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment33.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: yahyahaq/multi-server-without-ssl
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment33.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: yahyahaq/multi-server-without-ssl
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment33.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: yahyahaq/multi-server-without-ssl
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment33.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: yahyahaq/multi-server-without-ssl
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment33.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: yahyahaq/multi-server-without-ssl
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment33.yaml:4
────────────────────────────────────────
   4 [   name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment33.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: yahyahaq/multi-server-without-ssl
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment33.yaml:15-34
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: server
  17 │           image: yahyahaq/multi-server-without-ssl
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment33.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: yahyahaq/multi-server-without-ssl
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────



server-deployment34.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment34.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment34.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment34.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment34.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment34.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment34.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment34.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment34.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment34.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment34.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment34.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment34.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment34.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment34.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment34.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment34.yaml:4
────────────────────────────────────────
   4 [   name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment34.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment34.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment34.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: stephengrider/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────



server-deployment35.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment35.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: raanan7784/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment35.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: raanan7784/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment35.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: raanan7784/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment35.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: raanan7784/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment35.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: raanan7784/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment35.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: raanan7784/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment35.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: raanan7784/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment35.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: raanan7784/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment35.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: raanan7784/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment35.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: raanan7784/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment35.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: raanan7784/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment35.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: raanan7784/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment35.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: raanan7784/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment35.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: raanan7784/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment35.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: raanan7784/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment35.yaml:4
────────────────────────────────────────
   4 [   name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment35.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: raanan7784/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment35.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: server
  17 │           image: raanan7784/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment35.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: raanan7784/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────



server-deployment36.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment36.yaml:16-38
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: rallycoding/multi-server # for dev
  18 │           image: asia-southeast1-docker.pkg.dev/k8s-practice-416103/k8s-practice-registry/multi-server:latest
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               value: redis-cluster-ip-service
  24 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment36.yaml:16-38
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: rallycoding/multi-server # for dev
  18 │           image: asia-southeast1-docker.pkg.dev/k8s-practice-416103/k8s-practice-registry/multi-server:latest
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               value: redis-cluster-ip-service
  24 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment36.yaml:16-38
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: rallycoding/multi-server # for dev
  18 │           image: asia-southeast1-docker.pkg.dev/k8s-practice-416103/k8s-practice-registry/multi-server:latest
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               value: redis-cluster-ip-service
  24 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment36.yaml:16-38
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: rallycoding/multi-server # for dev
  18 │           image: asia-southeast1-docker.pkg.dev/k8s-practice-416103/k8s-practice-registry/multi-server:latest
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               value: redis-cluster-ip-service
  24 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment36.yaml:16-38
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: rallycoding/multi-server # for dev
  18 │           image: asia-southeast1-docker.pkg.dev/k8s-practice-416103/k8s-practice-registry/multi-server:latest
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               value: redis-cluster-ip-service
  24 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment36.yaml:16-38
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: rallycoding/multi-server # for dev
  18 │           image: asia-southeast1-docker.pkg.dev/k8s-practice-416103/k8s-practice-registry/multi-server:latest
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               value: redis-cluster-ip-service
  24 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment36.yaml:16-38
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: rallycoding/multi-server # for dev
  18 │           image: asia-southeast1-docker.pkg.dev/k8s-practice-416103/k8s-practice-registry/multi-server:latest
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               value: redis-cluster-ip-service
  24 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment36.yaml:16-38
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: rallycoding/multi-server # for dev
  18 │           image: asia-southeast1-docker.pkg.dev/k8s-practice-416103/k8s-practice-registry/multi-server:latest
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               value: redis-cluster-ip-service
  24 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment36.yaml:16-38
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: rallycoding/multi-server # for dev
  18 │           image: asia-southeast1-docker.pkg.dev/k8s-practice-416103/k8s-practice-registry/multi-server:latest
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               value: redis-cluster-ip-service
  24 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment36.yaml:16-38
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: rallycoding/multi-server # for dev
  18 │           image: asia-southeast1-docker.pkg.dev/k8s-practice-416103/k8s-practice-registry/multi-server:latest
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               value: redis-cluster-ip-service
  24 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment36.yaml:16-38
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: rallycoding/multi-server # for dev
  18 │           image: asia-southeast1-docker.pkg.dev/k8s-practice-416103/k8s-practice-registry/multi-server:latest
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               value: redis-cluster-ip-service
  24 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment36.yaml:16-38
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: rallycoding/multi-server # for dev
  18 │           image: asia-southeast1-docker.pkg.dev/k8s-practice-416103/k8s-practice-registry/multi-server:latest
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               value: redis-cluster-ip-service
  24 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment36.yaml:16-38
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: rallycoding/multi-server # for dev
  18 │           image: asia-southeast1-docker.pkg.dev/k8s-practice-416103/k8s-practice-registry/multi-server:latest
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               value: redis-cluster-ip-service
  24 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment36.yaml:16-38
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: rallycoding/multi-server # for dev
  18 │           image: asia-southeast1-docker.pkg.dev/k8s-practice-416103/k8s-practice-registry/multi-server:latest
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               value: redis-cluster-ip-service
  24 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment36.yaml:16-38
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: rallycoding/multi-server # for dev
  18 │           image: asia-southeast1-docker.pkg.dev/k8s-practice-416103/k8s-practice-registry/multi-server:latest
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               value: redis-cluster-ip-service
  24 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment36.yaml:4
────────────────────────────────────────
   4 [   name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment36.yaml:16-38
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: rallycoding/multi-server # for dev
  18 │           image: asia-southeast1-docker.pkg.dev/k8s-practice-416103/k8s-practice-registry/multi-server:latest
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               value: redis-cluster-ip-service
  24 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment36.yaml:15-38
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: server
  17 │           # image: rallycoding/multi-server # for dev
  18 │           image: asia-southeast1-docker.pkg.dev/k8s-practice-416103/k8s-practice-registry/multi-server:latest
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 └               value: redis-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment36.yaml:16-38
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # image: rallycoding/multi-server # for dev
  18 │           image: asia-southeast1-docker.pkg.dev/k8s-practice-416103/k8s-practice-registry/multi-server:latest
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               value: redis-cluster-ip-service
  24 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────



server-deployment37.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment37.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: arcmistrz/multi-server:v6
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment37.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: arcmistrz/multi-server:v6
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment37.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: arcmistrz/multi-server:v6
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment37.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: arcmistrz/multi-server:v6
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment37.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: arcmistrz/multi-server:v6
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment37.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: arcmistrz/multi-server:v6
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment37.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: arcmistrz/multi-server:v6
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment37.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: arcmistrz/multi-server:v6
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment37.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: arcmistrz/multi-server:v6
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment37.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: arcmistrz/multi-server:v6
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment37.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: arcmistrz/multi-server:v6
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment37.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: arcmistrz/multi-server:v6
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment37.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: arcmistrz/multi-server:v6
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment37.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: arcmistrz/multi-server:v6
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment37.yaml:4
────────────────────────────────────────
   4 [   name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment37.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: arcmistrz/multi-server:v6
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment37.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: server
  17 │           image: arcmistrz/multi-server:v6
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment37.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: arcmistrz/multi-server:v6
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: "6379"
  ..   
────────────────────────────────────────



server-deployment38.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment38.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: ksobitov/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-clusterip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment38.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: ksobitov/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-clusterip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment38.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: ksobitov/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-clusterip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment38.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: ksobitov/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-clusterip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment38.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: ksobitov/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-clusterip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment38.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: ksobitov/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-clusterip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment38.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: ksobitov/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-clusterip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment38.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: ksobitov/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-clusterip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment38.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: ksobitov/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-clusterip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment38.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: ksobitov/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-clusterip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment38.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: ksobitov/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-clusterip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment38.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: ksobitov/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-clusterip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment38.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: ksobitov/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-clusterip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment38.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: ksobitov/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-clusterip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment38.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: ksobitov/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-clusterip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment38.yaml:4
────────────────────────────────────────
   4 [   name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment38.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: ksobitov/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-clusterip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment38.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: server
  17 │           image: ksobitov/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-clusterip-service
  23 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment38.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: ksobitov/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-clusterip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────



server-deployment39.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment39.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment39.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment39.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment39.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment39.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment39.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment39.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment39.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment39.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment39.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment39.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment39.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment39.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment39.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment39.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment39.yaml:4
────────────────────────────────────────
   4 [   name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment39.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment39.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment39.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────



server-deployment42.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'backend-container' of Deployment 'backend' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment42.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: backend-container
  17 │         image: acr2dnd549.azurecr.io/server:v1
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 └          - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'backend-container' of Deployment 'backend' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment42.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: backend-container
  17 │         image: acr2dnd549.azurecr.io/server:v1
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 └          - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'backend-container' of 'deployment' 'backend' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment42.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: backend-container
  17 │         image: acr2dnd549.azurecr.io/server:v1
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 └          - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'backend-container' of Deployment 'backend' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment42.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: backend-container
  17 │         image: acr2dnd549.azurecr.io/server:v1
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 └          - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'backend-container' of Deployment 'backend' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment42.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: backend-container
  17 │         image: acr2dnd549.azurecr.io/server:v1
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 └          - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'backend-container' of Deployment 'backend' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment42.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: backend-container
  17 │         image: acr2dnd549.azurecr.io/server:v1
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 └          - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'backend-container' of Deployment 'backend' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment42.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: backend-container
  17 │         image: acr2dnd549.azurecr.io/server:v1
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 └          - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'backend-container' of Deployment 'backend' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment42.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: backend-container
  17 │         image: acr2dnd549.azurecr.io/server:v1
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 └          - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'backend-container' of Deployment 'backend' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment42.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: backend-container
  17 │         image: acr2dnd549.azurecr.io/server:v1
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 └          - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'backend-container' of Deployment 'backend' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment42.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: backend-container
  17 │         image: acr2dnd549.azurecr.io/server:v1
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 └          - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'backend-container' of Deployment 'backend' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment42.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: backend-container
  17 │         image: acr2dnd549.azurecr.io/server:v1
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 └          - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment42.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: backend-container
  17 │         image: acr2dnd549.azurecr.io/server:v1
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 └          - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "backend-container" of deployment "backend" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment42.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: backend-container
  17 │         image: acr2dnd549.azurecr.io/server:v1
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 └          - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment42.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: backend-container
  17 │         image: acr2dnd549.azurecr.io/server:v1
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 └          - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment backend in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment42.yaml:4
────────────────────────────────────────
   4 [   name: backend
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container backend in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment42.yaml:16-20
────────────────────────────────────────
  16 ┌       - name: backend-container
  17 │         image: acr2dnd549.azurecr.io/server:v1
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 └          - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment backend in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment42.yaml:15-20
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: backend-container
  17 │         image: acr2dnd549.azurecr.io/server:v1
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 └          - containerPort: 8080
────────────────────────────────────────



server-deployment43.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 4, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment43.yaml:25-35
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: MONGO_HOST
  27 │               value: database
  28 │             - name: MONGO_PORT
  29 │               value: "27017"
  30 │           image: harshyadav1309/aiplanet_assignment:server
  31 │           name: server
  32 │           ports:
  33 └             - containerPort: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment43.yaml:25-35
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: MONGO_HOST
  27 │               value: database
  28 │             - name: MONGO_PORT
  29 │               value: "27017"
  30 │           image: harshyadav1309/aiplanet_assignment:server
  31 │           name: server
  32 │           ports:
  33 └             - containerPort: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment43.yaml:25-35
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: MONGO_HOST
  27 │               value: database
  28 │             - name: MONGO_PORT
  29 │               value: "27017"
  30 │           image: harshyadav1309/aiplanet_assignment:server
  31 │           name: server
  32 │           ports:
  33 └             - containerPort: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment43.yaml:25-35
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: MONGO_HOST
  27 │               value: database
  28 │             - name: MONGO_PORT
  29 │               value: "27017"
  30 │           image: harshyadav1309/aiplanet_assignment:server
  31 │           name: server
  32 │           ports:
  33 └             - containerPort: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment43.yaml:25-35
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: MONGO_HOST
  27 │               value: database
  28 │             - name: MONGO_PORT
  29 │               value: "27017"
  30 │           image: harshyadav1309/aiplanet_assignment:server
  31 │           name: server
  32 │           ports:
  33 └             - containerPort: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment43.yaml:25-35
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: MONGO_HOST
  27 │               value: database
  28 │             - name: MONGO_PORT
  29 │               value: "27017"
  30 │           image: harshyadav1309/aiplanet_assignment:server
  31 │           name: server
  32 │           ports:
  33 └             - containerPort: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment43.yaml:25-35
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: MONGO_HOST
  27 │               value: database
  28 │             - name: MONGO_PORT
  29 │               value: "27017"
  30 │           image: harshyadav1309/aiplanet_assignment:server
  31 │           name: server
  32 │           ports:
  33 └             - containerPort: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment43.yaml:25-35
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: MONGO_HOST
  27 │               value: database
  28 │             - name: MONGO_PORT
  29 │               value: "27017"
  30 │           image: harshyadav1309/aiplanet_assignment:server
  31 │           name: server
  32 │           ports:
  33 └             - containerPort: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment43.yaml:25-35
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: MONGO_HOST
  27 │               value: database
  28 │             - name: MONGO_PORT
  29 │               value: "27017"
  30 │           image: harshyadav1309/aiplanet_assignment:server
  31 │           name: server
  32 │           ports:
  33 └             - containerPort: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment43.yaml:25-35
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: MONGO_HOST
  27 │               value: database
  28 │             - name: MONGO_PORT
  29 │               value: "27017"
  30 │           image: harshyadav1309/aiplanet_assignment:server
  31 │           name: server
  32 │           ports:
  33 └             - containerPort: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment43.yaml:25-35
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: MONGO_HOST
  27 │               value: database
  28 │             - name: MONGO_PORT
  29 │               value: "27017"
  30 │           image: harshyadav1309/aiplanet_assignment:server
  31 │           name: server
  32 │           ports:
  33 └             - containerPort: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0024 (HIGH): Container 'server' of Deployment 'server' should not set host ports, 'ports[*].hostPort'
════════════════════════════════════════
According to pod security standard 'Host Ports', hostPorts should be disallowed, or at minimum restricted to a known list.

See https://avd.aquasec.com/misconfig/ksv024
────────────────────────────────────────
 server-deployment43.yaml:25-35
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: MONGO_HOST
  27 │               value: database
  28 │             - name: MONGO_PORT
  29 │               value: "27017"
  30 │           image: harshyadav1309/aiplanet_assignment:server
  31 │           name: server
  32 │           ports:
  33 └             - containerPort: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment43.yaml:25-35
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: MONGO_HOST
  27 │               value: database
  28 │             - name: MONGO_PORT
  29 │               value: "27017"
  30 │           image: harshyadav1309/aiplanet_assignment:server
  31 │           name: server
  32 │           ports:
  33 └             - containerPort: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment43.yaml:25-35
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: MONGO_HOST
  27 │               value: database
  28 │             - name: MONGO_PORT
  29 │               value: "27017"
  30 │           image: harshyadav1309/aiplanet_assignment:server
  31 │           name: server
  32 │           ports:
  33 └             - containerPort: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment43.yaml:25-35
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: MONGO_HOST
  27 │               value: database
  28 │             - name: MONGO_PORT
  29 │               value: "27017"
  30 │           image: harshyadav1309/aiplanet_assignment:server
  31 │           name: server
  32 │           ports:
  33 └             - containerPort: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment43.yaml:4-9
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f docker-compose.yaml
   6 │     kompose.version: 1.32.0 (765fde254)
   7 │   labels:
   8 │     io.kompose.service: server
   9 └   name: server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment43.yaml:25-35
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: MONGO_HOST
  27 │               value: database
  28 │             - name: MONGO_PORT
  29 │               value: "27017"
  30 │           image: harshyadav1309/aiplanet_assignment:server
  31 │           name: server
  32 │           ports:
  33 └             - containerPort: 3000
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment43.yaml:24-36
────────────────────────────────────────
  24 ┌       containers:
  25 │         - env:
  26 │             - name: MONGO_HOST
  27 │               value: database
  28 │             - name: MONGO_PORT
  29 │               value: "27017"
  30 │           image: harshyadav1309/aiplanet_assignment:server
  31 │           name: server
  32 └           ports:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment43.yaml:25-35
────────────────────────────────────────
  25 ┌         - env:
  26 │             - name: MONGO_HOST
  27 │               value: database
  28 │             - name: MONGO_PORT
  29 │               value: "27017"
  30 │           image: harshyadav1309/aiplanet_assignment:server
  31 │           name: server
  32 │           ports:
  33 └             - containerPort: 3000
  ..   
────────────────────────────────────────



server-deployment45.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment45.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: wiley19/multi-worker
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment45.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: wiley19/multi-worker
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment45.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: wiley19/multi-worker
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment45.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: wiley19/multi-worker
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment45.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: wiley19/multi-worker
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment45.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: wiley19/multi-worker
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment45.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: wiley19/multi-worker
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment45.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: wiley19/multi-worker
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment45.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: wiley19/multi-worker
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment45.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: wiley19/multi-worker
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment45.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: wiley19/multi-worker
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment45.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: wiley19/multi-worker
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment45.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: wiley19/multi-worker
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment45.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: wiley19/multi-worker
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment45.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: wiley19/multi-worker
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment45.yaml:4
────────────────────────────────────────
   4 [   name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment45.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: wiley19/multi-worker
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment45.yaml:15-34
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: server
  17 │           image: wiley19/multi-worker
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment45.yaml:16-34
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: wiley19/multi-worker
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────



server-deployment46.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment46.yaml:16-33
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: pgsoncada/server-image
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: MYSQLUSER
  22 │               value: 'user'
  23 │             - name: MYSQLPASSWORD
  24 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment46.yaml:16-33
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: pgsoncada/server-image
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: MYSQLUSER
  22 │               value: 'user'
  23 │             - name: MYSQLPASSWORD
  24 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment46.yaml:16-33
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: pgsoncada/server-image
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: MYSQLUSER
  22 │               value: 'user'
  23 │             - name: MYSQLPASSWORD
  24 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment46.yaml:16-33
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: pgsoncada/server-image
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: MYSQLUSER
  22 │               value: 'user'
  23 │             - name: MYSQLPASSWORD
  24 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment46.yaml:16-33
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: pgsoncada/server-image
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: MYSQLUSER
  22 │               value: 'user'
  23 │             - name: MYSQLPASSWORD
  24 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment46.yaml:16-33
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: pgsoncada/server-image
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: MYSQLUSER
  22 │               value: 'user'
  23 │             - name: MYSQLPASSWORD
  24 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment46.yaml:16-33
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: pgsoncada/server-image
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: MYSQLUSER
  22 │               value: 'user'
  23 │             - name: MYSQLPASSWORD
  24 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment46.yaml:16-33
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: pgsoncada/server-image
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: MYSQLUSER
  22 │               value: 'user'
  23 │             - name: MYSQLPASSWORD
  24 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment46.yaml:16-33
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: pgsoncada/server-image
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: MYSQLUSER
  22 │               value: 'user'
  23 │             - name: MYSQLPASSWORD
  24 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment46.yaml:16-33
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: pgsoncada/server-image
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: MYSQLUSER
  22 │               value: 'user'
  23 │             - name: MYSQLPASSWORD
  24 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment46.yaml:16-33
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: pgsoncada/server-image
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: MYSQLUSER
  22 │               value: 'user'
  23 │             - name: MYSQLPASSWORD
  24 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment46.yaml:16-33
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: pgsoncada/server-image
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: MYSQLUSER
  22 │               value: 'user'
  23 │             - name: MYSQLPASSWORD
  24 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment46.yaml:16-33
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: pgsoncada/server-image
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: MYSQLUSER
  22 │               value: 'user'
  23 │             - name: MYSQLPASSWORD
  24 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment46.yaml:16-33
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: pgsoncada/server-image
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: MYSQLUSER
  22 │               value: 'user'
  23 │             - name: MYSQLPASSWORD
  24 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment46.yaml:16-33
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: pgsoncada/server-image
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: MYSQLUSER
  22 │               value: 'user'
  23 │             - name: MYSQLPASSWORD
  24 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment46.yaml:4
────────────────────────────────────────
   4 [   name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment46.yaml:16-33
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: pgsoncada/server-image
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: MYSQLUSER
  22 │               value: 'user'
  23 │             - name: MYSQLPASSWORD
  24 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment46.yaml:15-33
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: server
  17 │           image: pgsoncada/server-image
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: MYSQLUSER
  22 │               value: 'user'
  23 └             - name: MYSQLPASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment46.yaml:16-33
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: pgsoncada/server-image
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: MYSQLUSER
  22 │               value: 'user'
  23 │             - name: MYSQLPASSWORD
  24 └               valueFrom:
  ..   
────────────────────────────────────────



server-deployment47.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment47.yaml:16-37
────────────────────────────────────────
  16 ┌       - image: nandinikodipunzula/multi-container-project-server
  17 │         name: server
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         env:
  21 │           - name: REDIS_HOST
  22 │             value: redis-cluster-ip-service
  23 │           - name: REDIS_PORT
  24 └             value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment47.yaml:16-37
────────────────────────────────────────
  16 ┌       - image: nandinikodipunzula/multi-container-project-server
  17 │         name: server
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         env:
  21 │           - name: REDIS_HOST
  22 │             value: redis-cluster-ip-service
  23 │           - name: REDIS_PORT
  24 └             value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment47.yaml:16-37
────────────────────────────────────────
  16 ┌       - image: nandinikodipunzula/multi-container-project-server
  17 │         name: server
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         env:
  21 │           - name: REDIS_HOST
  22 │             value: redis-cluster-ip-service
  23 │           - name: REDIS_PORT
  24 └             value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment47.yaml:16-37
────────────────────────────────────────
  16 ┌       - image: nandinikodipunzula/multi-container-project-server
  17 │         name: server
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         env:
  21 │           - name: REDIS_HOST
  22 │             value: redis-cluster-ip-service
  23 │           - name: REDIS_PORT
  24 └             value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment47.yaml:16-37
────────────────────────────────────────
  16 ┌       - image: nandinikodipunzula/multi-container-project-server
  17 │         name: server
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         env:
  21 │           - name: REDIS_HOST
  22 │             value: redis-cluster-ip-service
  23 │           - name: REDIS_PORT
  24 └             value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment47.yaml:16-37
────────────────────────────────────────
  16 ┌       - image: nandinikodipunzula/multi-container-project-server
  17 │         name: server
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         env:
  21 │           - name: REDIS_HOST
  22 │             value: redis-cluster-ip-service
  23 │           - name: REDIS_PORT
  24 └             value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment47.yaml:16-37
────────────────────────────────────────
  16 ┌       - image: nandinikodipunzula/multi-container-project-server
  17 │         name: server
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         env:
  21 │           - name: REDIS_HOST
  22 │             value: redis-cluster-ip-service
  23 │           - name: REDIS_PORT
  24 └             value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment47.yaml:16-37
────────────────────────────────────────
  16 ┌       - image: nandinikodipunzula/multi-container-project-server
  17 │         name: server
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         env:
  21 │           - name: REDIS_HOST
  22 │             value: redis-cluster-ip-service
  23 │           - name: REDIS_PORT
  24 └             value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment47.yaml:16-37
────────────────────────────────────────
  16 ┌       - image: nandinikodipunzula/multi-container-project-server
  17 │         name: server
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         env:
  21 │           - name: REDIS_HOST
  22 │             value: redis-cluster-ip-service
  23 │           - name: REDIS_PORT
  24 └             value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment47.yaml:16-37
────────────────────────────────────────
  16 ┌       - image: nandinikodipunzula/multi-container-project-server
  17 │         name: server
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         env:
  21 │           - name: REDIS_HOST
  22 │             value: redis-cluster-ip-service
  23 │           - name: REDIS_PORT
  24 └             value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment47.yaml:16-37
────────────────────────────────────────
  16 ┌       - image: nandinikodipunzula/multi-container-project-server
  17 │         name: server
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         env:
  21 │           - name: REDIS_HOST
  22 │             value: redis-cluster-ip-service
  23 │           - name: REDIS_PORT
  24 └             value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment47.yaml:16-37
────────────────────────────────────────
  16 ┌       - image: nandinikodipunzula/multi-container-project-server
  17 │         name: server
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         env:
  21 │           - name: REDIS_HOST
  22 │             value: redis-cluster-ip-service
  23 │           - name: REDIS_PORT
  24 └             value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment47.yaml:16-37
────────────────────────────────────────
  16 ┌       - image: nandinikodipunzula/multi-container-project-server
  17 │         name: server
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         env:
  21 │           - name: REDIS_HOST
  22 │             value: redis-cluster-ip-service
  23 │           - name: REDIS_PORT
  24 └             value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment47.yaml:16-37
────────────────────────────────────────
  16 ┌       - image: nandinikodipunzula/multi-container-project-server
  17 │         name: server
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         env:
  21 │           - name: REDIS_HOST
  22 │             value: redis-cluster-ip-service
  23 │           - name: REDIS_PORT
  24 └             value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment47.yaml:16-37
────────────────────────────────────────
  16 ┌       - image: nandinikodipunzula/multi-container-project-server
  17 │         name: server
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         env:
  21 │           - name: REDIS_HOST
  22 │             value: redis-cluster-ip-service
  23 │           - name: REDIS_PORT
  24 └             value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment47.yaml:4
────────────────────────────────────────
   4 [   name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment47.yaml:16-37
────────────────────────────────────────
  16 ┌       - image: nandinikodipunzula/multi-container-project-server
  17 │         name: server
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         env:
  21 │           - name: REDIS_HOST
  22 │             value: redis-cluster-ip-service
  23 │           - name: REDIS_PORT
  24 └             value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment47.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │       - image: nandinikodipunzula/multi-container-project-server
  17 │         name: server
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         env:
  21 │           - name: REDIS_HOST
  22 │             value: redis-cluster-ip-service
  23 └           - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment47.yaml:16-37
────────────────────────────────────────
  16 ┌       - image: nandinikodipunzula/multi-container-project-server
  17 │         name: server
  18 │         ports:
  19 │         - containerPort: 5000
  20 │         env:
  21 │           - name: REDIS_HOST
  22 │             value: redis-cluster-ip-service
  23 │           - name: REDIS_PORT
  24 └             value: '6379'
  ..   
────────────────────────────────────────



server-deployment48.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment48.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: wiley19/multi-worker
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment48.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: wiley19/multi-worker
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment48.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: wiley19/multi-worker
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment48.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: wiley19/multi-worker
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment48.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: wiley19/multi-worker
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment48.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: wiley19/multi-worker
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment48.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: wiley19/multi-worker
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment48.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: wiley19/multi-worker
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment48.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: wiley19/multi-worker
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment48.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: wiley19/multi-worker
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment48.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: wiley19/multi-worker
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment48.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: wiley19/multi-worker
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment48.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: wiley19/multi-worker
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment48.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: wiley19/multi-worker
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment48.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: wiley19/multi-worker
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment48.yaml:4
────────────────────────────────────────
   4 [   name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment48.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: wiley19/multi-worker
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment48.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: server
  17 │           image: wiley19/multi-worker
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment48.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: wiley19/multi-worker
  18 │           ports:
  19 │             - containerPort: 3000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────



server-deployment49.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment49.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: pgsoncada/server-image
  18 │           ports:
  19 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment49.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: pgsoncada/server-image
  18 │           ports:
  19 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment49.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: pgsoncada/server-image
  18 │           ports:
  19 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment49.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: pgsoncada/server-image
  18 │           ports:
  19 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment49.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: pgsoncada/server-image
  18 │           ports:
  19 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment49.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: pgsoncada/server-image
  18 │           ports:
  19 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment49.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: pgsoncada/server-image
  18 │           ports:
  19 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment49.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: pgsoncada/server-image
  18 │           ports:
  19 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment49.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: pgsoncada/server-image
  18 │           ports:
  19 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment49.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: pgsoncada/server-image
  18 │           ports:
  19 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment49.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: pgsoncada/server-image
  18 │           ports:
  19 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment49.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: pgsoncada/server-image
  18 │           ports:
  19 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment49.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: pgsoncada/server-image
  18 │           ports:
  19 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment49.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: pgsoncada/server-image
  18 │           ports:
  19 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment49.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: pgsoncada/server-image
  18 │           ports:
  19 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment49.yaml:4
────────────────────────────────────────
   4 [   name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment49.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: pgsoncada/server-image
  18 │           ports:
  19 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment49.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: server
  17 │           image: pgsoncada/server-image
  18 │           ports:
  19 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment49.yaml:16-19
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: pgsoncada/server-image
  18 │           ports:
  19 └             - containerPort: 5000
────────────────────────────────────────



server-deployment5.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment5.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment5.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment5.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment5.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment5.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment5.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment5.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment5.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment5.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment5.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment5.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment5.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment5.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment5.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment5.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment5.yaml:4
────────────────────────────────────────
   4 [   name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment5.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment5.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment5.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────



server-deployment50.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment50.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment50.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment50.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment50.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment50.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment50.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment50.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment50.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment50.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment50.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment50.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment50.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment50.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment50.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment50.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment50.yaml:4
────────────────────────────────────────
   4 [   name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment50.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment50.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment50.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────



server-deployment51.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment51.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment51.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment51.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment51.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment51.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment51.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment51.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment51.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment51.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment51.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment51.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment51.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment51.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment51.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment51.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment51.yaml:4
────────────────────────────────────────
   4 [   name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment51.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment51.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment51.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────



server-deployment52.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment52.yaml:16-37
────────────────────────────────────────
  16 ┌                 - name: server
  17 │                   image: stephengrider/multi-server
  18 │                   ports:
  19 │                       - containerPort: 5000
  20 │                   env:
  21 │                       - name: REDIS_HOST
  22 │                         value: redis-cluster-ip-service
  23 │                       - name: REDIS_PORT
  24 └                         value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment52.yaml:16-37
────────────────────────────────────────
  16 ┌                 - name: server
  17 │                   image: stephengrider/multi-server
  18 │                   ports:
  19 │                       - containerPort: 5000
  20 │                   env:
  21 │                       - name: REDIS_HOST
  22 │                         value: redis-cluster-ip-service
  23 │                       - name: REDIS_PORT
  24 └                         value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment52.yaml:16-37
────────────────────────────────────────
  16 ┌                 - name: server
  17 │                   image: stephengrider/multi-server
  18 │                   ports:
  19 │                       - containerPort: 5000
  20 │                   env:
  21 │                       - name: REDIS_HOST
  22 │                         value: redis-cluster-ip-service
  23 │                       - name: REDIS_PORT
  24 └                         value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment52.yaml:16-37
────────────────────────────────────────
  16 ┌                 - name: server
  17 │                   image: stephengrider/multi-server
  18 │                   ports:
  19 │                       - containerPort: 5000
  20 │                   env:
  21 │                       - name: REDIS_HOST
  22 │                         value: redis-cluster-ip-service
  23 │                       - name: REDIS_PORT
  24 └                         value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment52.yaml:16-37
────────────────────────────────────────
  16 ┌                 - name: server
  17 │                   image: stephengrider/multi-server
  18 │                   ports:
  19 │                       - containerPort: 5000
  20 │                   env:
  21 │                       - name: REDIS_HOST
  22 │                         value: redis-cluster-ip-service
  23 │                       - name: REDIS_PORT
  24 └                         value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment52.yaml:16-37
────────────────────────────────────────
  16 ┌                 - name: server
  17 │                   image: stephengrider/multi-server
  18 │                   ports:
  19 │                       - containerPort: 5000
  20 │                   env:
  21 │                       - name: REDIS_HOST
  22 │                         value: redis-cluster-ip-service
  23 │                       - name: REDIS_PORT
  24 └                         value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment52.yaml:16-37
────────────────────────────────────────
  16 ┌                 - name: server
  17 │                   image: stephengrider/multi-server
  18 │                   ports:
  19 │                       - containerPort: 5000
  20 │                   env:
  21 │                       - name: REDIS_HOST
  22 │                         value: redis-cluster-ip-service
  23 │                       - name: REDIS_PORT
  24 └                         value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment52.yaml:16-37
────────────────────────────────────────
  16 ┌                 - name: server
  17 │                   image: stephengrider/multi-server
  18 │                   ports:
  19 │                       - containerPort: 5000
  20 │                   env:
  21 │                       - name: REDIS_HOST
  22 │                         value: redis-cluster-ip-service
  23 │                       - name: REDIS_PORT
  24 └                         value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment52.yaml:16-37
────────────────────────────────────────
  16 ┌                 - name: server
  17 │                   image: stephengrider/multi-server
  18 │                   ports:
  19 │                       - containerPort: 5000
  20 │                   env:
  21 │                       - name: REDIS_HOST
  22 │                         value: redis-cluster-ip-service
  23 │                       - name: REDIS_PORT
  24 └                         value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment52.yaml:16-37
────────────────────────────────────────
  16 ┌                 - name: server
  17 │                   image: stephengrider/multi-server
  18 │                   ports:
  19 │                       - containerPort: 5000
  20 │                   env:
  21 │                       - name: REDIS_HOST
  22 │                         value: redis-cluster-ip-service
  23 │                       - name: REDIS_PORT
  24 └                         value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment52.yaml:16-37
────────────────────────────────────────
  16 ┌                 - name: server
  17 │                   image: stephengrider/multi-server
  18 │                   ports:
  19 │                       - containerPort: 5000
  20 │                   env:
  21 │                       - name: REDIS_HOST
  22 │                         value: redis-cluster-ip-service
  23 │                       - name: REDIS_PORT
  24 └                         value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment52.yaml:16-37
────────────────────────────────────────
  16 ┌                 - name: server
  17 │                   image: stephengrider/multi-server
  18 │                   ports:
  19 │                       - containerPort: 5000
  20 │                   env:
  21 │                       - name: REDIS_HOST
  22 │                         value: redis-cluster-ip-service
  23 │                       - name: REDIS_PORT
  24 └                         value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment52.yaml:16-37
────────────────────────────────────────
  16 ┌                 - name: server
  17 │                   image: stephengrider/multi-server
  18 │                   ports:
  19 │                       - containerPort: 5000
  20 │                   env:
  21 │                       - name: REDIS_HOST
  22 │                         value: redis-cluster-ip-service
  23 │                       - name: REDIS_PORT
  24 └                         value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment52.yaml:16-37
────────────────────────────────────────
  16 ┌                 - name: server
  17 │                   image: stephengrider/multi-server
  18 │                   ports:
  19 │                       - containerPort: 5000
  20 │                   env:
  21 │                       - name: REDIS_HOST
  22 │                         value: redis-cluster-ip-service
  23 │                       - name: REDIS_PORT
  24 └                         value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment52.yaml:16-37
────────────────────────────────────────
  16 ┌                 - name: server
  17 │                   image: stephengrider/multi-server
  18 │                   ports:
  19 │                       - containerPort: 5000
  20 │                   env:
  21 │                       - name: REDIS_HOST
  22 │                         value: redis-cluster-ip-service
  23 │                       - name: REDIS_PORT
  24 └                         value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment52.yaml:4
────────────────────────────────────────
   4 [     name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment52.yaml:16-37
────────────────────────────────────────
  16 ┌                 - name: server
  17 │                   image: stephengrider/multi-server
  18 │                   ports:
  19 │                       - containerPort: 5000
  20 │                   env:
  21 │                       - name: REDIS_HOST
  22 │                         value: redis-cluster-ip-service
  23 │                       - name: REDIS_PORT
  24 └                         value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment52.yaml:15-37
────────────────────────────────────────
  15 ┌             containers:
  16 │                 - name: server
  17 │                   image: stephengrider/multi-server
  18 │                   ports:
  19 │                       - containerPort: 5000
  20 │                   env:
  21 │                       - name: REDIS_HOST
  22 │                         value: redis-cluster-ip-service
  23 └                       - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment52.yaml:16-37
────────────────────────────────────────
  16 ┌                 - name: server
  17 │                   image: stephengrider/multi-server
  18 │                   ports:
  19 │                       - containerPort: 5000
  20 │                   env:
  21 │                       - name: REDIS_HOST
  22 │                         value: redis-cluster-ip-service
  23 │                       - name: REDIS_PORT
  24 └                         value: '6379'
  ..   
────────────────────────────────────────



server-deployment53.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deploymnet' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment53.yaml:16-33
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: shakilakamalasena/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env: 
  21 │             - name: PGUSER
  22 │               value: postgres
  23 │             - name: PGHOST
  24 └               value: postgres-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deploymnet' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment53.yaml:16-33
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: shakilakamalasena/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env: 
  21 │             - name: PGUSER
  22 │               value: postgres
  23 │             - name: PGHOST
  24 └               value: postgres-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deploymnet' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment53.yaml:16-33
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: shakilakamalasena/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env: 
  21 │             - name: PGUSER
  22 │               value: postgres
  23 │             - name: PGHOST
  24 └               value: postgres-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deploymnet' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment53.yaml:16-33
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: shakilakamalasena/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env: 
  21 │             - name: PGUSER
  22 │               value: postgres
  23 │             - name: PGHOST
  24 └               value: postgres-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deploymnet' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment53.yaml:16-33
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: shakilakamalasena/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env: 
  21 │             - name: PGUSER
  22 │               value: postgres
  23 │             - name: PGHOST
  24 └               value: postgres-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deploymnet' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment53.yaml:16-33
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: shakilakamalasena/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env: 
  21 │             - name: PGUSER
  22 │               value: postgres
  23 │             - name: PGHOST
  24 └               value: postgres-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deploymnet' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment53.yaml:16-33
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: shakilakamalasena/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env: 
  21 │             - name: PGUSER
  22 │               value: postgres
  23 │             - name: PGHOST
  24 └               value: postgres-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deploymnet' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment53.yaml:16-33
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: shakilakamalasena/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env: 
  21 │             - name: PGUSER
  22 │               value: postgres
  23 │             - name: PGHOST
  24 └               value: postgres-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deploymnet' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment53.yaml:16-33
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: shakilakamalasena/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env: 
  21 │             - name: PGUSER
  22 │               value: postgres
  23 │             - name: PGHOST
  24 └               value: postgres-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deploymnet' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment53.yaml:16-33
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: shakilakamalasena/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env: 
  21 │             - name: PGUSER
  22 │               value: postgres
  23 │             - name: PGHOST
  24 └               value: postgres-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deploymnet' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment53.yaml:16-33
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: shakilakamalasena/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env: 
  21 │             - name: PGUSER
  22 │               value: postgres
  23 │             - name: PGHOST
  24 └               value: postgres-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deploymnet' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment53.yaml:16-33
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: shakilakamalasena/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env: 
  21 │             - name: PGUSER
  22 │               value: postgres
  23 │             - name: PGHOST
  24 └               value: postgres-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment53.yaml:16-33
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: shakilakamalasena/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env: 
  21 │             - name: PGUSER
  22 │               value: postgres
  23 │             - name: PGHOST
  24 └               value: postgres-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deploymnet" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment53.yaml:16-33
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: shakilakamalasena/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env: 
  21 │             - name: PGUSER
  22 │               value: postgres
  23 │             - name: PGHOST
  24 └               value: postgres-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment53.yaml:16-33
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: shakilakamalasena/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env: 
  21 │             - name: PGUSER
  22 │               value: postgres
  23 │             - name: PGHOST
  24 └               value: postgres-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deploymnet in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment53.yaml:4
────────────────────────────────────────
   4 [   name: server-deploymnet
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deploymnet in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment53.yaml:16-33
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: shakilakamalasena/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env: 
  21 │             - name: PGUSER
  22 │               value: postgres
  23 │             - name: PGHOST
  24 └               value: postgres-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deploymnet in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment53.yaml:15-33
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: server
  17 │           image: shakilakamalasena/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env: 
  21 │             - name: PGUSER
  22 │               value: postgres
  23 └             - name: PGHOST
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deploymnet (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment53.yaml:16-33
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: shakilakamalasena/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env: 
  21 │             - name: PGUSER
  22 │               value: postgres
  23 │             - name: PGHOST
  24 └               value: postgres-cluster-ip-service
  ..   
────────────────────────────────────────



server-deployment6.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment6.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # no nerve to debug why my image is off, use course image for now
  18 │           image: rallycoding/multi-server
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               # same value as specced in redis-cluster-ip-service meta data
  24 └               value: redis-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment6.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # no nerve to debug why my image is off, use course image for now
  18 │           image: rallycoding/multi-server
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               # same value as specced in redis-cluster-ip-service meta data
  24 └               value: redis-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment6.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # no nerve to debug why my image is off, use course image for now
  18 │           image: rallycoding/multi-server
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               # same value as specced in redis-cluster-ip-service meta data
  24 └               value: redis-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment6.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # no nerve to debug why my image is off, use course image for now
  18 │           image: rallycoding/multi-server
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               # same value as specced in redis-cluster-ip-service meta data
  24 └               value: redis-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment6.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # no nerve to debug why my image is off, use course image for now
  18 │           image: rallycoding/multi-server
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               # same value as specced in redis-cluster-ip-service meta data
  24 └               value: redis-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment6.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # no nerve to debug why my image is off, use course image for now
  18 │           image: rallycoding/multi-server
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               # same value as specced in redis-cluster-ip-service meta data
  24 └               value: redis-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment6.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # no nerve to debug why my image is off, use course image for now
  18 │           image: rallycoding/multi-server
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               # same value as specced in redis-cluster-ip-service meta data
  24 └               value: redis-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment6.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # no nerve to debug why my image is off, use course image for now
  18 │           image: rallycoding/multi-server
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               # same value as specced in redis-cluster-ip-service meta data
  24 └               value: redis-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment6.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # no nerve to debug why my image is off, use course image for now
  18 │           image: rallycoding/multi-server
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               # same value as specced in redis-cluster-ip-service meta data
  24 └               value: redis-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment6.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # no nerve to debug why my image is off, use course image for now
  18 │           image: rallycoding/multi-server
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               # same value as specced in redis-cluster-ip-service meta data
  24 └               value: redis-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment6.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # no nerve to debug why my image is off, use course image for now
  18 │           image: rallycoding/multi-server
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               # same value as specced in redis-cluster-ip-service meta data
  24 └               value: redis-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment6.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # no nerve to debug why my image is off, use course image for now
  18 │           image: rallycoding/multi-server
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               # same value as specced in redis-cluster-ip-service meta data
  24 └               value: redis-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment6.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # no nerve to debug why my image is off, use course image for now
  18 │           image: rallycoding/multi-server
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               # same value as specced in redis-cluster-ip-service meta data
  24 └               value: redis-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment6.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # no nerve to debug why my image is off, use course image for now
  18 │           image: rallycoding/multi-server
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               # same value as specced in redis-cluster-ip-service meta data
  24 └               value: redis-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment6.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # no nerve to debug why my image is off, use course image for now
  18 │           image: rallycoding/multi-server
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               # same value as specced in redis-cluster-ip-service meta data
  24 └               value: redis-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment6.yaml:4
────────────────────────────────────────
   4 [   name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment6.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # no nerve to debug why my image is off, use course image for now
  18 │           image: rallycoding/multi-server
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               # same value as specced in redis-cluster-ip-service meta data
  24 └               value: redis-cluster-ip-service
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment6.yaml:15-45
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: server
  17 │           # no nerve to debug why my image is off, use course image for now
  18 │           image: rallycoding/multi-server
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 └               # same value as specced in redis-cluster-ip-service meta data
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment6.yaml:16-45
────────────────────────────────────────
  16 ┌         - name: server
  17 │           # no nerve to debug why my image is off, use course image for now
  18 │           image: rallycoding/multi-server
  19 │           ports:
  20 │             - containerPort: 5000
  21 │           env:
  22 │             - name: REDIS_HOST
  23 │               # same value as specced in redis-cluster-ip-service meta data
  24 └               value: redis-cluster-ip-service
  ..   
────────────────────────────────────────



server-deployment7.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment7.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment7.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment7.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment7.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment7.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment7.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment7.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment7.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment7.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment7.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment7.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment7.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment7.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment7.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment7.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment7.yaml:4
────────────────────────────────────────
   4 [   name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment7.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment7.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment7.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: rallycoding/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────



server-deployment8.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment8.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: bryantto08/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment8.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: bryantto08/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment8.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: bryantto08/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment8.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: bryantto08/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment8.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: bryantto08/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-deployment8.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: bryantto08/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment8.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: bryantto08/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment8.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: bryantto08/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment8.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: bryantto08/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment8.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: bryantto08/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment8.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: bryantto08/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment8.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: bryantto08/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment8.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: bryantto08/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment8.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: bryantto08/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment8.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: bryantto08/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-deployment8.yaml:4
────────────────────────────────────────
   4 [   name: server-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment8.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: bryantto08/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment8.yaml:15-37
────────────────────────────────────────
  15 ┌       containers:
  16 │         - name: server
  17 │           image: bryantto08/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 └             - name: REDIS_PORT
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment8.yaml:16-37
────────────────────────────────────────
  16 ┌         - name: server
  17 │           image: bryantto08/multi-server
  18 │           ports:
  19 │             - containerPort: 5000
  20 │           env:
  21 │             - name: REDIS_HOST
  22 │               value: redis-cluster-ip-service
  23 │             - name: REDIS_PORT
  24 └               value: '6379'
  ..   
────────────────────────────────────────



server-deployment9_1.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-deployment9_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: nshankar13/server:main
  21 │         imagePullPolicy: Always
  22 │         command:
  23 └         - /server
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-deployment9_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: nshankar13/server:main
  21 │         imagePullPolicy: Always
  22 │         command:
  23 └         - /server
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server' in 'server' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-deployment9_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: nshankar13/server:main
  21 │         imagePullPolicy: Always
  22 │         command:
  23 └         - /server
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-deployment9_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: nshankar13/server:main
  21 │         imagePullPolicy: Always
  22 │         command:
  23 └         - /server
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-deployment9_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: nshankar13/server:main
  21 │         imagePullPolicy: Always
  22 │         command:
  23 └         - /server
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-deployment9_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: nshankar13/server:main
  21 │         imagePullPolicy: Always
  22 │         command:
  23 └         - /server
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-deployment9_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: nshankar13/server:main
  21 │         imagePullPolicy: Always
  22 │         command:
  23 └         - /server
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-deployment9_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: nshankar13/server:main
  21 │         imagePullPolicy: Always
  22 │         command:
  23 └         - /server
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-deployment9_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: nshankar13/server:main
  21 │         imagePullPolicy: Always
  22 │         command:
  23 └         - /server
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-deployment9_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: nshankar13/server:main
  21 │         imagePullPolicy: Always
  22 │         command:
  23 └         - /server
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-deployment9_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: nshankar13/server:main
  21 │         imagePullPolicy: Always
  22 │         command:
  23 └         - /server
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-deployment9_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: nshankar13/server:main
  21 │         imagePullPolicy: Always
  22 │         command:
  23 └         - /server
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server" in "server" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-deployment9_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: nshankar13/server:main
  21 │         imagePullPolicy: Always
  22 │         command:
  23 └         - /server
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-deployment9_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: nshankar13/server:main
  21 │         imagePullPolicy: Always
  22 │         command:
  23 └         - /server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server in server namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment9_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: nshankar13/server:main
  21 │         imagePullPolicy: Always
  22 │         command:
  23 └         - /server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server in server namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-deployment9_1.yaml:18-23
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: server
  20 │         image: nshankar13/server:main
  21 │         imagePullPolicy: Always
  22 │         command:
  23 └         - /server
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server (namespace: server) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server-deployment9_1.yaml:19-23
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: nshankar13/server:main
  21 │         imagePullPolicy: Always
  22 │         command:
  23 └         - /server
────────────────────────────────────────



server-statefulset.yaml (kubernetes)
====================================
Tests: 127 (SUCCESSES: 96, FAILURES: 31)
Failures: 31 (UNKNOWN: 0, LOW: 21, MEDIUM: 7, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'setupperms' of StatefulSet 'vault-example' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-statefulset.yaml:47-52
────────────────────────────────────────
  47 ┌         - name: setupperms
  48 │           image: alpine:latest
  49 │           command: ['sh', '-c', 'echo The app is running! && chown 100 /vault/data && ls -l /vault/']
  50 │           volumeMounts:
  51 │           - name: data
  52 └             mountPath: /vault/data
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'vault' of StatefulSet 'vault-example' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-statefulset.yaml:54-130
────────────────────────────────────────
  54 ┌         - name: vault
  55 │           securityContext:
  56 │             runAsNonRoot: true
  57 │             runAsGroup: 1000
  58 │             runAsUser: 100
  59 │             capabilities:
  60 │               add: ["IPC_LOCK"]
  61 │           image: vault:1.3.1
  62 └           imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'setupperms' of StatefulSet 'vault-example' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-statefulset.yaml:47-52
────────────────────────────────────────
  47 ┌         - name: setupperms
  48 │           image: alpine:latest
  49 │           command: ['sh', '-c', 'echo The app is running! && chown 100 /vault/data && ls -l /vault/']
  50 │           volumeMounts:
  51 │           - name: data
  52 └             mountPath: /vault/data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vault' of StatefulSet 'vault-example' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-statefulset.yaml:54-130
────────────────────────────────────────
  54 ┌         - name: vault
  55 │           securityContext:
  56 │             runAsNonRoot: true
  57 │             runAsGroup: 1000
  58 │             runAsUser: 100
  59 │             capabilities:
  60 │               add: ["IPC_LOCK"]
  61 │           image: vault:1.3.1
  62 └           imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'setupperms' of 'statefulset' 'vault-example' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-statefulset.yaml:47-52
────────────────────────────────────────
  47 ┌         - name: setupperms
  48 │           image: alpine:latest
  49 │           command: ['sh', '-c', 'echo The app is running! && chown 100 /vault/data && ls -l /vault/']
  50 │           volumeMounts:
  51 │           - name: data
  52 └             mountPath: /vault/data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vault' of 'statefulset' 'vault-example' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-statefulset.yaml:54-130
────────────────────────────────────────
  54 ┌         - name: vault
  55 │           securityContext:
  56 │             runAsNonRoot: true
  57 │             runAsGroup: 1000
  58 │             runAsUser: 100
  59 │             capabilities:
  60 │               add: ["IPC_LOCK"]
  61 │           image: vault:1.3.1
  62 └           imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'setupperms' of StatefulSet 'vault-example' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-statefulset.yaml:47-52
────────────────────────────────────────
  47 ┌         - name: setupperms
  48 │           image: alpine:latest
  49 │           command: ['sh', '-c', 'echo The app is running! && chown 100 /vault/data && ls -l /vault/']
  50 │           volumeMounts:
  51 │           - name: data
  52 └             mountPath: /vault/data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vault' of StatefulSet 'vault-example' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-statefulset.yaml:54-130
────────────────────────────────────────
  54 ┌         - name: vault
  55 │           securityContext:
  56 │             runAsNonRoot: true
  57 │             runAsGroup: 1000
  58 │             runAsUser: 100
  59 │             capabilities:
  60 │               add: ["IPC_LOCK"]
  61 │           image: vault:1.3.1
  62 └           imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'setupperms' of StatefulSet 'vault-example' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-statefulset.yaml:47-52
────────────────────────────────────────
  47 ┌         - name: setupperms
  48 │           image: alpine:latest
  49 │           command: ['sh', '-c', 'echo The app is running! && chown 100 /vault/data && ls -l /vault/']
  50 │           volumeMounts:
  51 │           - name: data
  52 └             mountPath: /vault/data
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'setupperms' of StatefulSet 'vault-example' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-statefulset.yaml:47-52
────────────────────────────────────────
  47 ┌         - name: setupperms
  48 │           image: alpine:latest
  49 │           command: ['sh', '-c', 'echo The app is running! && chown 100 /vault/data && ls -l /vault/']
  50 │           volumeMounts:
  51 │           - name: data
  52 └             mountPath: /vault/data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'setupperms' of StatefulSet 'vault-example' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-statefulset.yaml:47-52
────────────────────────────────────────
  47 ┌         - name: setupperms
  48 │           image: alpine:latest
  49 │           command: ['sh', '-c', 'echo The app is running! && chown 100 /vault/data && ls -l /vault/']
  50 │           volumeMounts:
  51 │           - name: data
  52 └             mountPath: /vault/data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vault' of StatefulSet 'vault-example' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-statefulset.yaml:54-130
────────────────────────────────────────
  54 ┌         - name: vault
  55 │           securityContext:
  56 │             runAsNonRoot: true
  57 │             runAsGroup: 1000
  58 │             runAsUser: 100
  59 │             capabilities:
  60 │               add: ["IPC_LOCK"]
  61 │           image: vault:1.3.1
  62 └           imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'setupperms' of StatefulSet 'vault-example' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-statefulset.yaml:47-52
────────────────────────────────────────
  47 ┌         - name: setupperms
  48 │           image: alpine:latest
  49 │           command: ['sh', '-c', 'echo The app is running! && chown 100 /vault/data && ls -l /vault/']
  50 │           volumeMounts:
  51 │           - name: data
  52 └             mountPath: /vault/data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vault' of StatefulSet 'vault-example' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-statefulset.yaml:54-130
────────────────────────────────────────
  54 ┌         - name: vault
  55 │           securityContext:
  56 │             runAsNonRoot: true
  57 │             runAsGroup: 1000
  58 │             runAsUser: 100
  59 │             capabilities:
  60 │               add: ["IPC_LOCK"]
  61 │           image: vault:1.3.1
  62 └           imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'setupperms' of StatefulSet 'vault-example' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-statefulset.yaml:47-52
────────────────────────────────────────
  47 ┌         - name: setupperms
  48 │           image: alpine:latest
  49 │           command: ['sh', '-c', 'echo The app is running! && chown 100 /vault/data && ls -l /vault/']
  50 │           volumeMounts:
  51 │           - name: data
  52 └             mountPath: /vault/data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vault' of StatefulSet 'vault-example' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-statefulset.yaml:54-130
────────────────────────────────────────
  54 ┌         - name: vault
  55 │           securityContext:
  56 │             runAsNonRoot: true
  57 │             runAsGroup: 1000
  58 │             runAsUser: 100
  59 │             capabilities:
  60 │               add: ["IPC_LOCK"]
  61 │           image: vault:1.3.1
  62 └           imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'setupperms' of StatefulSet 'vault-example' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-statefulset.yaml:47-52
────────────────────────────────────────
  47 ┌         - name: setupperms
  48 │           image: alpine:latest
  49 │           command: ['sh', '-c', 'echo The app is running! && chown 100 /vault/data && ls -l /vault/']
  50 │           volumeMounts:
  51 │           - name: data
  52 └             mountPath: /vault/data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vault' of StatefulSet 'vault-example' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-statefulset.yaml:54-130
────────────────────────────────────────
  54 ┌         - name: vault
  55 │           securityContext:
  56 │             runAsNonRoot: true
  57 │             runAsGroup: 1000
  58 │             runAsUser: 100
  59 │             capabilities:
  60 │               add: ["IPC_LOCK"]
  61 │           image: vault:1.3.1
  62 └           imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'setupperms' of StatefulSet 'vault-example' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-statefulset.yaml:47-52
────────────────────────────────────────
  47 ┌         - name: setupperms
  48 │           image: alpine:latest
  49 │           command: ['sh', '-c', 'echo The app is running! && chown 100 /vault/data && ls -l /vault/']
  50 │           volumeMounts:
  51 │           - name: data
  52 └             mountPath: /vault/data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vault' of StatefulSet 'vault-example' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-statefulset.yaml:54-130
────────────────────────────────────────
  54 ┌         - name: vault
  55 │           securityContext:
  56 │             runAsNonRoot: true
  57 │             runAsGroup: 1000
  58 │             runAsUser: 100
  59 │             capabilities:
  60 │               add: ["IPC_LOCK"]
  61 │           image: vault:1.3.1
  62 └           imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'setupperms' of StatefulSet 'vault-example' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-statefulset.yaml:47-52
────────────────────────────────────────
  47 ┌         - name: setupperms
  48 │           image: alpine:latest
  49 │           command: ['sh', '-c', 'echo The app is running! && chown 100 /vault/data && ls -l /vault/']
  50 │           volumeMounts:
  51 │           - name: data
  52 └             mountPath: /vault/data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vault' of StatefulSet 'vault-example' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-statefulset.yaml:54-130
────────────────────────────────────────
  54 ┌         - name: vault
  55 │           securityContext:
  56 │             runAsNonRoot: true
  57 │             runAsGroup: 1000
  58 │             runAsUser: 100
  59 │             capabilities:
  60 │               add: ["IPC_LOCK"]
  61 │           image: vault:1.3.1
  62 └           imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'vault' of StatefulSet 'vault-example' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 server-statefulset.yaml:54-130
────────────────────────────────────────
  54 ┌         - name: vault
  55 │           securityContext:
  56 │             runAsNonRoot: true
  57 │             runAsGroup: 1000
  58 │             runAsUser: 100
  59 │             capabilities:
  60 │               add: ["IPC_LOCK"]
  61 │           image: vault:1.3.1
  62 └           imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-statefulset.yaml:54-130
────────────────────────────────────────
  54 ┌         - name: vault
  55 │           securityContext:
  56 │             runAsNonRoot: true
  57 │             runAsGroup: 1000
  58 │             runAsUser: 100
  59 │             capabilities:
  60 │               add: ["IPC_LOCK"]
  61 │           image: vault:1.3.1
  62 └           imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-statefulset.yaml:47-52
────────────────────────────────────────
  47 ┌         - name: setupperms
  48 │           image: alpine:latest
  49 │           command: ['sh', '-c', 'echo The app is running! && chown 100 /vault/data && ls -l /vault/']
  50 │           volumeMounts:
  51 │           - name: data
  52 └             mountPath: /vault/data
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "setupperms" of statefulset "vault-example" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-statefulset.yaml:47-52
────────────────────────────────────────
  47 ┌         - name: setupperms
  48 │           image: alpine:latest
  49 │           command: ['sh', '-c', 'echo The app is running! && chown 100 /vault/data && ls -l /vault/']
  50 │           volumeMounts:
  51 │           - name: data
  52 └             mountPath: /vault/data
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vault" of statefulset "vault-example" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-statefulset.yaml:54-130
────────────────────────────────────────
  54 ┌         - name: vault
  55 │           securityContext:
  56 │             runAsNonRoot: true
  57 │             runAsGroup: 1000
  58 │             runAsUser: 100
  59 │             capabilities:
  60 │               add: ["IPC_LOCK"]
  61 │           image: vault:1.3.1
  62 └           imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-statefulset.yaml:54-130
────────────────────────────────────────
  54 ┌         - name: vault
  55 │           securityContext:
  56 │             runAsNonRoot: true
  57 │             runAsGroup: 1000
  58 │             runAsUser: 100
  59 │             capabilities:
  60 │               add: ["IPC_LOCK"]
  61 │           image: vault:1.3.1
  62 └           imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-statefulset.yaml:47-52
────────────────────────────────────────
  47 ┌         - name: setupperms
  48 │           image: alpine:latest
  49 │           command: ['sh', '-c', 'echo The app is running! && chown 100 /vault/data && ls -l /vault/']
  50 │           volumeMounts:
  51 │           - name: data
  52 └             mountPath: /vault/data
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset vault-example in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-statefulset.yaml:4-6
────────────────────────────────────────
   4 ┌   name: vault-example
   5 │   labels:
   6 └     app.kubernetes.io/name: vault-example
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vault-example in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-statefulset.yaml:47-52
────────────────────────────────────────
  47 ┌         - name: setupperms
  48 │           image: alpine:latest
  49 │           command: ['sh', '-c', 'echo The app is running! && chown 100 /vault/data && ls -l /vault/']
  50 │           volumeMounts:
  51 │           - name: data
  52 └             mountPath: /vault/data
────────────────────────────────────────



server-statefulset1.yaml (kubernetes)
=====================================
Tests: 127 (SUCCESSES: 96, FAILURES: 31)
Failures: 31 (UNKNOWN: 0, LOW: 21, MEDIUM: 7, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'setupperms' of StatefulSet 'vault-example' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-statefulset1.yaml:47-52
────────────────────────────────────────
  47 ┌         - name: setupperms
  48 │           image: alpine:latest
  49 │           command: ['sh', '-c', 'echo The app is running! && chown 100 /vault/data && ls -l /vault/']
  50 │           volumeMounts:
  51 │           - name: data
  52 └             mountPath: /vault/data
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'vault' of StatefulSet 'vault-example' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-statefulset1.yaml:54-130
────────────────────────────────────────
  54 ┌         - name: vault
  55 │           securityContext:
  56 │             runAsNonRoot: true
  57 │             runAsGroup: 1000
  58 │             runAsUser: 100
  59 │             capabilities:
  60 │               add: ["IPC_LOCK"]
  61 │           image: vault:1.3.1
  62 └           imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'setupperms' of StatefulSet 'vault-example' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-statefulset1.yaml:47-52
────────────────────────────────────────
  47 ┌         - name: setupperms
  48 │           image: alpine:latest
  49 │           command: ['sh', '-c', 'echo The app is running! && chown 100 /vault/data && ls -l /vault/']
  50 │           volumeMounts:
  51 │           - name: data
  52 └             mountPath: /vault/data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'vault' of StatefulSet 'vault-example' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-statefulset1.yaml:54-130
────────────────────────────────────────
  54 ┌         - name: vault
  55 │           securityContext:
  56 │             runAsNonRoot: true
  57 │             runAsGroup: 1000
  58 │             runAsUser: 100
  59 │             capabilities:
  60 │               add: ["IPC_LOCK"]
  61 │           image: vault:1.3.1
  62 └           imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'setupperms' of 'statefulset' 'vault-example' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-statefulset1.yaml:47-52
────────────────────────────────────────
  47 ┌         - name: setupperms
  48 │           image: alpine:latest
  49 │           command: ['sh', '-c', 'echo The app is running! && chown 100 /vault/data && ls -l /vault/']
  50 │           volumeMounts:
  51 │           - name: data
  52 └             mountPath: /vault/data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'vault' of 'statefulset' 'vault-example' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-statefulset1.yaml:54-130
────────────────────────────────────────
  54 ┌         - name: vault
  55 │           securityContext:
  56 │             runAsNonRoot: true
  57 │             runAsGroup: 1000
  58 │             runAsUser: 100
  59 │             capabilities:
  60 │               add: ["IPC_LOCK"]
  61 │           image: vault:1.3.1
  62 └           imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'setupperms' of StatefulSet 'vault-example' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-statefulset1.yaml:47-52
────────────────────────────────────────
  47 ┌         - name: setupperms
  48 │           image: alpine:latest
  49 │           command: ['sh', '-c', 'echo The app is running! && chown 100 /vault/data && ls -l /vault/']
  50 │           volumeMounts:
  51 │           - name: data
  52 └             mountPath: /vault/data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'vault' of StatefulSet 'vault-example' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-statefulset1.yaml:54-130
────────────────────────────────────────
  54 ┌         - name: vault
  55 │           securityContext:
  56 │             runAsNonRoot: true
  57 │             runAsGroup: 1000
  58 │             runAsUser: 100
  59 │             capabilities:
  60 │               add: ["IPC_LOCK"]
  61 │           image: vault:1.3.1
  62 └           imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'setupperms' of StatefulSet 'vault-example' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-statefulset1.yaml:47-52
────────────────────────────────────────
  47 ┌         - name: setupperms
  48 │           image: alpine:latest
  49 │           command: ['sh', '-c', 'echo The app is running! && chown 100 /vault/data && ls -l /vault/']
  50 │           volumeMounts:
  51 │           - name: data
  52 └             mountPath: /vault/data
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'setupperms' of StatefulSet 'vault-example' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-statefulset1.yaml:47-52
────────────────────────────────────────
  47 ┌         - name: setupperms
  48 │           image: alpine:latest
  49 │           command: ['sh', '-c', 'echo The app is running! && chown 100 /vault/data && ls -l /vault/']
  50 │           volumeMounts:
  51 │           - name: data
  52 └             mountPath: /vault/data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'setupperms' of StatefulSet 'vault-example' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-statefulset1.yaml:47-52
────────────────────────────────────────
  47 ┌         - name: setupperms
  48 │           image: alpine:latest
  49 │           command: ['sh', '-c', 'echo The app is running! && chown 100 /vault/data && ls -l /vault/']
  50 │           volumeMounts:
  51 │           - name: data
  52 └             mountPath: /vault/data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'vault' of StatefulSet 'vault-example' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-statefulset1.yaml:54-130
────────────────────────────────────────
  54 ┌         - name: vault
  55 │           securityContext:
  56 │             runAsNonRoot: true
  57 │             runAsGroup: 1000
  58 │             runAsUser: 100
  59 │             capabilities:
  60 │               add: ["IPC_LOCK"]
  61 │           image: vault:1.3.1
  62 └           imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'setupperms' of StatefulSet 'vault-example' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-statefulset1.yaml:47-52
────────────────────────────────────────
  47 ┌         - name: setupperms
  48 │           image: alpine:latest
  49 │           command: ['sh', '-c', 'echo The app is running! && chown 100 /vault/data && ls -l /vault/']
  50 │           volumeMounts:
  51 │           - name: data
  52 └             mountPath: /vault/data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'vault' of StatefulSet 'vault-example' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-statefulset1.yaml:54-130
────────────────────────────────────────
  54 ┌         - name: vault
  55 │           securityContext:
  56 │             runAsNonRoot: true
  57 │             runAsGroup: 1000
  58 │             runAsUser: 100
  59 │             capabilities:
  60 │               add: ["IPC_LOCK"]
  61 │           image: vault:1.3.1
  62 └           imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'setupperms' of StatefulSet 'vault-example' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-statefulset1.yaml:47-52
────────────────────────────────────────
  47 ┌         - name: setupperms
  48 │           image: alpine:latest
  49 │           command: ['sh', '-c', 'echo The app is running! && chown 100 /vault/data && ls -l /vault/']
  50 │           volumeMounts:
  51 │           - name: data
  52 └             mountPath: /vault/data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'vault' of StatefulSet 'vault-example' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-statefulset1.yaml:54-130
────────────────────────────────────────
  54 ┌         - name: vault
  55 │           securityContext:
  56 │             runAsNonRoot: true
  57 │             runAsGroup: 1000
  58 │             runAsUser: 100
  59 │             capabilities:
  60 │               add: ["IPC_LOCK"]
  61 │           image: vault:1.3.1
  62 └           imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'setupperms' of StatefulSet 'vault-example' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-statefulset1.yaml:47-52
────────────────────────────────────────
  47 ┌         - name: setupperms
  48 │           image: alpine:latest
  49 │           command: ['sh', '-c', 'echo The app is running! && chown 100 /vault/data && ls -l /vault/']
  50 │           volumeMounts:
  51 │           - name: data
  52 └             mountPath: /vault/data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'vault' of StatefulSet 'vault-example' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-statefulset1.yaml:54-130
────────────────────────────────────────
  54 ┌         - name: vault
  55 │           securityContext:
  56 │             runAsNonRoot: true
  57 │             runAsGroup: 1000
  58 │             runAsUser: 100
  59 │             capabilities:
  60 │               add: ["IPC_LOCK"]
  61 │           image: vault:1.3.1
  62 └           imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'setupperms' of StatefulSet 'vault-example' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-statefulset1.yaml:47-52
────────────────────────────────────────
  47 ┌         - name: setupperms
  48 │           image: alpine:latest
  49 │           command: ['sh', '-c', 'echo The app is running! && chown 100 /vault/data && ls -l /vault/']
  50 │           volumeMounts:
  51 │           - name: data
  52 └             mountPath: /vault/data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'vault' of StatefulSet 'vault-example' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-statefulset1.yaml:54-130
────────────────────────────────────────
  54 ┌         - name: vault
  55 │           securityContext:
  56 │             runAsNonRoot: true
  57 │             runAsGroup: 1000
  58 │             runAsUser: 100
  59 │             capabilities:
  60 │               add: ["IPC_LOCK"]
  61 │           image: vault:1.3.1
  62 └           imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'setupperms' of StatefulSet 'vault-example' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-statefulset1.yaml:47-52
────────────────────────────────────────
  47 ┌         - name: setupperms
  48 │           image: alpine:latest
  49 │           command: ['sh', '-c', 'echo The app is running! && chown 100 /vault/data && ls -l /vault/']
  50 │           volumeMounts:
  51 │           - name: data
  52 └             mountPath: /vault/data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'vault' of StatefulSet 'vault-example' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-statefulset1.yaml:54-130
────────────────────────────────────────
  54 ┌         - name: vault
  55 │           securityContext:
  56 │             runAsNonRoot: true
  57 │             runAsGroup: 1000
  58 │             runAsUser: 100
  59 │             capabilities:
  60 │               add: ["IPC_LOCK"]
  61 │           image: vault:1.3.1
  62 └           imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'vault' of StatefulSet 'vault-example' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 server-statefulset1.yaml:54-130
────────────────────────────────────────
  54 ┌         - name: vault
  55 │           securityContext:
  56 │             runAsNonRoot: true
  57 │             runAsGroup: 1000
  58 │             runAsUser: 100
  59 │             capabilities:
  60 │               add: ["IPC_LOCK"]
  61 │           image: vault:1.3.1
  62 └           imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-statefulset1.yaml:54-130
────────────────────────────────────────
  54 ┌         - name: vault
  55 │           securityContext:
  56 │             runAsNonRoot: true
  57 │             runAsGroup: 1000
  58 │             runAsUser: 100
  59 │             capabilities:
  60 │               add: ["IPC_LOCK"]
  61 │           image: vault:1.3.1
  62 └           imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-statefulset1.yaml:47-52
────────────────────────────────────────
  47 ┌         - name: setupperms
  48 │           image: alpine:latest
  49 │           command: ['sh', '-c', 'echo The app is running! && chown 100 /vault/data && ls -l /vault/']
  50 │           volumeMounts:
  51 │           - name: data
  52 └             mountPath: /vault/data
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "setupperms" of statefulset "vault-example" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-statefulset1.yaml:47-52
────────────────────────────────────────
  47 ┌         - name: setupperms
  48 │           image: alpine:latest
  49 │           command: ['sh', '-c', 'echo The app is running! && chown 100 /vault/data && ls -l /vault/']
  50 │           volumeMounts:
  51 │           - name: data
  52 └             mountPath: /vault/data
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "vault" of statefulset "vault-example" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-statefulset1.yaml:54-130
────────────────────────────────────────
  54 ┌         - name: vault
  55 │           securityContext:
  56 │             runAsNonRoot: true
  57 │             runAsGroup: 1000
  58 │             runAsUser: 100
  59 │             capabilities:
  60 │               add: ["IPC_LOCK"]
  61 │           image: vault:1.3.1
  62 └           imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-statefulset1.yaml:54-130
────────────────────────────────────────
  54 ┌         - name: vault
  55 │           securityContext:
  56 │             runAsNonRoot: true
  57 │             runAsGroup: 1000
  58 │             runAsUser: 100
  59 │             capabilities:
  60 │               add: ["IPC_LOCK"]
  61 │           image: vault:1.3.1
  62 └           imagePullPolicy: IfNotPresent
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-statefulset1.yaml:47-52
────────────────────────────────────────
  47 ┌         - name: setupperms
  48 │           image: alpine:latest
  49 │           command: ['sh', '-c', 'echo The app is running! && chown 100 /vault/data && ls -l /vault/']
  50 │           volumeMounts:
  51 │           - name: data
  52 └             mountPath: /vault/data
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset vault-example in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-statefulset1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: vault-example
   5 │   labels:
   6 └     app.kubernetes.io/name: vault-example
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container vault-example in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-statefulset1.yaml:47-52
────────────────────────────────────────
  47 ┌         - name: setupperms
  48 │           image: alpine:latest
  49 │           command: ['sh', '-c', 'echo The app is running! && chown 100 /vault/data && ls -l /vault/']
  50 │           volumeMounts:
  51 │           - name: data
  52 └             mountPath: /vault/data
────────────────────────────────────────



server-user.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'envar-container' of Pod 'env-server-user-secret' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server-user.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: envar-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: SECRET_SERVERUSER
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: server-user
  14 └           key:  server-username
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'envar-container' of Pod 'env-server-user-secret' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server-user.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: envar-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: SECRET_SERVERUSER
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: server-user
  14 └           key:  server-username
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'envar-container' of 'pod' 'env-server-user-secret' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server-user.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: envar-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: SECRET_SERVERUSER
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: server-user
  14 └           key:  server-username
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'envar-container' of Pod 'env-server-user-secret' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server-user.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: envar-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: SECRET_SERVERUSER
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: server-user
  14 └           key:  server-username
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'envar-container' of Pod 'env-server-user-secret' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server-user.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: envar-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: SECRET_SERVERUSER
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: server-user
  14 └           key:  server-username
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'envar-container' of Pod 'env-server-user-secret' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server-user.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: envar-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: SECRET_SERVERUSER
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: server-user
  14 └           key:  server-username
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'envar-container' of Pod 'env-server-user-secret' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server-user.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: envar-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: SECRET_SERVERUSER
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: server-user
  14 └           key:  server-username
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'envar-container' of Pod 'env-server-user-secret' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server-user.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: envar-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: SECRET_SERVERUSER
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: server-user
  14 └           key:  server-username
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'envar-container' of Pod 'env-server-user-secret' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server-user.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: envar-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: SECRET_SERVERUSER
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: server-user
  14 └           key:  server-username
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'envar-container' of Pod 'env-server-user-secret' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server-user.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: envar-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: SECRET_SERVERUSER
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: server-user
  14 └           key:  server-username
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'envar-container' of Pod 'env-server-user-secret' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server-user.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: envar-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: SECRET_SERVERUSER
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: server-user
  14 └           key:  server-username
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'envar-container' of Pod 'env-server-user-secret' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server-user.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: envar-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: SECRET_SERVERUSER
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: server-user
  14 └           key:  server-username
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server-user.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: envar-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: SECRET_SERVERUSER
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: server-user
  14 └           key:  server-username
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "envar-container" of pod "env-server-user-secret" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server-user.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: envar-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: SECRET_SERVERUSER
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: server-user
  14 └           key:  server-username
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server-user.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: envar-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: SECRET_SERVERUSER
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: server-user
  14 └           key:  server-username
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod env-server-user-secret in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server-user.yaml:4
────────────────────────────────────────
   4 [   name: env-server-user-secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container env-server-user-secret in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-user.yaml:7-14
────────────────────────────────────────
   7 ┌   - name: envar-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: SECRET_SERVERUSER
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: server-user
  14 └           key:  server-username
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod env-server-user-secret in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server-user.yaml:6-14
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: envar-container
   8 │     image: nginx
   9 │     env:
  10 │     - name: SECRET_SERVERUSER
  11 │       valueFrom:
  12 │         secretKeyRef:
  13 │           name: server-user
  14 └           key:  server-username
────────────────────────────────────────



server.deployment.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app' of Deployment 'magic-spreadsheet-notifier-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server.deployment.yaml:18-52
────────────────────────────────────────
  18 ┌         - name: app
  19 │           image: magic-spreadsheet-notifier-server
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: SERVER_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: magic-spreadsheet-notifier-conf
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app' of Deployment 'magic-spreadsheet-notifier-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server.deployment.yaml:18-52
────────────────────────────────────────
  18 ┌         - name: app
  19 │           image: magic-spreadsheet-notifier-server
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: SERVER_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: magic-spreadsheet-notifier-conf
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app' of 'deployment' 'magic-spreadsheet-notifier-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server.deployment.yaml:18-52
────────────────────────────────────────
  18 ┌         - name: app
  19 │           image: magic-spreadsheet-notifier-server
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: SERVER_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: magic-spreadsheet-notifier-conf
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'app' of Deployment 'magic-spreadsheet-notifier-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server.deployment.yaml:18-52
────────────────────────────────────────
  18 ┌         - name: app
  19 │           image: magic-spreadsheet-notifier-server
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: SERVER_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: magic-spreadsheet-notifier-conf
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app' of Deployment 'magic-spreadsheet-notifier-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server.deployment.yaml:18-52
────────────────────────────────────────
  18 ┌         - name: app
  19 │           image: magic-spreadsheet-notifier-server
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: SERVER_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: magic-spreadsheet-notifier-conf
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'app' of Deployment 'magic-spreadsheet-notifier-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server.deployment.yaml:18-52
────────────────────────────────────────
  18 ┌         - name: app
  19 │           image: magic-spreadsheet-notifier-server
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: SERVER_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: magic-spreadsheet-notifier-conf
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app' of Deployment 'magic-spreadsheet-notifier-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server.deployment.yaml:18-52
────────────────────────────────────────
  18 ┌         - name: app
  19 │           image: magic-spreadsheet-notifier-server
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: SERVER_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: magic-spreadsheet-notifier-conf
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app' of Deployment 'magic-spreadsheet-notifier-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server.deployment.yaml:18-52
────────────────────────────────────────
  18 ┌         - name: app
  19 │           image: magic-spreadsheet-notifier-server
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: SERVER_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: magic-spreadsheet-notifier-conf
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app' of Deployment 'magic-spreadsheet-notifier-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server.deployment.yaml:18-52
────────────────────────────────────────
  18 ┌         - name: app
  19 │           image: magic-spreadsheet-notifier-server
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: SERVER_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: magic-spreadsheet-notifier-conf
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app' of Deployment 'magic-spreadsheet-notifier-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server.deployment.yaml:18-52
────────────────────────────────────────
  18 ┌         - name: app
  19 │           image: magic-spreadsheet-notifier-server
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: SERVER_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: magic-spreadsheet-notifier-conf
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app' of Deployment 'magic-spreadsheet-notifier-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server.deployment.yaml:18-52
────────────────────────────────────────
  18 ┌         - name: app
  19 │           image: magic-spreadsheet-notifier-server
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: SERVER_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: magic-spreadsheet-notifier-conf
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app' of Deployment 'magic-spreadsheet-notifier-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server.deployment.yaml:18-52
────────────────────────────────────────
  18 ┌         - name: app
  19 │           image: magic-spreadsheet-notifier-server
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: SERVER_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: magic-spreadsheet-notifier-conf
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server.deployment.yaml:18-52
────────────────────────────────────────
  18 ┌         - name: app
  19 │           image: magic-spreadsheet-notifier-server
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: SERVER_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: magic-spreadsheet-notifier-conf
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app" of deployment "magic-spreadsheet-notifier-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server.deployment.yaml:18-52
────────────────────────────────────────
  18 ┌         - name: app
  19 │           image: magic-spreadsheet-notifier-server
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: SERVER_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: magic-spreadsheet-notifier-conf
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server.deployment.yaml:18-52
────────────────────────────────────────
  18 ┌         - name: app
  19 │           image: magic-spreadsheet-notifier-server
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: SERVER_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: magic-spreadsheet-notifier-conf
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment magic-spreadsheet-notifier-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server.deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: magic-spreadsheet-notifier-server
   5 │   labels:
   6 └     app: magic-spreadsheet-notifier-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container magic-spreadsheet-notifier-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server.deployment.yaml:18-52
────────────────────────────────────────
  18 ┌         - name: app
  19 │           image: magic-spreadsheet-notifier-server
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: SERVER_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: magic-spreadsheet-notifier-conf
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment magic-spreadsheet-notifier-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server.deployment.yaml:17-52
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: app
  19 │           image: magic-spreadsheet-notifier-server
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: SERVER_HOST
  24 │               valueFrom:
  25 └                 configMapKeyRef:
  ..   
────────────────────────────────────────



server.deployment1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'tdarr' of Deployment 'tdarr' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server.deployment1.yaml:23-53
────────────────────────────────────────
  23 ┌         - env:
  24 │             - name: TZ
  25 │               value: America/Chicago
  26 │             - name: ServerIP
  27 │               value: 0.0.0.0
  28 │             - name: ServerPort
  29 │               value: "8266"
  30 │             - name: webUIPort
  31 └               value: "8265"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'tdarr' of Deployment 'tdarr' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server.deployment1.yaml:23-53
────────────────────────────────────────
  23 ┌         - env:
  24 │             - name: TZ
  25 │               value: America/Chicago
  26 │             - name: ServerIP
  27 │               value: 0.0.0.0
  28 │             - name: ServerPort
  29 │               value: "8266"
  30 │             - name: webUIPort
  31 └               value: "8265"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'tdarr' of 'deployment' 'tdarr' in 'media' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server.deployment1.yaml:23-53
────────────────────────────────────────
  23 ┌         - env:
  24 │             - name: TZ
  25 │               value: America/Chicago
  26 │             - name: ServerIP
  27 │               value: 0.0.0.0
  28 │             - name: ServerPort
  29 │               value: "8266"
  30 │             - name: webUIPort
  31 └               value: "8265"
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'tdarr' of Deployment 'tdarr' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server.deployment1.yaml:23-53
────────────────────────────────────────
  23 ┌         - env:
  24 │             - name: TZ
  25 │               value: America/Chicago
  26 │             - name: ServerIP
  27 │               value: 0.0.0.0
  28 │             - name: ServerPort
  29 │               value: "8266"
  30 │             - name: webUIPort
  31 └               value: "8265"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'tdarr' of Deployment 'tdarr' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server.deployment1.yaml:23-53
────────────────────────────────────────
  23 ┌         - env:
  24 │             - name: TZ
  25 │               value: America/Chicago
  26 │             - name: ServerIP
  27 │               value: 0.0.0.0
  28 │             - name: ServerPort
  29 │               value: "8266"
  30 │             - name: webUIPort
  31 └               value: "8265"
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'tdarr' of Deployment 'tdarr' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server.deployment1.yaml:23-53
────────────────────────────────────────
  23 ┌         - env:
  24 │             - name: TZ
  25 │               value: America/Chicago
  26 │             - name: ServerIP
  27 │               value: 0.0.0.0
  28 │             - name: ServerPort
  29 │               value: "8266"
  30 │             - name: webUIPort
  31 └               value: "8265"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'tdarr' of Deployment 'tdarr' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server.deployment1.yaml:23-53
────────────────────────────────────────
  23 ┌         - env:
  24 │             - name: TZ
  25 │               value: America/Chicago
  26 │             - name: ServerIP
  27 │               value: 0.0.0.0
  28 │             - name: ServerPort
  29 │               value: "8266"
  30 │             - name: webUIPort
  31 └               value: "8265"
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'tdarr' of Deployment 'tdarr' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server.deployment1.yaml:23-53
────────────────────────────────────────
  23 ┌         - env:
  24 │             - name: TZ
  25 │               value: America/Chicago
  26 │             - name: ServerIP
  27 │               value: 0.0.0.0
  28 │             - name: ServerPort
  29 │               value: "8266"
  30 │             - name: webUIPort
  31 └               value: "8265"
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'tdarr' of Deployment 'tdarr' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server.deployment1.yaml:23-53
────────────────────────────────────────
  23 ┌         - env:
  24 │             - name: TZ
  25 │               value: America/Chicago
  26 │             - name: ServerIP
  27 │               value: 0.0.0.0
  28 │             - name: ServerPort
  29 │               value: "8266"
  30 │             - name: webUIPort
  31 └               value: "8265"
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'tdarr' of Deployment 'tdarr' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server.deployment1.yaml:23-53
────────────────────────────────────────
  23 ┌         - env:
  24 │             - name: TZ
  25 │               value: America/Chicago
  26 │             - name: ServerIP
  27 │               value: 0.0.0.0
  28 │             - name: ServerPort
  29 │               value: "8266"
  30 │             - name: webUIPort
  31 └               value: "8265"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'tdarr' of Deployment 'tdarr' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server.deployment1.yaml:23-53
────────────────────────────────────────
  23 ┌         - env:
  24 │             - name: TZ
  25 │               value: America/Chicago
  26 │             - name: ServerIP
  27 │               value: 0.0.0.0
  28 │             - name: ServerPort
  29 │               value: "8266"
  30 │             - name: webUIPort
  31 └               value: "8265"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'tdarr' of Deployment 'tdarr' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server.deployment1.yaml:23-53
────────────────────────────────────────
  23 ┌         - env:
  24 │             - name: TZ
  25 │               value: America/Chicago
  26 │             - name: ServerIP
  27 │               value: 0.0.0.0
  28 │             - name: ServerPort
  29 │               value: "8266"
  30 │             - name: webUIPort
  31 └               value: "8265"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server.deployment1.yaml:23-53
────────────────────────────────────────
  23 ┌         - env:
  24 │             - name: TZ
  25 │               value: America/Chicago
  26 │             - name: ServerIP
  27 │               value: 0.0.0.0
  28 │             - name: ServerPort
  29 │               value: "8266"
  30 │             - name: webUIPort
  31 └               value: "8265"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "tdarr" of deployment "tdarr" in "media" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server.deployment1.yaml:23-53
────────────────────────────────────────
  23 ┌         - env:
  24 │             - name: TZ
  25 │               value: America/Chicago
  26 │             - name: ServerIP
  27 │               value: 0.0.0.0
  28 │             - name: ServerPort
  29 │               value: "8266"
  30 │             - name: webUIPort
  31 └               value: "8265"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server.deployment1.yaml:23-53
────────────────────────────────────────
  23 ┌         - env:
  24 │             - name: TZ
  25 │               value: America/Chicago
  26 │             - name: ServerIP
  27 │               value: 0.0.0.0
  28 │             - name: ServerPort
  29 │               value: "8266"
  30 │             - name: webUIPort
  31 └               value: "8265"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container tdarr in media namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server.deployment1.yaml:23-53
────────────────────────────────────────
  23 ┌         - env:
  24 │             - name: TZ
  25 │               value: America/Chicago
  26 │             - name: ServerIP
  27 │               value: 0.0.0.0
  28 │             - name: ServerPort
  29 │               value: "8266"
  30 │             - name: webUIPort
  31 └               value: "8265"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment tdarr in media namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server.deployment1.yaml:22-72
────────────────────────────────────────
  22 ┌       containers:
  23 │         - env:
  24 │             - name: TZ
  25 │               value: America/Chicago
  26 │             - name: ServerIP
  27 │               value: 0.0.0.0
  28 │             - name: ServerPort
  29 │               value: "8266"
  30 └             - name: webUIPort
  ..   
────────────────────────────────────────



server.deployment2.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app' of Deployment 'magic-spreadsheet-notifier-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server.deployment2.yaml:18-52
────────────────────────────────────────
  18 ┌         - name: app
  19 │           image: magic-spreadsheet-notifier-server
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: SERVER_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: magic-spreadsheet-notifier-conf
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app' of Deployment 'magic-spreadsheet-notifier-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server.deployment2.yaml:18-52
────────────────────────────────────────
  18 ┌         - name: app
  19 │           image: magic-spreadsheet-notifier-server
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: SERVER_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: magic-spreadsheet-notifier-conf
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app' of 'deployment' 'magic-spreadsheet-notifier-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server.deployment2.yaml:18-52
────────────────────────────────────────
  18 ┌         - name: app
  19 │           image: magic-spreadsheet-notifier-server
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: SERVER_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: magic-spreadsheet-notifier-conf
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'app' of Deployment 'magic-spreadsheet-notifier-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server.deployment2.yaml:18-52
────────────────────────────────────────
  18 ┌         - name: app
  19 │           image: magic-spreadsheet-notifier-server
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: SERVER_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: magic-spreadsheet-notifier-conf
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app' of Deployment 'magic-spreadsheet-notifier-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server.deployment2.yaml:18-52
────────────────────────────────────────
  18 ┌         - name: app
  19 │           image: magic-spreadsheet-notifier-server
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: SERVER_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: magic-spreadsheet-notifier-conf
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'app' of Deployment 'magic-spreadsheet-notifier-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server.deployment2.yaml:18-52
────────────────────────────────────────
  18 ┌         - name: app
  19 │           image: magic-spreadsheet-notifier-server
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: SERVER_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: magic-spreadsheet-notifier-conf
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app' of Deployment 'magic-spreadsheet-notifier-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server.deployment2.yaml:18-52
────────────────────────────────────────
  18 ┌         - name: app
  19 │           image: magic-spreadsheet-notifier-server
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: SERVER_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: magic-spreadsheet-notifier-conf
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app' of Deployment 'magic-spreadsheet-notifier-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server.deployment2.yaml:18-52
────────────────────────────────────────
  18 ┌         - name: app
  19 │           image: magic-spreadsheet-notifier-server
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: SERVER_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: magic-spreadsheet-notifier-conf
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app' of Deployment 'magic-spreadsheet-notifier-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server.deployment2.yaml:18-52
────────────────────────────────────────
  18 ┌         - name: app
  19 │           image: magic-spreadsheet-notifier-server
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: SERVER_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: magic-spreadsheet-notifier-conf
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app' of Deployment 'magic-spreadsheet-notifier-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server.deployment2.yaml:18-52
────────────────────────────────────────
  18 ┌         - name: app
  19 │           image: magic-spreadsheet-notifier-server
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: SERVER_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: magic-spreadsheet-notifier-conf
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app' of Deployment 'magic-spreadsheet-notifier-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server.deployment2.yaml:18-52
────────────────────────────────────────
  18 ┌         - name: app
  19 │           image: magic-spreadsheet-notifier-server
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: SERVER_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: magic-spreadsheet-notifier-conf
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app' of Deployment 'magic-spreadsheet-notifier-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server.deployment2.yaml:18-52
────────────────────────────────────────
  18 ┌         - name: app
  19 │           image: magic-spreadsheet-notifier-server
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: SERVER_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: magic-spreadsheet-notifier-conf
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server.deployment2.yaml:18-52
────────────────────────────────────────
  18 ┌         - name: app
  19 │           image: magic-spreadsheet-notifier-server
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: SERVER_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: magic-spreadsheet-notifier-conf
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app" of deployment "magic-spreadsheet-notifier-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server.deployment2.yaml:18-52
────────────────────────────────────────
  18 ┌         - name: app
  19 │           image: magic-spreadsheet-notifier-server
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: SERVER_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: magic-spreadsheet-notifier-conf
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server.deployment2.yaml:18-52
────────────────────────────────────────
  18 ┌         - name: app
  19 │           image: magic-spreadsheet-notifier-server
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: SERVER_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: magic-spreadsheet-notifier-conf
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment magic-spreadsheet-notifier-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server.deployment2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: magic-spreadsheet-notifier-server
   5 │   labels:
   6 └     app: magic-spreadsheet-notifier-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container magic-spreadsheet-notifier-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server.deployment2.yaml:18-52
────────────────────────────────────────
  18 ┌         - name: app
  19 │           image: magic-spreadsheet-notifier-server
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: SERVER_HOST
  24 │               valueFrom:
  25 │                 configMapKeyRef:
  26 └                   name: magic-spreadsheet-notifier-conf
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment magic-spreadsheet-notifier-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server.deployment2.yaml:17-52
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: app
  19 │           image: magic-spreadsheet-notifier-server
  20 │           ports:
  21 │             - containerPort: 8080
  22 │           env:
  23 │             - name: SERVER_HOST
  24 │               valueFrom:
  25 └                 configMapKeyRef:
  ..   
────────────────────────────────────────



server.deployment3.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'tdarr' of Deployment 'tdarr' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server.deployment3.yaml:23-53
────────────────────────────────────────
  23 ┌         - env:
  24 │             - name: TZ
  25 │               value: America/Chicago
  26 │             - name: ServerIP
  27 │               value: 0.0.0.0
  28 │             - name: ServerPort
  29 │               value: "8266"
  30 │             - name: webUIPort
  31 └               value: "8265"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'tdarr' of Deployment 'tdarr' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server.deployment3.yaml:23-53
────────────────────────────────────────
  23 ┌         - env:
  24 │             - name: TZ
  25 │               value: America/Chicago
  26 │             - name: ServerIP
  27 │               value: 0.0.0.0
  28 │             - name: ServerPort
  29 │               value: "8266"
  30 │             - name: webUIPort
  31 └               value: "8265"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'tdarr' of 'deployment' 'tdarr' in 'media' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server.deployment3.yaml:23-53
────────────────────────────────────────
  23 ┌         - env:
  24 │             - name: TZ
  25 │               value: America/Chicago
  26 │             - name: ServerIP
  27 │               value: 0.0.0.0
  28 │             - name: ServerPort
  29 │               value: "8266"
  30 │             - name: webUIPort
  31 └               value: "8265"
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'tdarr' of Deployment 'tdarr' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server.deployment3.yaml:23-53
────────────────────────────────────────
  23 ┌         - env:
  24 │             - name: TZ
  25 │               value: America/Chicago
  26 │             - name: ServerIP
  27 │               value: 0.0.0.0
  28 │             - name: ServerPort
  29 │               value: "8266"
  30 │             - name: webUIPort
  31 └               value: "8265"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'tdarr' of Deployment 'tdarr' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server.deployment3.yaml:23-53
────────────────────────────────────────
  23 ┌         - env:
  24 │             - name: TZ
  25 │               value: America/Chicago
  26 │             - name: ServerIP
  27 │               value: 0.0.0.0
  28 │             - name: ServerPort
  29 │               value: "8266"
  30 │             - name: webUIPort
  31 └               value: "8265"
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'tdarr' of Deployment 'tdarr' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server.deployment3.yaml:23-53
────────────────────────────────────────
  23 ┌         - env:
  24 │             - name: TZ
  25 │               value: America/Chicago
  26 │             - name: ServerIP
  27 │               value: 0.0.0.0
  28 │             - name: ServerPort
  29 │               value: "8266"
  30 │             - name: webUIPort
  31 └               value: "8265"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'tdarr' of Deployment 'tdarr' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server.deployment3.yaml:23-53
────────────────────────────────────────
  23 ┌         - env:
  24 │             - name: TZ
  25 │               value: America/Chicago
  26 │             - name: ServerIP
  27 │               value: 0.0.0.0
  28 │             - name: ServerPort
  29 │               value: "8266"
  30 │             - name: webUIPort
  31 └               value: "8265"
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'tdarr' of Deployment 'tdarr' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server.deployment3.yaml:23-53
────────────────────────────────────────
  23 ┌         - env:
  24 │             - name: TZ
  25 │               value: America/Chicago
  26 │             - name: ServerIP
  27 │               value: 0.0.0.0
  28 │             - name: ServerPort
  29 │               value: "8266"
  30 │             - name: webUIPort
  31 └               value: "8265"
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'tdarr' of Deployment 'tdarr' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server.deployment3.yaml:23-53
────────────────────────────────────────
  23 ┌         - env:
  24 │             - name: TZ
  25 │               value: America/Chicago
  26 │             - name: ServerIP
  27 │               value: 0.0.0.0
  28 │             - name: ServerPort
  29 │               value: "8266"
  30 │             - name: webUIPort
  31 └               value: "8265"
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'tdarr' of Deployment 'tdarr' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server.deployment3.yaml:23-53
────────────────────────────────────────
  23 ┌         - env:
  24 │             - name: TZ
  25 │               value: America/Chicago
  26 │             - name: ServerIP
  27 │               value: 0.0.0.0
  28 │             - name: ServerPort
  29 │               value: "8266"
  30 │             - name: webUIPort
  31 └               value: "8265"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'tdarr' of Deployment 'tdarr' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server.deployment3.yaml:23-53
────────────────────────────────────────
  23 ┌         - env:
  24 │             - name: TZ
  25 │               value: America/Chicago
  26 │             - name: ServerIP
  27 │               value: 0.0.0.0
  28 │             - name: ServerPort
  29 │               value: "8266"
  30 │             - name: webUIPort
  31 └               value: "8265"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'tdarr' of Deployment 'tdarr' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server.deployment3.yaml:23-53
────────────────────────────────────────
  23 ┌         - env:
  24 │             - name: TZ
  25 │               value: America/Chicago
  26 │             - name: ServerIP
  27 │               value: 0.0.0.0
  28 │             - name: ServerPort
  29 │               value: "8266"
  30 │             - name: webUIPort
  31 └               value: "8265"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server.deployment3.yaml:23-53
────────────────────────────────────────
  23 ┌         - env:
  24 │             - name: TZ
  25 │               value: America/Chicago
  26 │             - name: ServerIP
  27 │               value: 0.0.0.0
  28 │             - name: ServerPort
  29 │               value: "8266"
  30 │             - name: webUIPort
  31 └               value: "8265"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "tdarr" of deployment "tdarr" in "media" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server.deployment3.yaml:23-53
────────────────────────────────────────
  23 ┌         - env:
  24 │             - name: TZ
  25 │               value: America/Chicago
  26 │             - name: ServerIP
  27 │               value: 0.0.0.0
  28 │             - name: ServerPort
  29 │               value: "8266"
  30 │             - name: webUIPort
  31 └               value: "8265"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server.deployment3.yaml:23-53
────────────────────────────────────────
  23 ┌         - env:
  24 │             - name: TZ
  25 │               value: America/Chicago
  26 │             - name: ServerIP
  27 │               value: 0.0.0.0
  28 │             - name: ServerPort
  29 │               value: "8266"
  30 │             - name: webUIPort
  31 └               value: "8265"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container tdarr in media namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server.deployment3.yaml:23-53
────────────────────────────────────────
  23 ┌         - env:
  24 │             - name: TZ
  25 │               value: America/Chicago
  26 │             - name: ServerIP
  27 │               value: 0.0.0.0
  28 │             - name: ServerPort
  29 │               value: "8266"
  30 │             - name: webUIPort
  31 └               value: "8265"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment tdarr in media namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server.deployment3.yaml:22-72
────────────────────────────────────────
  22 ┌       containers:
  23 │         - env:
  24 │             - name: TZ
  25 │               value: America/Chicago
  26 │             - name: ServerIP
  27 │               value: 0.0.0.0
  28 │             - name: ServerPort
  29 │               value: "8266"
  30 └             - name: webUIPort
  ..   
────────────────────────────────────────



server.deployment4.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'python-ms-sol1' of Deployment 'server-sol1-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server.deployment4.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: python-ms-sol1
  20 │         image: python-ms-sol1:lastest
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - containerPort: 3000
  24 │         env:
  25 │         - name: REDIS_HOST
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'python-ms-sol1' of Deployment 'server-sol1-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server.deployment4.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: python-ms-sol1
  20 │         image: python-ms-sol1:lastest
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - containerPort: 3000
  24 │         env:
  25 │         - name: REDIS_HOST
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'python-ms-sol1' of 'deployment' 'server-sol1-deployment' in 'sol-1' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server.deployment4.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: python-ms-sol1
  20 │         image: python-ms-sol1:lastest
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - containerPort: 3000
  24 │         env:
  25 │         - name: REDIS_HOST
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'python-ms-sol1' of Deployment 'server-sol1-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server.deployment4.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: python-ms-sol1
  20 │         image: python-ms-sol1:lastest
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - containerPort: 3000
  24 │         env:
  25 │         - name: REDIS_HOST
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'python-ms-sol1' of Deployment 'server-sol1-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server.deployment4.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: python-ms-sol1
  20 │         image: python-ms-sol1:lastest
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - containerPort: 3000
  24 │         env:
  25 │         - name: REDIS_HOST
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'python-ms-sol1' of Deployment 'server-sol1-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server.deployment4.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: python-ms-sol1
  20 │         image: python-ms-sol1:lastest
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - containerPort: 3000
  24 │         env:
  25 │         - name: REDIS_HOST
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'python-ms-sol1' of Deployment 'server-sol1-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server.deployment4.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: python-ms-sol1
  20 │         image: python-ms-sol1:lastest
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - containerPort: 3000
  24 │         env:
  25 │         - name: REDIS_HOST
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'python-ms-sol1' of Deployment 'server-sol1-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server.deployment4.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: python-ms-sol1
  20 │         image: python-ms-sol1:lastest
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - containerPort: 3000
  24 │         env:
  25 │         - name: REDIS_HOST
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'python-ms-sol1' of Deployment 'server-sol1-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server.deployment4.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: python-ms-sol1
  20 │         image: python-ms-sol1:lastest
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - containerPort: 3000
  24 │         env:
  25 │         - name: REDIS_HOST
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'python-ms-sol1' of Deployment 'server-sol1-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server.deployment4.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: python-ms-sol1
  20 │         image: python-ms-sol1:lastest
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - containerPort: 3000
  24 │         env:
  25 │         - name: REDIS_HOST
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'python-ms-sol1' of Deployment 'server-sol1-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server.deployment4.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: python-ms-sol1
  20 │         image: python-ms-sol1:lastest
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - containerPort: 3000
  24 │         env:
  25 │         - name: REDIS_HOST
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server.deployment4.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: python-ms-sol1
  20 │         image: python-ms-sol1:lastest
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - containerPort: 3000
  24 │         env:
  25 │         - name: REDIS_HOST
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "python-ms-sol1" of deployment "server-sol1-deployment" in "sol-1" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server.deployment4.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: python-ms-sol1
  20 │         image: python-ms-sol1:lastest
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - containerPort: 3000
  24 │         env:
  25 │         - name: REDIS_HOST
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server.deployment4.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: python-ms-sol1
  20 │         image: python-ms-sol1:lastest
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - containerPort: 3000
  24 │         env:
  25 │         - name: REDIS_HOST
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-sol1-deployment in sol-1 namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server.deployment4.yaml:19-38
────────────────────────────────────────
  19 ┌       - name: python-ms-sol1
  20 │         image: python-ms-sol1:lastest
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - containerPort: 3000
  24 │         env:
  25 │         - name: REDIS_HOST
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-sol1-deployment in sol-1 namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server.deployment4.yaml:18-38
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: python-ms-sol1
  20 │         image: python-ms-sol1:lastest
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - containerPort: 3000
  24 │         env:
  25 │         - name: REDIS_HOST
  26 └           valueFrom:
  ..   
────────────────────────────────────────



server.deployment5.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'python-ms-sol2' of Deployment 'server-sol2-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server.deployment5.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: python-ms-sol2
  20 │         image: python-ms-sol2:lastest
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - containerPort: 3000
  24 │         env:
  25 │         - name: REDIS_HOST
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'python-ms-sol2' of Deployment 'server-sol2-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server.deployment5.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: python-ms-sol2
  20 │         image: python-ms-sol2:lastest
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - containerPort: 3000
  24 │         env:
  25 │         - name: REDIS_HOST
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'python-ms-sol2' of 'deployment' 'server-sol2-deployment' in 'sol-2' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server.deployment5.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: python-ms-sol2
  20 │         image: python-ms-sol2:lastest
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - containerPort: 3000
  24 │         env:
  25 │         - name: REDIS_HOST
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'python-ms-sol2' of Deployment 'server-sol2-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server.deployment5.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: python-ms-sol2
  20 │         image: python-ms-sol2:lastest
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - containerPort: 3000
  24 │         env:
  25 │         - name: REDIS_HOST
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'python-ms-sol2' of Deployment 'server-sol2-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server.deployment5.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: python-ms-sol2
  20 │         image: python-ms-sol2:lastest
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - containerPort: 3000
  24 │         env:
  25 │         - name: REDIS_HOST
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'python-ms-sol2' of Deployment 'server-sol2-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server.deployment5.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: python-ms-sol2
  20 │         image: python-ms-sol2:lastest
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - containerPort: 3000
  24 │         env:
  25 │         - name: REDIS_HOST
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'python-ms-sol2' of Deployment 'server-sol2-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server.deployment5.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: python-ms-sol2
  20 │         image: python-ms-sol2:lastest
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - containerPort: 3000
  24 │         env:
  25 │         - name: REDIS_HOST
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'python-ms-sol2' of Deployment 'server-sol2-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server.deployment5.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: python-ms-sol2
  20 │         image: python-ms-sol2:lastest
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - containerPort: 3000
  24 │         env:
  25 │         - name: REDIS_HOST
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'python-ms-sol2' of Deployment 'server-sol2-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server.deployment5.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: python-ms-sol2
  20 │         image: python-ms-sol2:lastest
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - containerPort: 3000
  24 │         env:
  25 │         - name: REDIS_HOST
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'python-ms-sol2' of Deployment 'server-sol2-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server.deployment5.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: python-ms-sol2
  20 │         image: python-ms-sol2:lastest
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - containerPort: 3000
  24 │         env:
  25 │         - name: REDIS_HOST
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'python-ms-sol2' of Deployment 'server-sol2-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server.deployment5.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: python-ms-sol2
  20 │         image: python-ms-sol2:lastest
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - containerPort: 3000
  24 │         env:
  25 │         - name: REDIS_HOST
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server.deployment5.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: python-ms-sol2
  20 │         image: python-ms-sol2:lastest
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - containerPort: 3000
  24 │         env:
  25 │         - name: REDIS_HOST
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "python-ms-sol2" of deployment "server-sol2-deployment" in "sol-2" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server.deployment5.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: python-ms-sol2
  20 │         image: python-ms-sol2:lastest
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - containerPort: 3000
  24 │         env:
  25 │         - name: REDIS_HOST
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server.deployment5.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: python-ms-sol2
  20 │         image: python-ms-sol2:lastest
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - containerPort: 3000
  24 │         env:
  25 │         - name: REDIS_HOST
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-sol2-deployment in sol-2 namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server.deployment5.yaml:19-34
────────────────────────────────────────
  19 ┌       - name: python-ms-sol2
  20 │         image: python-ms-sol2:lastest
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - containerPort: 3000
  24 │         env:
  25 │         - name: REDIS_HOST
  26 │           valueFrom:
  27 └             configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-sol2-deployment in sol-2 namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server.deployment5.yaml:18-34
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: python-ms-sol2
  20 │         image: python-ms-sol2:lastest
  21 │         imagePullPolicy: Never
  22 │         ports:
  23 │         - containerPort: 3000
  24 │         env:
  25 │         - name: REDIS_HOST
  26 └           valueFrom:
  ..   
────────────────────────────────────────



server.yaml (kubernetes)
========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server.yaml:19-46
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: python:alpine
  21 │         workingDir: /app
  22 │         command:
  23 │         - /bin/sh
  24 │         args:
  25 │         - -c
  26 │         - pip3 install --disable-pip-version-check --root-user-action=ignore flask
  27 └           && echo 'ok' > /data.txt && flask run -h 0.0.0.0 -p 5000
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server.yaml:19-46
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: python:alpine
  21 │         workingDir: /app
  22 │         command:
  23 │         - /bin/sh
  24 │         args:
  25 │         - -c
  26 │         - pip3 install --disable-pip-version-check --root-user-action=ignore flask
  27 └           && echo 'ok' > /data.txt && flask run -h 0.0.0.0 -p 5000
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server.yaml:19-46
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: python:alpine
  21 │         workingDir: /app
  22 │         command:
  23 │         - /bin/sh
  24 │         args:
  25 │         - -c
  26 │         - pip3 install --disable-pip-version-check --root-user-action=ignore flask
  27 └           && echo 'ok' > /data.txt && flask run -h 0.0.0.0 -p 5000
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server.yaml:19-46
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: python:alpine
  21 │         workingDir: /app
  22 │         command:
  23 │         - /bin/sh
  24 │         args:
  25 │         - -c
  26 │         - pip3 install --disable-pip-version-check --root-user-action=ignore flask
  27 └           && echo 'ok' > /data.txt && flask run -h 0.0.0.0 -p 5000
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server.yaml:19-46
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: python:alpine
  21 │         workingDir: /app
  22 │         command:
  23 │         - /bin/sh
  24 │         args:
  25 │         - -c
  26 │         - pip3 install --disable-pip-version-check --root-user-action=ignore flask
  27 └           && echo 'ok' > /data.txt && flask run -h 0.0.0.0 -p 5000
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server.yaml:19-46
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: python:alpine
  21 │         workingDir: /app
  22 │         command:
  23 │         - /bin/sh
  24 │         args:
  25 │         - -c
  26 │         - pip3 install --disable-pip-version-check --root-user-action=ignore flask
  27 └           && echo 'ok' > /data.txt && flask run -h 0.0.0.0 -p 5000
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server.yaml:19-46
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: python:alpine
  21 │         workingDir: /app
  22 │         command:
  23 │         - /bin/sh
  24 │         args:
  25 │         - -c
  26 │         - pip3 install --disable-pip-version-check --root-user-action=ignore flask
  27 └           && echo 'ok' > /data.txt && flask run -h 0.0.0.0 -p 5000
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server.yaml:19-46
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: python:alpine
  21 │         workingDir: /app
  22 │         command:
  23 │         - /bin/sh
  24 │         args:
  25 │         - -c
  26 │         - pip3 install --disable-pip-version-check --root-user-action=ignore flask
  27 └           && echo 'ok' > /data.txt && flask run -h 0.0.0.0 -p 5000
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server.yaml:19-46
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: python:alpine
  21 │         workingDir: /app
  22 │         command:
  23 │         - /bin/sh
  24 │         args:
  25 │         - -c
  26 │         - pip3 install --disable-pip-version-check --root-user-action=ignore flask
  27 └           && echo 'ok' > /data.txt && flask run -h 0.0.0.0 -p 5000
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server.yaml:19-46
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: python:alpine
  21 │         workingDir: /app
  22 │         command:
  23 │         - /bin/sh
  24 │         args:
  25 │         - -c
  26 │         - pip3 install --disable-pip-version-check --root-user-action=ignore flask
  27 └           && echo 'ok' > /data.txt && flask run -h 0.0.0.0 -p 5000
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server.yaml:19-46
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: python:alpine
  21 │         workingDir: /app
  22 │         command:
  23 │         - /bin/sh
  24 │         args:
  25 │         - -c
  26 │         - pip3 install --disable-pip-version-check --root-user-action=ignore flask
  27 └           && echo 'ok' > /data.txt && flask run -h 0.0.0.0 -p 5000
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server.yaml:19-46
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: python:alpine
  21 │         workingDir: /app
  22 │         command:
  23 │         - /bin/sh
  24 │         args:
  25 │         - -c
  26 │         - pip3 install --disable-pip-version-check --root-user-action=ignore flask
  27 └           && echo 'ok' > /data.txt && flask run -h 0.0.0.0 -p 5000
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server.yaml:19-46
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: python:alpine
  21 │         workingDir: /app
  22 │         command:
  23 │         - /bin/sh
  24 │         args:
  25 │         - -c
  26 │         - pip3 install --disable-pip-version-check --root-user-action=ignore flask
  27 └           && echo 'ok' > /data.txt && flask run -h 0.0.0.0 -p 5000
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server.yaml:19-46
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: python:alpine
  21 │         workingDir: /app
  22 │         command:
  23 │         - /bin/sh
  24 │         args:
  25 │         - -c
  26 │         - pip3 install --disable-pip-version-check --root-user-action=ignore flask
  27 └           && echo 'ok' > /data.txt && flask run -h 0.0.0.0 -p 5000
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server.yaml:4-6
────────────────────────────────────────
   4 ┌   name: server
   5 │   labels:
   6 └     app: server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server.yaml:19-46
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: python:alpine
  21 │         workingDir: /app
  22 │         command:
  23 │         - /bin/sh
  24 │         args:
  25 │         - -c
  26 │         - pip3 install --disable-pip-version-check --root-user-action=ignore flask
  27 └           && echo 'ok' > /data.txt && flask run -h 0.0.0.0 -p 5000
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server.yaml:18-50
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: server
  20 │         image: python:alpine
  21 │         workingDir: /app
  22 │         command:
  23 │         - /bin/sh
  24 │         args:
  25 │         - -c
  26 └         - pip3 install --disable-pip-version-check --root-user-action=ignore flask
  ..   
────────────────────────────────────────



server1.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mini-projet-server' of Deployment 'mini-projet-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server1.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: mini-projet-server
  20 │         image: haithamomh/springk8s:1.1.0
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 │         env:
  26 │         - name: SPRING_DATASOURCE_URL
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mini-projet-server' of Deployment 'mini-projet-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server1.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: mini-projet-server
  20 │         image: haithamomh/springk8s:1.1.0
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 │         env:
  26 │         - name: SPRING_DATASOURCE_URL
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mini-projet-server' of 'deployment' 'mini-projet-server' in 'exam' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server1.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: mini-projet-server
  20 │         image: haithamomh/springk8s:1.1.0
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 │         env:
  26 │         - name: SPRING_DATASOURCE_URL
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mini-projet-server' of Deployment 'mini-projet-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server1.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: mini-projet-server
  20 │         image: haithamomh/springk8s:1.1.0
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 │         env:
  26 │         - name: SPRING_DATASOURCE_URL
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mini-projet-server' of Deployment 'mini-projet-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server1.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: mini-projet-server
  20 │         image: haithamomh/springk8s:1.1.0
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 │         env:
  26 │         - name: SPRING_DATASOURCE_URL
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mini-projet-server' of Deployment 'mini-projet-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server1.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: mini-projet-server
  20 │         image: haithamomh/springk8s:1.1.0
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 │         env:
  26 │         - name: SPRING_DATASOURCE_URL
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mini-projet-server' of Deployment 'mini-projet-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server1.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: mini-projet-server
  20 │         image: haithamomh/springk8s:1.1.0
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 │         env:
  26 │         - name: SPRING_DATASOURCE_URL
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server1.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: mini-projet-server
  20 │         image: haithamomh/springk8s:1.1.0
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 │         env:
  26 │         - name: SPRING_DATASOURCE_URL
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mini-projet-server" of deployment "mini-projet-server" in "exam" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server1.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: mini-projet-server
  20 │         image: haithamomh/springk8s:1.1.0
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 │         env:
  26 │         - name: SPRING_DATASOURCE_URL
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server1.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: mini-projet-server
  20 │         image: haithamomh/springk8s:1.1.0
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 │         env:
  26 │         - name: SPRING_DATASOURCE_URL
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mini-projet-server in exam namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server1.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: mini-projet-server
  20 │         image: haithamomh/springk8s:1.1.0
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 │         env:
  26 │         - name: SPRING_DATASOURCE_URL
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mini-projet-server in exam namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server1.yaml:18-42
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: mini-projet-server
  20 │         image: haithamomh/springk8s:1.1.0
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 │         env:
  26 └         - name: SPRING_DATASOURCE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mini-projet-server in deployment mini-projet-server (namespace: exam) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server1.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: mini-projet-server
  20 │         image: haithamomh/springk8s:1.1.0
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 │         env:
  26 │         - name: SPRING_DATASOURCE_URL
  27 └           valueFrom:
  ..   
────────────────────────────────────────



server10_3.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'xdsserver' of Deployment 'xdsserver' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server10_3.yaml:29-53
────────────────────────────────────────
  29 ┌       - name: xdsserver
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/xds:latest
  32 │         env:
  33 │         - name: CLUSTER_NAME
  34 │           value: xds
  35 │         - name: NAMESPACE
  36 │           value: xds
  37 └         - name: LISTENER_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'xdsserver' of Deployment 'xdsserver' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server10_3.yaml:29-53
────────────────────────────────────────
  29 ┌       - name: xdsserver
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/xds:latest
  32 │         env:
  33 │         - name: CLUSTER_NAME
  34 │           value: xds
  35 │         - name: NAMESPACE
  36 │           value: xds
  37 └         - name: LISTENER_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'xdsserver' of 'deployment' 'xdsserver' in 'xds' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server10_3.yaml:29-53
────────────────────────────────────────
  29 ┌       - name: xdsserver
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/xds:latest
  32 │         env:
  33 │         - name: CLUSTER_NAME
  34 │           value: xds
  35 │         - name: NAMESPACE
  36 │           value: xds
  37 └         - name: LISTENER_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'xdsserver' of Deployment 'xdsserver' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server10_3.yaml:29-53
────────────────────────────────────────
  29 ┌       - name: xdsserver
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/xds:latest
  32 │         env:
  33 │         - name: CLUSTER_NAME
  34 │           value: xds
  35 │         - name: NAMESPACE
  36 │           value: xds
  37 └         - name: LISTENER_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'xdsserver' of Deployment 'xdsserver' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server10_3.yaml:29-53
────────────────────────────────────────
  29 ┌       - name: xdsserver
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/xds:latest
  32 │         env:
  33 │         - name: CLUSTER_NAME
  34 │           value: xds
  35 │         - name: NAMESPACE
  36 │           value: xds
  37 └         - name: LISTENER_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'xdsserver' of Deployment 'xdsserver' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server10_3.yaml:29-53
────────────────────────────────────────
  29 ┌       - name: xdsserver
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/xds:latest
  32 │         env:
  33 │         - name: CLUSTER_NAME
  34 │           value: xds
  35 │         - name: NAMESPACE
  36 │           value: xds
  37 └         - name: LISTENER_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'xdsserver' of Deployment 'xdsserver' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server10_3.yaml:29-53
────────────────────────────────────────
  29 ┌       - name: xdsserver
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/xds:latest
  32 │         env:
  33 │         - name: CLUSTER_NAME
  34 │           value: xds
  35 │         - name: NAMESPACE
  36 │           value: xds
  37 └         - name: LISTENER_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'xdsserver' of Deployment 'xdsserver' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server10_3.yaml:29-53
────────────────────────────────────────
  29 ┌       - name: xdsserver
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/xds:latest
  32 │         env:
  33 │         - name: CLUSTER_NAME
  34 │           value: xds
  35 │         - name: NAMESPACE
  36 │           value: xds
  37 └         - name: LISTENER_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server10_3.yaml:29-53
────────────────────────────────────────
  29 ┌       - name: xdsserver
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/xds:latest
  32 │         env:
  33 │         - name: CLUSTER_NAME
  34 │           value: xds
  35 │         - name: NAMESPACE
  36 │           value: xds
  37 └         - name: LISTENER_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "xdsserver" of deployment "xdsserver" in "xds" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server10_3.yaml:29-53
────────────────────────────────────────
  29 ┌       - name: xdsserver
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/xds:latest
  32 │         env:
  33 │         - name: CLUSTER_NAME
  34 │           value: xds
  35 │         - name: NAMESPACE
  36 │           value: xds
  37 └         - name: LISTENER_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server10_3.yaml:29-53
────────────────────────────────────────
  29 ┌       - name: xdsserver
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/xds:latest
  32 │         env:
  33 │         - name: CLUSTER_NAME
  34 │           value: xds
  35 │         - name: NAMESPACE
  36 │           value: xds
  37 └         - name: LISTENER_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container xdsserver in xds namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server10_3.yaml:29-53
────────────────────────────────────────
  29 ┌       - name: xdsserver
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/xds:latest
  32 │         env:
  33 │         - name: CLUSTER_NAME
  34 │           value: xds
  35 │         - name: NAMESPACE
  36 │           value: xds
  37 └         - name: LISTENER_NAME
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment xdsserver in xds namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server10_3.yaml:18-53
────────────────────────────────────────
  18 ┌       affinity:
  19 │         podAntiAffinity:
  20 │           requiredDuringSchedulingIgnoredDuringExecution:
  21 │           - labelSelector:
  22 │               matchExpressions:
  23 │               - key: app
  24 │                 operator: In
  25 │                 values:
  26 └                 - server
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container xdsserver in deployment xdsserver (namespace: xds) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server10_3.yaml:29-53
────────────────────────────────────────
  29 ┌       - name: xdsserver
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/xds:latest
  32 │         env:
  33 │         - name: CLUSTER_NAME
  34 │           value: xds
  35 │         - name: NAMESPACE
  36 │           value: xds
  37 └         - name: LISTENER_NAME
  ..   
────────────────────────────────────────



server10_5.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server10_5.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --xds
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server10_5.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --xds
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server' in 'xds' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server10_5.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --xds
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server10_5.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --xds
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server10_5.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --xds
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server10_5.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --xds
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server10_5.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --xds
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server10_5.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --xds
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server10_5.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --xds
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server" in "xds" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server10_5.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --xds
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server10_5.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --xds
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server in xds namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server10_5.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --xds
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server in xds namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server10_5.yaml:18-45
────────────────────────────────────────
  18 ┌       affinity:
  19 │         podAntiAffinity:
  20 │           requiredDuringSchedulingIgnoredDuringExecution:
  21 │           - labelSelector:
  22 │               matchExpressions:
  23 │               - key: app
  24 │                 operator: In
  25 │                 values:
  26 └                 - server
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server (namespace: xds) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server10_5.yaml:29-45
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --xds
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────



server11.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'tags' of Deployment 'tags-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server11.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: tags
  17 │         image: tag-media-bot/tags:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: MONGODB_URI
  23 │           value: mongodb://mongodb-service:27017
  24 └         - name: MONGODB_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'tags' of Deployment 'tags-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server11.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: tags
  17 │         image: tag-media-bot/tags:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: MONGODB_URI
  23 │           value: mongodb://mongodb-service:27017
  24 └         - name: MONGODB_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'tags' of 'deployment' 'tags-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server11.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: tags
  17 │         image: tag-media-bot/tags:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: MONGODB_URI
  23 │           value: mongodb://mongodb-service:27017
  24 └         - name: MONGODB_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'tags' of Deployment 'tags-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server11.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: tags
  17 │         image: tag-media-bot/tags:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: MONGODB_URI
  23 │           value: mongodb://mongodb-service:27017
  24 └         - name: MONGODB_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'tags' of Deployment 'tags-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server11.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: tags
  17 │         image: tag-media-bot/tags:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: MONGODB_URI
  23 │           value: mongodb://mongodb-service:27017
  24 └         - name: MONGODB_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'tags' of Deployment 'tags-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server11.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: tags
  17 │         image: tag-media-bot/tags:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: MONGODB_URI
  23 │           value: mongodb://mongodb-service:27017
  24 └         - name: MONGODB_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'tags' of Deployment 'tags-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server11.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: tags
  17 │         image: tag-media-bot/tags:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: MONGODB_URI
  23 │           value: mongodb://mongodb-service:27017
  24 └         - name: MONGODB_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'tags' of Deployment 'tags-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server11.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: tags
  17 │         image: tag-media-bot/tags:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: MONGODB_URI
  23 │           value: mongodb://mongodb-service:27017
  24 └         - name: MONGODB_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'tags' of Deployment 'tags-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server11.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: tags
  17 │         image: tag-media-bot/tags:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: MONGODB_URI
  23 │           value: mongodb://mongodb-service:27017
  24 └         - name: MONGODB_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'tags' of Deployment 'tags-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server11.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: tags
  17 │         image: tag-media-bot/tags:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: MONGODB_URI
  23 │           value: mongodb://mongodb-service:27017
  24 └         - name: MONGODB_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'tags' of Deployment 'tags-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server11.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: tags
  17 │         image: tag-media-bot/tags:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: MONGODB_URI
  23 │           value: mongodb://mongodb-service:27017
  24 └         - name: MONGODB_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'tags' of Deployment 'tags-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server11.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: tags
  17 │         image: tag-media-bot/tags:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: MONGODB_URI
  23 │           value: mongodb://mongodb-service:27017
  24 └         - name: MONGODB_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server11.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: tags
  17 │         image: tag-media-bot/tags:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: MONGODB_URI
  23 │           value: mongodb://mongodb-service:27017
  24 └         - name: MONGODB_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "tags" of deployment "tags-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server11.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: tags
  17 │         image: tag-media-bot/tags:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: MONGODB_URI
  23 │           value: mongodb://mongodb-service:27017
  24 └         - name: MONGODB_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server11.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: tags
  17 │         image: tag-media-bot/tags:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: MONGODB_URI
  23 │           value: mongodb://mongodb-service:27017
  24 └         - name: MONGODB_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment tags-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server11.yaml:4
────────────────────────────────────────
   4 [   name: tags-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container tags-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server11.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: tags
  17 │         image: tag-media-bot/tags:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: MONGODB_URI
  23 │           value: mongodb://mongodb-service:27017
  24 └         - name: MONGODB_DATABASE
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment tags-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server11.yaml:15-29
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: tags
  17 │         image: tag-media-bot/tags:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: MONGODB_URI
  23 └           value: mongodb://mongodb-service:27017
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container tags in deployment tags-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server11.yaml:16-29
────────────────────────────────────────
  16 ┌       - name: tags
  17 │         image: tag-media-bot/tags:latest
  18 │         imagePullPolicy: IfNotPresent
  19 │         ports:
  20 │         - containerPort: 3000
  21 │         env:
  22 │         - name: MONGODB_URI
  23 │           value: mongodb://mongodb-service:27017
  24 └         - name: MONGODB_DATABASE
  ..   
────────────────────────────────────────



server12_1.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server12_1.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: bjnandi/crud-app-mern-server:v1.0.1
  20 │         ports:
  21 │         - containerPort: 5000
  22 │         env:
  23 │         - name: CLOUDINARY_CLOUD_NAME
  24 │           value: duwjbcn5x
  25 │         - name: CLOUDINARY_API_KEY
  26 └           value: '246694643839175'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server12_1.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: bjnandi/crud-app-mern-server:v1.0.1
  20 │         ports:
  21 │         - containerPort: 5000
  22 │         env:
  23 │         - name: CLOUDINARY_CLOUD_NAME
  24 │           value: duwjbcn5x
  25 │         - name: CLOUDINARY_API_KEY
  26 └           value: '246694643839175'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server12_1.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: bjnandi/crud-app-mern-server:v1.0.1
  20 │         ports:
  21 │         - containerPort: 5000
  22 │         env:
  23 │         - name: CLOUDINARY_CLOUD_NAME
  24 │           value: duwjbcn5x
  25 │         - name: CLOUDINARY_API_KEY
  26 └           value: '246694643839175'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server12_1.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: bjnandi/crud-app-mern-server:v1.0.1
  20 │         ports:
  21 │         - containerPort: 5000
  22 │         env:
  23 │         - name: CLOUDINARY_CLOUD_NAME
  24 │           value: duwjbcn5x
  25 │         - name: CLOUDINARY_API_KEY
  26 └           value: '246694643839175'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server12_1.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: bjnandi/crud-app-mern-server:v1.0.1
  20 │         ports:
  21 │         - containerPort: 5000
  22 │         env:
  23 │         - name: CLOUDINARY_CLOUD_NAME
  24 │           value: duwjbcn5x
  25 │         - name: CLOUDINARY_API_KEY
  26 └           value: '246694643839175'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server12_1.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: bjnandi/crud-app-mern-server:v1.0.1
  20 │         ports:
  21 │         - containerPort: 5000
  22 │         env:
  23 │         - name: CLOUDINARY_CLOUD_NAME
  24 │           value: duwjbcn5x
  25 │         - name: CLOUDINARY_API_KEY
  26 └           value: '246694643839175'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server12_1.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: bjnandi/crud-app-mern-server:v1.0.1
  20 │         ports:
  21 │         - containerPort: 5000
  22 │         env:
  23 │         - name: CLOUDINARY_CLOUD_NAME
  24 │           value: duwjbcn5x
  25 │         - name: CLOUDINARY_API_KEY
  26 └           value: '246694643839175'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server12_1.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: bjnandi/crud-app-mern-server:v1.0.1
  20 │         ports:
  21 │         - containerPort: 5000
  22 │         env:
  23 │         - name: CLOUDINARY_CLOUD_NAME
  24 │           value: duwjbcn5x
  25 │         - name: CLOUDINARY_API_KEY
  26 └           value: '246694643839175'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server12_1.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: bjnandi/crud-app-mern-server:v1.0.1
  20 │         ports:
  21 │         - containerPort: 5000
  22 │         env:
  23 │         - name: CLOUDINARY_CLOUD_NAME
  24 │           value: duwjbcn5x
  25 │         - name: CLOUDINARY_API_KEY
  26 └           value: '246694643839175'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server12_1.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: bjnandi/crud-app-mern-server:v1.0.1
  20 │         ports:
  21 │         - containerPort: 5000
  22 │         env:
  23 │         - name: CLOUDINARY_CLOUD_NAME
  24 │           value: duwjbcn5x
  25 │         - name: CLOUDINARY_API_KEY
  26 └           value: '246694643839175'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server12_1.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: bjnandi/crud-app-mern-server:v1.0.1
  20 │         ports:
  21 │         - containerPort: 5000
  22 │         env:
  23 │         - name: CLOUDINARY_CLOUD_NAME
  24 │           value: duwjbcn5x
  25 │         - name: CLOUDINARY_API_KEY
  26 └           value: '246694643839175'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server12_1.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: bjnandi/crud-app-mern-server:v1.0.1
  20 │         ports:
  21 │         - containerPort: 5000
  22 │         env:
  23 │         - name: CLOUDINARY_CLOUD_NAME
  24 │           value: duwjbcn5x
  25 │         - name: CLOUDINARY_API_KEY
  26 └           value: '246694643839175'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server12_1.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: bjnandi/crud-app-mern-server:v1.0.1
  20 │         ports:
  21 │         - containerPort: 5000
  22 │         env:
  23 │         - name: CLOUDINARY_CLOUD_NAME
  24 │           value: duwjbcn5x
  25 │         - name: CLOUDINARY_API_KEY
  26 └           value: '246694643839175'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server12_1.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: bjnandi/crud-app-mern-server:v1.0.1
  20 │         ports:
  21 │         - containerPort: 5000
  22 │         env:
  23 │         - name: CLOUDINARY_CLOUD_NAME
  24 │           value: duwjbcn5x
  25 │         - name: CLOUDINARY_API_KEY
  26 └           value: '246694643839175'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server12_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: server
   5 │   labels:
   6 └     app: server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server12_1.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: bjnandi/crud-app-mern-server:v1.0.1
  20 │         ports:
  21 │         - containerPort: 5000
  22 │         env:
  23 │         - name: CLOUDINARY_CLOUD_NAME
  24 │           value: duwjbcn5x
  25 │         - name: CLOUDINARY_API_KEY
  26 └           value: '246694643839175'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server12_1.yaml:17-34
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: server
  19 │         image: bjnandi/crud-app-mern-server:v1.0.1
  20 │         ports:
  21 │         - containerPort: 5000
  22 │         env:
  23 │         - name: CLOUDINARY_CLOUD_NAME
  24 │           value: duwjbcn5x
  25 └         - name: CLOUDINARY_API_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server12_1.yaml:18-34
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: bjnandi/crud-app-mern-server:v1.0.1
  20 │         ports:
  21 │         - containerPort: 5000
  22 │         env:
  23 │         - name: CLOUDINARY_CLOUD_NAME
  24 │           value: duwjbcn5x
  25 │         - name: CLOUDINARY_API_KEY
  26 └           value: '246694643839175'
  ..   
────────────────────────────────────────



server13.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server13.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: 748735308412.dkr.ecr.us-west-2.amazonaws.com/server:latest
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server13.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: 748735308412.dkr.ecr.us-west-2.amazonaws.com/server:latest
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server13.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: 748735308412.dkr.ecr.us-west-2.amazonaws.com/server:latest
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server13.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: 748735308412.dkr.ecr.us-west-2.amazonaws.com/server:latest
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server13.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: 748735308412.dkr.ecr.us-west-2.amazonaws.com/server:latest
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server13.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: 748735308412.dkr.ecr.us-west-2.amazonaws.com/server:latest
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server13.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: 748735308412.dkr.ecr.us-west-2.amazonaws.com/server:latest
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server13.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: 748735308412.dkr.ecr.us-west-2.amazonaws.com/server:latest
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server13.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: 748735308412.dkr.ecr.us-west-2.amazonaws.com/server:latest
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server13.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: 748735308412.dkr.ecr.us-west-2.amazonaws.com/server:latest
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server13.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: 748735308412.dkr.ecr.us-west-2.amazonaws.com/server:latest
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server13.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: 748735308412.dkr.ecr.us-west-2.amazonaws.com/server:latest
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server13.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: 748735308412.dkr.ecr.us-west-2.amazonaws.com/server:latest
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server13.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: 748735308412.dkr.ecr.us-west-2.amazonaws.com/server:latest
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server13.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: 748735308412.dkr.ecr.us-west-2.amazonaws.com/server:latest
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server13.yaml:4-6
────────────────────────────────────────
   4 ┌   name: server-deployment
   5 │   labels:
   6 └     app: server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server13.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: 748735308412.dkr.ecr.us-west-2.amazonaws.com/server:latest
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server13.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: server
  19 │         image: 748735308412.dkr.ecr.us-west-2.amazonaws.com/server:latest
  20 │         ports:
  21 └         - containerPort: 8000
────────────────────────────────────────



server27.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'iperf' of Pod 'bibaboba' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server27.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: iperf
  10 │     image: docker.io/mishanya363/alpine-iperf3
  11 │     args:
  12 │     - iperf3
  13 │     - -s
  14 └     imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'iperf' of Pod 'bibaboba' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server27.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: iperf
  10 │     image: docker.io/mishanya363/alpine-iperf3
  11 │     args:
  12 │     - iperf3
  13 │     - -s
  14 └     imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'iperf' of 'pod' 'bibaboba' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server27.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: iperf
  10 │     image: docker.io/mishanya363/alpine-iperf3
  11 │     args:
  12 │     - iperf3
  13 │     - -s
  14 └     imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'iperf' of Pod 'bibaboba' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server27.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: iperf
  10 │     image: docker.io/mishanya363/alpine-iperf3
  11 │     args:
  12 │     - iperf3
  13 │     - -s
  14 └     imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'iperf' of Pod 'bibaboba' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server27.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: iperf
  10 │     image: docker.io/mishanya363/alpine-iperf3
  11 │     args:
  12 │     - iperf3
  13 │     - -s
  14 └     imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'iperf' of Pod 'bibaboba' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server27.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: iperf
  10 │     image: docker.io/mishanya363/alpine-iperf3
  11 │     args:
  12 │     - iperf3
  13 │     - -s
  14 └     imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'iperf' of Pod 'bibaboba' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server27.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: iperf
  10 │     image: docker.io/mishanya363/alpine-iperf3
  11 │     args:
  12 │     - iperf3
  13 │     - -s
  14 └     imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'iperf' of Pod 'bibaboba' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server27.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: iperf
  10 │     image: docker.io/mishanya363/alpine-iperf3
  11 │     args:
  12 │     - iperf3
  13 │     - -s
  14 └     imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'iperf' of Pod 'bibaboba' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server27.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: iperf
  10 │     image: docker.io/mishanya363/alpine-iperf3
  11 │     args:
  12 │     - iperf3
  13 │     - -s
  14 └     imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'iperf' of Pod 'bibaboba' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server27.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: iperf
  10 │     image: docker.io/mishanya363/alpine-iperf3
  11 │     args:
  12 │     - iperf3
  13 │     - -s
  14 └     imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'iperf' of Pod 'bibaboba' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server27.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: iperf
  10 │     image: docker.io/mishanya363/alpine-iperf3
  11 │     args:
  12 │     - iperf3
  13 │     - -s
  14 └     imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'iperf' of Pod 'bibaboba' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server27.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: iperf
  10 │     image: docker.io/mishanya363/alpine-iperf3
  11 │     args:
  12 │     - iperf3
  13 │     - -s
  14 └     imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server27.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: iperf
  10 │     image: docker.io/mishanya363/alpine-iperf3
  11 │     args:
  12 │     - iperf3
  13 │     - -s
  14 └     imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "iperf" of pod "bibaboba" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server27.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: iperf
  10 │     image: docker.io/mishanya363/alpine-iperf3
  11 │     args:
  12 │     - iperf3
  13 │     - -s
  14 └     imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server27.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: iperf
  10 │     image: docker.io/mishanya363/alpine-iperf3
  11 │     args:
  12 │     - iperf3
  13 │     - -s
  14 └     imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod bibaboba in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server27.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: bibaboba
   6 └   name: bibaboba
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container bibaboba in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server27.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: iperf
  10 │     image: docker.io/mishanya363/alpine-iperf3
  11 │     args:
  12 │     - iperf3
  13 │     - -s
  14 └     imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod bibaboba in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server27.yaml:8-16
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: iperf
  10 │     image: docker.io/mishanya363/alpine-iperf3
  11 │     args:
  12 │     - iperf3
  13 │     - -s
  14 │     imagePullPolicy: IfNotPresent
  15 │   nodeSelector:
  16 └     kubernetes.io/hostname: worker-node-1
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container iperf in pod bibaboba (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server27.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: iperf
  10 │     image: docker.io/mishanya363/alpine-iperf3
  11 │     args:
  12 │     - iperf3
  13 │     - -s
  14 └     imagePullPolicy: IfNotPresent
────────────────────────────────────────



server3.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server3.yaml:19-46
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: python:alpine
  21 │         workingDir: /app
  22 │         command:
  23 │         - /bin/sh
  24 │         args:
  25 │         - -c
  26 │         - pip3 install --disable-pip-version-check --root-user-action=ignore flask
  27 └           && echo 'ok' > /data.txt && flask run -h 0.0.0.0 -p 5000
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server3.yaml:19-46
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: python:alpine
  21 │         workingDir: /app
  22 │         command:
  23 │         - /bin/sh
  24 │         args:
  25 │         - -c
  26 │         - pip3 install --disable-pip-version-check --root-user-action=ignore flask
  27 └           && echo 'ok' > /data.txt && flask run -h 0.0.0.0 -p 5000
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server3.yaml:19-46
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: python:alpine
  21 │         workingDir: /app
  22 │         command:
  23 │         - /bin/sh
  24 │         args:
  25 │         - -c
  26 │         - pip3 install --disable-pip-version-check --root-user-action=ignore flask
  27 └           && echo 'ok' > /data.txt && flask run -h 0.0.0.0 -p 5000
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server3.yaml:19-46
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: python:alpine
  21 │         workingDir: /app
  22 │         command:
  23 │         - /bin/sh
  24 │         args:
  25 │         - -c
  26 │         - pip3 install --disable-pip-version-check --root-user-action=ignore flask
  27 └           && echo 'ok' > /data.txt && flask run -h 0.0.0.0 -p 5000
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server3.yaml:19-46
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: python:alpine
  21 │         workingDir: /app
  22 │         command:
  23 │         - /bin/sh
  24 │         args:
  25 │         - -c
  26 │         - pip3 install --disable-pip-version-check --root-user-action=ignore flask
  27 └           && echo 'ok' > /data.txt && flask run -h 0.0.0.0 -p 5000
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server3.yaml:19-46
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: python:alpine
  21 │         workingDir: /app
  22 │         command:
  23 │         - /bin/sh
  24 │         args:
  25 │         - -c
  26 │         - pip3 install --disable-pip-version-check --root-user-action=ignore flask
  27 └           && echo 'ok' > /data.txt && flask run -h 0.0.0.0 -p 5000
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server3.yaml:19-46
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: python:alpine
  21 │         workingDir: /app
  22 │         command:
  23 │         - /bin/sh
  24 │         args:
  25 │         - -c
  26 │         - pip3 install --disable-pip-version-check --root-user-action=ignore flask
  27 └           && echo 'ok' > /data.txt && flask run -h 0.0.0.0 -p 5000
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server3.yaml:19-46
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: python:alpine
  21 │         workingDir: /app
  22 │         command:
  23 │         - /bin/sh
  24 │         args:
  25 │         - -c
  26 │         - pip3 install --disable-pip-version-check --root-user-action=ignore flask
  27 └           && echo 'ok' > /data.txt && flask run -h 0.0.0.0 -p 5000
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server3.yaml:19-46
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: python:alpine
  21 │         workingDir: /app
  22 │         command:
  23 │         - /bin/sh
  24 │         args:
  25 │         - -c
  26 │         - pip3 install --disable-pip-version-check --root-user-action=ignore flask
  27 └           && echo 'ok' > /data.txt && flask run -h 0.0.0.0 -p 5000
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server3.yaml:19-46
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: python:alpine
  21 │         workingDir: /app
  22 │         command:
  23 │         - /bin/sh
  24 │         args:
  25 │         - -c
  26 │         - pip3 install --disable-pip-version-check --root-user-action=ignore flask
  27 └           && echo 'ok' > /data.txt && flask run -h 0.0.0.0 -p 5000
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server3.yaml:19-46
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: python:alpine
  21 │         workingDir: /app
  22 │         command:
  23 │         - /bin/sh
  24 │         args:
  25 │         - -c
  26 │         - pip3 install --disable-pip-version-check --root-user-action=ignore flask
  27 └           && echo 'ok' > /data.txt && flask run -h 0.0.0.0 -p 5000
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server3.yaml:19-46
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: python:alpine
  21 │         workingDir: /app
  22 │         command:
  23 │         - /bin/sh
  24 │         args:
  25 │         - -c
  26 │         - pip3 install --disable-pip-version-check --root-user-action=ignore flask
  27 └           && echo 'ok' > /data.txt && flask run -h 0.0.0.0 -p 5000
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server3.yaml:19-46
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: python:alpine
  21 │         workingDir: /app
  22 │         command:
  23 │         - /bin/sh
  24 │         args:
  25 │         - -c
  26 │         - pip3 install --disable-pip-version-check --root-user-action=ignore flask
  27 └           && echo 'ok' > /data.txt && flask run -h 0.0.0.0 -p 5000
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server3.yaml:19-46
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: python:alpine
  21 │         workingDir: /app
  22 │         command:
  23 │         - /bin/sh
  24 │         args:
  25 │         - -c
  26 │         - pip3 install --disable-pip-version-check --root-user-action=ignore flask
  27 └           && echo 'ok' > /data.txt && flask run -h 0.0.0.0 -p 5000
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: server
   5 │   labels:
   6 └     app: server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server3.yaml:19-46
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: python:alpine
  21 │         workingDir: /app
  22 │         command:
  23 │         - /bin/sh
  24 │         args:
  25 │         - -c
  26 │         - pip3 install --disable-pip-version-check --root-user-action=ignore flask
  27 └           && echo 'ok' > /data.txt && flask run -h 0.0.0.0 -p 5000
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server3.yaml:18-50
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: server
  20 │         image: python:alpine
  21 │         workingDir: /app
  22 │         command:
  23 │         - /bin/sh
  24 │         args:
  25 │         - -c
  26 └         - pip3 install --disable-pip-version-check --root-user-action=ignore flask
  ..   
────────────────────────────────────────



server31.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'netbox-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server31.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: server
  19 │           image: docker.io/netboxcommunity/netbox
  20 │           envFrom:
  21 │             - configMapRef:
  22 │                 name: netbox-env
  23 │             - secretRef:
  24 │                 name: netbox-secret-key
  25 │           volumeMounts:
  26 └             - mountPath: /media
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'netbox-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server31.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: server
  19 │           image: docker.io/netboxcommunity/netbox
  20 │           envFrom:
  21 │             - configMapRef:
  22 │                 name: netbox-env
  23 │             - secretRef:
  24 │                 name: netbox-secret-key
  25 │           volumeMounts:
  26 └             - mountPath: /media
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'netbox-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server31.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: server
  19 │           image: docker.io/netboxcommunity/netbox
  20 │           envFrom:
  21 │             - configMapRef:
  22 │                 name: netbox-env
  23 │             - secretRef:
  24 │                 name: netbox-secret-key
  25 │           volumeMounts:
  26 └             - mountPath: /media
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'netbox-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server31.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: server
  19 │           image: docker.io/netboxcommunity/netbox
  20 │           envFrom:
  21 │             - configMapRef:
  22 │                 name: netbox-env
  23 │             - secretRef:
  24 │                 name: netbox-secret-key
  25 │           volumeMounts:
  26 └             - mountPath: /media
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'netbox-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server31.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: server
  19 │           image: docker.io/netboxcommunity/netbox
  20 │           envFrom:
  21 │             - configMapRef:
  22 │                 name: netbox-env
  23 │             - secretRef:
  24 │                 name: netbox-secret-key
  25 │           volumeMounts:
  26 └             - mountPath: /media
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'netbox-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server31.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: server
  19 │           image: docker.io/netboxcommunity/netbox
  20 │           envFrom:
  21 │             - configMapRef:
  22 │                 name: netbox-env
  23 │             - secretRef:
  24 │                 name: netbox-secret-key
  25 │           volumeMounts:
  26 └             - mountPath: /media
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'netbox-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server31.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: server
  19 │           image: docker.io/netboxcommunity/netbox
  20 │           envFrom:
  21 │             - configMapRef:
  22 │                 name: netbox-env
  23 │             - secretRef:
  24 │                 name: netbox-secret-key
  25 │           volumeMounts:
  26 └             - mountPath: /media
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'netbox-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server31.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: server
  19 │           image: docker.io/netboxcommunity/netbox
  20 │           envFrom:
  21 │             - configMapRef:
  22 │                 name: netbox-env
  23 │             - secretRef:
  24 │                 name: netbox-secret-key
  25 │           volumeMounts:
  26 └             - mountPath: /media
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'netbox-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server31.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: server
  19 │           image: docker.io/netboxcommunity/netbox
  20 │           envFrom:
  21 │             - configMapRef:
  22 │                 name: netbox-env
  23 │             - secretRef:
  24 │                 name: netbox-secret-key
  25 │           volumeMounts:
  26 └             - mountPath: /media
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'netbox-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server31.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: server
  19 │           image: docker.io/netboxcommunity/netbox
  20 │           envFrom:
  21 │             - configMapRef:
  22 │                 name: netbox-env
  23 │             - secretRef:
  24 │                 name: netbox-secret-key
  25 │           volumeMounts:
  26 └             - mountPath: /media
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'netbox-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server31.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: server
  19 │           image: docker.io/netboxcommunity/netbox
  20 │           envFrom:
  21 │             - configMapRef:
  22 │                 name: netbox-env
  23 │             - secretRef:
  24 │                 name: netbox-secret-key
  25 │           volumeMounts:
  26 └             - mountPath: /media
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'netbox-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server31.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: server
  19 │           image: docker.io/netboxcommunity/netbox
  20 │           envFrom:
  21 │             - configMapRef:
  22 │                 name: netbox-env
  23 │             - secretRef:
  24 │                 name: netbox-secret-key
  25 │           volumeMounts:
  26 └             - mountPath: /media
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server31.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: server
  19 │           image: docker.io/netboxcommunity/netbox
  20 │           envFrom:
  21 │             - configMapRef:
  22 │                 name: netbox-env
  23 │             - secretRef:
  24 │                 name: netbox-secret-key
  25 │           volumeMounts:
  26 └             - mountPath: /media
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "netbox-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server31.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: server
  19 │           image: docker.io/netboxcommunity/netbox
  20 │           envFrom:
  21 │             - configMapRef:
  22 │                 name: netbox-env
  23 │             - secretRef:
  24 │                 name: netbox-secret-key
  25 │           volumeMounts:
  26 └             - mountPath: /media
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server31.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: server
  19 │           image: docker.io/netboxcommunity/netbox
  20 │           envFrom:
  21 │             - configMapRef:
  22 │                 name: netbox-env
  23 │             - secretRef:
  24 │                 name: netbox-secret-key
  25 │           volumeMounts:
  26 └             - mountPath: /media
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment netbox-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server31.yaml:4
────────────────────────────────────────
   4 [   name: netbox-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container netbox-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server31.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: server
  19 │           image: docker.io/netboxcommunity/netbox
  20 │           envFrom:
  21 │             - configMapRef:
  22 │                 name: netbox-env
  23 │             - secretRef:
  24 │                 name: netbox-secret-key
  25 │           volumeMounts:
  26 └             - mountPath: /media
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment netbox-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server31.yaml:17-50
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: server
  19 │           image: docker.io/netboxcommunity/netbox
  20 │           envFrom:
  21 │             - configMapRef:
  22 │                 name: netbox-env
  23 │             - secretRef:
  24 │                 name: netbox-secret-key
  25 └           volumeMounts:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment netbox-server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server31.yaml:18-40
────────────────────────────────────────
  18 ┌         - name: server
  19 │           image: docker.io/netboxcommunity/netbox
  20 │           envFrom:
  21 │             - configMapRef:
  22 │                 name: netbox-env
  23 │             - secretRef:
  24 │                 name: netbox-secret-key
  25 │           volumeMounts:
  26 └             - mountPath: /media
  ..   
────────────────────────────────────────



server34.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server34.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: aashayk/knolecom:server-image
  20 │         ports:
  21 │         - containerPort: 4000
  22 │         env:
  23 │         - name: USER_NAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mongo-secret
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server34.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: aashayk/knolecom:server-image
  20 │         ports:
  21 │         - containerPort: 4000
  22 │         env:
  23 │         - name: USER_NAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mongo-secret
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server34.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: aashayk/knolecom:server-image
  20 │         ports:
  21 │         - containerPort: 4000
  22 │         env:
  23 │         - name: USER_NAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mongo-secret
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server34.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: aashayk/knolecom:server-image
  20 │         ports:
  21 │         - containerPort: 4000
  22 │         env:
  23 │         - name: USER_NAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mongo-secret
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server34.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: aashayk/knolecom:server-image
  20 │         ports:
  21 │         - containerPort: 4000
  22 │         env:
  23 │         - name: USER_NAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mongo-secret
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server34.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: aashayk/knolecom:server-image
  20 │         ports:
  21 │         - containerPort: 4000
  22 │         env:
  23 │         - name: USER_NAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mongo-secret
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server34.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: aashayk/knolecom:server-image
  20 │         ports:
  21 │         - containerPort: 4000
  22 │         env:
  23 │         - name: USER_NAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mongo-secret
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server34.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: aashayk/knolecom:server-image
  20 │         ports:
  21 │         - containerPort: 4000
  22 │         env:
  23 │         - name: USER_NAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mongo-secret
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server34.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: aashayk/knolecom:server-image
  20 │         ports:
  21 │         - containerPort: 4000
  22 │         env:
  23 │         - name: USER_NAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mongo-secret
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server34.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: aashayk/knolecom:server-image
  20 │         ports:
  21 │         - containerPort: 4000
  22 │         env:
  23 │         - name: USER_NAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mongo-secret
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server34.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: aashayk/knolecom:server-image
  20 │         ports:
  21 │         - containerPort: 4000
  22 │         env:
  23 │         - name: USER_NAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mongo-secret
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server34.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: aashayk/knolecom:server-image
  20 │         ports:
  21 │         - containerPort: 4000
  22 │         env:
  23 │         - name: USER_NAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mongo-secret
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server34.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: aashayk/knolecom:server-image
  20 │         ports:
  21 │         - containerPort: 4000
  22 │         env:
  23 │         - name: USER_NAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mongo-secret
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server34.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: aashayk/knolecom:server-image
  20 │         ports:
  21 │         - containerPort: 4000
  22 │         env:
  23 │         - name: USER_NAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mongo-secret
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server34.yaml:4-6
────────────────────────────────────────
   4 ┌   name: server-deployment
   5 │   labels:
   6 └     app: server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server34.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: aashayk/knolecom:server-image
  20 │         ports:
  21 │         - containerPort: 4000
  22 │         env:
  23 │         - name: USER_NAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mongo-secret
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server34.yaml:17-37
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: server
  19 │         image: aashayk/knolecom:server-image
  20 │         ports:
  21 │         - containerPort: 4000
  22 │         env:
  23 │         - name: USER_NAME
  24 │           valueFrom:
  25 └             secretKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server34.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: aashayk/knolecom:server-image
  20 │         ports:
  21 │         - containerPort: 4000
  22 │         env:
  23 │         - name: USER_NAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: mongo-secret
  ..   
────────────────────────────────────────



server35.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'tdarr' of Deployment 'tdarr' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server35.yaml:23-76
────────────────────────────────────────
  23 ┌       - name: tdarr
  24 │         image: ghcr.io/haveagitgat/tdarr:2.31.02
  25 │         ports:
  26 │         - containerPort: 8265
  27 │         - containerPort: 8266
  28 │         env:
  29 │         - name: serverIP
  30 │           value: "0.0.0.0"
  31 └         - name: serverPort
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'tdarr' of Deployment 'tdarr' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server35.yaml:23-76
────────────────────────────────────────
  23 ┌       - name: tdarr
  24 │         image: ghcr.io/haveagitgat/tdarr:2.31.02
  25 │         ports:
  26 │         - containerPort: 8265
  27 │         - containerPort: 8266
  28 │         env:
  29 │         - name: serverIP
  30 │           value: "0.0.0.0"
  31 └         - name: serverPort
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'tdarr' of 'deployment' 'tdarr' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server35.yaml:23-76
────────────────────────────────────────
  23 ┌       - name: tdarr
  24 │         image: ghcr.io/haveagitgat/tdarr:2.31.02
  25 │         ports:
  26 │         - containerPort: 8265
  27 │         - containerPort: 8266
  28 │         env:
  29 │         - name: serverIP
  30 │           value: "0.0.0.0"
  31 └         - name: serverPort
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'tdarr' of Deployment 'tdarr' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server35.yaml:23-76
────────────────────────────────────────
  23 ┌       - name: tdarr
  24 │         image: ghcr.io/haveagitgat/tdarr:2.31.02
  25 │         ports:
  26 │         - containerPort: 8265
  27 │         - containerPort: 8266
  28 │         env:
  29 │         - name: serverIP
  30 │           value: "0.0.0.0"
  31 └         - name: serverPort
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'tdarr' of Deployment 'tdarr' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server35.yaml:23-76
────────────────────────────────────────
  23 ┌       - name: tdarr
  24 │         image: ghcr.io/haveagitgat/tdarr:2.31.02
  25 │         ports:
  26 │         - containerPort: 8265
  27 │         - containerPort: 8266
  28 │         env:
  29 │         - name: serverIP
  30 │           value: "0.0.0.0"
  31 └         - name: serverPort
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'tdarr' of Deployment 'tdarr' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server35.yaml:23-76
────────────────────────────────────────
  23 ┌       - name: tdarr
  24 │         image: ghcr.io/haveagitgat/tdarr:2.31.02
  25 │         ports:
  26 │         - containerPort: 8265
  27 │         - containerPort: 8266
  28 │         env:
  29 │         - name: serverIP
  30 │           value: "0.0.0.0"
  31 └         - name: serverPort
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'tdarr' of Deployment 'tdarr' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server35.yaml:23-76
────────────────────────────────────────
  23 ┌       - name: tdarr
  24 │         image: ghcr.io/haveagitgat/tdarr:2.31.02
  25 │         ports:
  26 │         - containerPort: 8265
  27 │         - containerPort: 8266
  28 │         env:
  29 │         - name: serverIP
  30 │           value: "0.0.0.0"
  31 └         - name: serverPort
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server35.yaml:23-76
────────────────────────────────────────
  23 ┌       - name: tdarr
  24 │         image: ghcr.io/haveagitgat/tdarr:2.31.02
  25 │         ports:
  26 │         - containerPort: 8265
  27 │         - containerPort: 8266
  28 │         env:
  29 │         - name: serverIP
  30 │           value: "0.0.0.0"
  31 └         - name: serverPort
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "tdarr" of deployment "tdarr" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server35.yaml:23-76
────────────────────────────────────────
  23 ┌       - name: tdarr
  24 │         image: ghcr.io/haveagitgat/tdarr:2.31.02
  25 │         ports:
  26 │         - containerPort: 8265
  27 │         - containerPort: 8266
  28 │         env:
  29 │         - name: serverIP
  30 │           value: "0.0.0.0"
  31 └         - name: serverPort
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server35.yaml:23-76
────────────────────────────────────────
  23 ┌       - name: tdarr
  24 │         image: ghcr.io/haveagitgat/tdarr:2.31.02
  25 │         ports:
  26 │         - containerPort: 8265
  27 │         - containerPort: 8266
  28 │         env:
  29 │         - name: serverIP
  30 │           value: "0.0.0.0"
  31 └         - name: serverPort
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment tdarr in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server35.yaml:4-6
────────────────────────────────────────
   4 ┌   name: tdarr
   5 │   labels:
   6 └     app: tdarr
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container tdarr in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server35.yaml:23-76
────────────────────────────────────────
  23 ┌       - name: tdarr
  24 │         image: ghcr.io/haveagitgat/tdarr:2.31.02
  25 │         ports:
  26 │         - containerPort: 8265
  27 │         - containerPort: 8266
  28 │         env:
  29 │         - name: serverIP
  30 │           value: "0.0.0.0"
  31 └         - name: serverPort
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment tdarr in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server35.yaml:22-89
────────────────────────────────────────
  22 ┌       containers:
  23 │       - name: tdarr
  24 │         image: ghcr.io/haveagitgat/tdarr:2.31.02
  25 │         ports:
  26 │         - containerPort: 8265
  27 │         - containerPort: 8266
  28 │         env:
  29 │         - name: serverIP
  30 └           value: "0.0.0.0"
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container tdarr in deployment tdarr (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server35.yaml:23-76
────────────────────────────────────────
  23 ┌       - name: tdarr
  24 │         image: ghcr.io/haveagitgat/tdarr:2.31.02
  25 │         ports:
  26 │         - containerPort: 8265
  27 │         - containerPort: 8266
  28 │         env:
  29 │         - name: serverIP
  30 │           value: "0.0.0.0"
  31 └         - name: serverPort
  ..   
────────────────────────────────────────



server36_1.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server36_1.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: bjnandi/ci-cd-mern-k3s-backend:v1.0.1
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         env:
  24 │         - name: CLOUDINARY_CLOUD_NAME
  25 │           value: duwjbcn5x
  26 │         - name: CLOUDINARY_API_KEY
  27 └           value: '246694643839175'
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server36_1.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: bjnandi/ci-cd-mern-k3s-backend:v1.0.1
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         env:
  24 │         - name: CLOUDINARY_CLOUD_NAME
  25 │           value: duwjbcn5x
  26 │         - name: CLOUDINARY_API_KEY
  27 └           value: '246694643839175'
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server36_1.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: bjnandi/ci-cd-mern-k3s-backend:v1.0.1
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         env:
  24 │         - name: CLOUDINARY_CLOUD_NAME
  25 │           value: duwjbcn5x
  26 │         - name: CLOUDINARY_API_KEY
  27 └           value: '246694643839175'
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server36_1.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: bjnandi/ci-cd-mern-k3s-backend:v1.0.1
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         env:
  24 │         - name: CLOUDINARY_CLOUD_NAME
  25 │           value: duwjbcn5x
  26 │         - name: CLOUDINARY_API_KEY
  27 └           value: '246694643839175'
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server36_1.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: bjnandi/ci-cd-mern-k3s-backend:v1.0.1
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         env:
  24 │         - name: CLOUDINARY_CLOUD_NAME
  25 │           value: duwjbcn5x
  26 │         - name: CLOUDINARY_API_KEY
  27 └           value: '246694643839175'
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server36_1.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: bjnandi/ci-cd-mern-k3s-backend:v1.0.1
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         env:
  24 │         - name: CLOUDINARY_CLOUD_NAME
  25 │           value: duwjbcn5x
  26 │         - name: CLOUDINARY_API_KEY
  27 └           value: '246694643839175'
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server36_1.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: bjnandi/ci-cd-mern-k3s-backend:v1.0.1
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         env:
  24 │         - name: CLOUDINARY_CLOUD_NAME
  25 │           value: duwjbcn5x
  26 │         - name: CLOUDINARY_API_KEY
  27 └           value: '246694643839175'
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server36_1.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: bjnandi/ci-cd-mern-k3s-backend:v1.0.1
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         env:
  24 │         - name: CLOUDINARY_CLOUD_NAME
  25 │           value: duwjbcn5x
  26 │         - name: CLOUDINARY_API_KEY
  27 └           value: '246694643839175'
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server36_1.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: bjnandi/ci-cd-mern-k3s-backend:v1.0.1
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         env:
  24 │         - name: CLOUDINARY_CLOUD_NAME
  25 │           value: duwjbcn5x
  26 │         - name: CLOUDINARY_API_KEY
  27 └           value: '246694643839175'
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server36_1.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: bjnandi/ci-cd-mern-k3s-backend:v1.0.1
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         env:
  24 │         - name: CLOUDINARY_CLOUD_NAME
  25 │           value: duwjbcn5x
  26 │         - name: CLOUDINARY_API_KEY
  27 └           value: '246694643839175'
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server36_1.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: bjnandi/ci-cd-mern-k3s-backend:v1.0.1
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         env:
  24 │         - name: CLOUDINARY_CLOUD_NAME
  25 │           value: duwjbcn5x
  26 │         - name: CLOUDINARY_API_KEY
  27 └           value: '246694643839175'
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server36_1.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: bjnandi/ci-cd-mern-k3s-backend:v1.0.1
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         env:
  24 │         - name: CLOUDINARY_CLOUD_NAME
  25 │           value: duwjbcn5x
  26 │         - name: CLOUDINARY_API_KEY
  27 └           value: '246694643839175'
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server36_1.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: bjnandi/ci-cd-mern-k3s-backend:v1.0.1
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         env:
  24 │         - name: CLOUDINARY_CLOUD_NAME
  25 │           value: duwjbcn5x
  26 │         - name: CLOUDINARY_API_KEY
  27 └           value: '246694643839175'
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server36_1.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: bjnandi/ci-cd-mern-k3s-backend:v1.0.1
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         env:
  24 │         - name: CLOUDINARY_CLOUD_NAME
  25 │           value: duwjbcn5x
  26 │         - name: CLOUDINARY_API_KEY
  27 └           value: '246694643839175'
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server36_1.yaml:4-7
────────────────────────────────────────
   4 ┌   name: server
   5 │   namespace: default
   6 │   labels:
   7 └     app: server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server36_1.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: bjnandi/ci-cd-mern-k3s-backend:v1.0.1
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         env:
  24 │         - name: CLOUDINARY_CLOUD_NAME
  25 │           value: duwjbcn5x
  26 │         - name: CLOUDINARY_API_KEY
  27 └           value: '246694643839175'
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server36_1.yaml:18-35
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: server
  20 │         image: bjnandi/ci-cd-mern-k3s-backend:v1.0.1
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         env:
  24 │         - name: CLOUDINARY_CLOUD_NAME
  25 │           value: duwjbcn5x
  26 └         - name: CLOUDINARY_API_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server36_1.yaml:19-35
────────────────────────────────────────
  19 ┌       - name: server
  20 │         image: bjnandi/ci-cd-mern-k3s-backend:v1.0.1
  21 │         ports:
  22 │         - containerPort: 5000
  23 │         env:
  24 │         - name: CLOUDINARY_CLOUD_NAME
  25 │           value: duwjbcn5x
  26 │         - name: CLOUDINARY_API_KEY
  27 └           value: '246694643839175'
  ..   
────────────────────────────────────────



server37.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'labapi' of Deployment 'labapi-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server37.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: labapi
  18 └         image: potgamepong/labapi:latest
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'labapi' of Deployment 'labapi-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server37.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: labapi
  18 └         image: potgamepong/labapi:latest
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'labapi' of 'deployment' 'labapi-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server37.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: labapi
  18 └         image: potgamepong/labapi:latest
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'labapi' of Deployment 'labapi-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server37.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: labapi
  18 └         image: potgamepong/labapi:latest
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'labapi' of Deployment 'labapi-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server37.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: labapi
  18 └         image: potgamepong/labapi:latest
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'labapi' of Deployment 'labapi-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server37.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: labapi
  18 └         image: potgamepong/labapi:latest
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'labapi' of Deployment 'labapi-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server37.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: labapi
  18 └         image: potgamepong/labapi:latest
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'labapi' of Deployment 'labapi-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server37.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: labapi
  18 └         image: potgamepong/labapi:latest
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'labapi' of Deployment 'labapi-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server37.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: labapi
  18 └         image: potgamepong/labapi:latest
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'labapi' of Deployment 'labapi-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server37.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: labapi
  18 └         image: potgamepong/labapi:latest
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'labapi' of Deployment 'labapi-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server37.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: labapi
  18 └         image: potgamepong/labapi:latest
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'labapi' of Deployment 'labapi-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server37.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: labapi
  18 └         image: potgamepong/labapi:latest
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server37.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: labapi
  18 └         image: potgamepong/labapi:latest
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "labapi" of deployment "labapi-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server37.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: labapi
  18 └         image: potgamepong/labapi:latest
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server37.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: labapi
  18 └         image: potgamepong/labapi:latest
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment labapi-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server37.yaml:4
────────────────────────────────────────
   4 [   name: labapi-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container labapi-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server37.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: labapi
  18 └         image: potgamepong/labapi:latest
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment labapi-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server37.yaml:16-18
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: labapi
  18 └         image: potgamepong/labapi:latest
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container labapi in deployment labapi-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server37.yaml:17-18
────────────────────────────────────────
  17 ┌       - name: labapi
  18 └         image: potgamepong/labapi:latest
────────────────────────────────────────



server4.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 102, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mini-projet-server' of Deployment 'mini-projet-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server4.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: mini-projet-server
  20 │         image: haithamomh/springk8s:1.1.0
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 │         env:
  26 │         - name: SPRING_DATASOURCE_URL
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mini-projet-server' of Deployment 'mini-projet-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server4.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: mini-projet-server
  20 │         image: haithamomh/springk8s:1.1.0
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 │         env:
  26 │         - name: SPRING_DATASOURCE_URL
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mini-projet-server' of 'deployment' 'mini-projet-server' in 'exam' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server4.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: mini-projet-server
  20 │         image: haithamomh/springk8s:1.1.0
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 │         env:
  26 │         - name: SPRING_DATASOURCE_URL
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mini-projet-server' of Deployment 'mini-projet-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server4.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: mini-projet-server
  20 │         image: haithamomh/springk8s:1.1.0
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 │         env:
  26 │         - name: SPRING_DATASOURCE_URL
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mini-projet-server' of Deployment 'mini-projet-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server4.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: mini-projet-server
  20 │         image: haithamomh/springk8s:1.1.0
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 │         env:
  26 │         - name: SPRING_DATASOURCE_URL
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mini-projet-server' of Deployment 'mini-projet-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server4.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: mini-projet-server
  20 │         image: haithamomh/springk8s:1.1.0
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 │         env:
  26 │         - name: SPRING_DATASOURCE_URL
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mini-projet-server' of Deployment 'mini-projet-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server4.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: mini-projet-server
  20 │         image: haithamomh/springk8s:1.1.0
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 │         env:
  26 │         - name: SPRING_DATASOURCE_URL
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server4.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: mini-projet-server
  20 │         image: haithamomh/springk8s:1.1.0
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 │         env:
  26 │         - name: SPRING_DATASOURCE_URL
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mini-projet-server" of deployment "mini-projet-server" in "exam" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server4.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: mini-projet-server
  20 │         image: haithamomh/springk8s:1.1.0
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 │         env:
  26 │         - name: SPRING_DATASOURCE_URL
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server4.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: mini-projet-server
  20 │         image: haithamomh/springk8s:1.1.0
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 │         env:
  26 │         - name: SPRING_DATASOURCE_URL
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mini-projet-server in exam namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server4.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: mini-projet-server
  20 │         image: haithamomh/springk8s:1.1.0
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 │         env:
  26 │         - name: SPRING_DATASOURCE_URL
  27 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment mini-projet-server in exam namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server4.yaml:18-42
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: mini-projet-server
  20 │         image: haithamomh/springk8s:1.1.0
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 │         env:
  26 └         - name: SPRING_DATASOURCE_URL
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mini-projet-server in deployment mini-projet-server (namespace: exam) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server4.yaml:19-42
────────────────────────────────────────
  19 ┌       - name: mini-projet-server
  20 │         image: haithamomh/springk8s:1.1.0
  21 │         imagePullPolicy: Always
  22 │         ports:
  23 │         - name: http
  24 │           containerPort: 8080
  25 │         env:
  26 │         - name: SPRING_DATASOURCE_URL
  27 └           valueFrom:
  ..   
────────────────────────────────────────



server6.yaml (kubernetes)
=========================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server6.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server6.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server6.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server6.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server6.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server6.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server6.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server6.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server6.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server6.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server6.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server6.yaml:4-7
────────────────────────────────────────
   4 ┌   name: server
   5 │   namespace: default
   6 │   labels:
   7 └     app: server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server6.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server6.yaml:18-43
────────────────────────────────────────
  18 ┌       affinity:
  19 │         podAntiAffinity:
  20 │           requiredDuringSchedulingIgnoredDuringExecution:
  21 │           - labelSelector:
  22 │               matchExpressions:
  23 │               - key: app
  24 │                 operator: In
  25 │                 values:
  26 └                 - server
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server6.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────



server7_1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server7_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server7_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server' in 'headless' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server7_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server7_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server7_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server7_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server7_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server7_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server7_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server" in "headless" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server7_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server7_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server in headless namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server7_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server in headless namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server7_1.yaml:18-43
────────────────────────────────────────
  18 ┌       affinity:
  19 │         podAntiAffinity:
  20 │           requiredDuringSchedulingIgnoredDuringExecution:
  21 │           - labelSelector:
  22 │               matchExpressions:
  23 │               - key: app
  24 │                 operator: In
  25 │                 values:
  26 └                 - server
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server (namespace: headless) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server7_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────



server8_1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server8_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --rest
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server8_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --rest
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server' in 'rest' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server8_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --rest
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server8_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --rest
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server8_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --rest
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server8_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --rest
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server8_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --rest
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server8_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --rest
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server8_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --rest
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server" in "rest" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server8_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --rest
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server8_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --rest
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server in rest namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server8_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --rest
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server in rest namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server8_1.yaml:18-43
────────────────────────────────────────
  18 ┌       affinity:
  19 │         podAntiAffinity:
  20 │           requiredDuringSchedulingIgnoredDuringExecution:
  21 │           - labelSelector:
  22 │               matchExpressions:
  23 │               - key: app
  24 │                 operator: In
  25 │                 values:
  26 └                 - server
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server (namespace: rest) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server8_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --rest
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────



server9_1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server9_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server9_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server' in 'servicemesh' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server9_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server9_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server9_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server9_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server9_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server9_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server9_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server" in "servicemesh" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server9_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server9_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server in servicemesh namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server9_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server in servicemesh namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server9_1.yaml:18-43
────────────────────────────────────────
  18 ┌       affinity:
  19 │         podAntiAffinity:
  20 │           requiredDuringSchedulingIgnoredDuringExecution:
  21 │           - labelSelector:
  22 │               matchExpressions:
  23 │               - key: app
  24 │                 operator: In
  25 │                 values:
  26 └                 - server
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container server in deployment server (namespace: servicemesh) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 server9_1.yaml:29-43
────────────────────────────────────────
  29 ┌       - name: server
  30 │         imagePullPolicy: Always
  31 │         image: localhost:5005/seminar/server:latest
  32 │         args:
  33 │         - --grpc
  34 │         resources:
  35 │           limits:
  36 │             cpu: 100m
  37 └             memory: 128Mi
  ..   
────────────────────────────────────────



serverDeploy.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kubeflower' of Deployment 'flower-server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 serverDeploy.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: kubeflower
  19 │         image: kubeflower:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command: ["/bin/sh", "-c"]
  22 │         args: ["python ./src/server.py"]
  23 │         ports:
  24 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kubeflower' of Deployment 'flower-server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 serverDeploy.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: kubeflower
  19 │         image: kubeflower:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command: ["/bin/sh", "-c"]
  22 │         args: ["python ./src/server.py"]
  23 │         ports:
  24 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kubeflower' of 'deployment' 'flower-server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 serverDeploy.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: kubeflower
  19 │         image: kubeflower:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command: ["/bin/sh", "-c"]
  22 │         args: ["python ./src/server.py"]
  23 │         ports:
  24 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'kubeflower' of Deployment 'flower-server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 serverDeploy.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: kubeflower
  19 │         image: kubeflower:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command: ["/bin/sh", "-c"]
  22 │         args: ["python ./src/server.py"]
  23 │         ports:
  24 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'kubeflower' of Deployment 'flower-server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 serverDeploy.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: kubeflower
  19 │         image: kubeflower:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command: ["/bin/sh", "-c"]
  22 │         args: ["python ./src/server.py"]
  23 │         ports:
  24 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'kubeflower' of Deployment 'flower-server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 serverDeploy.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: kubeflower
  19 │         image: kubeflower:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command: ["/bin/sh", "-c"]
  22 │         args: ["python ./src/server.py"]
  23 │         ports:
  24 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kubeflower' of Deployment 'flower-server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 serverDeploy.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: kubeflower
  19 │         image: kubeflower:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command: ["/bin/sh", "-c"]
  22 │         args: ["python ./src/server.py"]
  23 │         ports:
  24 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'kubeflower' of Deployment 'flower-server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 serverDeploy.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: kubeflower
  19 │         image: kubeflower:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command: ["/bin/sh", "-c"]
  22 │         args: ["python ./src/server.py"]
  23 │         ports:
  24 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'kubeflower' of Deployment 'flower-server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 serverDeploy.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: kubeflower
  19 │         image: kubeflower:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command: ["/bin/sh", "-c"]
  22 │         args: ["python ./src/server.py"]
  23 │         ports:
  24 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'kubeflower' of Deployment 'flower-server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 serverDeploy.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: kubeflower
  19 │         image: kubeflower:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command: ["/bin/sh", "-c"]
  22 │         args: ["python ./src/server.py"]
  23 │         ports:
  24 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kubeflower' of Deployment 'flower-server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 serverDeploy.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: kubeflower
  19 │         image: kubeflower:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command: ["/bin/sh", "-c"]
  22 │         args: ["python ./src/server.py"]
  23 │         ports:
  24 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kubeflower' of Deployment 'flower-server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 serverDeploy.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: kubeflower
  19 │         image: kubeflower:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command: ["/bin/sh", "-c"]
  22 │         args: ["python ./src/server.py"]
  23 │         ports:
  24 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 serverDeploy.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: kubeflower
  19 │         image: kubeflower:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command: ["/bin/sh", "-c"]
  22 │         args: ["python ./src/server.py"]
  23 │         ports:
  24 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kubeflower" of deployment "flower-server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 serverDeploy.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: kubeflower
  19 │         image: kubeflower:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command: ["/bin/sh", "-c"]
  22 │         args: ["python ./src/server.py"]
  23 │         ports:
  24 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 serverDeploy.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: kubeflower
  19 │         image: kubeflower:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command: ["/bin/sh", "-c"]
  22 │         args: ["python ./src/server.py"]
  23 │         ports:
  24 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment flower-server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 serverDeploy.yaml:4-6
────────────────────────────────────────
   4 ┌   name: flower-server
   5 │   labels:
   6 └     app: flower-server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container flower-server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 serverDeploy.yaml:18-24
────────────────────────────────────────
  18 ┌       - name: kubeflower
  19 │         image: kubeflower:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command: ["/bin/sh", "-c"]
  22 │         args: ["python ./src/server.py"]
  23 │         ports:
  24 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment flower-server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 serverDeploy.yaml:17-24
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: kubeflower
  19 │         image: kubeflower:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         command: ["/bin/sh", "-c"]
  22 │         args: ["python ./src/server.py"]
  23 │         ports:
  24 └         - containerPort: 8080
────────────────────────────────────────



server_deployment.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server_deployment.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: mongo-express
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: ME_CONFIG_MONGODB_ADMINUSERNAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-secret
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server_deployment.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: mongo-express
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: ME_CONFIG_MONGODB_ADMINUSERNAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-secret
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server_deployment.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: mongo-express
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: ME_CONFIG_MONGODB_ADMINUSERNAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-secret
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server_deployment.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: mongo-express
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: ME_CONFIG_MONGODB_ADMINUSERNAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-secret
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server_deployment.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: mongo-express
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: ME_CONFIG_MONGODB_ADMINUSERNAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-secret
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server_deployment.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: mongo-express
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: ME_CONFIG_MONGODB_ADMINUSERNAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-secret
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server_deployment.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: mongo-express
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: ME_CONFIG_MONGODB_ADMINUSERNAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-secret
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server_deployment.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: mongo-express
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: ME_CONFIG_MONGODB_ADMINUSERNAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-secret
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server_deployment.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: mongo-express
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: ME_CONFIG_MONGODB_ADMINUSERNAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-secret
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server_deployment.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: mongo-express
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: ME_CONFIG_MONGODB_ADMINUSERNAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-secret
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server_deployment.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: mongo-express
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: ME_CONFIG_MONGODB_ADMINUSERNAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-secret
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server_deployment.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: mongo-express
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: ME_CONFIG_MONGODB_ADMINUSERNAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-secret
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server_deployment.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: mongo-express
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: ME_CONFIG_MONGODB_ADMINUSERNAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-secret
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server_deployment.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: mongo-express
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: ME_CONFIG_MONGODB_ADMINUSERNAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-secret
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server_deployment.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: mongo-express
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: ME_CONFIG_MONGODB_ADMINUSERNAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-secret
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server_deployment.yaml:4-6
────────────────────────────────────────
   4 ┌   name: server
   5 │   labels:
   6 └     name: server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server_deployment.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: mongo-express
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: ME_CONFIG_MONGODB_ADMINUSERNAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-secret
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server_deployment.yaml:17-37
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: server
  19 │         image: mongo-express
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: ME_CONFIG_MONGODB_ADMINUSERNAME
  24 │           valueFrom:
  25 └             secretKeyRef:
  ..   
────────────────────────────────────────



server_deployment1.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app' of Deployment 'server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server_deployment1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: protocol_loadtest_server_image:latest
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTP_SSL_PORT
  24 │           value: "8081"
  25 │         - name: GRPC_PORT
  26 └           value: "9080"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app' of Deployment 'server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server_deployment1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: protocol_loadtest_server_image:latest
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTP_SSL_PORT
  24 │           value: "8081"
  25 │         - name: GRPC_PORT
  26 └           value: "9080"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app' of 'deployment' 'server' in 'px-protocol-loadtest' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server_deployment1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: protocol_loadtest_server_image:latest
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTP_SSL_PORT
  24 │           value: "8081"
  25 │         - name: GRPC_PORT
  26 └           value: "9080"
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'app' of Deployment 'server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server_deployment1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: protocol_loadtest_server_image:latest
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTP_SSL_PORT
  24 │           value: "8081"
  25 │         - name: GRPC_PORT
  26 └           value: "9080"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app' of Deployment 'server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server_deployment1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: protocol_loadtest_server_image:latest
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTP_SSL_PORT
  24 │           value: "8081"
  25 │         - name: GRPC_PORT
  26 └           value: "9080"
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'app' of Deployment 'server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server_deployment1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: protocol_loadtest_server_image:latest
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTP_SSL_PORT
  24 │           value: "8081"
  25 │         - name: GRPC_PORT
  26 └           value: "9080"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app' of Deployment 'server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server_deployment1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: protocol_loadtest_server_image:latest
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTP_SSL_PORT
  24 │           value: "8081"
  25 │         - name: GRPC_PORT
  26 └           value: "9080"
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app' of Deployment 'server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server_deployment1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: protocol_loadtest_server_image:latest
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTP_SSL_PORT
  24 │           value: "8081"
  25 │         - name: GRPC_PORT
  26 └           value: "9080"
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app' of Deployment 'server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server_deployment1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: protocol_loadtest_server_image:latest
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTP_SSL_PORT
  24 │           value: "8081"
  25 │         - name: GRPC_PORT
  26 └           value: "9080"
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app' of Deployment 'server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server_deployment1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: protocol_loadtest_server_image:latest
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTP_SSL_PORT
  24 │           value: "8081"
  25 │         - name: GRPC_PORT
  26 └           value: "9080"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app' of Deployment 'server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server_deployment1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: protocol_loadtest_server_image:latest
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTP_SSL_PORT
  24 │           value: "8081"
  25 │         - name: GRPC_PORT
  26 └           value: "9080"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app' of Deployment 'server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server_deployment1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: protocol_loadtest_server_image:latest
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTP_SSL_PORT
  24 │           value: "8081"
  25 │         - name: GRPC_PORT
  26 └           value: "9080"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server_deployment1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: protocol_loadtest_server_image:latest
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTP_SSL_PORT
  24 │           value: "8081"
  25 │         - name: GRPC_PORT
  26 └           value: "9080"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app" of deployment "server" in "px-protocol-loadtest" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server_deployment1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: protocol_loadtest_server_image:latest
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTP_SSL_PORT
  24 │           value: "8081"
  25 │         - name: GRPC_PORT
  26 └           value: "9080"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server_deployment1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: protocol_loadtest_server_image:latest
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTP_SSL_PORT
  24 │           value: "8081"
  25 │         - name: GRPC_PORT
  26 └           value: "9080"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server in px-protocol-loadtest namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server_deployment1.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: protocol_loadtest_server_image:latest
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTP_SSL_PORT
  24 │           value: "8081"
  25 │         - name: GRPC_PORT
  26 └           value: "9080"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server in px-protocol-loadtest namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server_deployment1.yaml:17-37
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: app
  19 │         image: protocol_loadtest_server_image:latest
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTP_SSL_PORT
  24 │           value: "8081"
  25 └         - name: GRPC_PORT
  ..   
────────────────────────────────────────



server_deployment2.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'server' of Deployment 'server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server_deployment2.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: mongo-express
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: ME_CONFIG_MONGODB_ADMINUSERNAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-secret
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'server' of Deployment 'server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server_deployment2.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: mongo-express
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: ME_CONFIG_MONGODB_ADMINUSERNAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-secret
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'server' of 'deployment' 'server' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server_deployment2.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: mongo-express
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: ME_CONFIG_MONGODB_ADMINUSERNAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-secret
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'server' of Deployment 'server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server_deployment2.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: mongo-express
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: ME_CONFIG_MONGODB_ADMINUSERNAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-secret
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'server' of Deployment 'server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server_deployment2.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: mongo-express
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: ME_CONFIG_MONGODB_ADMINUSERNAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-secret
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'server' of Deployment 'server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server_deployment2.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: mongo-express
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: ME_CONFIG_MONGODB_ADMINUSERNAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-secret
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'server' of Deployment 'server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server_deployment2.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: mongo-express
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: ME_CONFIG_MONGODB_ADMINUSERNAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-secret
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'server' of Deployment 'server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server_deployment2.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: mongo-express
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: ME_CONFIG_MONGODB_ADMINUSERNAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-secret
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'server' of Deployment 'server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server_deployment2.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: mongo-express
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: ME_CONFIG_MONGODB_ADMINUSERNAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-secret
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'server' of Deployment 'server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server_deployment2.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: mongo-express
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: ME_CONFIG_MONGODB_ADMINUSERNAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-secret
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'server' of Deployment 'server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server_deployment2.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: mongo-express
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: ME_CONFIG_MONGODB_ADMINUSERNAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-secret
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'server' of Deployment 'server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server_deployment2.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: mongo-express
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: ME_CONFIG_MONGODB_ADMINUSERNAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-secret
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server_deployment2.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: mongo-express
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: ME_CONFIG_MONGODB_ADMINUSERNAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-secret
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "server" of deployment "server" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server_deployment2.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: mongo-express
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: ME_CONFIG_MONGODB_ADMINUSERNAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-secret
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server_deployment2.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: mongo-express
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: ME_CONFIG_MONGODB_ADMINUSERNAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-secret
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment server in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 server_deployment2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: server
   5 │   labels:
   6 └     name: server
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server_deployment2.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: server
  19 │         image: mongo-express
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: ME_CONFIG_MONGODB_ADMINUSERNAME
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: db-secret
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server_deployment2.yaml:17-37
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: server
  19 │         image: mongo-express
  20 │         ports:
  21 │         - containerPort: 8081
  22 │         env:
  23 │         - name: ME_CONFIG_MONGODB_ADMINUSERNAME
  24 │           valueFrom:
  25 └             secretKeyRef:
  ..   
────────────────────────────────────────



server_deployment3.yaml (kubernetes)
====================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app' of Deployment 'server' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 server_deployment3.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: protocol_loadtest_server_image:latest
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTP_SSL_PORT
  24 │           value: "8081"
  25 │         - name: GRPC_PORT
  26 └           value: "9080"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app' of Deployment 'server' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 server_deployment3.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: protocol_loadtest_server_image:latest
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTP_SSL_PORT
  24 │           value: "8081"
  25 │         - name: GRPC_PORT
  26 └           value: "9080"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app' of 'deployment' 'server' in 'px-protocol-loadtest' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 server_deployment3.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: protocol_loadtest_server_image:latest
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTP_SSL_PORT
  24 │           value: "8081"
  25 │         - name: GRPC_PORT
  26 └           value: "9080"
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'app' of Deployment 'server' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 server_deployment3.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: protocol_loadtest_server_image:latest
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTP_SSL_PORT
  24 │           value: "8081"
  25 │         - name: GRPC_PORT
  26 └           value: "9080"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app' of Deployment 'server' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 server_deployment3.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: protocol_loadtest_server_image:latest
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTP_SSL_PORT
  24 │           value: "8081"
  25 │         - name: GRPC_PORT
  26 └           value: "9080"
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'app' of Deployment 'server' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 server_deployment3.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: protocol_loadtest_server_image:latest
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTP_SSL_PORT
  24 │           value: "8081"
  25 │         - name: GRPC_PORT
  26 └           value: "9080"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app' of Deployment 'server' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 server_deployment3.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: protocol_loadtest_server_image:latest
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTP_SSL_PORT
  24 │           value: "8081"
  25 │         - name: GRPC_PORT
  26 └           value: "9080"
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app' of Deployment 'server' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 server_deployment3.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: protocol_loadtest_server_image:latest
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTP_SSL_PORT
  24 │           value: "8081"
  25 │         - name: GRPC_PORT
  26 └           value: "9080"
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app' of Deployment 'server' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 server_deployment3.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: protocol_loadtest_server_image:latest
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTP_SSL_PORT
  24 │           value: "8081"
  25 │         - name: GRPC_PORT
  26 └           value: "9080"
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app' of Deployment 'server' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 server_deployment3.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: protocol_loadtest_server_image:latest
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTP_SSL_PORT
  24 │           value: "8081"
  25 │         - name: GRPC_PORT
  26 └           value: "9080"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app' of Deployment 'server' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 server_deployment3.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: protocol_loadtest_server_image:latest
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTP_SSL_PORT
  24 │           value: "8081"
  25 │         - name: GRPC_PORT
  26 └           value: "9080"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app' of Deployment 'server' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 server_deployment3.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: protocol_loadtest_server_image:latest
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTP_SSL_PORT
  24 │           value: "8081"
  25 │         - name: GRPC_PORT
  26 └           value: "9080"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 server_deployment3.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: protocol_loadtest_server_image:latest
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTP_SSL_PORT
  24 │           value: "8081"
  25 │         - name: GRPC_PORT
  26 └           value: "9080"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app" of deployment "server" in "px-protocol-loadtest" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 server_deployment3.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: protocol_loadtest_server_image:latest
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTP_SSL_PORT
  24 │           value: "8081"
  25 │         - name: GRPC_PORT
  26 └           value: "9080"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 server_deployment3.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: protocol_loadtest_server_image:latest
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTP_SSL_PORT
  24 │           value: "8081"
  25 │         - name: GRPC_PORT
  26 └           value: "9080"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container server in px-protocol-loadtest namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server_deployment3.yaml:18-37
────────────────────────────────────────
  18 ┌       - name: app
  19 │         image: protocol_loadtest_server_image:latest
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTP_SSL_PORT
  24 │           value: "8081"
  25 │         - name: GRPC_PORT
  26 └           value: "9080"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment server in px-protocol-loadtest namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 server_deployment3.yaml:17-37
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: app
  19 │         image: protocol_loadtest_server_image:latest
  20 │         env:
  21 │         - name: HTTP_PORT
  22 │           value: "8080"
  23 │         - name: HTTP_SSL_PORT
  24 │           value: "8081"
  25 └         - name: GRPC_PORT
  ..   
────────────────────────────────────────



serverless-cli1_1.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'serverless-cli' of Pod 'serverless-cli' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 serverless-cli1_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'serverless-cli' of Pod 'serverless-cli' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 serverless-cli1_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'serverless-cli' of 'pod' 'serverless-cli' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 serverless-cli1_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'serverless-cli' of Pod 'serverless-cli' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 serverless-cli1_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'serverless-cli' of Pod 'serverless-cli' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 serverless-cli1_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'serverless-cli' of Pod 'serverless-cli' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 serverless-cli1_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'serverless-cli' of Pod 'serverless-cli' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 serverless-cli1_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'serverless-cli' of Pod 'serverless-cli' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 serverless-cli1_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'serverless-cli' of Pod 'serverless-cli' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 serverless-cli1_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'serverless-cli' of Pod 'serverless-cli' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 serverless-cli1_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'serverless-cli' of Pod 'serverless-cli' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 serverless-cli1_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'serverless-cli' of Pod 'serverless-cli' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 serverless-cli1_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 serverless-cli1_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "serverless-cli" of pod "serverless-cli" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 serverless-cli1_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 serverless-cli1_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod serverless-cli in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 serverless-cli1_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: serverless-cli
   5 │   labels:
   6 └     kiamol: ch21
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container serverless-cli in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 serverless-cli1_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod serverless-cli in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 serverless-cli1_1.yaml:8-11
────────────────────────────────────────
   8 ┌   serviceAccountName: serverless-cli
   9 │   containers:
  10 │   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container serverless-cli in pod serverless-cli (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 serverless-cli1_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────



serverless-cli1_2.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'serverless-cli' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 serverless-cli1_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: serverless-cli
   5 │   labels:
   6 └     kiamol: ch21
────────────────────────────────────────



serverless-cli2_1.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'serverless-cli' of Pod 'serverless-cli' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 serverless-cli2_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'serverless-cli' of Pod 'serverless-cli' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 serverless-cli2_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'serverless-cli' of 'pod' 'serverless-cli' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 serverless-cli2_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'serverless-cli' of Pod 'serverless-cli' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 serverless-cli2_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'serverless-cli' of Pod 'serverless-cli' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 serverless-cli2_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'serverless-cli' of Pod 'serverless-cli' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 serverless-cli2_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'serverless-cli' of Pod 'serverless-cli' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 serverless-cli2_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'serverless-cli' of Pod 'serverless-cli' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 serverless-cli2_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'serverless-cli' of Pod 'serverless-cli' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 serverless-cli2_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'serverless-cli' of Pod 'serverless-cli' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 serverless-cli2_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'serverless-cli' of Pod 'serverless-cli' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 serverless-cli2_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'serverless-cli' of Pod 'serverless-cli' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 serverless-cli2_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 serverless-cli2_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "serverless-cli" of pod "serverless-cli" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 serverless-cli2_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 serverless-cli2_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod serverless-cli in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 serverless-cli2_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: serverless-cli
   5 │   labels:
   6 └     kiamol: ch21
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container serverless-cli in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 serverless-cli2_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod serverless-cli in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 serverless-cli2_1.yaml:8-11
────────────────────────────────────────
   8 ┌   serviceAccountName: serverless-cli
   9 │   containers:
  10 │   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container serverless-cli in pod serverless-cli (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 serverless-cli2_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────



serverless-cli2_2.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'serverless-cli' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 serverless-cli2_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: serverless-cli
   5 │   labels:
   6 └     kiamol: ch21
────────────────────────────────────────



serverless-cli3_1.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'serverless-cli' of Pod 'serverless-cli' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 serverless-cli3_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'serverless-cli' of Pod 'serverless-cli' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 serverless-cli3_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'serverless-cli' of 'pod' 'serverless-cli' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 serverless-cli3_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'serverless-cli' of Pod 'serverless-cli' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 serverless-cli3_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'serverless-cli' of Pod 'serverless-cli' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 serverless-cli3_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'serverless-cli' of Pod 'serverless-cli' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 serverless-cli3_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'serverless-cli' of Pod 'serverless-cli' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 serverless-cli3_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'serverless-cli' of Pod 'serverless-cli' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 serverless-cli3_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'serverless-cli' of Pod 'serverless-cli' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 serverless-cli3_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'serverless-cli' of Pod 'serverless-cli' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 serverless-cli3_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'serverless-cli' of Pod 'serverless-cli' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 serverless-cli3_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'serverless-cli' of Pod 'serverless-cli' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 serverless-cli3_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 serverless-cli3_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "serverless-cli" of pod "serverless-cli" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 serverless-cli3_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 serverless-cli3_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod serverless-cli in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 serverless-cli3_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: serverless-cli
   5 │   labels:
   6 └     kiamol: ch21
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container serverless-cli in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 serverless-cli3_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod serverless-cli in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 serverless-cli3_1.yaml:8-11
────────────────────────────────────────
   8 ┌   serviceAccountName: serverless-cli
   9 │   containers:
  10 │   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container serverless-cli in pod serverless-cli (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 serverless-cli3_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────



serverless-cli3_2.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'serverless-cli' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 serverless-cli3_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: serverless-cli
   5 │   labels:
   6 └     kiamol: ch21
────────────────────────────────────────



serverless-cli_1.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'serverless-cli' of Pod 'serverless-cli' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 serverless-cli_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'serverless-cli' of Pod 'serverless-cli' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 serverless-cli_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'serverless-cli' of 'pod' 'serverless-cli' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 serverless-cli_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'serverless-cli' of Pod 'serverless-cli' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 serverless-cli_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'serverless-cli' of Pod 'serverless-cli' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 serverless-cli_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'serverless-cli' of Pod 'serverless-cli' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 serverless-cli_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'serverless-cli' of Pod 'serverless-cli' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 serverless-cli_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'serverless-cli' of Pod 'serverless-cli' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 serverless-cli_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'serverless-cli' of Pod 'serverless-cli' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 serverless-cli_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'serverless-cli' of Pod 'serverless-cli' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 serverless-cli_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'serverless-cli' of Pod 'serverless-cli' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 serverless-cli_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'serverless-cli' of Pod 'serverless-cli' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 serverless-cli_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 serverless-cli_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "serverless-cli" of pod "serverless-cli" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 serverless-cli_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 serverless-cli_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod serverless-cli in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 serverless-cli_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: serverless-cli
   5 │   labels:
   6 └     kiamol: ch21
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container serverless-cli in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 serverless-cli_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod serverless-cli in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 serverless-cli_1.yaml:8-11
────────────────────────────────────────
   8 ┌   serviceAccountName: serverless-cli
   9 │   containers:
  10 │   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container serverless-cli in pod serverless-cli (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 serverless-cli_1.yaml:10-11
────────────────────────────────────────
  10 ┌   - name: serverless-cli
  11 └     image: kiamol/ch21-serverless-cli
────────────────────────────────────────



serverless-cli_2.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'serverless-cli' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 serverless-cli_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: serverless-cli
   5 │   labels:
   6 └     kiamol: ch21
────────────────────────────────────────



service-1-loadbalancer.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'info-service' of Deployment 'service-deploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-1-loadbalancer.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: info-service
  19 │         image: bothunter/info-service:latest
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'info-service' of Deployment 'service-deploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-1-loadbalancer.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: info-service
  19 │         image: bothunter/info-service:latest
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'info-service' of 'deployment' 'service-deploy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-1-loadbalancer.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: info-service
  19 │         image: bothunter/info-service:latest
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'info-service' of Deployment 'service-deploy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-1-loadbalancer.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: info-service
  19 │         image: bothunter/info-service:latest
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'info-service' of Deployment 'service-deploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-1-loadbalancer.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: info-service
  19 │         image: bothunter/info-service:latest
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'info-service' of Deployment 'service-deploy' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-1-loadbalancer.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: info-service
  19 │         image: bothunter/info-service:latest
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'info-service' of Deployment 'service-deploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-1-loadbalancer.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: info-service
  19 │         image: bothunter/info-service:latest
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'info-service' of Deployment 'service-deploy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-1-loadbalancer.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: info-service
  19 │         image: bothunter/info-service:latest
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'info-service' of Deployment 'service-deploy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-1-loadbalancer.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: info-service
  19 │         image: bothunter/info-service:latest
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'info-service' of Deployment 'service-deploy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-1-loadbalancer.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: info-service
  19 │         image: bothunter/info-service:latest
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'info-service' of Deployment 'service-deploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-1-loadbalancer.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: info-service
  19 │         image: bothunter/info-service:latest
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'info-service' of Deployment 'service-deploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-1-loadbalancer.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: info-service
  19 │         image: bothunter/info-service:latest
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-1-loadbalancer.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: info-service
  19 │         image: bothunter/info-service:latest
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "info-service" of deployment "service-deploy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-1-loadbalancer.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: info-service
  19 │         image: bothunter/info-service:latest
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-1-loadbalancer.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: info-service
  19 │         image: bothunter/info-service:latest
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment service-deploy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-1-loadbalancer.yaml:4-6
────────────────────────────────────────
   4 ┌   name: service-deploy
   5 │   labels:
   6 └     app: info-service-deploy
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container service-deploy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-1-loadbalancer.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: info-service
  19 │         image: bothunter/info-service:latest
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment service-deploy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-1-loadbalancer.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: info-service
  19 │         image: bothunter/info-service:latest
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container info-service in deployment service-deploy (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service-1-loadbalancer.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: info-service
  19 │         image: bothunter/info-service:latest
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



service-1-loadbalancer1.yaml (kubernetes)
=========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'info-service' of Deployment 'service-deploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-1-loadbalancer1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: info-service
  19 │         image: bothunter/info-service:latest
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'info-service' of Deployment 'service-deploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-1-loadbalancer1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: info-service
  19 │         image: bothunter/info-service:latest
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'info-service' of 'deployment' 'service-deploy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-1-loadbalancer1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: info-service
  19 │         image: bothunter/info-service:latest
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'info-service' of Deployment 'service-deploy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-1-loadbalancer1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: info-service
  19 │         image: bothunter/info-service:latest
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'info-service' of Deployment 'service-deploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-1-loadbalancer1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: info-service
  19 │         image: bothunter/info-service:latest
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'info-service' of Deployment 'service-deploy' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-1-loadbalancer1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: info-service
  19 │         image: bothunter/info-service:latest
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'info-service' of Deployment 'service-deploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-1-loadbalancer1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: info-service
  19 │         image: bothunter/info-service:latest
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'info-service' of Deployment 'service-deploy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-1-loadbalancer1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: info-service
  19 │         image: bothunter/info-service:latest
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'info-service' of Deployment 'service-deploy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-1-loadbalancer1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: info-service
  19 │         image: bothunter/info-service:latest
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'info-service' of Deployment 'service-deploy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-1-loadbalancer1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: info-service
  19 │         image: bothunter/info-service:latest
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'info-service' of Deployment 'service-deploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-1-loadbalancer1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: info-service
  19 │         image: bothunter/info-service:latest
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'info-service' of Deployment 'service-deploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-1-loadbalancer1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: info-service
  19 │         image: bothunter/info-service:latest
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-1-loadbalancer1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: info-service
  19 │         image: bothunter/info-service:latest
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "info-service" of deployment "service-deploy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-1-loadbalancer1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: info-service
  19 │         image: bothunter/info-service:latest
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-1-loadbalancer1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: info-service
  19 │         image: bothunter/info-service:latest
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment service-deploy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-1-loadbalancer1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: service-deploy
   5 │   labels:
   6 └     app: info-service-deploy
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container service-deploy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-1-loadbalancer1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: info-service
  19 │         image: bothunter/info-service:latest
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment service-deploy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-1-loadbalancer1.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: info-service
  19 │         image: bothunter/info-service:latest
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container info-service in deployment service-deploy (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service-1-loadbalancer1.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: info-service
  19 │         image: bothunter/info-service:latest
  20 │         ports:
  21 └         - containerPort: 8080
────────────────────────────────────────



service-1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'fbi-web' of Deployment 'my-web-depl-repl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: fbi-web
  21 │         image: asafsaf/k8s-test:latest
  22 │         ports:
  23 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'fbi-web' of Deployment 'my-web-depl-repl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: fbi-web
  21 │         image: asafsaf/k8s-test:latest
  22 │         ports:
  23 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'fbi-web' of 'deployment' 'my-web-depl-repl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: fbi-web
  21 │         image: asafsaf/k8s-test:latest
  22 │         ports:
  23 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'fbi-web' of Deployment 'my-web-depl-repl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: fbi-web
  21 │         image: asafsaf/k8s-test:latest
  22 │         ports:
  23 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'fbi-web' of Deployment 'my-web-depl-repl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: fbi-web
  21 │         image: asafsaf/k8s-test:latest
  22 │         ports:
  23 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'fbi-web' of Deployment 'my-web-depl-repl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: fbi-web
  21 │         image: asafsaf/k8s-test:latest
  22 │         ports:
  23 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'fbi-web' of Deployment 'my-web-depl-repl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: fbi-web
  21 │         image: asafsaf/k8s-test:latest
  22 │         ports:
  23 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'fbi-web' of Deployment 'my-web-depl-repl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: fbi-web
  21 │         image: asafsaf/k8s-test:latest
  22 │         ports:
  23 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'fbi-web' of Deployment 'my-web-depl-repl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: fbi-web
  21 │         image: asafsaf/k8s-test:latest
  22 │         ports:
  23 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'fbi-web' of Deployment 'my-web-depl-repl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: fbi-web
  21 │         image: asafsaf/k8s-test:latest
  22 │         ports:
  23 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'fbi-web' of Deployment 'my-web-depl-repl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: fbi-web
  21 │         image: asafsaf/k8s-test:latest
  22 │         ports:
  23 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'fbi-web' of Deployment 'my-web-depl-repl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: fbi-web
  21 │         image: asafsaf/k8s-test:latest
  22 │         ports:
  23 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: fbi-web
  21 │         image: asafsaf/k8s-test:latest
  22 │         ports:
  23 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "fbi-web" of deployment "my-web-depl-repl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: fbi-web
  21 │         image: asafsaf/k8s-test:latest
  22 │         ports:
  23 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: fbi-web
  21 │         image: asafsaf/k8s-test:latest
  22 │         ports:
  23 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment my-web-depl-repl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-1.yaml:4-8
────────────────────────────────────────
   4 ┌   name: my-web-depl-repl
   5 │   labels:
   6 │     app: my-k8s-app
   7 │     env: prod
   8 └     owner: iam
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-web-depl-repl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: fbi-web
  21 │         image: asafsaf/k8s-test:latest
  22 │         ports:
  23 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-web-depl-repl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-1.yaml:19-23
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: fbi-web
  21 │         image: asafsaf/k8s-test:latest
  22 │         ports:
  23 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container fbi-web in deployment my-web-depl-repl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service-1.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: fbi-web
  21 │         image: asafsaf/k8s-test:latest
  22 │         ports:
  23 └         - containerPort: 8089
────────────────────────────────────────



service-11.yaml (kubernetes)
============================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'apple-app' of Pod 'apple-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-11.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: apple-app
  10 │     image: hashicorp/http-echo
  11 │     args:
  12 └     - -text=apple
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'apple-app' of Pod 'apple-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-11.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: apple-app
  10 │     image: hashicorp/http-echo
  11 │     args:
  12 └     - -text=apple
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'apple-app' of 'pod' 'apple-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-11.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: apple-app
  10 │     image: hashicorp/http-echo
  11 │     args:
  12 └     - -text=apple
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'apple-app' of Pod 'apple-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-11.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: apple-app
  10 │     image: hashicorp/http-echo
  11 │     args:
  12 └     - -text=apple
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'apple-app' of Pod 'apple-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-11.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: apple-app
  10 │     image: hashicorp/http-echo
  11 │     args:
  12 └     - -text=apple
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'apple-app' of Pod 'apple-app' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-11.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: apple-app
  10 │     image: hashicorp/http-echo
  11 │     args:
  12 └     - -text=apple
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'apple-app' of Pod 'apple-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-11.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: apple-app
  10 │     image: hashicorp/http-echo
  11 │     args:
  12 └     - -text=apple
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'apple-app' of Pod 'apple-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-11.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: apple-app
  10 │     image: hashicorp/http-echo
  11 │     args:
  12 └     - -text=apple
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'apple-app' of Pod 'apple-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-11.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: apple-app
  10 │     image: hashicorp/http-echo
  11 │     args:
  12 └     - -text=apple
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'apple-app' of Pod 'apple-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-11.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: apple-app
  10 │     image: hashicorp/http-echo
  11 │     args:
  12 └     - -text=apple
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'apple-app' of Pod 'apple-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-11.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: apple-app
  10 │     image: hashicorp/http-echo
  11 │     args:
  12 └     - -text=apple
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'apple-app' of Pod 'apple-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-11.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: apple-app
  10 │     image: hashicorp/http-echo
  11 │     args:
  12 └     - -text=apple
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-11.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: apple-app
  10 │     image: hashicorp/http-echo
  11 │     args:
  12 └     - -text=apple
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "apple-app" of pod "apple-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-11.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: apple-app
  10 │     image: hashicorp/http-echo
  11 │     args:
  12 └     - -text=apple
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-11.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: apple-app
  10 │     image: hashicorp/http-echo
  11 │     args:
  12 └     - -text=apple
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod apple-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-11.yaml:4-6
────────────────────────────────────────
   4 ┌   name: apple-app
   5 │   labels:
   6 └     app: apple
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container apple-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-11.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: apple-app
  10 │     image: hashicorp/http-echo
  11 │     args:
  12 └     - -text=apple
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod apple-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-11.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: apple-app
  10 │     image: hashicorp/http-echo
  11 │     args:
  12 └     - -text=apple
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container apple-app in pod apple-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service-11.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: apple-app
  10 │     image: hashicorp/http-echo
  11 │     args:
  12 └     - -text=apple
────────────────────────────────────────



service-2-multi.yaml (kubernetes)
=================================
Tests: 132 (SUCCESSES: 96, FAILURES: 36)
Failures: 36 (UNKNOWN: 0, LOW: 21, MEDIUM: 10, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'fbi-web' of Deployment 'my-web-depl-repl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-2-multi.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: fbi-web
  21 │         image: asafsaf/k8s-test:latest
  22 │         ports:
  23 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'my-web' of Deployment 'my-web-depl-repl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-2-multi.yaml:24-27
────────────────────────────────────────
  24 ┌       - name: my-web
  25 │         image: asafsaf/demo:latest
  26 │         ports:
  27 └         - containerPort: 8090
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'fbi-web' of Deployment 'my-web-depl-repl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-2-multi.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: fbi-web
  21 │         image: asafsaf/k8s-test:latest
  22 │         ports:
  23 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-web' of Deployment 'my-web-depl-repl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-2-multi.yaml:24-27
────────────────────────────────────────
  24 ┌       - name: my-web
  25 │         image: asafsaf/demo:latest
  26 │         ports:
  27 └         - containerPort: 8090
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'fbi-web' of 'deployment' 'my-web-depl-repl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-2-multi.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: fbi-web
  21 │         image: asafsaf/k8s-test:latest
  22 │         ports:
  23 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-web' of 'deployment' 'my-web-depl-repl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-2-multi.yaml:24-27
────────────────────────────────────────
  24 ┌       - name: my-web
  25 │         image: asafsaf/demo:latest
  26 │         ports:
  27 └         - containerPort: 8090
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'fbi-web' of Deployment 'my-web-depl-repl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-2-multi.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: fbi-web
  21 │         image: asafsaf/k8s-test:latest
  22 │         ports:
  23 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-web' of Deployment 'my-web-depl-repl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-2-multi.yaml:24-27
────────────────────────────────────────
  24 ┌       - name: my-web
  25 │         image: asafsaf/demo:latest
  26 │         ports:
  27 └         - containerPort: 8090
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'fbi-web' of Deployment 'my-web-depl-repl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-2-multi.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: fbi-web
  21 │         image: asafsaf/k8s-test:latest
  22 │         ports:
  23 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-web' of Deployment 'my-web-depl-repl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-2-multi.yaml:24-27
────────────────────────────────────────
  24 ┌       - name: my-web
  25 │         image: asafsaf/demo:latest
  26 │         ports:
  27 └         - containerPort: 8090
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'fbi-web' of Deployment 'my-web-depl-repl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-2-multi.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: fbi-web
  21 │         image: asafsaf/k8s-test:latest
  22 │         ports:
  23 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-web' of Deployment 'my-web-depl-repl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-2-multi.yaml:24-27
────────────────────────────────────────
  24 ┌       - name: my-web
  25 │         image: asafsaf/demo:latest
  26 │         ports:
  27 └         - containerPort: 8090
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'fbi-web' of Deployment 'my-web-depl-repl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-2-multi.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: fbi-web
  21 │         image: asafsaf/k8s-test:latest
  22 │         ports:
  23 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-web' of Deployment 'my-web-depl-repl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-2-multi.yaml:24-27
────────────────────────────────────────
  24 ┌       - name: my-web
  25 │         image: asafsaf/demo:latest
  26 │         ports:
  27 └         - containerPort: 8090
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'fbi-web' of Deployment 'my-web-depl-repl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-2-multi.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: fbi-web
  21 │         image: asafsaf/k8s-test:latest
  22 │         ports:
  23 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-web' of Deployment 'my-web-depl-repl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-2-multi.yaml:24-27
────────────────────────────────────────
  24 ┌       - name: my-web
  25 │         image: asafsaf/demo:latest
  26 │         ports:
  27 └         - containerPort: 8090
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'fbi-web' of Deployment 'my-web-depl-repl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-2-multi.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: fbi-web
  21 │         image: asafsaf/k8s-test:latest
  22 │         ports:
  23 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-web' of Deployment 'my-web-depl-repl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-2-multi.yaml:24-27
────────────────────────────────────────
  24 ┌       - name: my-web
  25 │         image: asafsaf/demo:latest
  26 │         ports:
  27 └         - containerPort: 8090
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'fbi-web' of Deployment 'my-web-depl-repl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-2-multi.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: fbi-web
  21 │         image: asafsaf/k8s-test:latest
  22 │         ports:
  23 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-web' of Deployment 'my-web-depl-repl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-2-multi.yaml:24-27
────────────────────────────────────────
  24 ┌       - name: my-web
  25 │         image: asafsaf/demo:latest
  26 │         ports:
  27 └         - containerPort: 8090
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'fbi-web' of Deployment 'my-web-depl-repl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-2-multi.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: fbi-web
  21 │         image: asafsaf/k8s-test:latest
  22 │         ports:
  23 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-web' of Deployment 'my-web-depl-repl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-2-multi.yaml:24-27
────────────────────────────────────────
  24 ┌       - name: my-web
  25 │         image: asafsaf/demo:latest
  26 │         ports:
  27 └         - containerPort: 8090
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'fbi-web' of Deployment 'my-web-depl-repl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-2-multi.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: fbi-web
  21 │         image: asafsaf/k8s-test:latest
  22 │         ports:
  23 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-web' of Deployment 'my-web-depl-repl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-2-multi.yaml:24-27
────────────────────────────────────────
  24 ┌       - name: my-web
  25 │         image: asafsaf/demo:latest
  26 │         ports:
  27 └         - containerPort: 8090
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-2-multi.yaml:24-27
────────────────────────────────────────
  24 ┌       - name: my-web
  25 │         image: asafsaf/demo:latest
  26 │         ports:
  27 └         - containerPort: 8090
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-2-multi.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: fbi-web
  21 │         image: asafsaf/k8s-test:latest
  22 │         ports:
  23 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "fbi-web" of deployment "my-web-depl-repl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-2-multi.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: fbi-web
  21 │         image: asafsaf/k8s-test:latest
  22 │         ports:
  23 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-web" of deployment "my-web-depl-repl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-2-multi.yaml:24-27
────────────────────────────────────────
  24 ┌       - name: my-web
  25 │         image: asafsaf/demo:latest
  26 │         ports:
  27 └         - containerPort: 8090
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-2-multi.yaml:24-27
────────────────────────────────────────
  24 ┌       - name: my-web
  25 │         image: asafsaf/demo:latest
  26 │         ports:
  27 └         - containerPort: 8090
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-2-multi.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: fbi-web
  21 │         image: asafsaf/k8s-test:latest
  22 │         ports:
  23 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment my-web-depl-repl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-2-multi.yaml:4-8
────────────────────────────────────────
   4 ┌   name: my-web-depl-repl
   5 │   labels:
   6 │     app: my-k8s-app
   7 │     env: prod
   8 └     owner: iam
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-web-depl-repl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-2-multi.yaml:24-27
────────────────────────────────────────
  24 ┌       - name: my-web
  25 │         image: asafsaf/demo:latest
  26 │         ports:
  27 └         - containerPort: 8090
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-web-depl-repl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-2-multi.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: fbi-web
  21 │         image: asafsaf/k8s-test:latest
  22 │         ports:
  23 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-web-depl-repl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-2-multi.yaml:19-27
────────────────────────────────────────
  19 ┌       containers:
  20 │       - name: fbi-web
  21 │         image: asafsaf/k8s-test:latest
  22 │         ports:
  23 │         - containerPort: 8089
  24 │       - name: my-web
  25 │         image: asafsaf/demo:latest
  26 │         ports:
  27 └         - containerPort: 8090
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container fbi-web in deployment my-web-depl-repl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service-2-multi.yaml:20-23
────────────────────────────────────────
  20 ┌       - name: fbi-web
  21 │         image: asafsaf/k8s-test:latest
  22 │         ports:
  23 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container my-web in deployment my-web-depl-repl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service-2-multi.yaml:24-27
────────────────────────────────────────
  24 ┌       - name: my-web
  25 │         image: asafsaf/demo:latest
  26 │         ports:
  27 └         - containerPort: 8090
────────────────────────────────────────



service-2.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'banana-app' of Pod 'banana-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: banana-app
  10 │     image: hashicorp/http-echo
  11 │     args:
  12 └     - -text=banana
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'banana-app' of Pod 'banana-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: banana-app
  10 │     image: hashicorp/http-echo
  11 │     args:
  12 └     - -text=banana
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'banana-app' of 'pod' 'banana-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: banana-app
  10 │     image: hashicorp/http-echo
  11 │     args:
  12 └     - -text=banana
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'banana-app' of Pod 'banana-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: banana-app
  10 │     image: hashicorp/http-echo
  11 │     args:
  12 └     - -text=banana
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'banana-app' of Pod 'banana-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: banana-app
  10 │     image: hashicorp/http-echo
  11 │     args:
  12 └     - -text=banana
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'banana-app' of Pod 'banana-app' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: banana-app
  10 │     image: hashicorp/http-echo
  11 │     args:
  12 └     - -text=banana
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'banana-app' of Pod 'banana-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: banana-app
  10 │     image: hashicorp/http-echo
  11 │     args:
  12 └     - -text=banana
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'banana-app' of Pod 'banana-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: banana-app
  10 │     image: hashicorp/http-echo
  11 │     args:
  12 └     - -text=banana
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'banana-app' of Pod 'banana-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: banana-app
  10 │     image: hashicorp/http-echo
  11 │     args:
  12 └     - -text=banana
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'banana-app' of Pod 'banana-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: banana-app
  10 │     image: hashicorp/http-echo
  11 │     args:
  12 └     - -text=banana
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'banana-app' of Pod 'banana-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: banana-app
  10 │     image: hashicorp/http-echo
  11 │     args:
  12 └     - -text=banana
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'banana-app' of Pod 'banana-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: banana-app
  10 │     image: hashicorp/http-echo
  11 │     args:
  12 └     - -text=banana
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: banana-app
  10 │     image: hashicorp/http-echo
  11 │     args:
  12 └     - -text=banana
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "banana-app" of pod "banana-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: banana-app
  10 │     image: hashicorp/http-echo
  11 │     args:
  12 └     - -text=banana
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: banana-app
  10 │     image: hashicorp/http-echo
  11 │     args:
  12 └     - -text=banana
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod banana-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: banana-app
   5 │   labels:
   6 └     app: banana
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container banana-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: banana-app
  10 │     image: hashicorp/http-echo
  11 │     args:
  12 └     - -text=banana
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod banana-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-2.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: banana-app
  10 │     image: hashicorp/http-echo
  11 │     args:
  12 └     - -text=banana
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container banana-app in pod banana-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service-2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: banana-app
  10 │     image: hashicorp/http-echo
  11 │     args:
  12 └     - -text=banana
────────────────────────────────────────



service-3-autoscaler.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'fbi-web' of Deployment 'my-web-depl-repl' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-3-autoscaler.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: fbi-web
  20 │         image: asafsaf/k8s-test:latest
  21 │         ports:
  22 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'fbi-web' of Deployment 'my-web-depl-repl' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-3-autoscaler.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: fbi-web
  20 │         image: asafsaf/k8s-test:latest
  21 │         ports:
  22 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'fbi-web' of 'deployment' 'my-web-depl-repl' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-3-autoscaler.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: fbi-web
  20 │         image: asafsaf/k8s-test:latest
  21 │         ports:
  22 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'fbi-web' of Deployment 'my-web-depl-repl' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-3-autoscaler.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: fbi-web
  20 │         image: asafsaf/k8s-test:latest
  21 │         ports:
  22 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'fbi-web' of Deployment 'my-web-depl-repl' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-3-autoscaler.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: fbi-web
  20 │         image: asafsaf/k8s-test:latest
  21 │         ports:
  22 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'fbi-web' of Deployment 'my-web-depl-repl' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-3-autoscaler.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: fbi-web
  20 │         image: asafsaf/k8s-test:latest
  21 │         ports:
  22 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'fbi-web' of Deployment 'my-web-depl-repl' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-3-autoscaler.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: fbi-web
  20 │         image: asafsaf/k8s-test:latest
  21 │         ports:
  22 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'fbi-web' of Deployment 'my-web-depl-repl' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-3-autoscaler.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: fbi-web
  20 │         image: asafsaf/k8s-test:latest
  21 │         ports:
  22 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'fbi-web' of Deployment 'my-web-depl-repl' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-3-autoscaler.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: fbi-web
  20 │         image: asafsaf/k8s-test:latest
  21 │         ports:
  22 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'fbi-web' of Deployment 'my-web-depl-repl' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-3-autoscaler.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: fbi-web
  20 │         image: asafsaf/k8s-test:latest
  21 │         ports:
  22 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'fbi-web' of Deployment 'my-web-depl-repl' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-3-autoscaler.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: fbi-web
  20 │         image: asafsaf/k8s-test:latest
  21 │         ports:
  22 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'fbi-web' of Deployment 'my-web-depl-repl' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-3-autoscaler.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: fbi-web
  20 │         image: asafsaf/k8s-test:latest
  21 │         ports:
  22 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-3-autoscaler.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: fbi-web
  20 │         image: asafsaf/k8s-test:latest
  21 │         ports:
  22 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "fbi-web" of deployment "my-web-depl-repl" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-3-autoscaler.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: fbi-web
  20 │         image: asafsaf/k8s-test:latest
  21 │         ports:
  22 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-3-autoscaler.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: fbi-web
  20 │         image: asafsaf/k8s-test:latest
  21 │         ports:
  22 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment my-web-depl-repl in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-3-autoscaler.yaml:4-8
────────────────────────────────────────
   4 ┌   name: my-web-depl-repl
   5 │   labels:
   6 │     app: my-k8s-app
   7 │     env: prod
   8 └     owner: iam
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-web-depl-repl in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-3-autoscaler.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: fbi-web
  20 │         image: asafsaf/k8s-test:latest
  21 │         ports:
  22 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-web-depl-repl in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-3-autoscaler.yaml:18-22
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: fbi-web
  20 │         image: asafsaf/k8s-test:latest
  21 │         ports:
  22 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container fbi-web in deployment my-web-depl-repl (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service-3-autoscaler.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: fbi-web
  20 │         image: asafsaf/k8s-test:latest
  21 │         ports:
  22 └         - containerPort: 8089
────────────────────────────────────────



service-4-cluster-ip.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'hello-web' of Deployment 'hello-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-4-cluster-ip.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: hello-web
  20 │         image: asafsaf/k8s-test:latest
  21 │         ports:
  22 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'hello-web' of Deployment 'hello-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-4-cluster-ip.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: hello-web
  20 │         image: asafsaf/k8s-test:latest
  21 │         ports:
  22 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'hello-web' of 'deployment' 'hello-dep' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-4-cluster-ip.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: hello-web
  20 │         image: asafsaf/k8s-test:latest
  21 │         ports:
  22 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'hello-web' of Deployment 'hello-dep' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-4-cluster-ip.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: hello-web
  20 │         image: asafsaf/k8s-test:latest
  21 │         ports:
  22 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'hello-web' of Deployment 'hello-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-4-cluster-ip.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: hello-web
  20 │         image: asafsaf/k8s-test:latest
  21 │         ports:
  22 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'hello-web' of Deployment 'hello-dep' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-4-cluster-ip.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: hello-web
  20 │         image: asafsaf/k8s-test:latest
  21 │         ports:
  22 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'hello-web' of Deployment 'hello-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-4-cluster-ip.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: hello-web
  20 │         image: asafsaf/k8s-test:latest
  21 │         ports:
  22 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'hello-web' of Deployment 'hello-dep' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-4-cluster-ip.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: hello-web
  20 │         image: asafsaf/k8s-test:latest
  21 │         ports:
  22 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'hello-web' of Deployment 'hello-dep' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-4-cluster-ip.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: hello-web
  20 │         image: asafsaf/k8s-test:latest
  21 │         ports:
  22 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'hello-web' of Deployment 'hello-dep' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-4-cluster-ip.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: hello-web
  20 │         image: asafsaf/k8s-test:latest
  21 │         ports:
  22 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'hello-web' of Deployment 'hello-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-4-cluster-ip.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: hello-web
  20 │         image: asafsaf/k8s-test:latest
  21 │         ports:
  22 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'hello-web' of Deployment 'hello-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-4-cluster-ip.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: hello-web
  20 │         image: asafsaf/k8s-test:latest
  21 │         ports:
  22 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-4-cluster-ip.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: hello-web
  20 │         image: asafsaf/k8s-test:latest
  21 │         ports:
  22 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "hello-web" of deployment "hello-dep" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-4-cluster-ip.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: hello-web
  20 │         image: asafsaf/k8s-test:latest
  21 │         ports:
  22 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-4-cluster-ip.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: hello-web
  20 │         image: asafsaf/k8s-test:latest
  21 │         ports:
  22 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment hello-dep in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-4-cluster-ip.yaml:4-8
────────────────────────────────────────
   4 ┌   name: hello-dep
   5 │   labels:
   6 │     app: hello-app
   7 │     env: prod
   8 └     owner: iam
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container hello-dep in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-4-cluster-ip.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: hello-web
  20 │         image: asafsaf/k8s-test:latest
  21 │         ports:
  22 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment hello-dep in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-4-cluster-ip.yaml:18-22
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: hello-web
  20 │         image: asafsaf/k8s-test:latest
  21 │         ports:
  22 └         - containerPort: 8089
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container hello-web in deployment hello-dep (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service-4-cluster-ip.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: hello-web
  20 │         image: asafsaf/k8s-test:latest
  21 │         ports:
  22 └         - containerPort: 8089
────────────────────────────────────────



service-4-cluster-ip_1.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'bye-web' of Deployment 'bye-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-4-cluster-ip_1.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: bye-web
  20 │         image: asafsaf/demo:latest
  21 │         ports:
  22 └         - containerPort: 8090
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'bye-web' of Deployment 'bye-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-4-cluster-ip_1.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: bye-web
  20 │         image: asafsaf/demo:latest
  21 │         ports:
  22 └         - containerPort: 8090
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'bye-web' of 'deployment' 'bye-dep' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-4-cluster-ip_1.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: bye-web
  20 │         image: asafsaf/demo:latest
  21 │         ports:
  22 └         - containerPort: 8090
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'bye-web' of Deployment 'bye-dep' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-4-cluster-ip_1.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: bye-web
  20 │         image: asafsaf/demo:latest
  21 │         ports:
  22 └         - containerPort: 8090
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'bye-web' of Deployment 'bye-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-4-cluster-ip_1.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: bye-web
  20 │         image: asafsaf/demo:latest
  21 │         ports:
  22 └         - containerPort: 8090
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'bye-web' of Deployment 'bye-dep' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-4-cluster-ip_1.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: bye-web
  20 │         image: asafsaf/demo:latest
  21 │         ports:
  22 └         - containerPort: 8090
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'bye-web' of Deployment 'bye-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-4-cluster-ip_1.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: bye-web
  20 │         image: asafsaf/demo:latest
  21 │         ports:
  22 └         - containerPort: 8090
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'bye-web' of Deployment 'bye-dep' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-4-cluster-ip_1.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: bye-web
  20 │         image: asafsaf/demo:latest
  21 │         ports:
  22 └         - containerPort: 8090
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'bye-web' of Deployment 'bye-dep' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-4-cluster-ip_1.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: bye-web
  20 │         image: asafsaf/demo:latest
  21 │         ports:
  22 └         - containerPort: 8090
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'bye-web' of Deployment 'bye-dep' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-4-cluster-ip_1.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: bye-web
  20 │         image: asafsaf/demo:latest
  21 │         ports:
  22 └         - containerPort: 8090
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'bye-web' of Deployment 'bye-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-4-cluster-ip_1.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: bye-web
  20 │         image: asafsaf/demo:latest
  21 │         ports:
  22 └         - containerPort: 8090
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'bye-web' of Deployment 'bye-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-4-cluster-ip_1.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: bye-web
  20 │         image: asafsaf/demo:latest
  21 │         ports:
  22 └         - containerPort: 8090
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-4-cluster-ip_1.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: bye-web
  20 │         image: asafsaf/demo:latest
  21 │         ports:
  22 └         - containerPort: 8090
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "bye-web" of deployment "bye-dep" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-4-cluster-ip_1.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: bye-web
  20 │         image: asafsaf/demo:latest
  21 │         ports:
  22 └         - containerPort: 8090
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-4-cluster-ip_1.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: bye-web
  20 │         image: asafsaf/demo:latest
  21 │         ports:
  22 └         - containerPort: 8090
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment bye-dep in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-4-cluster-ip_1.yaml:4-8
────────────────────────────────────────
   4 ┌   name: bye-dep
   5 │   labels:
   6 │     app: bye-app
   7 │     env: prod
   8 └     owner: iam
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container bye-dep in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-4-cluster-ip_1.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: bye-web
  20 │         image: asafsaf/demo:latest
  21 │         ports:
  22 └         - containerPort: 8090
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment bye-dep in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-4-cluster-ip_1.yaml:18-22
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: bye-web
  20 │         image: asafsaf/demo:latest
  21 │         ports:
  22 └         - containerPort: 8090
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container bye-web in deployment bye-dep (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service-4-cluster-ip_1.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: bye-web
  20 │         image: asafsaf/demo:latest
  21 │         ports:
  22 └         - containerPort: 8090
────────────────────────────────────────



service-4-cluster-ip_2.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'sleep-web' of Deployment 'sleep-dep' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-4-cluster-ip_2.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: sleep-web
  20 │         image: asafsaf/sleep:latest
  21 │         ports:
  22 └         - containerPort: 8091
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'sleep-web' of Deployment 'sleep-dep' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-4-cluster-ip_2.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: sleep-web
  20 │         image: asafsaf/sleep:latest
  21 │         ports:
  22 └         - containerPort: 8091
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'sleep-web' of 'deployment' 'sleep-dep' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-4-cluster-ip_2.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: sleep-web
  20 │         image: asafsaf/sleep:latest
  21 │         ports:
  22 └         - containerPort: 8091
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'sleep-web' of Deployment 'sleep-dep' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-4-cluster-ip_2.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: sleep-web
  20 │         image: asafsaf/sleep:latest
  21 │         ports:
  22 └         - containerPort: 8091
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'sleep-web' of Deployment 'sleep-dep' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-4-cluster-ip_2.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: sleep-web
  20 │         image: asafsaf/sleep:latest
  21 │         ports:
  22 └         - containerPort: 8091
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'sleep-web' of Deployment 'sleep-dep' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-4-cluster-ip_2.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: sleep-web
  20 │         image: asafsaf/sleep:latest
  21 │         ports:
  22 └         - containerPort: 8091
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'sleep-web' of Deployment 'sleep-dep' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-4-cluster-ip_2.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: sleep-web
  20 │         image: asafsaf/sleep:latest
  21 │         ports:
  22 └         - containerPort: 8091
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'sleep-web' of Deployment 'sleep-dep' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-4-cluster-ip_2.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: sleep-web
  20 │         image: asafsaf/sleep:latest
  21 │         ports:
  22 └         - containerPort: 8091
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'sleep-web' of Deployment 'sleep-dep' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-4-cluster-ip_2.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: sleep-web
  20 │         image: asafsaf/sleep:latest
  21 │         ports:
  22 └         - containerPort: 8091
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'sleep-web' of Deployment 'sleep-dep' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-4-cluster-ip_2.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: sleep-web
  20 │         image: asafsaf/sleep:latest
  21 │         ports:
  22 └         - containerPort: 8091
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'sleep-web' of Deployment 'sleep-dep' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-4-cluster-ip_2.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: sleep-web
  20 │         image: asafsaf/sleep:latest
  21 │         ports:
  22 └         - containerPort: 8091
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'sleep-web' of Deployment 'sleep-dep' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-4-cluster-ip_2.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: sleep-web
  20 │         image: asafsaf/sleep:latest
  21 │         ports:
  22 └         - containerPort: 8091
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-4-cluster-ip_2.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: sleep-web
  20 │         image: asafsaf/sleep:latest
  21 │         ports:
  22 └         - containerPort: 8091
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "sleep-web" of deployment "sleep-dep" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-4-cluster-ip_2.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: sleep-web
  20 │         image: asafsaf/sleep:latest
  21 │         ports:
  22 └         - containerPort: 8091
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-4-cluster-ip_2.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: sleep-web
  20 │         image: asafsaf/sleep:latest
  21 │         ports:
  22 └         - containerPort: 8091
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment sleep-dep in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-4-cluster-ip_2.yaml:4-8
────────────────────────────────────────
   4 ┌   name: sleep-dep
   5 │   labels:
   6 │     app: sleep-app
   7 │     env: prod
   8 └     owner: iam
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container sleep-dep in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-4-cluster-ip_2.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: sleep-web
  20 │         image: asafsaf/sleep:latest
  21 │         ports:
  22 └         - containerPort: 8091
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment sleep-dep in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-4-cluster-ip_2.yaml:18-22
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: sleep-web
  20 │         image: asafsaf/sleep:latest
  21 │         ports:
  22 └         - containerPort: 8091
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container sleep-web in deployment sleep-dep (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service-4-cluster-ip_2.yaml:19-22
────────────────────────────────────────
  19 ┌       - name: sleep-web
  20 │         image: asafsaf/sleep:latest
  21 │         ports:
  22 └         - containerPort: 8091
────────────────────────────────────────



service-a1_2.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'service-a' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-a1_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'service-a' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-a1_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'service-a' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-a1_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'service-a' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-a1_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'service-a' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-a1_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'service-a' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-a1_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'service-a' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-a1_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'service-a' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-a1_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'service-a' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-a1_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'service-a' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-a1_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'service-a' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-a1_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-a1_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "service-a" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-a1_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-a1_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment service-a in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-a1_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: service-a
   5 │   labels:
   6 └     app: service-a
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment service-a in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container service-a in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-a1_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment service-a in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-a1_2.yaml:17-33
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 └         - name: config
  ..   
────────────────────────────────────────



service-a3_2.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'service-a' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-a3_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'service-a' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-a3_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'service-a' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-a3_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'service-a' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-a3_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'service-a' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-a3_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'service-a' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-a3_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'service-a' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-a3_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'service-a' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-a3_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'service-a' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-a3_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'service-a' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-a3_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'service-a' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-a3_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-a3_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "service-a" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-a3_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-a3_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment service-a in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-a3_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: service-a
   5 │   labels:
   6 └     app: service-a
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment service-a in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container service-a in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-a3_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment service-a in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-a3_2.yaml:17-33
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 └         - name: config
  ..   
────────────────────────────────────────



service-a4_2.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'service-a' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-a4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'service-a' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-a4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'service-a' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-a4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'service-a' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-a4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'service-a' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-a4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'service-a' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-a4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'service-a' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-a4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'service-a' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-a4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'service-a' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-a4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'service-a' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-a4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'service-a' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-a4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-a4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "service-a" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-a4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-a4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment service-a in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-a4_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: service-a
   5 │   labels:
   6 └     app: service-a
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment service-a in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container service-a in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-a4_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment service-a in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-a4_2.yaml:17-33
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 └         - name: config
  ..   
────────────────────────────────────────



service-a6_2.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'service-a' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-a6_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'service-a' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-a6_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'service-a' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-a6_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'service-a' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-a6_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'service-a' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-a6_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'service-a' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-a6_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'service-a' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-a6_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'service-a' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-a6_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'service-a' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-a6_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'service-a' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-a6_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'service-a' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-a6_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-a6_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "service-a" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-a6_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-a6_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment service-a in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-a6_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: service-a
   5 │   labels:
   6 └     app: service-a
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment service-a in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container service-a in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-a6_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment service-a in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-a6_2.yaml:17-33
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 └         - name: config
  ..   
────────────────────────────────────────



service-a7_2.yaml (kubernetes)
==============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'service-a' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-a7_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'service-a' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-a7_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'service-a' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-a7_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'service-a' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-a7_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'service-a' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-a7_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'service-a' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-a7_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'service-a' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-a7_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'service-a' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-a7_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'service-a' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-a7_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'service-a' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-a7_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'service-a' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-a7_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-a7_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "service-a" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-a7_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-a7_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment service-a in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-a7_2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: service-a
   5 │   labels:
   6 └     app: service-a
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment service-a in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container service-a in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-a7_2.yaml:18-26
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 │         - name: config
  26 └           mountPath: /etc/nginx/
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment service-a in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-a7_2.yaml:17-33
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 │         image: nginx:1.14.2
  20 │         ports:
  21 │         - containerPort: 80
  22 │         volumeMounts:
  23 │         - name: html
  24 │           mountPath: /usr/share/nginx/html/
  25 └         - name: config
  ..   
────────────────────────────────────────



service-account-pod.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of Pod 'my-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-account-pod.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: my-container
   9 └     image: nginx
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of Pod 'my-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-account-pod.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: my-container
   9 └     image: nginx
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'pod' 'my-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-account-pod.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: my-container
   9 └     image: nginx
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-account-pod.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: my-container
   9 └     image: nginx
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of Pod 'my-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-account-pod.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: my-container
   9 └     image: nginx
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-container' of Pod 'my-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-account-pod.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: my-container
   9 └     image: nginx
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of Pod 'my-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-account-pod.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: my-container
   9 └     image: nginx
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-account-pod.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: my-container
   9 └     image: nginx
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-account-pod.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: my-container
   9 └     image: nginx
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of Pod 'my-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-account-pod.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: my-container
   9 └     image: nginx
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of Pod 'my-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-account-pod.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: my-container
   9 └     image: nginx
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of Pod 'my-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-account-pod.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: my-container
   9 └     image: nginx
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-account-pod.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: my-container
   9 └     image: nginx
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of pod "my-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-account-pod.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: my-container
   9 └     image: nginx
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-account-pod.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: my-container
   9 └     image: nginx
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod my-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-account-pod.yaml:4
────────────────────────────────────────
   4 [   name: my-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-account-pod.yaml:8-9
────────────────────────────────────────
   8 ┌   - name: my-container
   9 └     image: nginx
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod my-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-account-pod.yaml:6-9
────────────────────────────────────────
   6 ┌   serviceAccountName: my-service-account
   7 │   containers:
   8 │   - name: my-container
   9 └     image: nginx
────────────────────────────────────────



service-account-pod1.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'alpine' of Pod 'service-account-test-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-account-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine
   9 │     command:
  10 │     - sleep
  11 └     - "3600"
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'alpine' of Pod 'service-account-test-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-account-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine
   9 │     command:
  10 │     - sleep
  11 └     - "3600"
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'alpine' of 'pod' 'service-account-test-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-account-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine
   9 │     command:
  10 │     - sleep
  11 └     - "3600"
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'alpine' of Pod 'service-account-test-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-account-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine
   9 │     command:
  10 │     - sleep
  11 └     - "3600"
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'alpine' of Pod 'service-account-test-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-account-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine
   9 │     command:
  10 │     - sleep
  11 └     - "3600"
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'alpine' of Pod 'service-account-test-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-account-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine
   9 │     command:
  10 │     - sleep
  11 └     - "3600"
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'alpine' of Pod 'service-account-test-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-account-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine
   9 │     command:
  10 │     - sleep
  11 └     - "3600"
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'alpine' of Pod 'service-account-test-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-account-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine
   9 │     command:
  10 │     - sleep
  11 └     - "3600"
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'alpine' of Pod 'service-account-test-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-account-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine
   9 │     command:
  10 │     - sleep
  11 └     - "3600"
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'alpine' of Pod 'service-account-test-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-account-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine
   9 │     command:
  10 │     - sleep
  11 └     - "3600"
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'alpine' of Pod 'service-account-test-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-account-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine
   9 │     command:
  10 │     - sleep
  11 └     - "3600"
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'alpine' of Pod 'service-account-test-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-account-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine
   9 │     command:
  10 │     - sleep
  11 └     - "3600"
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-account-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine
   9 │     command:
  10 │     - sleep
  11 └     - "3600"
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "alpine" of pod "service-account-test-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-account-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine
   9 │     command:
  10 │     - sleep
  11 └     - "3600"
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-account-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine
   9 │     command:
  10 │     - sleep
  11 └     - "3600"
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod service-account-test-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-account-pod1.yaml:4
────────────────────────────────────────
   4 [   name: service-account-test-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container service-account-test-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-account-pod1.yaml:7-11
────────────────────────────────────────
   7 ┌   - name: alpine
   8 │     image: alpine
   9 │     command:
  10 │     - sleep
  11 └     - "3600"
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod service-account-test-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-account-pod1.yaml:6-12
────────────────────────────────────────
   6 ┌   containers:
   7 │   - name: alpine
   8 │     image: alpine
   9 │     command:
  10 │     - sleep
  11 │     - "3600"
  12 └   serviceAccountName: test
────────────────────────────────────────



service-account-pod2_3.yaml (kubernetes)
========================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'pods-simple-container' of Pod 'service-account-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service-account-pod2_3.yaml:8-15
────────────────────────────────────────
   8 ┌   - command:
   9 │     - /bin/bash
  10 │     - -c
  11 │     - 'apt update -y -qq && apt install -qq -y curl && curl -s https://kubernetes:443/api/v1/namespaces/default/pods
  12 │       --header "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"
  13 │       --insecure && sleep 3600'
  14 │     image: ubuntu
  15 └     name: pods-simple-container
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'pods-simple-container' of Pod 'service-account-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service-account-pod2_3.yaml:8-15
────────────────────────────────────────
   8 ┌   - command:
   9 │     - /bin/bash
  10 │     - -c
  11 │     - 'apt update -y -qq && apt install -qq -y curl && curl -s https://kubernetes:443/api/v1/namespaces/default/pods
  12 │       --header "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"
  13 │       --insecure && sleep 3600'
  14 │     image: ubuntu
  15 └     name: pods-simple-container
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'pods-simple-container' of 'pod' 'service-account-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service-account-pod2_3.yaml:8-15
────────────────────────────────────────
   8 ┌   - command:
   9 │     - /bin/bash
  10 │     - -c
  11 │     - 'apt update -y -qq && apt install -qq -y curl && curl -s https://kubernetes:443/api/v1/namespaces/default/pods
  12 │       --header "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"
  13 │       --insecure && sleep 3600'
  14 │     image: ubuntu
  15 └     name: pods-simple-container
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'pods-simple-container' of Pod 'service-account-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service-account-pod2_3.yaml:8-15
────────────────────────────────────────
   8 ┌   - command:
   9 │     - /bin/bash
  10 │     - -c
  11 │     - 'apt update -y -qq && apt install -qq -y curl && curl -s https://kubernetes:443/api/v1/namespaces/default/pods
  12 │       --header "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"
  13 │       --insecure && sleep 3600'
  14 │     image: ubuntu
  15 └     name: pods-simple-container
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'pods-simple-container' of Pod 'service-account-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service-account-pod2_3.yaml:8-15
────────────────────────────────────────
   8 ┌   - command:
   9 │     - /bin/bash
  10 │     - -c
  11 │     - 'apt update -y -qq && apt install -qq -y curl && curl -s https://kubernetes:443/api/v1/namespaces/default/pods
  12 │       --header "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"
  13 │       --insecure && sleep 3600'
  14 │     image: ubuntu
  15 └     name: pods-simple-container
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'pods-simple-container' of Pod 'service-account-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service-account-pod2_3.yaml:8-15
────────────────────────────────────────
   8 ┌   - command:
   9 │     - /bin/bash
  10 │     - -c
  11 │     - 'apt update -y -qq && apt install -qq -y curl && curl -s https://kubernetes:443/api/v1/namespaces/default/pods
  12 │       --header "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"
  13 │       --insecure && sleep 3600'
  14 │     image: ubuntu
  15 └     name: pods-simple-container
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'pods-simple-container' of Pod 'service-account-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service-account-pod2_3.yaml:8-15
────────────────────────────────────────
   8 ┌   - command:
   9 │     - /bin/bash
  10 │     - -c
  11 │     - 'apt update -y -qq && apt install -qq -y curl && curl -s https://kubernetes:443/api/v1/namespaces/default/pods
  12 │       --header "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"
  13 │       --insecure && sleep 3600'
  14 │     image: ubuntu
  15 └     name: pods-simple-container
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'pods-simple-container' of Pod 'service-account-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service-account-pod2_3.yaml:8-15
────────────────────────────────────────
   8 ┌   - command:
   9 │     - /bin/bash
  10 │     - -c
  11 │     - 'apt update -y -qq && apt install -qq -y curl && curl -s https://kubernetes:443/api/v1/namespaces/default/pods
  12 │       --header "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"
  13 │       --insecure && sleep 3600'
  14 │     image: ubuntu
  15 └     name: pods-simple-container
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'pods-simple-container' of Pod 'service-account-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service-account-pod2_3.yaml:8-15
────────────────────────────────────────
   8 ┌   - command:
   9 │     - /bin/bash
  10 │     - -c
  11 │     - 'apt update -y -qq && apt install -qq -y curl && curl -s https://kubernetes:443/api/v1/namespaces/default/pods
  12 │       --header "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"
  13 │       --insecure && sleep 3600'
  14 │     image: ubuntu
  15 └     name: pods-simple-container
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'pods-simple-container' of Pod 'service-account-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service-account-pod2_3.yaml:8-15
────────────────────────────────────────
   8 ┌   - command:
   9 │     - /bin/bash
  10 │     - -c
  11 │     - 'apt update -y -qq && apt install -qq -y curl && curl -s https://kubernetes:443/api/v1/namespaces/default/pods
  12 │       --header "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"
  13 │       --insecure && sleep 3600'
  14 │     image: ubuntu
  15 └     name: pods-simple-container
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'pods-simple-container' of Pod 'service-account-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service-account-pod2_3.yaml:8-15
────────────────────────────────────────
   8 ┌   - command:
   9 │     - /bin/bash
  10 │     - -c
  11 │     - 'apt update -y -qq && apt install -qq -y curl && curl -s https://kubernetes:443/api/v1/namespaces/default/pods
  12 │       --header "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"
  13 │       --insecure && sleep 3600'
  14 │     image: ubuntu
  15 └     name: pods-simple-container
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'pods-simple-container' of Pod 'service-account-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service-account-pod2_3.yaml:8-15
────────────────────────────────────────
   8 ┌   - command:
   9 │     - /bin/bash
  10 │     - -c
  11 │     - 'apt update -y -qq && apt install -qq -y curl && curl -s https://kubernetes:443/api/v1/namespaces/default/pods
  12 │       --header "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"
  13 │       --insecure && sleep 3600'
  14 │     image: ubuntu
  15 └     name: pods-simple-container
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service-account-pod2_3.yaml:8-15
────────────────────────────────────────
   8 ┌   - command:
   9 │     - /bin/bash
  10 │     - -c
  11 │     - 'apt update -y -qq && apt install -qq -y curl && curl -s https://kubernetes:443/api/v1/namespaces/default/pods
  12 │       --header "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"
  13 │       --insecure && sleep 3600'
  14 │     image: ubuntu
  15 └     name: pods-simple-container
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "pods-simple-container" of pod "service-account-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service-account-pod2_3.yaml:8-15
────────────────────────────────────────
   8 ┌   - command:
   9 │     - /bin/bash
  10 │     - -c
  11 │     - 'apt update -y -qq && apt install -qq -y curl && curl -s https://kubernetes:443/api/v1/namespaces/default/pods
  12 │       --header "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"
  13 │       --insecure && sleep 3600'
  14 │     image: ubuntu
  15 └     name: pods-simple-container
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service-account-pod2_3.yaml:8-15
────────────────────────────────────────
   8 ┌   - command:
   9 │     - /bin/bash
  10 │     - -c
  11 │     - 'apt update -y -qq && apt install -qq -y curl && curl -s https://kubernetes:443/api/v1/namespaces/default/pods
  12 │       --header "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"
  13 │       --insecure && sleep 3600'
  14 │     image: ubuntu
  15 └     name: pods-simple-container
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod service-account-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service-account-pod2_3.yaml:4-5
────────────────────────────────────────
   4 ┌   name: service-account-pod
   5 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container service-account-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-account-pod2_3.yaml:8-15
────────────────────────────────────────
   8 ┌   - command:
   9 │     - /bin/bash
  10 │     - -c
  11 │     - 'apt update -y -qq && apt install -qq -y curl && curl -s https://kubernetes:443/api/v1/namespaces/default/pods
  12 │       --header "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"
  13 │       --insecure && sleep 3600'
  14 │     image: ubuntu
  15 └     name: pods-simple-container
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod service-account-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service-account-pod2_3.yaml:7-16
────────────────────────────────────────
   7 ┌   containers:
   8 │   - command:
   9 │     - /bin/bash
  10 │     - -c
  11 │     - 'apt update -y -qq && apt install -qq -y curl && curl -s https://kubernetes:443/api/v1/namespaces/default/pods
  12 │       --header "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)"
  13 │       --insecure && sleep 3600'
  14 │     image: ubuntu
  15 │     name: pods-simple-container
  16 └   serviceAccount: service-account-pod-read
────────────────────────────────────────



service-account195_1.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'deployment-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 service-account195_1.yaml:6-17
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - apps
   8 │   resources:
   9 │   - deployments
  10 │   verbs:
  11 │   - get
  12 │   - list
  13 │   - watch
  14 └   - create
  ..   
────────────────────────────────────────



service-account225_1.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'pod-reader' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 service-account225_1.yaml:7-19
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   - pods/exec
  12 │   verbs:
  13 │   - list
  14 │   - get
  15 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0053 (HIGH): Role 'pod-reader' should not have access to resource '["pods/exec"]' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to exec into a container with privileged access to the host or with an attached SA with higher RBAC permissions is a common escalation path to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv053
────────────────────────────────────────
 service-account225_1.yaml:7-19
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   - pods/exec
  12 │   verbs:
  13 │   - list
  14 │   - get
  15 └   - watch
  ..   
────────────────────────────────────────



service-account227_1.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'admin-user' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 service-account227_1.yaml:4
────────────────────────────────────────
   4 [   name: admin-user
────────────────────────────────────────



service-account261_1.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'influxdb-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 service-account261_1.yaml:7-19
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - secrets
  11 │   - configmaps
  12 │   verbs:
  13 │   - get
  14 │   - list
  15 └   - watch
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'influxdb-role' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 service-account261_1.yaml:7-19
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - secrets
  11 │   - configmaps
  12 │   verbs:
  13 │   - get
  14 │   - list
  15 └   - watch
  ..   
────────────────────────────────────────



service-account414_1.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0113 (MEDIUM): Role 'kubernetes-reader' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 service-account414_1.yaml:6-17
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - configmaps
  10 │   - pods
  11 │   - services
  12 │   - endpoints
  13 │   - secrets
  14 └   verbs:
  ..   
────────────────────────────────────────



service-account43_1.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'cluster-role-binding' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 service-account43_1.yaml:4-5
────────────────────────────────────────
   4 ┌   name: cluster-role-binding
   5 └   namespace: vault
────────────────────────────────────────


