
Report Summary

┌─────────────────────────────────────────────┬────────────┬───────────────────┐
│                   Target                    │    Type    │ Misconfigurations │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ Support-ClusterRoleBinding.yaml             │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ Support-ClusterRoleBinding_1.yaml           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ sts29.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ sts29_1.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ sts3.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ sts30.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ sts30_1.yaml                                │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ sts31.yaml                                  │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ sts36.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ sts36_1.yaml                                │ kubernetes │        16         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ sts37.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ sts3_1.yaml                                 │ kubernetes │        35         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ sts40.yaml                                  │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ sts41.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ sts41_1.yaml                                │ kubernetes │        11         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ sts42.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ sts42_1.yaml                                │ kubernetes │        16         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ sts43.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ sts44.yaml                                  │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ sts45.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ sts45_1.yaml                                │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ sts46.yaml                                  │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ sts48.yaml                                  │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ sts5.yaml                                   │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ sts7.yaml                                   │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ sts8.yaml                                   │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ stset_mysql.yaml                            │ kubernetes │        16         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ stset_mysql1.yaml                           │ kubernetes │        16         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ stuckpodsnotifier_editor_role.yaml          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ stuckpodsnotifier_viewer_role.yaml          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ student-depl.yaml                           │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ student-depl_1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ student.yaml                                │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ student1.yaml                               │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ student_service.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ student_service1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ student_service1_1.yaml                     │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ student_service_1.yaml                      │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ studentapp.yaml                             │ kubernetes │        15         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ studentapp1.yaml                            │ kubernetes │        14         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ studentdb.yaml                              │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ studentserver-configmap.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ studentserver-service.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ studentservermongoIngress.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ studentservice.yaml                         │ kubernetes │        16         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ studentservice_1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ studio-deployment.yaml                      │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ studio.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ studio1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ studio1_1.yaml                              │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ studio_service.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ study22-acc-receiver.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ study22-acc-receiver_1.yaml                 │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ study22-acc-sender.yaml                     │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ stunner_gatewayconfig_editor_role.yaml      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ stunner_gatewayconfig_viewer_role.yaml      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ stunner_udproute_editor_role.yaml           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ stunner_udproute_viewer_role.yaml           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ styles-css.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ subdomain_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ subdomain_2.yaml                            │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ subdomain_3.yaml                            │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ submodule-pod.yaml                          │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ submodule-pod1.yaml                         │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ subpath.yaml                                │ kubernetes │        33         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ subpathexpr.yaml                            │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ subscriber_deployment.yaml                  │ kubernetes │        33         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ subscriber_deployment1.yaml                 │ kubernetes │        33         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ subscriber_service.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ subscriber_service1.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ subtraction-honeypot.yaml                   │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ subtraction.yaml                            │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ subtractor-deployment.yaml                  │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ subtractor-service.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ subtractor-service1.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ succeeded-pod.yaml                          │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ succeeded-pod1.yaml                         │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ suggest.yaml                                │ kubernetes │        20         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ suggest_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ supabase_editor_role.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ supabase_viewer_role.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ super-admin-account.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ super-admin-account1.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ super-admin.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ super-admin_1.yaml                          │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ super-admin_2.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ superpod_pod.yaml                           │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ superset-assert.yaml                        │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ superset-assert1.yaml                       │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ superset-assert2.yaml                       │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ superset-assert3.yaml                       │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ superset-assert4.yaml                       │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ superset-ingress.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ superset-with-ldap_1.yaml                   │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ superset-with-ldap_2.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ superset-with-ldap_3.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ superset-with-ldap_6.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ superset1_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ superset2_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ superset3_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ superset4_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ superset5_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ supersetcluster_editor_role.yaml            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ supersetcluster_viewer_role.yaml            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ superuser.secrets.sops.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ supervisor-deployment.yaml                  │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ supervisor-service.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ support-db-deployment.yaml                  │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ support-db-pvc.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ support-db-service.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ support-service-deployment.yaml             │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ support-service-secrets.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ support-service-service.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ support-tier.yaml                           │ kubernetes │        34         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ support_access_config.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ support_access_config1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ support_access_config2.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ support_access_config3.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ support_access_config4.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ support_access_config5.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ support_access_config6.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ support_access_config7.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ surrealdb-migrate.job.yaml                  │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ surrealdb-migrate.job1.yaml                 │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ suspended_userPause.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ suspended_userPause1.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ sv-fileshare.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ sv-fileshare1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ sv-pv.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ sv-pv_1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ sv-service.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ sv-statefulset.yaml                         │ kubernetes │        10         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ sv2.yaml                                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svaccount.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-analytics.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-api-gateway.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-api-gateway1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-api-gateway10.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-api-gateway11.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-api-gateway12.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-api-gateway13.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-api-gateway14.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-api-gateway15.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-api-gateway16.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-api-gateway17.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-api-gateway18.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-api-gateway19.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-api-gateway2.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-api-gateway20.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-api-gateway21.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-api-gateway3.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-api-gateway4.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-api-gateway5.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-api-gateway6.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-api-gateway7.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-api-gateway8.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-api-gateway9.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-api-lb.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-api.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-api1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-api10.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-api2.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-api3.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-api4.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-api5.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-api6.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-api7.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-api8.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-api9.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-argo.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-auth-2.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-auth-21.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad-update.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad-update1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad-update2.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad-update3.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad-update4.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad.yaml                                │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad10.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad11.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad11_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad12.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad12_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad13.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad14.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad14_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad14_2.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad15.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad16.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad16_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad17.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad17_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad18.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad19.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad19_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad19_2.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad1_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad2.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad20.yaml                              │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad21.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad21_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad22.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad22_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad23.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad24.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad24_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad24_2.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad2_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad3.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad4.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad4_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad4_2.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad5.yaml                               │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad6.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad6_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad7.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad7_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad8.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad9.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad9_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bad9_2.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bd.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bd1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bd2.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-bd3.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-be.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-cluster-ip.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-clusterIP1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-clusterip.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-clusterip2.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-clusterip3.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-clusterip4.yaml                         │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-clusterip4_1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-courses.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-cursos.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-cursos1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-cursos2.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-cursos3.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-db-news.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-db-news1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-db-news2.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-db-noticias.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-db-noticias1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-db-noticias10.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-db-noticias11.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-db-noticias12.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-db-noticias13.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-db-noticias14.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-db-noticias15.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-db-noticias16.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-db-noticias17.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-db-noticias18.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-db-noticias19.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-db-noticias2.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-db-noticias20.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-db-noticias21.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-db-noticias22.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-db-noticias23.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-db-noticias24.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-db-noticias25.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-db-noticias26.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-db-noticias3.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-db-noticias4.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-db-noticias5.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-db-noticias6.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-db-noticias7.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-db-noticias8.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-db-noticias9.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-db.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-db1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-db2.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-db3.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-def.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-default.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-default1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-deploy-foo.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-deploy-foo_1.yaml                       │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-deployment-api.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-deployment-api1.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-dev.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-dns-pod.yaml                            │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-elasticsearch.yaml                      │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-environ.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-expose-pod.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-fe.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-finance.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-finance_1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-frontend.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good-update.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good-update1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good-update2.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good-update3.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good-update4.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good10.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good10_1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good10_2.yaml                           │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good11.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good11_1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good12.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good12_1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good13.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good14.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good14_1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good15.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good15_1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good15_2.yaml                           │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good16.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good16_1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good17.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good17_1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good18.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good19.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good19_1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good1_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good20.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good20_1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good20_2.yaml                           │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good21.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good21_1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good22.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good22_1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good23.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good24.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good24_1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good2_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good4_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good5.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good5_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good5_2.yaml                            │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good6.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good6_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good7.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good7_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good8.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good9.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good9_1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good_1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-good_2.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-grafana.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-headless37.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-headless38.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-headless39.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-headless40.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-headless57.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-ingress.yaml                            │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-ingress_1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-ingress_2.yaml                          │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-ingress_3.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-ingress_4.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-k8s-pessoa-app.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-kibana.yaml                             │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-lab-deploy.yaml                         │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-landpage.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-lb.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-lb1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-loadbalancer.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-loadbalancer1.yaml                      │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-loadbalancer2.yaml                      │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-loadbalancer2_1.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-loadbalaner.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-local.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-manifest.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-manifest1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-manifest2.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-mongo-db.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-mongo-db1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-mongo-db10.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-mongo-db11.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-mongo-db12.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-mongo-db13.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-mongo-db14.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-mongo-db15.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-mongo-db16.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-mongo-db17.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-mongo-db18.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-mongo-db19.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-mongo-db2.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-mongo-db3.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-mongo-db4.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-mongo-db5.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-mongo-db6.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-mongo-db7.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-mongo-db8.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-mongo-db9.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-mysql2.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-mysql2_1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-mysql3.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-mysql3_1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-mysql5.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-mysql6.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-mysql7.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-mysql9.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-news-db.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-news-portal.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-news-portal1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-news-portal2.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-news-system.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-news-system1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-news-system2.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-news-system3.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-ng-plus-syncer-hs.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-nginx-nodeport.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-nginx-nodeport1.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-nginx.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-nginx1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-nginx2.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-nginx3.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-node-1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-node-port.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-node-port1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-node-portv2.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-node.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-node1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-nodeport.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-nodeport1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-nodeport2.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-nodeport3.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-nodeport4.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-nodeport5.yaml                          │ kubernetes │        19         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-nodeport5_1.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-patched.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-patched1.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-patched2.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-patched3.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-patched4.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-pod-1-NodePort.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-pod-1-NodePort1.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-pod-1-loadbalancer.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-pod-1-loadbalancer2.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-pod-1-loadbalancer3.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-pod-1-loadbalancer4.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-pod-1-loadbalancer5.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-pod-1-loadbalancer6.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-pod-1-nodeport2.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-pod-1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-pod-11.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-pod-12.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-pod-13.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-pod-14.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-pod-15.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-pod-16.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-pod-17.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-pod-18.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-pod-2-ClusterIP.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-pod-2-ClusterIP1.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-pod-2-clusterip2.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-pod-2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-pod-21.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-pod-22.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-pod-23.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-pod-24.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-pod-25.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-pod-26.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-pod-27.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-pod-28.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-pod-3-loadbalancer.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-pod.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-portal-news.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-portal-noticias.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-portal-noticias1.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-portal-noticias10.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-portal-noticias11.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-portal-noticias12.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-portal-noticias13.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-portal-noticias14.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-portal-noticias15.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-portal-noticias16.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-portal-noticias17.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-portal-noticias18.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-portal-noticias19.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-portal-noticias2.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-portal-noticias20.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-portal-noticias21.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-portal-noticias22.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-portal-noticias23.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-portal-noticias24.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-portal-noticias25.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-portal-noticias26.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-portal-noticias3.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-portal-noticias4.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-portal-noticias5.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-portal-noticias6.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-portal-noticias7.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-portal-noticias8.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-portal-noticias9.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-portal.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-position-tracker.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-position-tracker1.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-position-tracker10.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-position-tracker11.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-position-tracker12.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-position-tracker13.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-position-tracker14.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-position-tracker15.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-position-tracker16.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-position-tracker17.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-position-tracker18.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-position-tracker19.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-position-tracker2.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-position-tracker20.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-position-tracker21.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-position-tracker3.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-position-tracker4.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-position-tracker5.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-position-tracker6.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-position-tracker7.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-position-tracker8.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-position-tracker9.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-postgres.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-postgres1.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-postgres2.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-postgres3.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-postgres4.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-postgres5.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-postgres6.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-primeiro-clusterip.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-primeiro-clusterip1.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-primeiro-loadbalancer.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-primeiro-loadbalancer1.yaml             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-prod.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-product.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-prometheus.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-public.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-queu.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-queu1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-queu10.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-queu11.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-queu12.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-queu13.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-queu14.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-queu15.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-queu16.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-queu17.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-queu18.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-queu19.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-queu2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-queu20.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-queu21.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-queu3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-queu4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-queu5.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-queu6.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-queu7.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-queu8.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-queu9.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-replica-exporter.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-replica.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-rolebinding.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-rolebinding1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-rolebinding2.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-rolebinding3.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-seq.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-session-sticky.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-shop.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-sistema-noticias.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-sistema-noticias1.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-sistema-noticias10.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-sistema-noticias11.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-sistema-noticias12.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-sistema-noticias13.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-sistema-noticias14.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-sistema-noticias15.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-sistema-noticias16.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-sistema-noticias17.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-sistema-noticias19.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-sistema-noticias2.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-sistema-noticias20.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-sistema-noticias21.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-sistema-noticias22.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-sistema-noticias23.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-sistema-noticias24.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-sistema-noticias25.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-sistema-noticias3.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-sistema-noticias4.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-sistema-noticias5.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-sistema-noticias6.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-sistema-noticias7.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-sistema-noticias8.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-sistema-noticias9.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-sistema.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-source-exporter.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-source.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-staging.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-sts.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-sts1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-sts1_1.yaml                             │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-sts2.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-sts2_1.yaml                             │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-sts_1.yaml                              │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-sys-noticias.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-system-news.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-target.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-test-pod.yaml                           │ kubernetes │        18         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-uptime-kuma.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-user.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-v1-np.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-webapp.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-webapp1.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-webapp10.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-webapp11.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-webapp12.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-webapp13.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-webapp14.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-webapp15.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-webapp16.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-webapp17.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-webapp18.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-webapp19.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-webapp2.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-webapp20.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-webapp21.yaml                           │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-webapp3.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-webapp4.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-webapp5.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-webapp6.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-webapp7.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-webapp8.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-webapp9.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-with-invalid-data.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-with-invalid-data1.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-wordpress.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-wordpress1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc-xutilitites.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.demo.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.demo1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.external-service-headless.yaml          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.external-service-headless1.yaml         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.external-service-headless1_1.yaml       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.external-service-headless_1.yaml        │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.external-service.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.external-service1.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.kiada-publish-not-ready-addresses.yaml  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.kiada-publish-not-ready-addresses1.yaml │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.kiada.loadbalancer.yaml                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.kiada.loadbalancer1.yaml                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.kiada.nodeport.local.yaml               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.kiada.nodeport.local1.yaml              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.kiada.nodeport.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.kiada.nodeport1.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.kiada.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.kiada1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.kiada10.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.kiada11.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.kiada2.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.kiada3.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.kiada4.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.kiada5.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.kiada6.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.kiada7.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.kiada8.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.kiada9.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.lb.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.node-agent.local.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.node-agent.local1.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.node-agent.local2.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.node-agent.local3.yaml                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quiz-pods.yaml                          │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quiz-pods1.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quiz-pods2.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quiz-pods3.yaml                         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quiz.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quiz1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quiz10.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quiz11.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quiz12.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quiz13.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quiz2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quiz3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quiz4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quiz5.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quiz6.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quiz7.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quiz8.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quiz9.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quote-dualstack.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quote-dualstack1.yaml                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quote-headless.yaml                     │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quote-headless1.yaml                    │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quote-local.yaml                        │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quote-local1.yaml                       │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quote-topology-aware-hints.yaml         │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quote-topology-aware-hints1.yaml        │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quote.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quote1.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quote10.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quote11.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quote12.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quote13.yaml                            │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quote2.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quote3.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quote4.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quote5.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quote6.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quote7.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quote8.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.quote9.yaml                             │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.time-api.yaml                           │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc.time-api1.yaml                          │ kubernetes │         1         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc1.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc10.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc101.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc104.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc105.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc105_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc106.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc107.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc108.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc109.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc10_1.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc11.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc110.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc1100.yaml                                │ kubernetes │        13         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc1100_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc1100_2.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc111.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc112.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc114.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc115.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc116.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc117.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc118.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc119.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc12.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc13.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc133.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc136.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc139.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc14.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc140.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc142.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc144.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc15.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc157.yaml                                 │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc157_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc158.yaml                                 │ kubernetes │        17         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc158_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc159.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc167.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc169.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc17.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc170.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc171.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc172.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc172_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc176.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc177.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc178.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc179.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc18.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc187.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc189.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc19.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc191.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc192.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc193.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc194.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc195.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc196.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc197.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc2.yaml                                   │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc200.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc201.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc201_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc202.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc203.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc204.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc205.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc207.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc208.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc209.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc21.yaml                                  │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc210.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc2100.yaml                                │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc2100_1.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc2100_2.yaml                              │ kubernetes │        13         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc2100_3.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc2100_4.yaml                              │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc211.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc212.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc213.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc215.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc216.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc217.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc218.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc219.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc219_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc220.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc220_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc221.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc221_1.yaml                               │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc222.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc225.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc228.yaml                                 │ kubernetes │         0         │
├─────────────────────────────────────────────┼────────────┼───────────────────┤
│ svc229.yaml                                 │ kubernetes │         0         │
└─────────────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


Support-ClusterRoleBinding.yaml (kubernetes)
============================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'support' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 Support-ClusterRoleBinding.yaml:6-16
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - pods
  10 │   - services
  11 │   - deploy
  12 │   - secrets
  13 │   verbs:
  14 └   - list
  ..   
────────────────────────────────────────



sts29_1.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mssql' of StatefulSet 'ag1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 sts29_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mssql
  19 │         image: neajmorshad/sql-server-2022:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: ACCEPT_EULA
  23 │           value: Y
  24 │         - name: MSSQL_SA_PASSWORD
  25 │           value: Pa55w0rd!
  26 └         - name: MSSQL_PID
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mssql' of StatefulSet 'ag1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 sts29_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mssql
  19 │         image: neajmorshad/sql-server-2022:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: ACCEPT_EULA
  23 │           value: Y
  24 │         - name: MSSQL_SA_PASSWORD
  25 │           value: Pa55w0rd!
  26 └         - name: MSSQL_PID
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mssql' of 'statefulset' 'ag1' in 'dag' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 sts29_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mssql
  19 │         image: neajmorshad/sql-server-2022:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: ACCEPT_EULA
  23 │           value: Y
  24 │         - name: MSSQL_SA_PASSWORD
  25 │           value: Pa55w0rd!
  26 └         - name: MSSQL_PID
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mssql' of StatefulSet 'ag1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 sts29_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mssql
  19 │         image: neajmorshad/sql-server-2022:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: ACCEPT_EULA
  23 │           value: Y
  24 │         - name: MSSQL_SA_PASSWORD
  25 │           value: Pa55w0rd!
  26 └         - name: MSSQL_PID
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mssql' of StatefulSet 'ag1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 sts29_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mssql
  19 │         image: neajmorshad/sql-server-2022:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: ACCEPT_EULA
  23 │           value: Y
  24 │         - name: MSSQL_SA_PASSWORD
  25 │           value: Pa55w0rd!
  26 └         - name: MSSQL_PID
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mssql' of StatefulSet 'ag1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 sts29_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mssql
  19 │         image: neajmorshad/sql-server-2022:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: ACCEPT_EULA
  23 │           value: Y
  24 │         - name: MSSQL_SA_PASSWORD
  25 │           value: Pa55w0rd!
  26 └         - name: MSSQL_PID
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mssql' of StatefulSet 'ag1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 sts29_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mssql
  19 │         image: neajmorshad/sql-server-2022:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: ACCEPT_EULA
  23 │           value: Y
  24 │         - name: MSSQL_SA_PASSWORD
  25 │           value: Pa55w0rd!
  26 └         - name: MSSQL_PID
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mssql' of StatefulSet 'ag1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 sts29_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mssql
  19 │         image: neajmorshad/sql-server-2022:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: ACCEPT_EULA
  23 │           value: Y
  24 │         - name: MSSQL_SA_PASSWORD
  25 │           value: Pa55w0rd!
  26 └         - name: MSSQL_PID
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mssql' of StatefulSet 'ag1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 sts29_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mssql
  19 │         image: neajmorshad/sql-server-2022:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: ACCEPT_EULA
  23 │           value: Y
  24 │         - name: MSSQL_SA_PASSWORD
  25 │           value: Pa55w0rd!
  26 └         - name: MSSQL_PID
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mssql' of StatefulSet 'ag1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 sts29_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mssql
  19 │         image: neajmorshad/sql-server-2022:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: ACCEPT_EULA
  23 │           value: Y
  24 │         - name: MSSQL_SA_PASSWORD
  25 │           value: Pa55w0rd!
  26 └         - name: MSSQL_PID
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mssql' of StatefulSet 'ag1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 sts29_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mssql
  19 │         image: neajmorshad/sql-server-2022:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: ACCEPT_EULA
  23 │           value: Y
  24 │         - name: MSSQL_SA_PASSWORD
  25 │           value: Pa55w0rd!
  26 └         - name: MSSQL_PID
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mssql' of StatefulSet 'ag1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 sts29_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mssql
  19 │         image: neajmorshad/sql-server-2022:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: ACCEPT_EULA
  23 │           value: Y
  24 │         - name: MSSQL_SA_PASSWORD
  25 │           value: Pa55w0rd!
  26 └         - name: MSSQL_PID
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 sts29_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mssql
  19 │         image: neajmorshad/sql-server-2022:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: ACCEPT_EULA
  23 │           value: Y
  24 │         - name: MSSQL_SA_PASSWORD
  25 │           value: Pa55w0rd!
  26 └         - name: MSSQL_PID
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mssql" of statefulset "ag1" in "dag" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 sts29_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mssql
  19 │         image: neajmorshad/sql-server-2022:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: ACCEPT_EULA
  23 │           value: Y
  24 │         - name: MSSQL_SA_PASSWORD
  25 │           value: Pa55w0rd!
  26 └         - name: MSSQL_PID
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 sts29_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mssql
  19 │         image: neajmorshad/sql-server-2022:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: ACCEPT_EULA
  23 │           value: Y
  24 │         - name: MSSQL_SA_PASSWORD
  25 │           value: Pa55w0rd!
  26 └         - name: MSSQL_PID
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ag1 in dag namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sts29_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mssql
  19 │         image: neajmorshad/sql-server-2022:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: ACCEPT_EULA
  23 │           value: Y
  24 │         - name: MSSQL_SA_PASSWORD
  25 │           value: Pa55w0rd!
  26 └         - name: MSSQL_PID
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset ag1 in dag namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sts29_1.yaml:17-39
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: mssql
  19 │         image: neajmorshad/sql-server-2022:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: ACCEPT_EULA
  23 │           value: Y
  24 │         - name: MSSQL_SA_PASSWORD
  25 └           value: Pa55w0rd!
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mssql in statefulset ag1 (namespace: dag) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 sts29_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mssql
  19 │         image: neajmorshad/sql-server-2022:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: ACCEPT_EULA
  23 │           value: Y
  24 │         - name: MSSQL_SA_PASSWORD
  25 │           value: Pa55w0rd!
  26 └         - name: MSSQL_PID
  ..   
────────────────────────────────────────



sts30_1.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mssql' of StatefulSet 'ag2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 sts30_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mssql
  19 │         image: neajmorshad/sql-server-2022:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: ACCEPT_EULA
  23 │           value: Y
  24 │         - name: MSSQL_SA_PASSWORD
  25 │           value: Pa55w0rd!
  26 └         - name: MSSQL_PID
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mssql' of StatefulSet 'ag2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 sts30_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mssql
  19 │         image: neajmorshad/sql-server-2022:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: ACCEPT_EULA
  23 │           value: Y
  24 │         - name: MSSQL_SA_PASSWORD
  25 │           value: Pa55w0rd!
  26 └         - name: MSSQL_PID
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mssql' of 'statefulset' 'ag2' in 'dag' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 sts30_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mssql
  19 │         image: neajmorshad/sql-server-2022:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: ACCEPT_EULA
  23 │           value: Y
  24 │         - name: MSSQL_SA_PASSWORD
  25 │           value: Pa55w0rd!
  26 └         - name: MSSQL_PID
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mssql' of StatefulSet 'ag2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 sts30_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mssql
  19 │         image: neajmorshad/sql-server-2022:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: ACCEPT_EULA
  23 │           value: Y
  24 │         - name: MSSQL_SA_PASSWORD
  25 │           value: Pa55w0rd!
  26 └         - name: MSSQL_PID
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mssql' of StatefulSet 'ag2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 sts30_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mssql
  19 │         image: neajmorshad/sql-server-2022:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: ACCEPT_EULA
  23 │           value: Y
  24 │         - name: MSSQL_SA_PASSWORD
  25 │           value: Pa55w0rd!
  26 └         - name: MSSQL_PID
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mssql' of StatefulSet 'ag2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 sts30_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mssql
  19 │         image: neajmorshad/sql-server-2022:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: ACCEPT_EULA
  23 │           value: Y
  24 │         - name: MSSQL_SA_PASSWORD
  25 │           value: Pa55w0rd!
  26 └         - name: MSSQL_PID
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mssql' of StatefulSet 'ag2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 sts30_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mssql
  19 │         image: neajmorshad/sql-server-2022:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: ACCEPT_EULA
  23 │           value: Y
  24 │         - name: MSSQL_SA_PASSWORD
  25 │           value: Pa55w0rd!
  26 └         - name: MSSQL_PID
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mssql' of StatefulSet 'ag2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 sts30_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mssql
  19 │         image: neajmorshad/sql-server-2022:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: ACCEPT_EULA
  23 │           value: Y
  24 │         - name: MSSQL_SA_PASSWORD
  25 │           value: Pa55w0rd!
  26 └         - name: MSSQL_PID
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mssql' of StatefulSet 'ag2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 sts30_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mssql
  19 │         image: neajmorshad/sql-server-2022:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: ACCEPT_EULA
  23 │           value: Y
  24 │         - name: MSSQL_SA_PASSWORD
  25 │           value: Pa55w0rd!
  26 └         - name: MSSQL_PID
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mssql' of StatefulSet 'ag2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 sts30_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mssql
  19 │         image: neajmorshad/sql-server-2022:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: ACCEPT_EULA
  23 │           value: Y
  24 │         - name: MSSQL_SA_PASSWORD
  25 │           value: Pa55w0rd!
  26 └         - name: MSSQL_PID
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mssql' of StatefulSet 'ag2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 sts30_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mssql
  19 │         image: neajmorshad/sql-server-2022:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: ACCEPT_EULA
  23 │           value: Y
  24 │         - name: MSSQL_SA_PASSWORD
  25 │           value: Pa55w0rd!
  26 └         - name: MSSQL_PID
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mssql' of StatefulSet 'ag2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 sts30_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mssql
  19 │         image: neajmorshad/sql-server-2022:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: ACCEPT_EULA
  23 │           value: Y
  24 │         - name: MSSQL_SA_PASSWORD
  25 │           value: Pa55w0rd!
  26 └         - name: MSSQL_PID
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 sts30_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mssql
  19 │         image: neajmorshad/sql-server-2022:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: ACCEPT_EULA
  23 │           value: Y
  24 │         - name: MSSQL_SA_PASSWORD
  25 │           value: Pa55w0rd!
  26 └         - name: MSSQL_PID
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mssql" of statefulset "ag2" in "dag" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 sts30_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mssql
  19 │         image: neajmorshad/sql-server-2022:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: ACCEPT_EULA
  23 │           value: Y
  24 │         - name: MSSQL_SA_PASSWORD
  25 │           value: Pa55w0rd!
  26 └         - name: MSSQL_PID
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 sts30_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mssql
  19 │         image: neajmorshad/sql-server-2022:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: ACCEPT_EULA
  23 │           value: Y
  24 │         - name: MSSQL_SA_PASSWORD
  25 │           value: Pa55w0rd!
  26 └         - name: MSSQL_PID
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ag2 in dag namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sts30_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mssql
  19 │         image: neajmorshad/sql-server-2022:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: ACCEPT_EULA
  23 │           value: Y
  24 │         - name: MSSQL_SA_PASSWORD
  25 │           value: Pa55w0rd!
  26 └         - name: MSSQL_PID
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset ag2 in dag namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sts30_1.yaml:17-39
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: mssql
  19 │         image: neajmorshad/sql-server-2022:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: ACCEPT_EULA
  23 │           value: Y
  24 │         - name: MSSQL_SA_PASSWORD
  25 └           value: Pa55w0rd!
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container mssql in statefulset ag2 (namespace: dag) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 sts30_1.yaml:18-39
────────────────────────────────────────
  18 ┌       - name: mssql
  19 │         image: neajmorshad/sql-server-2022:latest
  20 │         imagePullPolicy: IfNotPresent
  21 │         env:
  22 │         - name: ACCEPT_EULA
  23 │           value: Y
  24 │         - name: MSSQL_SA_PASSWORD
  25 │           value: Pa55w0rd!
  26 └         - name: MSSQL_PID
  ..   
────────────────────────────────────────



sts31.yaml (kubernetes)
=======================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of StatefulSet 'web' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 sts31.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: k8s.gcr.io/nginx-slim:0.8
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: web
  23 │         volumeMounts:
  24 │         - name: www
  25 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of StatefulSet 'web' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 sts31.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: k8s.gcr.io/nginx-slim:0.8
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: web
  23 │         volumeMounts:
  24 │         - name: www
  25 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'statefulset' 'web' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 sts31.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: k8s.gcr.io/nginx-slim:0.8
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: web
  23 │         volumeMounts:
  24 │         - name: www
  25 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of StatefulSet 'web' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 sts31.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: k8s.gcr.io/nginx-slim:0.8
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: web
  23 │         volumeMounts:
  24 │         - name: www
  25 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of StatefulSet 'web' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 sts31.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: k8s.gcr.io/nginx-slim:0.8
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: web
  23 │         volumeMounts:
  24 │         - name: www
  25 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of StatefulSet 'web' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 sts31.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: k8s.gcr.io/nginx-slim:0.8
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: web
  23 │         volumeMounts:
  24 │         - name: www
  25 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of StatefulSet 'web' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 sts31.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: k8s.gcr.io/nginx-slim:0.8
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: web
  23 │         volumeMounts:
  24 │         - name: www
  25 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of StatefulSet 'web' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 sts31.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: k8s.gcr.io/nginx-slim:0.8
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: web
  23 │         volumeMounts:
  24 │         - name: www
  25 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of StatefulSet 'web' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 sts31.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: k8s.gcr.io/nginx-slim:0.8
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: web
  23 │         volumeMounts:
  24 │         - name: www
  25 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of StatefulSet 'web' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 sts31.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: k8s.gcr.io/nginx-slim:0.8
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: web
  23 │         volumeMounts:
  24 │         - name: www
  25 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of StatefulSet 'web' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 sts31.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: k8s.gcr.io/nginx-slim:0.8
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: web
  23 │         volumeMounts:
  24 │         - name: www
  25 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 sts31.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: k8s.gcr.io/nginx-slim:0.8
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: web
  23 │         volumeMounts:
  24 │         - name: www
  25 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of statefulset "web" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 sts31.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: k8s.gcr.io/nginx-slim:0.8
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: web
  23 │         volumeMounts:
  24 │         - name: www
  25 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 sts31.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: k8s.gcr.io/nginx-slim:0.8
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: web
  23 │         volumeMounts:
  24 │         - name: www
  25 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset web in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 sts31.yaml:4
────────────────────────────────────────
   4 [   name: web
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): statefulset web in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container web in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sts31.yaml:18-25
────────────────────────────────────────
  18 ┌       - name: nginx
  19 │         image: k8s.gcr.io/nginx-slim:0.8
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: web
  23 │         volumeMounts:
  24 │         - name: www
  25 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset web in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sts31.yaml:16-25
────────────────────────────────────────
  16 ┌       terminationGracePeriodSeconds: 10
  17 │       containers:
  18 │       - name: nginx
  19 │         image: k8s.gcr.io/nginx-slim:0.8
  20 │         ports:
  21 │         - containerPort: 80
  22 │           name: web
  23 │         volumeMounts:
  24 │         - name: www
  25 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────



sts36_1.yaml (kubernetes)
=========================
Tests: 112 (SUCCESSES: 96, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 sts36_1.yaml:21-71
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 │         - containerPort: 7000
  26 │           name: intra-node
  27 │         - containerPort: 7001
  28 │           name: tls-intra-node
  29 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 sts36_1.yaml:21-71
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 │         - containerPort: 7000
  26 │           name: intra-node
  27 │         - containerPort: 7001
  28 │           name: tls-intra-node
  29 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cassandra' of 'statefulset' 'cassandra' in 'k8s-ns' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 sts36_1.yaml:21-71
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 │         - containerPort: 7000
  26 │           name: intra-node
  27 │         - containerPort: 7001
  28 │           name: tls-intra-node
  29 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 sts36_1.yaml:21-71
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 │         - containerPort: 7000
  26 │           name: intra-node
  27 │         - containerPort: 7001
  28 │           name: tls-intra-node
  29 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 sts36_1.yaml:21-71
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 │         - containerPort: 7000
  26 │           name: intra-node
  27 │         - containerPort: 7001
  28 │           name: tls-intra-node
  29 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 sts36_1.yaml:21-71
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 │         - containerPort: 7000
  26 │           name: intra-node
  27 │         - containerPort: 7001
  28 │           name: tls-intra-node
  29 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 sts36_1.yaml:21-71
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 │         - containerPort: 7000
  26 │           name: intra-node
  27 │         - containerPort: 7001
  28 │           name: tls-intra-node
  29 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 sts36_1.yaml:21-71
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 │         - containerPort: 7000
  26 │           name: intra-node
  27 │         - containerPort: 7001
  28 │           name: tls-intra-node
  29 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 sts36_1.yaml:21-71
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 │         - containerPort: 7000
  26 │           name: intra-node
  27 │         - containerPort: 7001
  28 │           name: tls-intra-node
  29 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 sts36_1.yaml:21-71
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 │         - containerPort: 7000
  26 │           name: intra-node
  27 │         - containerPort: 7001
  28 │           name: tls-intra-node
  29 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 sts36_1.yaml:21-71
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 │         - containerPort: 7000
  26 │           name: intra-node
  27 │         - containerPort: 7001
  28 │           name: tls-intra-node
  29 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 sts36_1.yaml:21-71
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 │         - containerPort: 7000
  26 │           name: intra-node
  27 │         - containerPort: 7001
  28 │           name: tls-intra-node
  29 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 sts36_1.yaml:21-71
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 │         - containerPort: 7000
  26 │           name: intra-node
  27 │         - containerPort: 7001
  28 │           name: tls-intra-node
  29 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cassandra" of statefulset "cassandra" in "k8s-ns" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 sts36_1.yaml:21-71
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 │         - containerPort: 7000
  26 │           name: intra-node
  27 │         - containerPort: 7001
  28 │           name: tls-intra-node
  29 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 sts36_1.yaml:21-71
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 │         - containerPort: 7000
  26 │           name: intra-node
  27 │         - containerPort: 7001
  28 │           name: tls-intra-node
  29 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset cassandra in k8s-ns namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sts36_1.yaml:19-71
────────────────────────────────────────
  19 ┌       terminationGracePeriodSeconds: 1800
  20 │       containers:
  21 │       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 │         - containerPort: 7000
  26 │           name: intra-node
  27 └         - containerPort: 7001
  ..   
────────────────────────────────────────



sts3_1.yaml (kubernetes)
========================
Tests: 128 (SUCCESSES: 93, FAILURES: 35)
Failures: 35 (UNKNOWN: 0, LOW: 21, MEDIUM: 9, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of StatefulSet 'web-statefulset' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 sts3_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: 11905510/k21academy:1.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-volume
  23 └           mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'mysql-container' of StatefulSet 'web-statefulset' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 sts3_1.yaml:24-33
────────────────────────────────────────
  24 ┌       - name: mysql-container
  25 │         image: mysql:latest
  26 │         ports:
  27 │         - containerPort: 3306
  28 │         env:
  29 │         - name: MYSQL_ROOT_PASSWORD
  30 │           value: mypassword
  31 │         volumeMounts:
  32 │         - name: mysql-volume
  33 └           mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of StatefulSet 'web-statefulset' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 sts3_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: 11905510/k21academy:1.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-volume
  23 └           mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql-container' of StatefulSet 'web-statefulset' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 sts3_1.yaml:24-33
────────────────────────────────────────
  24 ┌       - name: mysql-container
  25 │         image: mysql:latest
  26 │         ports:
  27 │         - containerPort: 3306
  28 │         env:
  29 │         - name: MYSQL_ROOT_PASSWORD
  30 │           value: mypassword
  31 │         volumeMounts:
  32 │         - name: mysql-volume
  33 └           mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'statefulset' 'web-statefulset' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 sts3_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: 11905510/k21academy:1.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-volume
  23 └           mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql-container' of 'statefulset' 'web-statefulset' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 sts3_1.yaml:24-33
────────────────────────────────────────
  24 ┌       - name: mysql-container
  25 │         image: mysql:latest
  26 │         ports:
  27 │         - containerPort: 3306
  28 │         env:
  29 │         - name: MYSQL_ROOT_PASSWORD
  30 │           value: mypassword
  31 │         volumeMounts:
  32 │         - name: mysql-volume
  33 └           mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of StatefulSet 'web-statefulset' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 sts3_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: 11905510/k21academy:1.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-volume
  23 └           mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql-container' of StatefulSet 'web-statefulset' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 sts3_1.yaml:24-33
────────────────────────────────────────
  24 ┌       - name: mysql-container
  25 │         image: mysql:latest
  26 │         ports:
  27 │         - containerPort: 3306
  28 │         env:
  29 │         - name: MYSQL_ROOT_PASSWORD
  30 │           value: mypassword
  31 │         volumeMounts:
  32 │         - name: mysql-volume
  33 └           mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of StatefulSet 'web-statefulset' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 sts3_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: 11905510/k21academy:1.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-volume
  23 └           mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql-container' of StatefulSet 'web-statefulset' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 sts3_1.yaml:24-33
────────────────────────────────────────
  24 ┌       - name: mysql-container
  25 │         image: mysql:latest
  26 │         ports:
  27 │         - containerPort: 3306
  28 │         env:
  29 │         - name: MYSQL_ROOT_PASSWORD
  30 │           value: mypassword
  31 │         volumeMounts:
  32 │         - name: mysql-volume
  33 └           mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mysql-container' of StatefulSet 'web-statefulset' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 sts3_1.yaml:24-33
────────────────────────────────────────
  24 ┌       - name: mysql-container
  25 │         image: mysql:latest
  26 │         ports:
  27 │         - containerPort: 3306
  28 │         env:
  29 │         - name: MYSQL_ROOT_PASSWORD
  30 │           value: mypassword
  31 │         volumeMounts:
  32 │         - name: mysql-volume
  33 └           mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of StatefulSet 'web-statefulset' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 sts3_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: 11905510/k21academy:1.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-volume
  23 └           mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql-container' of StatefulSet 'web-statefulset' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 sts3_1.yaml:24-33
────────────────────────────────────────
  24 ┌       - name: mysql-container
  25 │         image: mysql:latest
  26 │         ports:
  27 │         - containerPort: 3306
  28 │         env:
  29 │         - name: MYSQL_ROOT_PASSWORD
  30 │           value: mypassword
  31 │         volumeMounts:
  32 │         - name: mysql-volume
  33 └           mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of StatefulSet 'web-statefulset' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 sts3_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: 11905510/k21academy:1.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-volume
  23 └           mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql-container' of StatefulSet 'web-statefulset' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 sts3_1.yaml:24-33
────────────────────────────────────────
  24 ┌       - name: mysql-container
  25 │         image: mysql:latest
  26 │         ports:
  27 │         - containerPort: 3306
  28 │         env:
  29 │         - name: MYSQL_ROOT_PASSWORD
  30 │           value: mypassword
  31 │         volumeMounts:
  32 │         - name: mysql-volume
  33 └           mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of StatefulSet 'web-statefulset' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 sts3_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: 11905510/k21academy:1.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-volume
  23 └           mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql-container' of StatefulSet 'web-statefulset' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 sts3_1.yaml:24-33
────────────────────────────────────────
  24 ┌       - name: mysql-container
  25 │         image: mysql:latest
  26 │         ports:
  27 │         - containerPort: 3306
  28 │         env:
  29 │         - name: MYSQL_ROOT_PASSWORD
  30 │           value: mypassword
  31 │         volumeMounts:
  32 │         - name: mysql-volume
  33 └           mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of StatefulSet 'web-statefulset' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 sts3_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: 11905510/k21academy:1.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-volume
  23 └           mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql-container' of StatefulSet 'web-statefulset' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 sts3_1.yaml:24-33
────────────────────────────────────────
  24 ┌       - name: mysql-container
  25 │         image: mysql:latest
  26 │         ports:
  27 │         - containerPort: 3306
  28 │         env:
  29 │         - name: MYSQL_ROOT_PASSWORD
  30 │           value: mypassword
  31 │         volumeMounts:
  32 │         - name: mysql-volume
  33 └           mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of StatefulSet 'web-statefulset' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 sts3_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: 11905510/k21academy:1.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-volume
  23 └           mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql-container' of StatefulSet 'web-statefulset' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 sts3_1.yaml:24-33
────────────────────────────────────────
  24 ┌       - name: mysql-container
  25 │         image: mysql:latest
  26 │         ports:
  27 │         - containerPort: 3306
  28 │         env:
  29 │         - name: MYSQL_ROOT_PASSWORD
  30 │           value: mypassword
  31 │         volumeMounts:
  32 │         - name: mysql-volume
  33 └           mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of StatefulSet 'web-statefulset' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 sts3_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: 11905510/k21academy:1.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-volume
  23 └           mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql-container' of StatefulSet 'web-statefulset' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 sts3_1.yaml:24-33
────────────────────────────────────────
  24 ┌       - name: mysql-container
  25 │         image: mysql:latest
  26 │         ports:
  27 │         - containerPort: 3306
  28 │         env:
  29 │         - name: MYSQL_ROOT_PASSWORD
  30 │           value: mypassword
  31 │         volumeMounts:
  32 │         - name: mysql-volume
  33 └           mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 sts3_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: 11905510/k21academy:1.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-volume
  23 └           mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 sts3_1.yaml:24-33
────────────────────────────────────────
  24 ┌       - name: mysql-container
  25 │         image: mysql:latest
  26 │         ports:
  27 │         - containerPort: 3306
  28 │         env:
  29 │         - name: MYSQL_ROOT_PASSWORD
  30 │           value: mypassword
  31 │         volumeMounts:
  32 │         - name: mysql-volume
  33 └           mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of statefulset "web-statefulset" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 sts3_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: 11905510/k21academy:1.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-volume
  23 └           mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql-container" of statefulset "web-statefulset" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 sts3_1.yaml:24-33
────────────────────────────────────────
  24 ┌       - name: mysql-container
  25 │         image: mysql:latest
  26 │         ports:
  27 │         - containerPort: 3306
  28 │         env:
  29 │         - name: MYSQL_ROOT_PASSWORD
  30 │           value: mypassword
  31 │         volumeMounts:
  32 │         - name: mysql-volume
  33 └           mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 sts3_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: 11905510/k21academy:1.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-volume
  23 └           mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 sts3_1.yaml:24-33
────────────────────────────────────────
  24 ┌       - name: mysql-container
  25 │         image: mysql:latest
  26 │         ports:
  27 │         - containerPort: 3306
  28 │         env:
  29 │         - name: MYSQL_ROOT_PASSWORD
  30 │           value: mypassword
  31 │         volumeMounts:
  32 │         - name: mysql-volume
  33 └           mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset web-statefulset in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 sts3_1.yaml:4
────────────────────────────────────────
   4 [   name: web-statefulset
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): statefulset web-statefulset in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container web-statefulset in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sts3_1.yaml:24-33
────────────────────────────────────────
  24 ┌       - name: mysql-container
  25 │         image: mysql:latest
  26 │         ports:
  27 │         - containerPort: 3306
  28 │         env:
  29 │         - name: MYSQL_ROOT_PASSWORD
  30 │           value: mypassword
  31 │         volumeMounts:
  32 │         - name: mysql-volume
  33 └           mountPath: /var/lib/mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container web-statefulset in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sts3_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: 11905510/k21academy:1.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-volume
  23 └           mountPath: /var/www/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset web-statefulset in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sts3_1.yaml:16-33
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: my-container
  18 │         image: 11905510/k21academy:1.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-volume
  23 │           mountPath: /var/www/html
  24 └       - name: mysql-container
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container my-container in statefulset web-statefulset (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 sts3_1.yaml:17-23
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: 11905510/k21academy:1.0
  19 │         ports:
  20 │         - containerPort: 80
  21 │         volumeMounts:
  22 │         - name: nginx-volume
  23 └           mountPath: /var/www/html
────────────────────────────────────────



sts40.yaml (kubernetes)
=======================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of StatefulSet 'my-sts' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 sts40.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of StatefulSet 'my-sts' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 sts40.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'statefulset' 'my-sts' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 sts40.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of StatefulSet 'my-sts' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 sts40.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of StatefulSet 'my-sts' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 sts40.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-container' of StatefulSet 'my-sts' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 sts40.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of StatefulSet 'my-sts' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 sts40.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of StatefulSet 'my-sts' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 sts40.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of StatefulSet 'my-sts' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 sts40.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of StatefulSet 'my-sts' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 sts40.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of StatefulSet 'my-sts' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 sts40.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of StatefulSet 'my-sts' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 sts40.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 sts40.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of statefulset "my-sts" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 sts40.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 sts40.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset my-sts in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 sts40.yaml:4-6
────────────────────────────────────────
   4 ┌   name: my-sts
   5 │   labels:
   6 └     app: xyz-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-sts in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sts40.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset my-sts in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sts40.yaml:17-24
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────



sts41_1.yaml (kubernetes)
=========================
Tests: 112 (SUCCESSES: 101, FAILURES: 11)
Failures: 11 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 1, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'openobserve' of StatefulSet 'openobserve' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 sts41_1.yaml:27-51
────────────────────────────────────────
  27 ┌       - name: openobserve
  28 │         image: public.ecr.aws/zinclabs/openobserve:latest
  29 │         env:
  30 │         - name: ZO_ROOT_USER_EMAIL
  31 │           value: root@example.com
  32 │         - name: ZO_ROOT_USER_PASSWORD
  33 │           value: Complexpass#123
  34 │         - name: ZO_DATA_DIR
  35 └           value: /data
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'openobserve' of StatefulSet 'openobserve' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 sts41_1.yaml:27-51
────────────────────────────────────────
  27 ┌       - name: openobserve
  28 │         image: public.ecr.aws/zinclabs/openobserve:latest
  29 │         env:
  30 │         - name: ZO_ROOT_USER_EMAIL
  31 │           value: root@example.com
  32 │         - name: ZO_ROOT_USER_PASSWORD
  33 │           value: Complexpass#123
  34 │         - name: ZO_DATA_DIR
  35 └           value: /data
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'openobserve' of 'statefulset' 'openobserve' in 'openobserve' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 sts41_1.yaml:27-51
────────────────────────────────────────
  27 ┌       - name: openobserve
  28 │         image: public.ecr.aws/zinclabs/openobserve:latest
  29 │         env:
  30 │         - name: ZO_ROOT_USER_EMAIL
  31 │           value: root@example.com
  32 │         - name: ZO_ROOT_USER_PASSWORD
  33 │           value: Complexpass#123
  34 │         - name: ZO_DATA_DIR
  35 └           value: /data
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'openobserve' of StatefulSet 'openobserve' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 sts41_1.yaml:27-51
────────────────────────────────────────
  27 ┌       - name: openobserve
  28 │         image: public.ecr.aws/zinclabs/openobserve:latest
  29 │         env:
  30 │         - name: ZO_ROOT_USER_EMAIL
  31 │           value: root@example.com
  32 │         - name: ZO_ROOT_USER_PASSWORD
  33 │           value: Complexpass#123
  34 │         - name: ZO_DATA_DIR
  35 └           value: /data
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'openobserve' of StatefulSet 'openobserve' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 sts41_1.yaml:27-51
────────────────────────────────────────
  27 ┌       - name: openobserve
  28 │         image: public.ecr.aws/zinclabs/openobserve:latest
  29 │         env:
  30 │         - name: ZO_ROOT_USER_EMAIL
  31 │           value: root@example.com
  32 │         - name: ZO_ROOT_USER_PASSWORD
  33 │           value: Complexpass#123
  34 │         - name: ZO_DATA_DIR
  35 └           value: /data
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'openobserve' of StatefulSet 'openobserve' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 sts41_1.yaml:27-51
────────────────────────────────────────
  27 ┌       - name: openobserve
  28 │         image: public.ecr.aws/zinclabs/openobserve:latest
  29 │         env:
  30 │         - name: ZO_ROOT_USER_EMAIL
  31 │           value: root@example.com
  32 │         - name: ZO_ROOT_USER_PASSWORD
  33 │           value: Complexpass#123
  34 │         - name: ZO_DATA_DIR
  35 └           value: /data
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'openobserve' of StatefulSet 'openobserve' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 sts41_1.yaml:27-51
────────────────────────────────────────
  27 ┌       - name: openobserve
  28 │         image: public.ecr.aws/zinclabs/openobserve:latest
  29 │         env:
  30 │         - name: ZO_ROOT_USER_EMAIL
  31 │           value: root@example.com
  32 │         - name: ZO_ROOT_USER_PASSWORD
  33 │           value: Complexpass#123
  34 │         - name: ZO_DATA_DIR
  35 └           value: /data
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 sts41_1.yaml:27-51
────────────────────────────────────────
  27 ┌       - name: openobserve
  28 │         image: public.ecr.aws/zinclabs/openobserve:latest
  29 │         env:
  30 │         - name: ZO_ROOT_USER_EMAIL
  31 │           value: root@example.com
  32 │         - name: ZO_ROOT_USER_PASSWORD
  33 │           value: Complexpass#123
  34 │         - name: ZO_DATA_DIR
  35 └           value: /data
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "openobserve" of statefulset "openobserve" in "openobserve" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 sts41_1.yaml:27-51
────────────────────────────────────────
  27 ┌       - name: openobserve
  28 │         image: public.ecr.aws/zinclabs/openobserve:latest
  29 │         env:
  30 │         - name: ZO_ROOT_USER_EMAIL
  31 │           value: root@example.com
  32 │         - name: ZO_ROOT_USER_PASSWORD
  33 │           value: Complexpass#123
  34 │         - name: ZO_DATA_DIR
  35 └           value: /data
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 sts41_1.yaml:27-51
────────────────────────────────────────
  27 ┌       - name: openobserve
  28 │         image: public.ecr.aws/zinclabs/openobserve:latest
  29 │         env:
  30 │         - name: ZO_ROOT_USER_EMAIL
  31 │           value: root@example.com
  32 │         - name: ZO_ROOT_USER_PASSWORD
  33 │           value: Complexpass#123
  34 │         - name: ZO_DATA_DIR
  35 └           value: /data
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container openobserve in statefulset openobserve (namespace: openobserve) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 sts41_1.yaml:27-51
────────────────────────────────────────
  27 ┌       - name: openobserve
  28 │         image: public.ecr.aws/zinclabs/openobserve:latest
  29 │         env:
  30 │         - name: ZO_ROOT_USER_EMAIL
  31 │           value: root@example.com
  32 │         - name: ZO_ROOT_USER_PASSWORD
  33 │           value: Complexpass#123
  34 │         - name: ZO_DATA_DIR
  35 └           value: /data
  ..   
────────────────────────────────────────



sts42_1.yaml (kubernetes)
=========================
Tests: 112 (SUCCESSES: 96, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 sts42_1.yaml:21-71
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 │         - containerPort: 7000
  26 │           name: intra-node
  27 │         - containerPort: 7001
  28 │           name: tls-intra-node
  29 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 sts42_1.yaml:21-71
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 │         - containerPort: 7000
  26 │           name: intra-node
  27 │         - containerPort: 7001
  28 │           name: tls-intra-node
  29 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'cassandra' of 'statefulset' 'cassandra' in 'learning' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 sts42_1.yaml:21-71
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 │         - containerPort: 7000
  26 │           name: intra-node
  27 │         - containerPort: 7001
  28 │           name: tls-intra-node
  29 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 sts42_1.yaml:21-71
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 │         - containerPort: 7000
  26 │           name: intra-node
  27 │         - containerPort: 7001
  28 │           name: tls-intra-node
  29 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 sts42_1.yaml:21-71
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 │         - containerPort: 7000
  26 │           name: intra-node
  27 │         - containerPort: 7001
  28 │           name: tls-intra-node
  29 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 sts42_1.yaml:21-71
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 │         - containerPort: 7000
  26 │           name: intra-node
  27 │         - containerPort: 7001
  28 │           name: tls-intra-node
  29 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 sts42_1.yaml:21-71
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 │         - containerPort: 7000
  26 │           name: intra-node
  27 │         - containerPort: 7001
  28 │           name: tls-intra-node
  29 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 sts42_1.yaml:21-71
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 │         - containerPort: 7000
  26 │           name: intra-node
  27 │         - containerPort: 7001
  28 │           name: tls-intra-node
  29 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 sts42_1.yaml:21-71
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 │         - containerPort: 7000
  26 │           name: intra-node
  27 │         - containerPort: 7001
  28 │           name: tls-intra-node
  29 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 sts42_1.yaml:21-71
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 │         - containerPort: 7000
  26 │           name: intra-node
  27 │         - containerPort: 7001
  28 │           name: tls-intra-node
  29 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'cassandra' of StatefulSet 'cassandra' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 sts42_1.yaml:21-71
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 │         - containerPort: 7000
  26 │           name: intra-node
  27 │         - containerPort: 7001
  28 │           name: tls-intra-node
  29 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0022 (MEDIUM): Container 'cassandra' of StatefulSet 'cassandra' should not set 'securityContext.capabilities.add'
════════════════════════════════════════
According to pod security standard 'Capabilities', capabilities beyond the default set must not be added.

See https://avd.aquasec.com/misconfig/ksv022
────────────────────────────────────────
 sts42_1.yaml:21-71
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 │         - containerPort: 7000
  26 │           name: intra-node
  27 │         - containerPort: 7001
  28 │           name: tls-intra-node
  29 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 sts42_1.yaml:21-71
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 │         - containerPort: 7000
  26 │           name: intra-node
  27 │         - containerPort: 7001
  28 │           name: tls-intra-node
  29 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "cassandra" of statefulset "cassandra" in "learning" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 sts42_1.yaml:21-71
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 │         - containerPort: 7000
  26 │           name: intra-node
  27 │         - containerPort: 7001
  28 │           name: tls-intra-node
  29 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 sts42_1.yaml:21-71
────────────────────────────────────────
  21 ┌       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 │         - containerPort: 7000
  26 │           name: intra-node
  27 │         - containerPort: 7001
  28 │           name: tls-intra-node
  29 └         - containerPort: 7199
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset cassandra in learning namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sts42_1.yaml:19-71
────────────────────────────────────────
  19 ┌       terminationGracePeriodSeconds: 1800
  20 │       containers:
  21 │       - name: cassandra
  22 │         image: gcr.io/google-samples/cassandra:v13
  23 │         imagePullPolicy: Always
  24 │         ports:
  25 │         - containerPort: 7000
  26 │           name: intra-node
  27 └         - containerPort: 7001
  ..   
────────────────────────────────────────



sts44.yaml (kubernetes)
=======================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of StatefulSet 'my-sts' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 sts44.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of StatefulSet 'my-sts' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 sts44.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'statefulset' 'my-sts' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 sts44.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of StatefulSet 'my-sts' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 sts44.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of StatefulSet 'my-sts' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 sts44.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-container' of StatefulSet 'my-sts' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 sts44.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of StatefulSet 'my-sts' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 sts44.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of StatefulSet 'my-sts' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 sts44.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of StatefulSet 'my-sts' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 sts44.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of StatefulSet 'my-sts' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 sts44.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of StatefulSet 'my-sts' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 sts44.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of StatefulSet 'my-sts' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 sts44.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 sts44.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of statefulset "my-sts" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 sts44.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 sts44.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset my-sts in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 sts44.yaml:4-6
────────────────────────────────────────
   4 ┌   name: my-sts
   5 │   labels:
   6 └     app: xyz-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-sts in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sts44.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset my-sts in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sts44.yaml:17-24
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────



sts45_1.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of StatefulSet 'web' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 sts45_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: web
  22 │         volumeMounts:
  23 │         - mountPath: /usr/share/nginx/html
  24 └           name: www
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of StatefulSet 'web' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 sts45_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: web
  22 │         volumeMounts:
  23 │         - mountPath: /usr/share/nginx/html
  24 └           name: www
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'statefulset' 'web' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 sts45_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: web
  22 │         volumeMounts:
  23 │         - mountPath: /usr/share/nginx/html
  24 └           name: www
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of StatefulSet 'web' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 sts45_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: web
  22 │         volumeMounts:
  23 │         - mountPath: /usr/share/nginx/html
  24 └           name: www
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of StatefulSet 'web' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 sts45_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: web
  22 │         volumeMounts:
  23 │         - mountPath: /usr/share/nginx/html
  24 └           name: www
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx' of StatefulSet 'web' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 sts45_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: web
  22 │         volumeMounts:
  23 │         - mountPath: /usr/share/nginx/html
  24 └           name: www
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of StatefulSet 'web' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 sts45_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: web
  22 │         volumeMounts:
  23 │         - mountPath: /usr/share/nginx/html
  24 └           name: www
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of StatefulSet 'web' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 sts45_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: web
  22 │         volumeMounts:
  23 │         - mountPath: /usr/share/nginx/html
  24 └           name: www
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of StatefulSet 'web' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 sts45_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: web
  22 │         volumeMounts:
  23 │         - mountPath: /usr/share/nginx/html
  24 └           name: www
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of StatefulSet 'web' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 sts45_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: web
  22 │         volumeMounts:
  23 │         - mountPath: /usr/share/nginx/html
  24 └           name: www
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of StatefulSet 'web' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 sts45_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: web
  22 │         volumeMounts:
  23 │         - mountPath: /usr/share/nginx/html
  24 └           name: www
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of StatefulSet 'web' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 sts45_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: web
  22 │         volumeMounts:
  23 │         - mountPath: /usr/share/nginx/html
  24 └           name: www
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 sts45_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: web
  22 │         volumeMounts:
  23 │         - mountPath: /usr/share/nginx/html
  24 └           name: www
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of statefulset "web" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 sts45_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: web
  22 │         volumeMounts:
  23 │         - mountPath: /usr/share/nginx/html
  24 └           name: www
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 sts45_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: web
  22 │         volumeMounts:
  23 │         - mountPath: /usr/share/nginx/html
  24 └           name: www
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset web in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 sts45_1.yaml:4
────────────────────────────────────────
   4 [   name: web
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): statefulset web in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container web in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sts45_1.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: web
  22 │         volumeMounts:
  23 │         - mountPath: /usr/share/nginx/html
  24 └           name: www
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset web in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sts45_1.yaml:16-27
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: nginx
  18 │         image: nginx
  19 │         ports:
  20 │         - containerPort: 80
  21 │           name: web
  22 │         volumeMounts:
  23 │         - mountPath: /usr/share/nginx/html
  24 └           name: www
  ..   
────────────────────────────────────────



sts46.yaml (kubernetes)
=======================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'jackett' of StatefulSet 'jackett' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 sts46.yaml:27-45
────────────────────────────────────────
  27 ┌       - name: jackett
  28 │         image: lscr.io/linuxserver/jackett:latest
  29 │         ports:
  30 │         - containerPort: 9117
  31 │           name: jackett
  32 │         volumeMounts:
  33 │         - name: data
  34 │           mountPath: /downloads
  35 └         - name: data
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'jackett' of StatefulSet 'jackett' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 sts46.yaml:27-45
────────────────────────────────────────
  27 ┌       - name: jackett
  28 │         image: lscr.io/linuxserver/jackett:latest
  29 │         ports:
  30 │         - containerPort: 9117
  31 │           name: jackett
  32 │         volumeMounts:
  33 │         - name: data
  34 │           mountPath: /downloads
  35 └         - name: data
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'jackett' of 'statefulset' 'jackett' in 'jackett' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 sts46.yaml:27-45
────────────────────────────────────────
  27 ┌       - name: jackett
  28 │         image: lscr.io/linuxserver/jackett:latest
  29 │         ports:
  30 │         - containerPort: 9117
  31 │           name: jackett
  32 │         volumeMounts:
  33 │         - name: data
  34 │           mountPath: /downloads
  35 └         - name: data
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'jackett' of StatefulSet 'jackett' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 sts46.yaml:27-45
────────────────────────────────────────
  27 ┌       - name: jackett
  28 │         image: lscr.io/linuxserver/jackett:latest
  29 │         ports:
  30 │         - containerPort: 9117
  31 │           name: jackett
  32 │         volumeMounts:
  33 │         - name: data
  34 │           mountPath: /downloads
  35 └         - name: data
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'jackett' of StatefulSet 'jackett' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 sts46.yaml:27-45
────────────────────────────────────────
  27 ┌       - name: jackett
  28 │         image: lscr.io/linuxserver/jackett:latest
  29 │         ports:
  30 │         - containerPort: 9117
  31 │           name: jackett
  32 │         volumeMounts:
  33 │         - name: data
  34 │           mountPath: /downloads
  35 └         - name: data
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'jackett' of StatefulSet 'jackett' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 sts46.yaml:27-45
────────────────────────────────────────
  27 ┌       - name: jackett
  28 │         image: lscr.io/linuxserver/jackett:latest
  29 │         ports:
  30 │         - containerPort: 9117
  31 │           name: jackett
  32 │         volumeMounts:
  33 │         - name: data
  34 │           mountPath: /downloads
  35 └         - name: data
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'jackett' of StatefulSet 'jackett' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 sts46.yaml:27-45
────────────────────────────────────────
  27 ┌       - name: jackett
  28 │         image: lscr.io/linuxserver/jackett:latest
  29 │         ports:
  30 │         - containerPort: 9117
  31 │           name: jackett
  32 │         volumeMounts:
  33 │         - name: data
  34 │           mountPath: /downloads
  35 └         - name: data
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'jackett' of StatefulSet 'jackett' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 sts46.yaml:27-45
────────────────────────────────────────
  27 ┌       - name: jackett
  28 │         image: lscr.io/linuxserver/jackett:latest
  29 │         ports:
  30 │         - containerPort: 9117
  31 │           name: jackett
  32 │         volumeMounts:
  33 │         - name: data
  34 │           mountPath: /downloads
  35 └         - name: data
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'jackett' of StatefulSet 'jackett' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 sts46.yaml:27-45
────────────────────────────────────────
  27 ┌       - name: jackett
  28 │         image: lscr.io/linuxserver/jackett:latest
  29 │         ports:
  30 │         - containerPort: 9117
  31 │           name: jackett
  32 │         volumeMounts:
  33 │         - name: data
  34 │           mountPath: /downloads
  35 └         - name: data
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'jackett' of StatefulSet 'jackett' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 sts46.yaml:27-45
────────────────────────────────────────
  27 ┌       - name: jackett
  28 │         image: lscr.io/linuxserver/jackett:latest
  29 │         ports:
  30 │         - containerPort: 9117
  31 │           name: jackett
  32 │         volumeMounts:
  33 │         - name: data
  34 │           mountPath: /downloads
  35 └         - name: data
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'jackett' of StatefulSet 'jackett' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 sts46.yaml:27-45
────────────────────────────────────────
  27 ┌       - name: jackett
  28 │         image: lscr.io/linuxserver/jackett:latest
  29 │         ports:
  30 │         - containerPort: 9117
  31 │           name: jackett
  32 │         volumeMounts:
  33 │         - name: data
  34 │           mountPath: /downloads
  35 └         - name: data
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'jackett' of StatefulSet 'jackett' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 sts46.yaml:27-45
────────────────────────────────────────
  27 ┌       - name: jackett
  28 │         image: lscr.io/linuxserver/jackett:latest
  29 │         ports:
  30 │         - containerPort: 9117
  31 │           name: jackett
  32 │         volumeMounts:
  33 │         - name: data
  34 │           mountPath: /downloads
  35 └         - name: data
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 sts46.yaml:27-45
────────────────────────────────────────
  27 ┌       - name: jackett
  28 │         image: lscr.io/linuxserver/jackett:latest
  29 │         ports:
  30 │         - containerPort: 9117
  31 │           name: jackett
  32 │         volumeMounts:
  33 │         - name: data
  34 │           mountPath: /downloads
  35 └         - name: data
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "jackett" of statefulset "jackett" in "jackett" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 sts46.yaml:27-45
────────────────────────────────────────
  27 ┌       - name: jackett
  28 │         image: lscr.io/linuxserver/jackett:latest
  29 │         ports:
  30 │         - containerPort: 9117
  31 │           name: jackett
  32 │         volumeMounts:
  33 │         - name: data
  34 │           mountPath: /downloads
  35 └         - name: data
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 sts46.yaml:27-45
────────────────────────────────────────
  27 ┌       - name: jackett
  28 │         image: lscr.io/linuxserver/jackett:latest
  29 │         ports:
  30 │         - containerPort: 9117
  31 │           name: jackett
  32 │         volumeMounts:
  33 │         - name: data
  34 │           mountPath: /downloads
  35 └         - name: data
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container jackett in jackett namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sts46.yaml:27-45
────────────────────────────────────────
  27 ┌       - name: jackett
  28 │         image: lscr.io/linuxserver/jackett:latest
  29 │         ports:
  30 │         - containerPort: 9117
  31 │           name: jackett
  32 │         volumeMounts:
  33 │         - name: data
  34 │           mountPath: /downloads
  35 └         - name: data
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset jackett in jackett namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sts46.yaml:17-45
────────────────────────────────────────
  17 ┌       affinity:
  18 │         nodeAffinity:
  19 │           preferredDuringSchedulingIgnoredDuringExecution:
  20 │             - weight: 100
  21 │               preference:
  22 │                 matchExpressions:
  23 │                   - key: node-role.kubernetes.io/control-plane
  24 │                     operator: DoesNotExist
  25 └       terminationGracePeriodSeconds: 10
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container jackett in statefulset jackett (namespace: jackett) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 sts46.yaml:27-45
────────────────────────────────────────
  27 ┌       - name: jackett
  28 │         image: lscr.io/linuxserver/jackett:latest
  29 │         ports:
  30 │         - containerPort: 9117
  31 │           name: jackett
  32 │         volumeMounts:
  33 │         - name: data
  34 │           mountPath: /downloads
  35 └         - name: data
  ..   
────────────────────────────────────────



sts48.yaml (kubernetes)
=======================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of StatefulSet 'my-sts' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 sts48.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of StatefulSet 'my-sts' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 sts48.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'statefulset' 'my-sts' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 sts48.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of StatefulSet 'my-sts' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 sts48.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of StatefulSet 'my-sts' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 sts48.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-container' of StatefulSet 'my-sts' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 sts48.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of StatefulSet 'my-sts' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 sts48.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of StatefulSet 'my-sts' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 sts48.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of StatefulSet 'my-sts' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 sts48.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of StatefulSet 'my-sts' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 sts48.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of StatefulSet 'my-sts' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 sts48.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of StatefulSet 'my-sts' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 sts48.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 sts48.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of statefulset "my-sts" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 sts48.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 sts48.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset my-sts in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 sts48.yaml:4-6
────────────────────────────────────────
   4 ┌   name: my-sts
   5 │   labels:
   6 └     app: xyz-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-sts in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sts48.yaml:18-24
────────────────────────────────────────
  18 ┌         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset my-sts in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sts48.yaml:17-24
────────────────────────────────────────
  17 ┌       containers:
  18 │         - name: my-container
  19 │           image: mysql
  20 │           ports:
  21 │             - containerPort: 3306
  22 │           env:
  23 │           - name: MYSQL_ROOT_PASSWORD
  24 └             value: redhat
────────────────────────────────────────



sts5.yaml (kubernetes)
======================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'rethinkdb-sts' of StatefulSet 'rethinkdb-sts' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 sts5.yaml:19-26
────────────────────────────────────────
  19 ┌         - image: rethinkdb:latest
  20 │           name: rethinkdb-sts
  21 │           ports:
  22 │             - containerPort: 28015
  23 │             - containerPort: 29015
  24 │           volumeMounts:
  25 │             - name: data
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'rethinkdb-sts' of StatefulSet 'rethinkdb-sts' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 sts5.yaml:19-26
────────────────────────────────────────
  19 ┌         - image: rethinkdb:latest
  20 │           name: rethinkdb-sts
  21 │           ports:
  22 │             - containerPort: 28015
  23 │             - containerPort: 29015
  24 │           volumeMounts:
  25 │             - name: data
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'rethinkdb-sts' of 'statefulset' 'rethinkdb-sts' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 sts5.yaml:19-26
────────────────────────────────────────
  19 ┌         - image: rethinkdb:latest
  20 │           name: rethinkdb-sts
  21 │           ports:
  22 │             - containerPort: 28015
  23 │             - containerPort: 29015
  24 │           volumeMounts:
  25 │             - name: data
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'rethinkdb-sts' of StatefulSet 'rethinkdb-sts' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 sts5.yaml:19-26
────────────────────────────────────────
  19 ┌         - image: rethinkdb:latest
  20 │           name: rethinkdb-sts
  21 │           ports:
  22 │             - containerPort: 28015
  23 │             - containerPort: 29015
  24 │           volumeMounts:
  25 │             - name: data
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'rethinkdb-sts' of StatefulSet 'rethinkdb-sts' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 sts5.yaml:19-26
────────────────────────────────────────
  19 ┌         - image: rethinkdb:latest
  20 │           name: rethinkdb-sts
  21 │           ports:
  22 │             - containerPort: 28015
  23 │             - containerPort: 29015
  24 │           volumeMounts:
  25 │             - name: data
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'rethinkdb-sts' of StatefulSet 'rethinkdb-sts' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 sts5.yaml:19-26
────────────────────────────────────────
  19 ┌         - image: rethinkdb:latest
  20 │           name: rethinkdb-sts
  21 │           ports:
  22 │             - containerPort: 28015
  23 │             - containerPort: 29015
  24 │           volumeMounts:
  25 │             - name: data
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'rethinkdb-sts' of StatefulSet 'rethinkdb-sts' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 sts5.yaml:19-26
────────────────────────────────────────
  19 ┌         - image: rethinkdb:latest
  20 │           name: rethinkdb-sts
  21 │           ports:
  22 │             - containerPort: 28015
  23 │             - containerPort: 29015
  24 │           volumeMounts:
  25 │             - name: data
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'rethinkdb-sts' of StatefulSet 'rethinkdb-sts' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 sts5.yaml:19-26
────────────────────────────────────────
  19 ┌         - image: rethinkdb:latest
  20 │           name: rethinkdb-sts
  21 │           ports:
  22 │             - containerPort: 28015
  23 │             - containerPort: 29015
  24 │           volumeMounts:
  25 │             - name: data
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'rethinkdb-sts' of StatefulSet 'rethinkdb-sts' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 sts5.yaml:19-26
────────────────────────────────────────
  19 ┌         - image: rethinkdb:latest
  20 │           name: rethinkdb-sts
  21 │           ports:
  22 │             - containerPort: 28015
  23 │             - containerPort: 29015
  24 │           volumeMounts:
  25 │             - name: data
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'rethinkdb-sts' of StatefulSet 'rethinkdb-sts' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 sts5.yaml:19-26
────────────────────────────────────────
  19 ┌         - image: rethinkdb:latest
  20 │           name: rethinkdb-sts
  21 │           ports:
  22 │             - containerPort: 28015
  23 │             - containerPort: 29015
  24 │           volumeMounts:
  25 │             - name: data
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'rethinkdb-sts' of StatefulSet 'rethinkdb-sts' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 sts5.yaml:19-26
────────────────────────────────────────
  19 ┌         - image: rethinkdb:latest
  20 │           name: rethinkdb-sts
  21 │           ports:
  22 │             - containerPort: 28015
  23 │             - containerPort: 29015
  24 │           volumeMounts:
  25 │             - name: data
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'rethinkdb-sts' of StatefulSet 'rethinkdb-sts' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 sts5.yaml:19-26
────────────────────────────────────────
  19 ┌         - image: rethinkdb:latest
  20 │           name: rethinkdb-sts
  21 │           ports:
  22 │             - containerPort: 28015
  23 │             - containerPort: 29015
  24 │           volumeMounts:
  25 │             - name: data
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 sts5.yaml:19-26
────────────────────────────────────────
  19 ┌         - image: rethinkdb:latest
  20 │           name: rethinkdb-sts
  21 │           ports:
  22 │             - containerPort: 28015
  23 │             - containerPort: 29015
  24 │           volumeMounts:
  25 │             - name: data
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "rethinkdb-sts" of statefulset "rethinkdb-sts" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 sts5.yaml:19-26
────────────────────────────────────────
  19 ┌         - image: rethinkdb:latest
  20 │           name: rethinkdb-sts
  21 │           ports:
  22 │             - containerPort: 28015
  23 │             - containerPort: 29015
  24 │           volumeMounts:
  25 │             - name: data
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 sts5.yaml:19-26
────────────────────────────────────────
  19 ┌         - image: rethinkdb:latest
  20 │           name: rethinkdb-sts
  21 │           ports:
  22 │             - containerPort: 28015
  23 │             - containerPort: 29015
  24 │           volumeMounts:
  25 │             - name: data
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset rethinkdb-sts in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 sts5.yaml:4-6
────────────────────────────────────────
   4 ┌   name: rethinkdb-sts
   5 │   labels:
   6 └     app: rethinkdb-sts
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container rethinkdb-sts in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sts5.yaml:19-26
────────────────────────────────────────
  19 ┌         - image: rethinkdb:latest
  20 │           name: rethinkdb-sts
  21 │           ports:
  22 │             - containerPort: 28015
  23 │             - containerPort: 29015
  24 │           volumeMounts:
  25 │             - name: data
  26 └               mountPath: /data
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset rethinkdb-sts in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sts5.yaml:18-30
────────────────────────────────────────
  18 ┌       containers:
  19 │         - image: rethinkdb:latest
  20 │           name: rethinkdb-sts
  21 │           ports:
  22 │             - containerPort: 28015
  23 │             - containerPort: 29015
  24 │           volumeMounts:
  25 │             - name: data
  26 └               mountPath: /data
  ..   
────────────────────────────────────────



sts7.yaml (kubernetes)
======================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of StatefulSet 'web' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 sts7.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: registry.k8s.io/nginx-slim:0.8
  21 │         ports:
  22 │         - containerPort: 80
  23 │           name: web
  24 │         volumeMounts:
  25 │         - name: www
  26 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of StatefulSet 'web' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 sts7.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: registry.k8s.io/nginx-slim:0.8
  21 │         ports:
  22 │         - containerPort: 80
  23 │           name: web
  24 │         volumeMounts:
  25 │         - name: www
  26 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'statefulset' 'web' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 sts7.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: registry.k8s.io/nginx-slim:0.8
  21 │         ports:
  22 │         - containerPort: 80
  23 │           name: web
  24 │         volumeMounts:
  25 │         - name: www
  26 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of StatefulSet 'web' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 sts7.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: registry.k8s.io/nginx-slim:0.8
  21 │         ports:
  22 │         - containerPort: 80
  23 │           name: web
  24 │         volumeMounts:
  25 │         - name: www
  26 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of StatefulSet 'web' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 sts7.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: registry.k8s.io/nginx-slim:0.8
  21 │         ports:
  22 │         - containerPort: 80
  23 │           name: web
  24 │         volumeMounts:
  25 │         - name: www
  26 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of StatefulSet 'web' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 sts7.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: registry.k8s.io/nginx-slim:0.8
  21 │         ports:
  22 │         - containerPort: 80
  23 │           name: web
  24 │         volumeMounts:
  25 │         - name: www
  26 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of StatefulSet 'web' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 sts7.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: registry.k8s.io/nginx-slim:0.8
  21 │         ports:
  22 │         - containerPort: 80
  23 │           name: web
  24 │         volumeMounts:
  25 │         - name: www
  26 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of StatefulSet 'web' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 sts7.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: registry.k8s.io/nginx-slim:0.8
  21 │         ports:
  22 │         - containerPort: 80
  23 │           name: web
  24 │         volumeMounts:
  25 │         - name: www
  26 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of StatefulSet 'web' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 sts7.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: registry.k8s.io/nginx-slim:0.8
  21 │         ports:
  22 │         - containerPort: 80
  23 │           name: web
  24 │         volumeMounts:
  25 │         - name: www
  26 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of StatefulSet 'web' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 sts7.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: registry.k8s.io/nginx-slim:0.8
  21 │         ports:
  22 │         - containerPort: 80
  23 │           name: web
  24 │         volumeMounts:
  25 │         - name: www
  26 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of StatefulSet 'web' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 sts7.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: registry.k8s.io/nginx-slim:0.8
  21 │         ports:
  22 │         - containerPort: 80
  23 │           name: web
  24 │         volumeMounts:
  25 │         - name: www
  26 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 sts7.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: registry.k8s.io/nginx-slim:0.8
  21 │         ports:
  22 │         - containerPort: 80
  23 │           name: web
  24 │         volumeMounts:
  25 │         - name: www
  26 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of statefulset "web" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 sts7.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: registry.k8s.io/nginx-slim:0.8
  21 │         ports:
  22 │         - containerPort: 80
  23 │           name: web
  24 │         volumeMounts:
  25 │         - name: www
  26 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 sts7.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: registry.k8s.io/nginx-slim:0.8
  21 │         ports:
  22 │         - containerPort: 80
  23 │           name: web
  24 │         volumeMounts:
  25 │         - name: www
  26 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset web in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 sts7.yaml:4
────────────────────────────────────────
   4 [   name: web
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): statefulset web in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container web in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sts7.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: registry.k8s.io/nginx-slim:0.8
  21 │         ports:
  22 │         - containerPort: 80
  23 │           name: web
  24 │         volumeMounts:
  25 │         - name: www
  26 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset web in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sts7.yaml:17-26
────────────────────────────────────────
  17 ┌       terminationGracePeriodSeconds: 10
  18 │       containers:
  19 │       - name: nginx
  20 │         image: registry.k8s.io/nginx-slim:0.8
  21 │         ports:
  22 │         - containerPort: 80
  23 │           name: web
  24 │         volumeMounts:
  25 │         - name: www
  26 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container nginx in statefulset web (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 sts7.yaml:19-26
────────────────────────────────────────
  19 ┌       - name: nginx
  20 │         image: registry.k8s.io/nginx-slim:0.8
  21 │         ports:
  22 │         - containerPort: 80
  23 │           name: web
  24 │         volumeMounts:
  25 │         - name: www
  26 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────



sts8.yaml (kubernetes)
======================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql-container' of StatefulSet 'my-sts' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 sts8.yaml:14-50
────────────────────────────────────────
  14 ┌         - name: mysql-container
  15 │           image: mysql
  16 │           ports:
  17 │             - containerPort: 3306
  18 │ 
  19 │           ### Pass environment variables as Direct Method   
  20 │           # env:
  21 │           #   - name: MYSQL_ROOT_PASSWORD
  22 └           #     value: "redhat123"
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql-container' of StatefulSet 'my-sts' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 sts8.yaml:14-50
────────────────────────────────────────
  14 ┌         - name: mysql-container
  15 │           image: mysql
  16 │           ports:
  17 │             - containerPort: 3306
  18 │ 
  19 │           ### Pass environment variables as Direct Method   
  20 │           # env:
  21 │           #   - name: MYSQL_ROOT_PASSWORD
  22 └           #     value: "redhat123"
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql-container' of 'statefulset' 'my-sts' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 sts8.yaml:14-50
────────────────────────────────────────
  14 ┌         - name: mysql-container
  15 │           image: mysql
  16 │           ports:
  17 │             - containerPort: 3306
  18 │ 
  19 │           ### Pass environment variables as Direct Method   
  20 │           # env:
  21 │           #   - name: MYSQL_ROOT_PASSWORD
  22 └           #     value: "redhat123"
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql-container' of StatefulSet 'my-sts' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 sts8.yaml:14-50
────────────────────────────────────────
  14 ┌         - name: mysql-container
  15 │           image: mysql
  16 │           ports:
  17 │             - containerPort: 3306
  18 │ 
  19 │           ### Pass environment variables as Direct Method   
  20 │           # env:
  21 │           #   - name: MYSQL_ROOT_PASSWORD
  22 └           #     value: "redhat123"
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql-container' of StatefulSet 'my-sts' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 sts8.yaml:14-50
────────────────────────────────────────
  14 ┌         - name: mysql-container
  15 │           image: mysql
  16 │           ports:
  17 │             - containerPort: 3306
  18 │ 
  19 │           ### Pass environment variables as Direct Method   
  20 │           # env:
  21 │           #   - name: MYSQL_ROOT_PASSWORD
  22 └           #     value: "redhat123"
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mysql-container' of StatefulSet 'my-sts' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 sts8.yaml:14-50
────────────────────────────────────────
  14 ┌         - name: mysql-container
  15 │           image: mysql
  16 │           ports:
  17 │             - containerPort: 3306
  18 │ 
  19 │           ### Pass environment variables as Direct Method   
  20 │           # env:
  21 │           #   - name: MYSQL_ROOT_PASSWORD
  22 └           #     value: "redhat123"
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql-container' of StatefulSet 'my-sts' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 sts8.yaml:14-50
────────────────────────────────────────
  14 ┌         - name: mysql-container
  15 │           image: mysql
  16 │           ports:
  17 │             - containerPort: 3306
  18 │ 
  19 │           ### Pass environment variables as Direct Method   
  20 │           # env:
  21 │           #   - name: MYSQL_ROOT_PASSWORD
  22 └           #     value: "redhat123"
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql-container' of StatefulSet 'my-sts' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 sts8.yaml:14-50
────────────────────────────────────────
  14 ┌         - name: mysql-container
  15 │           image: mysql
  16 │           ports:
  17 │             - containerPort: 3306
  18 │ 
  19 │           ### Pass environment variables as Direct Method   
  20 │           # env:
  21 │           #   - name: MYSQL_ROOT_PASSWORD
  22 └           #     value: "redhat123"
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql-container' of StatefulSet 'my-sts' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 sts8.yaml:14-50
────────────────────────────────────────
  14 ┌         - name: mysql-container
  15 │           image: mysql
  16 │           ports:
  17 │             - containerPort: 3306
  18 │ 
  19 │           ### Pass environment variables as Direct Method   
  20 │           # env:
  21 │           #   - name: MYSQL_ROOT_PASSWORD
  22 └           #     value: "redhat123"
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql-container' of StatefulSet 'my-sts' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 sts8.yaml:14-50
────────────────────────────────────────
  14 ┌         - name: mysql-container
  15 │           image: mysql
  16 │           ports:
  17 │             - containerPort: 3306
  18 │ 
  19 │           ### Pass environment variables as Direct Method   
  20 │           # env:
  21 │           #   - name: MYSQL_ROOT_PASSWORD
  22 └           #     value: "redhat123"
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql-container' of StatefulSet 'my-sts' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 sts8.yaml:14-50
────────────────────────────────────────
  14 ┌         - name: mysql-container
  15 │           image: mysql
  16 │           ports:
  17 │             - containerPort: 3306
  18 │ 
  19 │           ### Pass environment variables as Direct Method   
  20 │           # env:
  21 │           #   - name: MYSQL_ROOT_PASSWORD
  22 └           #     value: "redhat123"
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql-container' of StatefulSet 'my-sts' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 sts8.yaml:14-50
────────────────────────────────────────
  14 ┌         - name: mysql-container
  15 │           image: mysql
  16 │           ports:
  17 │             - containerPort: 3306
  18 │ 
  19 │           ### Pass environment variables as Direct Method   
  20 │           # env:
  21 │           #   - name: MYSQL_ROOT_PASSWORD
  22 └           #     value: "redhat123"
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 sts8.yaml:14-50
────────────────────────────────────────
  14 ┌         - name: mysql-container
  15 │           image: mysql
  16 │           ports:
  17 │             - containerPort: 3306
  18 │ 
  19 │           ### Pass environment variables as Direct Method   
  20 │           # env:
  21 │           #   - name: MYSQL_ROOT_PASSWORD
  22 └           #     value: "redhat123"
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql-container" of statefulset "my-sts" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 sts8.yaml:14-50
────────────────────────────────────────
  14 ┌         - name: mysql-container
  15 │           image: mysql
  16 │           ports:
  17 │             - containerPort: 3306
  18 │ 
  19 │           ### Pass environment variables as Direct Method   
  20 │           # env:
  21 │           #   - name: MYSQL_ROOT_PASSWORD
  22 └           #     value: "redhat123"
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 sts8.yaml:14-50
────────────────────────────────────────
  14 ┌         - name: mysql-container
  15 │           image: mysql
  16 │           ports:
  17 │             - containerPort: 3306
  18 │ 
  19 │           ### Pass environment variables as Direct Method   
  20 │           # env:
  21 │           #   - name: MYSQL_ROOT_PASSWORD
  22 └           #     value: "redhat123"
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset my-sts in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 sts8.yaml:4-6
────────────────────────────────────────
   4 ┌   name: my-sts
   5 │   labels:
   6 └     app: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-sts in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sts8.yaml:14-50
────────────────────────────────────────
  14 ┌         - name: mysql-container
  15 │           image: mysql
  16 │           ports:
  17 │             - containerPort: 3306
  18 │ 
  19 │           ### Pass environment variables as Direct Method   
  20 │           # env:
  21 │           #   - name: MYSQL_ROOT_PASSWORD
  22 └           #     value: "redhat123"
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset my-sts in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 sts8.yaml:13-50
────────────────────────────────────────
  13 ┌       containers:
  14 │         - name: mysql-container
  15 │           image: mysql
  16 │           ports:
  17 │             - containerPort: 3306
  18 │ 
  19 │           ### Pass environment variables as Direct Method   
  20 │           # env:
  21 └           #   - name: MYSQL_ROOT_PASSWORD
  ..   
────────────────────────────────────────



stset_mysql.yaml (kubernetes)
=============================
Tests: 113 (SUCCESSES: 97, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stset_mysql.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.6
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         envFrom:
  23 │         - secretRef:
  24 │             name: wp-db-secrets
  25 │         - configMapRef:
  26 └             name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of StatefulSet 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stset_mysql.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.6
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         envFrom:
  23 │         - secretRef:
  24 │             name: wp-db-secrets
  25 │         - configMapRef:
  26 └             name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'statefulset' 'mysql' in 'wp-projeto' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stset_mysql.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.6
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         envFrom:
  23 │         - secretRef:
  24 │             name: wp-db-secrets
  25 │         - configMapRef:
  26 └             name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stset_mysql.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.6
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         envFrom:
  23 │         - secretRef:
  24 │             name: wp-db-secrets
  25 │         - configMapRef:
  26 └             name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stset_mysql.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.6
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         envFrom:
  23 │         - secretRef:
  24 │             name: wp-db-secrets
  25 │         - configMapRef:
  26 └             name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stset_mysql.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.6
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         envFrom:
  23 │         - secretRef:
  24 │             name: wp-db-secrets
  25 │         - configMapRef:
  26 └             name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stset_mysql.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.6
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         envFrom:
  23 │         - secretRef:
  24 │             name: wp-db-secrets
  25 │         - configMapRef:
  26 └             name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stset_mysql.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.6
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         envFrom:
  23 │         - secretRef:
  24 │             name: wp-db-secrets
  25 │         - configMapRef:
  26 └             name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stset_mysql.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.6
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         envFrom:
  23 │         - secretRef:
  24 │             name: wp-db-secrets
  25 │         - configMapRef:
  26 └             name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stset_mysql.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.6
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         envFrom:
  23 │         - secretRef:
  24 │             name: wp-db-secrets
  25 │         - configMapRef:
  26 └             name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stset_mysql.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.6
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         envFrom:
  23 │         - secretRef:
  24 │             name: wp-db-secrets
  25 │         - configMapRef:
  26 └             name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stset_mysql.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.6
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         envFrom:
  23 │         - secretRef:
  24 │             name: wp-db-secrets
  25 │         - configMapRef:
  26 └             name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of statefulset "mysql" in "wp-projeto" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stset_mysql.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.6
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         envFrom:
  23 │         - secretRef:
  24 │             name: wp-db-secrets
  25 │         - configMapRef:
  26 └             name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stset_mysql.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.6
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         envFrom:
  23 │         - secretRef:
  24 │             name: wp-db-secrets
  25 │         - configMapRef:
  26 └             name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in wp-projeto namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stset_mysql.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.6
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         envFrom:
  23 │         - secretRef:
  24 │             name: wp-db-secrets
  25 │         - configMapRef:
  26 └             name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset mysql in wp-projeto namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stset_mysql.yaml:17-29
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: mysql
  19 │         image: mysql:5.6
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         envFrom:
  23 │         - secretRef:
  24 │             name: wp-db-secrets
  25 └         - configMapRef:
  ..   
────────────────────────────────────────



stset_mysql1.yaml (kubernetes)
==============================
Tests: 113 (SUCCESSES: 97, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 10, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 stset_mysql1.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.6
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         envFrom:
  23 │         - secretRef:
  24 │             name: wp-db-secrets
  25 │         - configMapRef:
  26 └             name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of StatefulSet 'mysql' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 stset_mysql1.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.6
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         envFrom:
  23 │         - secretRef:
  24 │             name: wp-db-secrets
  25 │         - configMapRef:
  26 └             name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'statefulset' 'mysql' in 'wp-projeto' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 stset_mysql1.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.6
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         envFrom:
  23 │         - secretRef:
  24 │             name: wp-db-secrets
  25 │         - configMapRef:
  26 └             name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 stset_mysql1.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.6
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         envFrom:
  23 │         - secretRef:
  24 │             name: wp-db-secrets
  25 │         - configMapRef:
  26 └             name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 stset_mysql1.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.6
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         envFrom:
  23 │         - secretRef:
  24 │             name: wp-db-secrets
  25 │         - configMapRef:
  26 └             name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 stset_mysql1.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.6
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         envFrom:
  23 │         - secretRef:
  24 │             name: wp-db-secrets
  25 │         - configMapRef:
  26 └             name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 stset_mysql1.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.6
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         envFrom:
  23 │         - secretRef:
  24 │             name: wp-db-secrets
  25 │         - configMapRef:
  26 └             name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 stset_mysql1.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.6
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         envFrom:
  23 │         - secretRef:
  24 │             name: wp-db-secrets
  25 │         - configMapRef:
  26 └             name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 stset_mysql1.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.6
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         envFrom:
  23 │         - secretRef:
  24 │             name: wp-db-secrets
  25 │         - configMapRef:
  26 └             name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 stset_mysql1.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.6
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         envFrom:
  23 │         - secretRef:
  24 │             name: wp-db-secrets
  25 │         - configMapRef:
  26 └             name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of StatefulSet 'mysql' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 stset_mysql1.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.6
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         envFrom:
  23 │         - secretRef:
  24 │             name: wp-db-secrets
  25 │         - configMapRef:
  26 └             name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 stset_mysql1.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.6
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         envFrom:
  23 │         - secretRef:
  24 │             name: wp-db-secrets
  25 │         - configMapRef:
  26 └             name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of statefulset "mysql" in "wp-projeto" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 stset_mysql1.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.6
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         envFrom:
  23 │         - secretRef:
  24 │             name: wp-db-secrets
  25 │         - configMapRef:
  26 └             name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 stset_mysql1.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.6
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         envFrom:
  23 │         - secretRef:
  24 │             name: wp-db-secrets
  25 │         - configMapRef:
  26 └             name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mysql in wp-projeto namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stset_mysql1.yaml:18-29
────────────────────────────────────────
  18 ┌       - name: mysql
  19 │         image: mysql:5.6
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         envFrom:
  23 │         - secretRef:
  24 │             name: wp-db-secrets
  25 │         - configMapRef:
  26 └             name: mysql-config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset mysql in wp-projeto namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 stset_mysql1.yaml:17-29
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: mysql
  19 │         image: mysql:5.6
  20 │         ports:
  21 │         - containerPort: 3306
  22 │         envFrom:
  23 │         - secretRef:
  24 │             name: wp-db-secrets
  25 └         - configMapRef:
  ..   
────────────────────────────────────────



student-depl.yaml (kubernetes)
==============================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'student-svc' of Deployment 'student-svc' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 student-depl.yaml:19-75
────────────────────────────────────────
  19 ┌       - name: student-svc
  20 │         image: realshinchoku/ddhc-student-svc:latest
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: ConnectionStrings__DefaultConnection
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: postgres-secret
  27 └               key: connectionString
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'student-svc' of Deployment 'student-svc' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 student-depl.yaml:19-75
────────────────────────────────────────
  19 ┌       - name: student-svc
  20 │         image: realshinchoku/ddhc-student-svc:latest
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: ConnectionStrings__DefaultConnection
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: postgres-secret
  27 └               key: connectionString
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'student-svc' of 'deployment' 'student-svc' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 student-depl.yaml:19-75
────────────────────────────────────────
  19 ┌       - name: student-svc
  20 │         image: realshinchoku/ddhc-student-svc:latest
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: ConnectionStrings__DefaultConnection
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: postgres-secret
  27 └               key: connectionString
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'student-svc' of Deployment 'student-svc' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 student-depl.yaml:19-75
────────────────────────────────────────
  19 ┌       - name: student-svc
  20 │         image: realshinchoku/ddhc-student-svc:latest
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: ConnectionStrings__DefaultConnection
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: postgres-secret
  27 └               key: connectionString
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'student-svc' of Deployment 'student-svc' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 student-depl.yaml:19-75
────────────────────────────────────────
  19 ┌       - name: student-svc
  20 │         image: realshinchoku/ddhc-student-svc:latest
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: ConnectionStrings__DefaultConnection
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: postgres-secret
  27 └               key: connectionString
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'student-svc' of Deployment 'student-svc' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 student-depl.yaml:19-75
────────────────────────────────────────
  19 ┌       - name: student-svc
  20 │         image: realshinchoku/ddhc-student-svc:latest
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: ConnectionStrings__DefaultConnection
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: postgres-secret
  27 └               key: connectionString
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'student-svc' of Deployment 'student-svc' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 student-depl.yaml:19-75
────────────────────────────────────────
  19 ┌       - name: student-svc
  20 │         image: realshinchoku/ddhc-student-svc:latest
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: ConnectionStrings__DefaultConnection
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: postgres-secret
  27 └               key: connectionString
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'student-svc' of Deployment 'student-svc' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 student-depl.yaml:19-75
────────────────────────────────────────
  19 ┌       - name: student-svc
  20 │         image: realshinchoku/ddhc-student-svc:latest
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: ConnectionStrings__DefaultConnection
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: postgres-secret
  27 └               key: connectionString
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'student-svc' of Deployment 'student-svc' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 student-depl.yaml:19-75
────────────────────────────────────────
  19 ┌       - name: student-svc
  20 │         image: realshinchoku/ddhc-student-svc:latest
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: ConnectionStrings__DefaultConnection
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: postgres-secret
  27 └               key: connectionString
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'student-svc' of Deployment 'student-svc' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 student-depl.yaml:19-75
────────────────────────────────────────
  19 ┌       - name: student-svc
  20 │         image: realshinchoku/ddhc-student-svc:latest
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: ConnectionStrings__DefaultConnection
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: postgres-secret
  27 └               key: connectionString
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'student-svc' of Deployment 'student-svc' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 student-depl.yaml:19-75
────────────────────────────────────────
  19 ┌       - name: student-svc
  20 │         image: realshinchoku/ddhc-student-svc:latest
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: ConnectionStrings__DefaultConnection
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: postgres-secret
  27 └               key: connectionString
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'student-svc' of Deployment 'student-svc' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 student-depl.yaml:19-75
────────────────────────────────────────
  19 ┌       - name: student-svc
  20 │         image: realshinchoku/ddhc-student-svc:latest
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: ConnectionStrings__DefaultConnection
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: postgres-secret
  27 └               key: connectionString
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 student-depl.yaml:19-75
────────────────────────────────────────
  19 ┌       - name: student-svc
  20 │         image: realshinchoku/ddhc-student-svc:latest
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: ConnectionStrings__DefaultConnection
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: postgres-secret
  27 └               key: connectionString
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "student-svc" of deployment "student-svc" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 student-depl.yaml:19-75
────────────────────────────────────────
  19 ┌       - name: student-svc
  20 │         image: realshinchoku/ddhc-student-svc:latest
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: ConnectionStrings__DefaultConnection
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: postgres-secret
  27 └               key: connectionString
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 student-depl.yaml:19-75
────────────────────────────────────────
  19 ┌       - name: student-svc
  20 │         image: realshinchoku/ddhc-student-svc:latest
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: ConnectionStrings__DefaultConnection
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: postgres-secret
  27 └               key: connectionString
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment student-svc in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 student-depl.yaml:4-6
────────────────────────────────────────
   4 ┌   name: student-svc
   5 │   labels:
   6 └     app: student-svc
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container student-svc in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 student-depl.yaml:19-75
────────────────────────────────────────
  19 ┌       - name: student-svc
  20 │         image: realshinchoku/ddhc-student-svc:latest
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: ConnectionStrings__DefaultConnection
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: postgres-secret
  27 └               key: connectionString
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment student-svc in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 student-depl.yaml:18-76
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: student-svc
  20 │         image: realshinchoku/ddhc-student-svc:latest
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: ConnectionStrings__DefaultConnection
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 └               name: postgres-secret
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container student-svc in deployment student-svc (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 student-depl.yaml:19-75
────────────────────────────────────────
  19 ┌       - name: student-svc
  20 │         image: realshinchoku/ddhc-student-svc:latest
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: ConnectionStrings__DefaultConnection
  24 │           valueFrom:
  25 │             secretKeyRef:
  26 │               name: postgres-secret
  27 └               key: connectionString
  ..   
────────────────────────────────────────



student.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 96, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'maven-container' of Pod 'studentpod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 student.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: maven-container
  11 │     image: 8983795200/students:1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'maven-container' of Pod 'studentpod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 student.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: maven-container
  11 │     image: 8983795200/students:1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'maven-container' of 'pod' 'studentpod' in 'manjulika' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 student.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: maven-container
  11 │     image: 8983795200/students:1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'maven-container' of Pod 'studentpod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 student.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: maven-container
  11 │     image: 8983795200/students:1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'maven-container' of Pod 'studentpod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 student.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: maven-container
  11 │     image: 8983795200/students:1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'maven-container' of Pod 'studentpod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 student.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: maven-container
  11 │     image: 8983795200/students:1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'maven-container' of Pod 'studentpod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 student.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: maven-container
  11 │     image: 8983795200/students:1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'maven-container' of Pod 'studentpod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 student.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: maven-container
  11 │     image: 8983795200/students:1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'maven-container' of Pod 'studentpod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 student.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: maven-container
  11 │     image: 8983795200/students:1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'maven-container' of Pod 'studentpod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 student.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: maven-container
  11 │     image: 8983795200/students:1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'maven-container' of Pod 'studentpod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 student.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: maven-container
  11 │     image: 8983795200/students:1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 student.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: maven-container
  11 │     image: 8983795200/students:1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "maven-container" of pod "studentpod" in "manjulika" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 student.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: maven-container
  11 │     image: 8983795200/students:1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 student.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: maven-container
  11 │     image: 8983795200/students:1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container studentpod in manjulika namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 student.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: maven-container
  11 │     image: 8983795200/students:1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod studentpod in manjulika namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 student.yaml:9-15
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: maven-container
  11 │     image: 8983795200/students:1
  12 │     ports:
  13 │     - containerPort: 8080
  14 │   imagePullSecrets:
  15 └   - name: dockerhubsecret
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container maven-container in pod studentpod (namespace: manjulika) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 student.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: maven-container
  11 │     image: 8983795200/students:1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────



student1.yaml (kubernetes)
==========================
Tests: 113 (SUCCESSES: 96, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'maven-container' of Pod 'studentpod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 student1.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: maven-container
  11 │     image: 8983795200/students:1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'maven-container' of Pod 'studentpod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 student1.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: maven-container
  11 │     image: 8983795200/students:1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'maven-container' of 'pod' 'studentpod' in 'manjulika' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 student1.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: maven-container
  11 │     image: 8983795200/students:1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'maven-container' of Pod 'studentpod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 student1.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: maven-container
  11 │     image: 8983795200/students:1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'maven-container' of Pod 'studentpod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 student1.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: maven-container
  11 │     image: 8983795200/students:1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'maven-container' of Pod 'studentpod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 student1.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: maven-container
  11 │     image: 8983795200/students:1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'maven-container' of Pod 'studentpod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 student1.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: maven-container
  11 │     image: 8983795200/students:1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'maven-container' of Pod 'studentpod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 student1.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: maven-container
  11 │     image: 8983795200/students:1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'maven-container' of Pod 'studentpod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 student1.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: maven-container
  11 │     image: 8983795200/students:1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'maven-container' of Pod 'studentpod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 student1.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: maven-container
  11 │     image: 8983795200/students:1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'maven-container' of Pod 'studentpod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 student1.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: maven-container
  11 │     image: 8983795200/students:1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 student1.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: maven-container
  11 │     image: 8983795200/students:1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "maven-container" of pod "studentpod" in "manjulika" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 student1.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: maven-container
  11 │     image: 8983795200/students:1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 student1.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: maven-container
  11 │     image: 8983795200/students:1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container studentpod in manjulika namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 student1.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: maven-container
  11 │     image: 8983795200/students:1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod studentpod in manjulika namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 student1.yaml:9-15
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: maven-container
  11 │     image: 8983795200/students:1
  12 │     ports:
  13 │     - containerPort: 8080
  14 │   imagePullSecrets:
  15 └   - name: dockerhubsecret 
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container maven-container in pod studentpod (namespace: manjulika) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 student1.yaml:10-13
────────────────────────────────────────
  10 ┌   - name: maven-container
  11 │     image: 8983795200/students:1
  12 │     ports:
  13 └     - containerPort: 8080
────────────────────────────────────────



student_service1_1.yaml (kubernetes)
====================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service' of Deployment 'service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 student_service1_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: MONGO_URI
  25 │           value: mongodb://mongo:27017
  26 │         image: student_service/maxmb15
  27 │         name: service
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 8080
  31 └         resources: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service' of Deployment 'service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 student_service1_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: MONGO_URI
  25 │           value: mongodb://mongo:27017
  26 │         image: student_service/maxmb15
  27 │         name: service
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 8080
  31 └         resources: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service' of 'deployment' 'service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 student_service1_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: MONGO_URI
  25 │           value: mongodb://mongo:27017
  26 │         image: student_service/maxmb15
  27 │         name: service
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 8080
  31 └         resources: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'service' of Deployment 'service' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 student_service1_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: MONGO_URI
  25 │           value: mongodb://mongo:27017
  26 │         image: student_service/maxmb15
  27 │         name: service
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 8080
  31 └         resources: {}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service' of Deployment 'service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 student_service1_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: MONGO_URI
  25 │           value: mongodb://mongo:27017
  26 │         image: student_service/maxmb15
  27 │         name: service
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 8080
  31 └         resources: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'service' of Deployment 'service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 student_service1_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: MONGO_URI
  25 │           value: mongodb://mongo:27017
  26 │         image: student_service/maxmb15
  27 │         name: service
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 8080
  31 └         resources: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service' of Deployment 'service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 student_service1_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: MONGO_URI
  25 │           value: mongodb://mongo:27017
  26 │         image: student_service/maxmb15
  27 │         name: service
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 8080
  31 └         resources: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'service' of Deployment 'service' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 student_service1_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: MONGO_URI
  25 │           value: mongodb://mongo:27017
  26 │         image: student_service/maxmb15
  27 │         name: service
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 8080
  31 └         resources: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'service' of Deployment 'service' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 student_service1_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: MONGO_URI
  25 │           value: mongodb://mongo:27017
  26 │         image: student_service/maxmb15
  27 │         name: service
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 8080
  31 └         resources: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'service' of Deployment 'service' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 student_service1_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: MONGO_URI
  25 │           value: mongodb://mongo:27017
  26 │         image: student_service/maxmb15
  27 │         name: service
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 8080
  31 └         resources: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service' of Deployment 'service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 student_service1_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: MONGO_URI
  25 │           value: mongodb://mongo:27017
  26 │         image: student_service/maxmb15
  27 │         name: service
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 8080
  31 └         resources: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service' of Deployment 'service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 student_service1_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: MONGO_URI
  25 │           value: mongodb://mongo:27017
  26 │         image: student_service/maxmb15
  27 │         name: service
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 8080
  31 └         resources: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 student_service1_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: MONGO_URI
  25 │           value: mongodb://mongo:27017
  26 │         image: student_service/maxmb15
  27 │         name: service
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 8080
  31 └         resources: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service" of deployment "service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 student_service1_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: MONGO_URI
  25 │           value: mongodb://mongo:27017
  26 │         image: student_service/maxmb15
  27 │         name: service
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 8080
  31 └         resources: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 student_service1_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: MONGO_URI
  25 │           value: mongodb://mongo:27017
  26 │         image: student_service/maxmb15
  27 │         name: service
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 8080
  31 └         resources: {}
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment service in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 student_service1_1.yaml:4-10
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: kompose convert
   6 │     kompose.version: 1.16.0 (0c01309)
   7 │   creationTimestamp: null
   8 │   labels:
   9 │     io.kompose.service: service
  10 └   name: service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 student_service1_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: MONGO_URI
  25 │           value: mongodb://mongo:27017
  26 │         image: student_service/maxmb15
  27 │         name: service
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 8080
  31 └         resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment service in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 student_service1_1.yaml:22-32
────────────────────────────────────────
  22 ┌       containers:
  23 │       - env:
  24 │         - name: MONGO_URI
  25 │           value: mongodb://mongo:27017
  26 │         image: student_service/maxmb15
  27 │         name: service
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 └         - containerPort: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container service in deployment service (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 student_service1_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: MONGO_URI
  25 │           value: mongodb://mongo:27017
  26 │         image: student_service/maxmb15
  27 │         name: service
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 8080
  31 └         resources: {}
────────────────────────────────────────



student_service_1.yaml (kubernetes)
===================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'service' of Deployment 'service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 student_service_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: MONGO_URI
  25 │           value: mongodb://mongo:27017
  26 │         image: nefelitavoulari/student_service
  27 │         name: service
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 8080
  31 └         resources: {}
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'service' of Deployment 'service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 student_service_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: MONGO_URI
  25 │           value: mongodb://mongo:27017
  26 │         image: nefelitavoulari/student_service
  27 │         name: service
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 8080
  31 └         resources: {}
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'service' of 'deployment' 'service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 student_service_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: MONGO_URI
  25 │           value: mongodb://mongo:27017
  26 │         image: nefelitavoulari/student_service
  27 │         name: service
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 8080
  31 └         resources: {}
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'service' of Deployment 'service' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 student_service_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: MONGO_URI
  25 │           value: mongodb://mongo:27017
  26 │         image: nefelitavoulari/student_service
  27 │         name: service
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 8080
  31 └         resources: {}
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'service' of Deployment 'service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 student_service_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: MONGO_URI
  25 │           value: mongodb://mongo:27017
  26 │         image: nefelitavoulari/student_service
  27 │         name: service
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 8080
  31 └         resources: {}
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'service' of Deployment 'service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 student_service_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: MONGO_URI
  25 │           value: mongodb://mongo:27017
  26 │         image: nefelitavoulari/student_service
  27 │         name: service
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 8080
  31 └         resources: {}
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'service' of Deployment 'service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 student_service_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: MONGO_URI
  25 │           value: mongodb://mongo:27017
  26 │         image: nefelitavoulari/student_service
  27 │         name: service
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 8080
  31 └         resources: {}
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'service' of Deployment 'service' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 student_service_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: MONGO_URI
  25 │           value: mongodb://mongo:27017
  26 │         image: nefelitavoulari/student_service
  27 │         name: service
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 8080
  31 └         resources: {}
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'service' of Deployment 'service' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 student_service_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: MONGO_URI
  25 │           value: mongodb://mongo:27017
  26 │         image: nefelitavoulari/student_service
  27 │         name: service
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 8080
  31 └         resources: {}
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'service' of Deployment 'service' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 student_service_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: MONGO_URI
  25 │           value: mongodb://mongo:27017
  26 │         image: nefelitavoulari/student_service
  27 │         name: service
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 8080
  31 └         resources: {}
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'service' of Deployment 'service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 student_service_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: MONGO_URI
  25 │           value: mongodb://mongo:27017
  26 │         image: nefelitavoulari/student_service
  27 │         name: service
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 8080
  31 └         resources: {}
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'service' of Deployment 'service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 student_service_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: MONGO_URI
  25 │           value: mongodb://mongo:27017
  26 │         image: nefelitavoulari/student_service
  27 │         name: service
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 8080
  31 └         resources: {}
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 student_service_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: MONGO_URI
  25 │           value: mongodb://mongo:27017
  26 │         image: nefelitavoulari/student_service
  27 │         name: service
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 8080
  31 └         resources: {}
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "service" of deployment "service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 student_service_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: MONGO_URI
  25 │           value: mongodb://mongo:27017
  26 │         image: nefelitavoulari/student_service
  27 │         name: service
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 8080
  31 └         resources: {}
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 student_service_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: MONGO_URI
  25 │           value: mongodb://mongo:27017
  26 │         image: nefelitavoulari/student_service
  27 │         name: service
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 8080
  31 └         resources: {}
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment service in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 student_service_1.yaml:4-10
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: kompose convert
   6 │     kompose.version: 1.16.0 (0c01309)
   7 │   creationTimestamp: null
   8 │   labels:
   9 │     io.kompose.service: service
  10 └   name: service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 student_service_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: MONGO_URI
  25 │           value: mongodb://mongo:27017
  26 │         image: nefelitavoulari/student_service
  27 │         name: service
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 8080
  31 └         resources: {}
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment service in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 student_service_1.yaml:22-32
────────────────────────────────────────
  22 ┌       containers:
  23 │       - env:
  24 │         - name: MONGO_URI
  25 │           value: mongodb://mongo:27017
  26 │         image: nefelitavoulari/student_service
  27 │         name: service
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 └         - containerPort: 8080
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container service in deployment service (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 student_service_1.yaml:23-31
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: MONGO_URI
  25 │           value: mongodb://mongo:27017
  26 │         image: nefelitavoulari/student_service
  27 │         name: service
  28 │         imagePullPolicy: Always
  29 │         ports:
  30 │         - containerPort: 8080
  31 └         resources: {}
────────────────────────────────────────



studentapp.yaml (kubernetes)
============================
Tests: 113 (SUCCESSES: 98, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 7, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'studentapp' of Deployment 'student-store' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 studentapp.yaml:20-55
────────────────────────────────────────
  20 ┌         - name: studentapp
  21 │           image: dipkvts/studentstore:latest
  22 │           ports:
  23 │             - containerPort: 8080
  24 │           imagePullPolicy: Always
  25 │           env:
  26 │             - name: MONGODB_HOST
  27 │               valueFrom:
  28 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'studentapp' of Deployment 'student-store' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 studentapp.yaml:20-55
────────────────────────────────────────
  20 ┌         - name: studentapp
  21 │           image: dipkvts/studentstore:latest
  22 │           ports:
  23 │             - containerPort: 8080
  24 │           imagePullPolicy: Always
  25 │           env:
  26 │             - name: MONGODB_HOST
  27 │               valueFrom:
  28 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'studentapp' of 'deployment' 'student-store' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 studentapp.yaml:20-55
────────────────────────────────────────
  20 ┌         - name: studentapp
  21 │           image: dipkvts/studentstore:latest
  22 │           ports:
  23 │             - containerPort: 8080
  24 │           imagePullPolicy: Always
  25 │           env:
  26 │             - name: MONGODB_HOST
  27 │               valueFrom:
  28 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'studentapp' of Deployment 'student-store' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 studentapp.yaml:20-55
────────────────────────────────────────
  20 ┌         - name: studentapp
  21 │           image: dipkvts/studentstore:latest
  22 │           ports:
  23 │             - containerPort: 8080
  24 │           imagePullPolicy: Always
  25 │           env:
  26 │             - name: MONGODB_HOST
  27 │               valueFrom:
  28 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'studentapp' of Deployment 'student-store' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 studentapp.yaml:20-55
────────────────────────────────────────
  20 ┌         - name: studentapp
  21 │           image: dipkvts/studentstore:latest
  22 │           ports:
  23 │             - containerPort: 8080
  24 │           imagePullPolicy: Always
  25 │           env:
  26 │             - name: MONGODB_HOST
  27 │               valueFrom:
  28 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'studentapp' of Deployment 'student-store' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 studentapp.yaml:20-55
────────────────────────────────────────
  20 ┌         - name: studentapp
  21 │           image: dipkvts/studentstore:latest
  22 │           ports:
  23 │             - containerPort: 8080
  24 │           imagePullPolicy: Always
  25 │           env:
  26 │             - name: MONGODB_HOST
  27 │               valueFrom:
  28 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'studentapp' of Deployment 'student-store' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 studentapp.yaml:20-55
────────────────────────────────────────
  20 ┌         - name: studentapp
  21 │           image: dipkvts/studentstore:latest
  22 │           ports:
  23 │             - containerPort: 8080
  24 │           imagePullPolicy: Always
  25 │           env:
  26 │             - name: MONGODB_HOST
  27 │               valueFrom:
  28 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'studentapp' of Deployment 'student-store' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 studentapp.yaml:20-55
────────────────────────────────────────
  20 ┌         - name: studentapp
  21 │           image: dipkvts/studentstore:latest
  22 │           ports:
  23 │             - containerPort: 8080
  24 │           imagePullPolicy: Always
  25 │           env:
  26 │             - name: MONGODB_HOST
  27 │               valueFrom:
  28 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 studentapp.yaml:20-55
────────────────────────────────────────
  20 ┌         - name: studentapp
  21 │           image: dipkvts/studentstore:latest
  22 │           ports:
  23 │             - containerPort: 8080
  24 │           imagePullPolicy: Always
  25 │           env:
  26 │             - name: MONGODB_HOST
  27 │               valueFrom:
  28 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "studentapp" of deployment "student-store" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 studentapp.yaml:20-55
────────────────────────────────────────
  20 ┌         - name: studentapp
  21 │           image: dipkvts/studentstore:latest
  22 │           ports:
  23 │             - containerPort: 8080
  24 │           imagePullPolicy: Always
  25 │           env:
  26 │             - name: MONGODB_HOST
  27 │               valueFrom:
  28 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 studentapp.yaml:20-55
────────────────────────────────────────
  20 ┌         - name: studentapp
  21 │           image: dipkvts/studentstore:latest
  22 │           ports:
  23 │             - containerPort: 8080
  24 │           imagePullPolicy: Always
  25 │           env:
  26 │             - name: MONGODB_HOST
  27 │               valueFrom:
  28 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment student-store in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 studentapp.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: student-app
   6 └   name: student-store
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container student-store in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 studentapp.yaml:20-55
────────────────────────────────────────
  20 ┌         - name: studentapp
  21 │           image: dipkvts/studentstore:latest
  22 │           ports:
  23 │             - containerPort: 8080
  24 │           imagePullPolicy: Always
  25 │           env:
  26 │             - name: MONGODB_HOST
  27 │               valueFrom:
  28 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment student-store in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 studentapp.yaml:17-55
────────────────────────────────────────
  17 ┌       imagePullSecrets:
  18 │         - name: dockerhubsecret
  19 │       containers:
  20 │         - name: studentapp
  21 │           image: dipkvts/studentstore:latest
  22 │           ports:
  23 │             - containerPort: 8080
  24 │           imagePullPolicy: Always
  25 └           env:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container studentapp in deployment student-store (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 studentapp.yaml:20-55
────────────────────────────────────────
  20 ┌         - name: studentapp
  21 │           image: dipkvts/studentstore:latest
  22 │           ports:
  23 │             - containerPort: 8080
  24 │           imagePullPolicy: Always
  25 │           env:
  26 │             - name: MONGODB_HOST
  27 │               valueFrom:
  28 └                 configMapKeyRef:
  ..   
────────────────────────────────────────



studentapp1.yaml (kubernetes)
=============================
Tests: 113 (SUCCESSES: 99, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 7, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'studentapp' of Deployment 'student-store' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 studentapp1.yaml:20-78
────────────────────────────────────────
  20 ┌         - name: studentapp
  21 │           image: 8072388539/studentstore:v2.0
  22 │           ports:
  23 │             - containerPort: 8080
  24 │           imagePullPolicy: Always
  25 │           env:
  26 │             - name: MONGODB_HOST
  27 │               valueFrom:
  28 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'studentapp' of Deployment 'student-store' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 studentapp1.yaml:20-78
────────────────────────────────────────
  20 ┌         - name: studentapp
  21 │           image: 8072388539/studentstore:v2.0
  22 │           ports:
  23 │             - containerPort: 8080
  24 │           imagePullPolicy: Always
  25 │           env:
  26 │             - name: MONGODB_HOST
  27 │               valueFrom:
  28 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'studentapp' of 'deployment' 'student-store' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 studentapp1.yaml:20-78
────────────────────────────────────────
  20 ┌         - name: studentapp
  21 │           image: 8072388539/studentstore:v2.0
  22 │           ports:
  23 │             - containerPort: 8080
  24 │           imagePullPolicy: Always
  25 │           env:
  26 │             - name: MONGODB_HOST
  27 │               valueFrom:
  28 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'studentapp' of Deployment 'student-store' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 studentapp1.yaml:20-78
────────────────────────────────────────
  20 ┌         - name: studentapp
  21 │           image: 8072388539/studentstore:v2.0
  22 │           ports:
  23 │             - containerPort: 8080
  24 │           imagePullPolicy: Always
  25 │           env:
  26 │             - name: MONGODB_HOST
  27 │               valueFrom:
  28 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'studentapp' of Deployment 'student-store' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 studentapp1.yaml:20-78
────────────────────────────────────────
  20 ┌         - name: studentapp
  21 │           image: 8072388539/studentstore:v2.0
  22 │           ports:
  23 │             - containerPort: 8080
  24 │           imagePullPolicy: Always
  25 │           env:
  26 │             - name: MONGODB_HOST
  27 │               valueFrom:
  28 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'studentapp' of Deployment 'student-store' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 studentapp1.yaml:20-78
────────────────────────────────────────
  20 ┌         - name: studentapp
  21 │           image: 8072388539/studentstore:v2.0
  22 │           ports:
  23 │             - containerPort: 8080
  24 │           imagePullPolicy: Always
  25 │           env:
  26 │             - name: MONGODB_HOST
  27 │               valueFrom:
  28 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'studentapp' of Deployment 'student-store' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 studentapp1.yaml:20-78
────────────────────────────────────────
  20 ┌         - name: studentapp
  21 │           image: 8072388539/studentstore:v2.0
  22 │           ports:
  23 │             - containerPort: 8080
  24 │           imagePullPolicy: Always
  25 │           env:
  26 │             - name: MONGODB_HOST
  27 │               valueFrom:
  28 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 studentapp1.yaml:20-78
────────────────────────────────────────
  20 ┌         - name: studentapp
  21 │           image: 8072388539/studentstore:v2.0
  22 │           ports:
  23 │             - containerPort: 8080
  24 │           imagePullPolicy: Always
  25 │           env:
  26 │             - name: MONGODB_HOST
  27 │               valueFrom:
  28 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "studentapp" of deployment "student-store" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 studentapp1.yaml:20-78
────────────────────────────────────────
  20 ┌         - name: studentapp
  21 │           image: 8072388539/studentstore:v2.0
  22 │           ports:
  23 │             - containerPort: 8080
  24 │           imagePullPolicy: Always
  25 │           env:
  26 │             - name: MONGODB_HOST
  27 │               valueFrom:
  28 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 studentapp1.yaml:20-78
────────────────────────────────────────
  20 ┌         - name: studentapp
  21 │           image: 8072388539/studentstore:v2.0
  22 │           ports:
  23 │             - containerPort: 8080
  24 │           imagePullPolicy: Always
  25 │           env:
  26 │             - name: MONGODB_HOST
  27 │               valueFrom:
  28 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment student-store in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 studentapp1.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     app: student-app
   6 └   name: student-store
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container student-store in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 studentapp1.yaml:20-78
────────────────────────────────────────
  20 ┌         - name: studentapp
  21 │           image: 8072388539/studentstore:v2.0
  22 │           ports:
  23 │             - containerPort: 8080
  24 │           imagePullPolicy: Always
  25 │           env:
  26 │             - name: MONGODB_HOST
  27 │               valueFrom:
  28 └                 configMapKeyRef:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment student-store in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 studentapp1.yaml:19-78
────────────────────────────────────────
  19 ┌       containers:
  20 │         - name: studentapp
  21 │           image: 8072388539/studentstore:v2.0
  22 │           ports:
  23 │             - containerPort: 8080
  24 │           imagePullPolicy: Always
  25 │           env:
  26 │             - name: MONGODB_HOST
  27 └               valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container studentapp in deployment student-store (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 studentapp1.yaml:20-78
────────────────────────────────────────
  20 ┌         - name: studentapp
  21 │           image: 8072388539/studentstore:v2.0
  22 │           ports:
  23 │             - containerPort: 8080
  24 │           imagePullPolicy: Always
  25 │           env:
  26 │             - name: MONGODB_HOST
  27 │               valueFrom:
  28 └                 configMapKeyRef:
  ..   
────────────────────────────────────────



studentdb.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mongodb' of StatefulSet 'mongodb' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 studentdb.yaml:19-73
────────────────────────────────────────
  19 ┌         - name: mongodb
  20 │           image: mongo
  21 │           #if the liveness probe fails kubernetes restarts pod.
  22 │           livenessProbe:
  23 │             exec:
  24 │               command:
  25 │                 - mongosh
  26 │                 - --eval
  27 └                 - db.adminCommand('ping')
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mongodb' of StatefulSet 'mongodb' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 studentdb.yaml:19-73
────────────────────────────────────────
  19 ┌         - name: mongodb
  20 │           image: mongo
  21 │           #if the liveness probe fails kubernetes restarts pod.
  22 │           livenessProbe:
  23 │             exec:
  24 │               command:
  25 │                 - mongosh
  26 │                 - --eval
  27 └                 - db.adminCommand('ping')
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mongodb' of 'statefulset' 'mongodb' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 studentdb.yaml:19-73
────────────────────────────────────────
  19 ┌         - name: mongodb
  20 │           image: mongo
  21 │           #if the liveness probe fails kubernetes restarts pod.
  22 │           livenessProbe:
  23 │             exec:
  24 │               command:
  25 │                 - mongosh
  26 │                 - --eval
  27 └                 - db.adminCommand('ping')
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mongodb' of StatefulSet 'mongodb' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 studentdb.yaml:19-73
────────────────────────────────────────
  19 ┌         - name: mongodb
  20 │           image: mongo
  21 │           #if the liveness probe fails kubernetes restarts pod.
  22 │           livenessProbe:
  23 │             exec:
  24 │               command:
  25 │                 - mongosh
  26 │                 - --eval
  27 └                 - db.adminCommand('ping')
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mongodb' of StatefulSet 'mongodb' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 studentdb.yaml:19-73
────────────────────────────────────────
  19 ┌         - name: mongodb
  20 │           image: mongo
  21 │           #if the liveness probe fails kubernetes restarts pod.
  22 │           livenessProbe:
  23 │             exec:
  24 │               command:
  25 │                 - mongosh
  26 │                 - --eval
  27 └                 - db.adminCommand('ping')
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mongodb' of StatefulSet 'mongodb' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 studentdb.yaml:19-73
────────────────────────────────────────
  19 ┌         - name: mongodb
  20 │           image: mongo
  21 │           #if the liveness probe fails kubernetes restarts pod.
  22 │           livenessProbe:
  23 │             exec:
  24 │               command:
  25 │                 - mongosh
  26 │                 - --eval
  27 └                 - db.adminCommand('ping')
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mongodb' of StatefulSet 'mongodb' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 studentdb.yaml:19-73
────────────────────────────────────────
  19 ┌         - name: mongodb
  20 │           image: mongo
  21 │           #if the liveness probe fails kubernetes restarts pod.
  22 │           livenessProbe:
  23 │             exec:
  24 │               command:
  25 │                 - mongosh
  26 │                 - --eval
  27 └                 - db.adminCommand('ping')
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mongodb' of StatefulSet 'mongodb' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 studentdb.yaml:19-73
────────────────────────────────────────
  19 ┌         - name: mongodb
  20 │           image: mongo
  21 │           #if the liveness probe fails kubernetes restarts pod.
  22 │           livenessProbe:
  23 │             exec:
  24 │               command:
  25 │                 - mongosh
  26 │                 - --eval
  27 └                 - db.adminCommand('ping')
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mongodb' of StatefulSet 'mongodb' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 studentdb.yaml:19-73
────────────────────────────────────────
  19 ┌         - name: mongodb
  20 │           image: mongo
  21 │           #if the liveness probe fails kubernetes restarts pod.
  22 │           livenessProbe:
  23 │             exec:
  24 │               command:
  25 │                 - mongosh
  26 │                 - --eval
  27 └                 - db.adminCommand('ping')
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mongodb' of StatefulSet 'mongodb' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 studentdb.yaml:19-73
────────────────────────────────────────
  19 ┌         - name: mongodb
  20 │           image: mongo
  21 │           #if the liveness probe fails kubernetes restarts pod.
  22 │           livenessProbe:
  23 │             exec:
  24 │               command:
  25 │                 - mongosh
  26 │                 - --eval
  27 └                 - db.adminCommand('ping')
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mongodb' of StatefulSet 'mongodb' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 studentdb.yaml:19-73
────────────────────────────────────────
  19 ┌         - name: mongodb
  20 │           image: mongo
  21 │           #if the liveness probe fails kubernetes restarts pod.
  22 │           livenessProbe:
  23 │             exec:
  24 │               command:
  25 │                 - mongosh
  26 │                 - --eval
  27 └                 - db.adminCommand('ping')
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mongodb' of StatefulSet 'mongodb' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 studentdb.yaml:19-73
────────────────────────────────────────
  19 ┌         - name: mongodb
  20 │           image: mongo
  21 │           #if the liveness probe fails kubernetes restarts pod.
  22 │           livenessProbe:
  23 │             exec:
  24 │               command:
  25 │                 - mongosh
  26 │                 - --eval
  27 └                 - db.adminCommand('ping')
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 studentdb.yaml:19-73
────────────────────────────────────────
  19 ┌         - name: mongodb
  20 │           image: mongo
  21 │           #if the liveness probe fails kubernetes restarts pod.
  22 │           livenessProbe:
  23 │             exec:
  24 │               command:
  25 │                 - mongosh
  26 │                 - --eval
  27 └                 - db.adminCommand('ping')
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mongodb" of statefulset "mongodb" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 studentdb.yaml:19-73
────────────────────────────────────────
  19 ┌         - name: mongodb
  20 │           image: mongo
  21 │           #if the liveness probe fails kubernetes restarts pod.
  22 │           livenessProbe:
  23 │             exec:
  24 │               command:
  25 │                 - mongosh
  26 │                 - --eval
  27 └                 - db.adminCommand('ping')
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 studentdb.yaml:19-73
────────────────────────────────────────
  19 ┌         - name: mongodb
  20 │           image: mongo
  21 │           #if the liveness probe fails kubernetes restarts pod.
  22 │           livenessProbe:
  23 │             exec:
  24 │               command:
  25 │                 - mongosh
  26 │                 - --eval
  27 └                 - db.adminCommand('ping')
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset mongodb in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 studentdb.yaml:4
────────────────────────────────────────
   4 [   name: mongodb
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container mongodb in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 studentdb.yaml:19-73
────────────────────────────────────────
  19 ┌         - name: mongodb
  20 │           image: mongo
  21 │           #if the liveness probe fails kubernetes restarts pod.
  22 │           livenessProbe:
  23 │             exec:
  24 │               command:
  25 │                 - mongosh
  26 │                 - --eval
  27 └                 - db.adminCommand('ping')
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset mongodb in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 studentdb.yaml:18-73
────────────────────────────────────────
  18 ┌       containers:
  19 │         - name: mongodb
  20 │           image: mongo
  21 │           #if the liveness probe fails kubernetes restarts pod.
  22 │           livenessProbe:
  23 │             exec:
  24 │               command:
  25 │                 - mongosh
  26 └                 - --eval
  ..   
────────────────────────────────────────



studentservice.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 97, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'student-service' of Deployment 'student-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 studentservice.yaml:19-58
────────────────────────────────────────
  19 ┌       - name: student-service
  20 │         image: oluchioraekwe/studentservice:latest
  21 │         imagePullPolicy: Always
  22 │         resources:
  23 │           limits:
  24 │             memory: 128Mi
  25 │             cpu: 200m
  26 │           requests:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'student-service' of Deployment 'student-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 studentservice.yaml:19-58
────────────────────────────────────────
  19 ┌       - name: student-service
  20 │         image: oluchioraekwe/studentservice:latest
  21 │         imagePullPolicy: Always
  22 │         resources:
  23 │           limits:
  24 │             memory: 128Mi
  25 │             cpu: 200m
  26 │           requests:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'student-service' of 'deployment' 'student-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 studentservice.yaml:19-58
────────────────────────────────────────
  19 ┌       - name: student-service
  20 │         image: oluchioraekwe/studentservice:latest
  21 │         imagePullPolicy: Always
  22 │         resources:
  23 │           limits:
  24 │             memory: 128Mi
  25 │             cpu: 200m
  26 │           requests:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'student-service' of Deployment 'student-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 studentservice.yaml:19-58
────────────────────────────────────────
  19 ┌       - name: student-service
  20 │         image: oluchioraekwe/studentservice:latest
  21 │         imagePullPolicy: Always
  22 │         resources:
  23 │           limits:
  24 │             memory: 128Mi
  25 │             cpu: 200m
  26 │           requests:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'student-service' of Deployment 'student-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 studentservice.yaml:19-58
────────────────────────────────────────
  19 ┌       - name: student-service
  20 │         image: oluchioraekwe/studentservice:latest
  21 │         imagePullPolicy: Always
  22 │         resources:
  23 │           limits:
  24 │             memory: 128Mi
  25 │             cpu: 200m
  26 │           requests:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'student-service' of Deployment 'student-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 studentservice.yaml:19-58
────────────────────────────────────────
  19 ┌       - name: student-service
  20 │         image: oluchioraekwe/studentservice:latest
  21 │         imagePullPolicy: Always
  22 │         resources:
  23 │           limits:
  24 │             memory: 128Mi
  25 │             cpu: 200m
  26 │           requests:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'student-service' of Deployment 'student-service' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 studentservice.yaml:19-58
────────────────────────────────────────
  19 ┌       - name: student-service
  20 │         image: oluchioraekwe/studentservice:latest
  21 │         imagePullPolicy: Always
  22 │         resources:
  23 │           limits:
  24 │             memory: 128Mi
  25 │             cpu: 200m
  26 │           requests:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'student-service' of Deployment 'student-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 studentservice.yaml:19-58
────────────────────────────────────────
  19 ┌       - name: student-service
  20 │         image: oluchioraekwe/studentservice:latest
  21 │         imagePullPolicy: Always
  22 │         resources:
  23 │           limits:
  24 │             memory: 128Mi
  25 │             cpu: 200m
  26 │           requests:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'student-service' of Deployment 'student-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 studentservice.yaml:19-58
────────────────────────────────────────
  19 ┌       - name: student-service
  20 │         image: oluchioraekwe/studentservice:latest
  21 │         imagePullPolicy: Always
  22 │         resources:
  23 │           limits:
  24 │             memory: 128Mi
  25 │             cpu: 200m
  26 │           requests:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 studentservice.yaml:19-58
────────────────────────────────────────
  19 ┌       - name: student-service
  20 │         image: oluchioraekwe/studentservice:latest
  21 │         imagePullPolicy: Always
  22 │         resources:
  23 │           limits:
  24 │             memory: 128Mi
  25 │             cpu: 200m
  26 │           requests:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "student-service" of deployment "student-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 studentservice.yaml:19-58
────────────────────────────────────────
  19 ┌       - name: student-service
  20 │         image: oluchioraekwe/studentservice:latest
  21 │         imagePullPolicy: Always
  22 │         resources:
  23 │           limits:
  24 │             memory: 128Mi
  25 │             cpu: 200m
  26 │           requests:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 studentservice.yaml:19-58
────────────────────────────────────────
  19 ┌       - name: student-service
  20 │         image: oluchioraekwe/studentservice:latest
  21 │         imagePullPolicy: Always
  22 │         resources:
  23 │           limits:
  24 │             memory: 128Mi
  25 │             cpu: 200m
  26 │           requests:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment student-service in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 studentservice.yaml:4-6
────────────────────────────────────────
   4 ┌   name: student-service
   5 │   labels:
   6 └     app: student-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container student-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 studentservice.yaml:19-58
────────────────────────────────────────
  19 ┌       - name: student-service
  20 │         image: oluchioraekwe/studentservice:latest
  21 │         imagePullPolicy: Always
  22 │         resources:
  23 │           limits:
  24 │             memory: 128Mi
  25 │             cpu: 200m
  26 │           requests:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment student-service in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 studentservice.yaml:17-58
────────────────────────────────────────
  17 ┌       terminationGracePeriodSeconds: 30
  18 │       containers:
  19 │       - name: student-service
  20 │         image: oluchioraekwe/studentservice:latest
  21 │         imagePullPolicy: Always
  22 │         resources:
  23 │           limits:
  24 │             memory: 128Mi
  25 └             cpu: 200m
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container student-service in deployment student-service (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 studentservice.yaml:19-58
────────────────────────────────────────
  19 ┌       - name: student-service
  20 │         image: oluchioraekwe/studentservice:latest
  21 │         imagePullPolicy: Always
  22 │         resources:
  23 │           limits:
  24 │             memory: 128Mi
  25 │             cpu: 200m
  26 │           requests:
  27 └             cpu: 200m
  ..   
────────────────────────────────────────



studio-deployment.yaml (kubernetes)
===================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'studio' of Deployment 'studio-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 studio-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌             - name: studio
  19 │               image: agnost-community/studio
  20 │                # We will be using the minikube docker daemon, since the actual docker daemon on local machine are different
  21 │                # Prevent minikube docker daemon to pull images from central docker hub set imagePullPolicy to Never, so that
  22 │                # it uses the image put in minikube's docker environment, see dev.sh script how we change the docker context to minikube
  23 │               imagePullPolicy: Never
  24 │               ports:
  25 └                  - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'studio' of Deployment 'studio-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 studio-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌             - name: studio
  19 │               image: agnost-community/studio
  20 │                # We will be using the minikube docker daemon, since the actual docker daemon on local machine are different
  21 │                # Prevent minikube docker daemon to pull images from central docker hub set imagePullPolicy to Never, so that
  22 │                # it uses the image put in minikube's docker environment, see dev.sh script how we change the docker context to minikube
  23 │               imagePullPolicy: Never
  24 │               ports:
  25 └                  - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'studio' of 'deployment' 'studio-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 studio-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌             - name: studio
  19 │               image: agnost-community/studio
  20 │                # We will be using the minikube docker daemon, since the actual docker daemon on local machine are different
  21 │                # Prevent minikube docker daemon to pull images from central docker hub set imagePullPolicy to Never, so that
  22 │                # it uses the image put in minikube's docker environment, see dev.sh script how we change the docker context to minikube
  23 │               imagePullPolicy: Never
  24 │               ports:
  25 └                  - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'studio' of Deployment 'studio-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 studio-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌             - name: studio
  19 │               image: agnost-community/studio
  20 │                # We will be using the minikube docker daemon, since the actual docker daemon on local machine are different
  21 │                # Prevent minikube docker daemon to pull images from central docker hub set imagePullPolicy to Never, so that
  22 │                # it uses the image put in minikube's docker environment, see dev.sh script how we change the docker context to minikube
  23 │               imagePullPolicy: Never
  24 │               ports:
  25 └                  - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'studio' of Deployment 'studio-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 studio-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌             - name: studio
  19 │               image: agnost-community/studio
  20 │                # We will be using the minikube docker daemon, since the actual docker daemon on local machine are different
  21 │                # Prevent minikube docker daemon to pull images from central docker hub set imagePullPolicy to Never, so that
  22 │                # it uses the image put in minikube's docker environment, see dev.sh script how we change the docker context to minikube
  23 │               imagePullPolicy: Never
  24 │               ports:
  25 └                  - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'studio' of Deployment 'studio-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 studio-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌             - name: studio
  19 │               image: agnost-community/studio
  20 │                # We will be using the minikube docker daemon, since the actual docker daemon on local machine are different
  21 │                # Prevent minikube docker daemon to pull images from central docker hub set imagePullPolicy to Never, so that
  22 │                # it uses the image put in minikube's docker environment, see dev.sh script how we change the docker context to minikube
  23 │               imagePullPolicy: Never
  24 │               ports:
  25 └                  - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'studio' of Deployment 'studio-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 studio-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌             - name: studio
  19 │               image: agnost-community/studio
  20 │                # We will be using the minikube docker daemon, since the actual docker daemon on local machine are different
  21 │                # Prevent minikube docker daemon to pull images from central docker hub set imagePullPolicy to Never, so that
  22 │                # it uses the image put in minikube's docker environment, see dev.sh script how we change the docker context to minikube
  23 │               imagePullPolicy: Never
  24 │               ports:
  25 └                  - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'studio' of Deployment 'studio-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 studio-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌             - name: studio
  19 │               image: agnost-community/studio
  20 │                # We will be using the minikube docker daemon, since the actual docker daemon on local machine are different
  21 │                # Prevent minikube docker daemon to pull images from central docker hub set imagePullPolicy to Never, so that
  22 │                # it uses the image put in minikube's docker environment, see dev.sh script how we change the docker context to minikube
  23 │               imagePullPolicy: Never
  24 │               ports:
  25 └                  - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'studio' of Deployment 'studio-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 studio-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌             - name: studio
  19 │               image: agnost-community/studio
  20 │                # We will be using the minikube docker daemon, since the actual docker daemon on local machine are different
  21 │                # Prevent minikube docker daemon to pull images from central docker hub set imagePullPolicy to Never, so that
  22 │                # it uses the image put in minikube's docker environment, see dev.sh script how we change the docker context to minikube
  23 │               imagePullPolicy: Never
  24 │               ports:
  25 └                  - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'studio' of Deployment 'studio-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 studio-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌             - name: studio
  19 │               image: agnost-community/studio
  20 │                # We will be using the minikube docker daemon, since the actual docker daemon on local machine are different
  21 │                # Prevent minikube docker daemon to pull images from central docker hub set imagePullPolicy to Never, so that
  22 │                # it uses the image put in minikube's docker environment, see dev.sh script how we change the docker context to minikube
  23 │               imagePullPolicy: Never
  24 │               ports:
  25 └                  - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'studio' of Deployment 'studio-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 studio-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌             - name: studio
  19 │               image: agnost-community/studio
  20 │                # We will be using the minikube docker daemon, since the actual docker daemon on local machine are different
  21 │                # Prevent minikube docker daemon to pull images from central docker hub set imagePullPolicy to Never, so that
  22 │                # it uses the image put in minikube's docker environment, see dev.sh script how we change the docker context to minikube
  23 │               imagePullPolicy: Never
  24 │               ports:
  25 └                  - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'studio' of Deployment 'studio-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 studio-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌             - name: studio
  19 │               image: agnost-community/studio
  20 │                # We will be using the minikube docker daemon, since the actual docker daemon on local machine are different
  21 │                # Prevent minikube docker daemon to pull images from central docker hub set imagePullPolicy to Never, so that
  22 │                # it uses the image put in minikube's docker environment, see dev.sh script how we change the docker context to minikube
  23 │               imagePullPolicy: Never
  24 │               ports:
  25 └                  - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 studio-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌             - name: studio
  19 │               image: agnost-community/studio
  20 │                # We will be using the minikube docker daemon, since the actual docker daemon on local machine are different
  21 │                # Prevent minikube docker daemon to pull images from central docker hub set imagePullPolicy to Never, so that
  22 │                # it uses the image put in minikube's docker environment, see dev.sh script how we change the docker context to minikube
  23 │               imagePullPolicy: Never
  24 │               ports:
  25 └                  - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "studio" of deployment "studio-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 studio-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌             - name: studio
  19 │               image: agnost-community/studio
  20 │                # We will be using the minikube docker daemon, since the actual docker daemon on local machine are different
  21 │                # Prevent minikube docker daemon to pull images from central docker hub set imagePullPolicy to Never, so that
  22 │                # it uses the image put in minikube's docker environment, see dev.sh script how we change the docker context to minikube
  23 │               imagePullPolicy: Never
  24 │               ports:
  25 └                  - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 studio-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌             - name: studio
  19 │               image: agnost-community/studio
  20 │                # We will be using the minikube docker daemon, since the actual docker daemon on local machine are different
  21 │                # Prevent minikube docker daemon to pull images from central docker hub set imagePullPolicy to Never, so that
  22 │                # it uses the image put in minikube's docker environment, see dev.sh script how we change the docker context to minikube
  23 │               imagePullPolicy: Never
  24 │               ports:
  25 └                  - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment studio-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 studio-deployment.yaml:4-6
────────────────────────────────────────
   4 ┌    name: studio-deployment
   5 │    labels:
   6 └       app: studio
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container studio-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 studio-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌             - name: studio
  19 │               image: agnost-community/studio
  20 │                # We will be using the minikube docker daemon, since the actual docker daemon on local machine are different
  21 │                # Prevent minikube docker daemon to pull images from central docker hub set imagePullPolicy to Never, so that
  22 │                # it uses the image put in minikube's docker environment, see dev.sh script how we change the docker context to minikube
  23 │               imagePullPolicy: Never
  24 │               ports:
  25 └                  - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment studio-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 studio-deployment.yaml:17-25
────────────────────────────────────────
  17 ┌          containers:
  18 │             - name: studio
  19 │               image: agnost-community/studio
  20 │                # We will be using the minikube docker daemon, since the actual docker daemon on local machine are different
  21 │                # Prevent minikube docker daemon to pull images from central docker hub set imagePullPolicy to Never, so that
  22 │                # it uses the image put in minikube's docker environment, see dev.sh script how we change the docker context to minikube
  23 │               imagePullPolicy: Never
  24 │               ports:
  25 └                  - containerPort: 4000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container studio in deployment studio-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 studio-deployment.yaml:18-25
────────────────────────────────────────
  18 ┌             - name: studio
  19 │               image: agnost-community/studio
  20 │                # We will be using the minikube docker daemon, since the actual docker daemon on local machine are different
  21 │                # Prevent minikube docker daemon to pull images from central docker hub set imagePullPolicy to Never, so that
  22 │                # it uses the image put in minikube's docker environment, see dev.sh script how we change the docker context to minikube
  23 │               imagePullPolicy: Never
  24 │               ports:
  25 └                  - containerPort: 4000
────────────────────────────────────────



studio1_1.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'supabase-studio' of Deployment 'supabase-studio' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 studio1_1.yaml:16-56
────────────────────────────────────────
  16 ┌       - name: supabase-studio
  17 │         image: supabase/studio:20240923-2e3e90c
  18 │         ports:
  19 │         - containerPort: 3000
  20 │         env:
  21 │         - name: STUDIO_PG_META_URL
  22 │           value: http://supabase-meta-service:8080
  23 │         - name: POSTGRES_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'supabase-studio' of Deployment 'supabase-studio' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 studio1_1.yaml:16-56
────────────────────────────────────────
  16 ┌       - name: supabase-studio
  17 │         image: supabase/studio:20240923-2e3e90c
  18 │         ports:
  19 │         - containerPort: 3000
  20 │         env:
  21 │         - name: STUDIO_PG_META_URL
  22 │           value: http://supabase-meta-service:8080
  23 │         - name: POSTGRES_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'supabase-studio' of 'deployment' 'supabase-studio' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 studio1_1.yaml:16-56
────────────────────────────────────────
  16 ┌       - name: supabase-studio
  17 │         image: supabase/studio:20240923-2e3e90c
  18 │         ports:
  19 │         - containerPort: 3000
  20 │         env:
  21 │         - name: STUDIO_PG_META_URL
  22 │           value: http://supabase-meta-service:8080
  23 │         - name: POSTGRES_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'supabase-studio' of Deployment 'supabase-studio' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 studio1_1.yaml:16-56
────────────────────────────────────────
  16 ┌       - name: supabase-studio
  17 │         image: supabase/studio:20240923-2e3e90c
  18 │         ports:
  19 │         - containerPort: 3000
  20 │         env:
  21 │         - name: STUDIO_PG_META_URL
  22 │           value: http://supabase-meta-service:8080
  23 │         - name: POSTGRES_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'supabase-studio' of Deployment 'supabase-studio' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 studio1_1.yaml:16-56
────────────────────────────────────────
  16 ┌       - name: supabase-studio
  17 │         image: supabase/studio:20240923-2e3e90c
  18 │         ports:
  19 │         - containerPort: 3000
  20 │         env:
  21 │         - name: STUDIO_PG_META_URL
  22 │           value: http://supabase-meta-service:8080
  23 │         - name: POSTGRES_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'supabase-studio' of Deployment 'supabase-studio' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 studio1_1.yaml:16-56
────────────────────────────────────────
  16 ┌       - name: supabase-studio
  17 │         image: supabase/studio:20240923-2e3e90c
  18 │         ports:
  19 │         - containerPort: 3000
  20 │         env:
  21 │         - name: STUDIO_PG_META_URL
  22 │           value: http://supabase-meta-service:8080
  23 │         - name: POSTGRES_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'supabase-studio' of Deployment 'supabase-studio' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 studio1_1.yaml:16-56
────────────────────────────────────────
  16 ┌       - name: supabase-studio
  17 │         image: supabase/studio:20240923-2e3e90c
  18 │         ports:
  19 │         - containerPort: 3000
  20 │         env:
  21 │         - name: STUDIO_PG_META_URL
  22 │           value: http://supabase-meta-service:8080
  23 │         - name: POSTGRES_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'supabase-studio' of Deployment 'supabase-studio' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 studio1_1.yaml:16-56
────────────────────────────────────────
  16 ┌       - name: supabase-studio
  17 │         image: supabase/studio:20240923-2e3e90c
  18 │         ports:
  19 │         - containerPort: 3000
  20 │         env:
  21 │         - name: STUDIO_PG_META_URL
  22 │           value: http://supabase-meta-service:8080
  23 │         - name: POSTGRES_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'supabase-studio' of Deployment 'supabase-studio' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 studio1_1.yaml:16-56
────────────────────────────────────────
  16 ┌       - name: supabase-studio
  17 │         image: supabase/studio:20240923-2e3e90c
  18 │         ports:
  19 │         - containerPort: 3000
  20 │         env:
  21 │         - name: STUDIO_PG_META_URL
  22 │           value: http://supabase-meta-service:8080
  23 │         - name: POSTGRES_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'supabase-studio' of Deployment 'supabase-studio' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 studio1_1.yaml:16-56
────────────────────────────────────────
  16 ┌       - name: supabase-studio
  17 │         image: supabase/studio:20240923-2e3e90c
  18 │         ports:
  19 │         - containerPort: 3000
  20 │         env:
  21 │         - name: STUDIO_PG_META_URL
  22 │           value: http://supabase-meta-service:8080
  23 │         - name: POSTGRES_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'supabase-studio' of Deployment 'supabase-studio' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 studio1_1.yaml:16-56
────────────────────────────────────────
  16 ┌       - name: supabase-studio
  17 │         image: supabase/studio:20240923-2e3e90c
  18 │         ports:
  19 │         - containerPort: 3000
  20 │         env:
  21 │         - name: STUDIO_PG_META_URL
  22 │           value: http://supabase-meta-service:8080
  23 │         - name: POSTGRES_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 studio1_1.yaml:16-56
────────────────────────────────────────
  16 ┌       - name: supabase-studio
  17 │         image: supabase/studio:20240923-2e3e90c
  18 │         ports:
  19 │         - containerPort: 3000
  20 │         env:
  21 │         - name: STUDIO_PG_META_URL
  22 │           value: http://supabase-meta-service:8080
  23 │         - name: POSTGRES_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "supabase-studio" of deployment "supabase-studio" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 studio1_1.yaml:16-56
────────────────────────────────────────
  16 ┌       - name: supabase-studio
  17 │         image: supabase/studio:20240923-2e3e90c
  18 │         ports:
  19 │         - containerPort: 3000
  20 │         env:
  21 │         - name: STUDIO_PG_META_URL
  22 │           value: http://supabase-meta-service:8080
  23 │         - name: POSTGRES_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 studio1_1.yaml:16-56
────────────────────────────────────────
  16 ┌       - name: supabase-studio
  17 │         image: supabase/studio:20240923-2e3e90c
  18 │         ports:
  19 │         - containerPort: 3000
  20 │         env:
  21 │         - name: STUDIO_PG_META_URL
  22 │           value: http://supabase-meta-service:8080
  23 │         - name: POSTGRES_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment supabase-studio in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 studio1_1.yaml:4
────────────────────────────────────────
   4 [   name: supabase-studio
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container supabase-studio in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 studio1_1.yaml:16-56
────────────────────────────────────────
  16 ┌       - name: supabase-studio
  17 │         image: supabase/studio:20240923-2e3e90c
  18 │         ports:
  19 │         - containerPort: 3000
  20 │         env:
  21 │         - name: STUDIO_PG_META_URL
  22 │           value: http://supabase-meta-service:8080
  23 │         - name: POSTGRES_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment supabase-studio in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 studio1_1.yaml:15-56
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: supabase-studio
  17 │         image: supabase/studio:20240923-2e3e90c
  18 │         ports:
  19 │         - containerPort: 3000
  20 │         env:
  21 │         - name: STUDIO_PG_META_URL
  22 │           value: http://supabase-meta-service:8080
  23 └         - name: POSTGRES_PASSWORD
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container supabase-studio in deployment supabase-studio (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 studio1_1.yaml:16-56
────────────────────────────────────────
  16 ┌       - name: supabase-studio
  17 │         image: supabase/studio:20240923-2e3e90c
  18 │         ports:
  19 │         - containerPort: 3000
  20 │         env:
  21 │         - name: STUDIO_PG_META_URL
  22 │           value: http://supabase-meta-service:8080
  23 │         - name: POSTGRES_PASSWORD
  24 └           valueFrom:
  ..   
────────────────────────────────────────



study22-acc-receiver_1.yaml (kubernetes)
========================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'study22-acc-receiver' of Deployment 'study22-acc-receiver' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 study22-acc-receiver_1.yaml:23-34
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: KUBERNETES_NAMESPACE
  25 │           valueFrom:
  26 │             fieldRef:
  27 │               fieldPath: metadata.namespace
  28 │         image: eeengcs/study22-acc-receiver:1.0.0-SNAPSHOT
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: study22-acc-receiver
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'study22-acc-receiver' of Deployment 'study22-acc-receiver' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 study22-acc-receiver_1.yaml:23-34
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: KUBERNETES_NAMESPACE
  25 │           valueFrom:
  26 │             fieldRef:
  27 │               fieldPath: metadata.namespace
  28 │         image: eeengcs/study22-acc-receiver:1.0.0-SNAPSHOT
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: study22-acc-receiver
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'study22-acc-receiver' of 'deployment' 'study22-acc-receiver' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 study22-acc-receiver_1.yaml:23-34
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: KUBERNETES_NAMESPACE
  25 │           valueFrom:
  26 │             fieldRef:
  27 │               fieldPath: metadata.namespace
  28 │         image: eeengcs/study22-acc-receiver:1.0.0-SNAPSHOT
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: study22-acc-receiver
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'study22-acc-receiver' of Deployment 'study22-acc-receiver' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 study22-acc-receiver_1.yaml:23-34
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: KUBERNETES_NAMESPACE
  25 │           valueFrom:
  26 │             fieldRef:
  27 │               fieldPath: metadata.namespace
  28 │         image: eeengcs/study22-acc-receiver:1.0.0-SNAPSHOT
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: study22-acc-receiver
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'study22-acc-receiver' of Deployment 'study22-acc-receiver' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 study22-acc-receiver_1.yaml:23-34
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: KUBERNETES_NAMESPACE
  25 │           valueFrom:
  26 │             fieldRef:
  27 │               fieldPath: metadata.namespace
  28 │         image: eeengcs/study22-acc-receiver:1.0.0-SNAPSHOT
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: study22-acc-receiver
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'study22-acc-receiver' of Deployment 'study22-acc-receiver' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 study22-acc-receiver_1.yaml:23-34
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: KUBERNETES_NAMESPACE
  25 │           valueFrom:
  26 │             fieldRef:
  27 │               fieldPath: metadata.namespace
  28 │         image: eeengcs/study22-acc-receiver:1.0.0-SNAPSHOT
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: study22-acc-receiver
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'study22-acc-receiver' of Deployment 'study22-acc-receiver' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 study22-acc-receiver_1.yaml:23-34
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: KUBERNETES_NAMESPACE
  25 │           valueFrom:
  26 │             fieldRef:
  27 │               fieldPath: metadata.namespace
  28 │         image: eeengcs/study22-acc-receiver:1.0.0-SNAPSHOT
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: study22-acc-receiver
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'study22-acc-receiver' of Deployment 'study22-acc-receiver' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 study22-acc-receiver_1.yaml:23-34
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: KUBERNETES_NAMESPACE
  25 │           valueFrom:
  26 │             fieldRef:
  27 │               fieldPath: metadata.namespace
  28 │         image: eeengcs/study22-acc-receiver:1.0.0-SNAPSHOT
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: study22-acc-receiver
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'study22-acc-receiver' of Deployment 'study22-acc-receiver' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 study22-acc-receiver_1.yaml:23-34
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: KUBERNETES_NAMESPACE
  25 │           valueFrom:
  26 │             fieldRef:
  27 │               fieldPath: metadata.namespace
  28 │         image: eeengcs/study22-acc-receiver:1.0.0-SNAPSHOT
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: study22-acc-receiver
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'study22-acc-receiver' of Deployment 'study22-acc-receiver' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 study22-acc-receiver_1.yaml:23-34
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: KUBERNETES_NAMESPACE
  25 │           valueFrom:
  26 │             fieldRef:
  27 │               fieldPath: metadata.namespace
  28 │         image: eeengcs/study22-acc-receiver:1.0.0-SNAPSHOT
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: study22-acc-receiver
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'study22-acc-receiver' of Deployment 'study22-acc-receiver' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 study22-acc-receiver_1.yaml:23-34
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: KUBERNETES_NAMESPACE
  25 │           valueFrom:
  26 │             fieldRef:
  27 │               fieldPath: metadata.namespace
  28 │         image: eeengcs/study22-acc-receiver:1.0.0-SNAPSHOT
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: study22-acc-receiver
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 study22-acc-receiver_1.yaml:23-34
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: KUBERNETES_NAMESPACE
  25 │           valueFrom:
  26 │             fieldRef:
  27 │               fieldPath: metadata.namespace
  28 │         image: eeengcs/study22-acc-receiver:1.0.0-SNAPSHOT
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: study22-acc-receiver
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "study22-acc-receiver" of deployment "study22-acc-receiver" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 study22-acc-receiver_1.yaml:23-34
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: KUBERNETES_NAMESPACE
  25 │           valueFrom:
  26 │             fieldRef:
  27 │               fieldPath: metadata.namespace
  28 │         image: eeengcs/study22-acc-receiver:1.0.0-SNAPSHOT
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: study22-acc-receiver
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 study22-acc-receiver_1.yaml:23-34
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: KUBERNETES_NAMESPACE
  25 │           valueFrom:
  26 │             fieldRef:
  27 │               fieldPath: metadata.namespace
  28 │         image: eeengcs/study22-acc-receiver:1.0.0-SNAPSHOT
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: study22-acc-receiver
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment study22-acc-receiver in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 study22-acc-receiver_1.yaml:4-8
────────────────────────────────────────
   4 ┌   labels:
   5 │     app.kubernetes.io/name: study22-acc-receiver
   6 │     app.kubernetes.io/version: 1.0.0-SNAPSHOT
   7 │     app.kubernetes.io/managed-by: quarkus
   8 └   name: study22-acc-receiver
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container study22-acc-receiver in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 study22-acc-receiver_1.yaml:23-34
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: KUBERNETES_NAMESPACE
  25 │           valueFrom:
  26 │             fieldRef:
  27 │               fieldPath: metadata.namespace
  28 │         image: eeengcs/study22-acc-receiver:1.0.0-SNAPSHOT
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: study22-acc-receiver
  31 └         ports:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment study22-acc-receiver in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 study22-acc-receiver_1.yaml:22-34
────────────────────────────────────────
  22 ┌       containers:
  23 │       - env:
  24 │         - name: KUBERNETES_NAMESPACE
  25 │           valueFrom:
  26 │             fieldRef:
  27 │               fieldPath: metadata.namespace
  28 │         image: eeengcs/study22-acc-receiver:1.0.0-SNAPSHOT
  29 │         imagePullPolicy: IfNotPresent
  30 └         name: study22-acc-receiver
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container study22-acc-receiver in deployment study22-acc-receiver (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 study22-acc-receiver_1.yaml:23-34
────────────────────────────────────────
  23 ┌       - env:
  24 │         - name: KUBERNETES_NAMESPACE
  25 │           valueFrom:
  26 │             fieldRef:
  27 │               fieldPath: metadata.namespace
  28 │         image: eeengcs/study22-acc-receiver:1.0.0-SNAPSHOT
  29 │         imagePullPolicy: IfNotPresent
  30 │         name: study22-acc-receiver
  31 └         ports:
  ..   
────────────────────────────────────────



study22-acc-sender.yaml (kubernetes)
====================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'study22-acc-sender' of Deployment 'study22-acc-sender' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 study22-acc-sender.yaml:22-29
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: KUBERNETES_NAMESPACE
  24 │               valueFrom:
  25 │                 fieldRef:
  26 │                   fieldPath: metadata.namespace
  27 │           image: eeengcs/study22-acc-sender:1.0.0-SNAPSHOT
  28 │           imagePullPolicy: IfNotPresent
  29 └           name: study22-acc-sender
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'study22-acc-sender' of Deployment 'study22-acc-sender' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 study22-acc-sender.yaml:22-29
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: KUBERNETES_NAMESPACE
  24 │               valueFrom:
  25 │                 fieldRef:
  26 │                   fieldPath: metadata.namespace
  27 │           image: eeengcs/study22-acc-sender:1.0.0-SNAPSHOT
  28 │           imagePullPolicy: IfNotPresent
  29 └           name: study22-acc-sender
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'study22-acc-sender' of 'deployment' 'study22-acc-sender' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 study22-acc-sender.yaml:22-29
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: KUBERNETES_NAMESPACE
  24 │               valueFrom:
  25 │                 fieldRef:
  26 │                   fieldPath: metadata.namespace
  27 │           image: eeengcs/study22-acc-sender:1.0.0-SNAPSHOT
  28 │           imagePullPolicy: IfNotPresent
  29 └           name: study22-acc-sender
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'study22-acc-sender' of Deployment 'study22-acc-sender' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 study22-acc-sender.yaml:22-29
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: KUBERNETES_NAMESPACE
  24 │               valueFrom:
  25 │                 fieldRef:
  26 │                   fieldPath: metadata.namespace
  27 │           image: eeengcs/study22-acc-sender:1.0.0-SNAPSHOT
  28 │           imagePullPolicy: IfNotPresent
  29 └           name: study22-acc-sender
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'study22-acc-sender' of Deployment 'study22-acc-sender' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 study22-acc-sender.yaml:22-29
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: KUBERNETES_NAMESPACE
  24 │               valueFrom:
  25 │                 fieldRef:
  26 │                   fieldPath: metadata.namespace
  27 │           image: eeengcs/study22-acc-sender:1.0.0-SNAPSHOT
  28 │           imagePullPolicy: IfNotPresent
  29 └           name: study22-acc-sender
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'study22-acc-sender' of Deployment 'study22-acc-sender' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 study22-acc-sender.yaml:22-29
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: KUBERNETES_NAMESPACE
  24 │               valueFrom:
  25 │                 fieldRef:
  26 │                   fieldPath: metadata.namespace
  27 │           image: eeengcs/study22-acc-sender:1.0.0-SNAPSHOT
  28 │           imagePullPolicy: IfNotPresent
  29 └           name: study22-acc-sender
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'study22-acc-sender' of Deployment 'study22-acc-sender' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 study22-acc-sender.yaml:22-29
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: KUBERNETES_NAMESPACE
  24 │               valueFrom:
  25 │                 fieldRef:
  26 │                   fieldPath: metadata.namespace
  27 │           image: eeengcs/study22-acc-sender:1.0.0-SNAPSHOT
  28 │           imagePullPolicy: IfNotPresent
  29 └           name: study22-acc-sender
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'study22-acc-sender' of Deployment 'study22-acc-sender' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 study22-acc-sender.yaml:22-29
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: KUBERNETES_NAMESPACE
  24 │               valueFrom:
  25 │                 fieldRef:
  26 │                   fieldPath: metadata.namespace
  27 │           image: eeengcs/study22-acc-sender:1.0.0-SNAPSHOT
  28 │           imagePullPolicy: IfNotPresent
  29 └           name: study22-acc-sender
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'study22-acc-sender' of Deployment 'study22-acc-sender' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 study22-acc-sender.yaml:22-29
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: KUBERNETES_NAMESPACE
  24 │               valueFrom:
  25 │                 fieldRef:
  26 │                   fieldPath: metadata.namespace
  27 │           image: eeengcs/study22-acc-sender:1.0.0-SNAPSHOT
  28 │           imagePullPolicy: IfNotPresent
  29 └           name: study22-acc-sender
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'study22-acc-sender' of Deployment 'study22-acc-sender' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 study22-acc-sender.yaml:22-29
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: KUBERNETES_NAMESPACE
  24 │               valueFrom:
  25 │                 fieldRef:
  26 │                   fieldPath: metadata.namespace
  27 │           image: eeengcs/study22-acc-sender:1.0.0-SNAPSHOT
  28 │           imagePullPolicy: IfNotPresent
  29 └           name: study22-acc-sender
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'study22-acc-sender' of Deployment 'study22-acc-sender' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 study22-acc-sender.yaml:22-29
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: KUBERNETES_NAMESPACE
  24 │               valueFrom:
  25 │                 fieldRef:
  26 │                   fieldPath: metadata.namespace
  27 │           image: eeengcs/study22-acc-sender:1.0.0-SNAPSHOT
  28 │           imagePullPolicy: IfNotPresent
  29 └           name: study22-acc-sender
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 study22-acc-sender.yaml:22-29
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: KUBERNETES_NAMESPACE
  24 │               valueFrom:
  25 │                 fieldRef:
  26 │                   fieldPath: metadata.namespace
  27 │           image: eeengcs/study22-acc-sender:1.0.0-SNAPSHOT
  28 │           imagePullPolicy: IfNotPresent
  29 └           name: study22-acc-sender
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "study22-acc-sender" of deployment "study22-acc-sender" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 study22-acc-sender.yaml:22-29
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: KUBERNETES_NAMESPACE
  24 │               valueFrom:
  25 │                 fieldRef:
  26 │                   fieldPath: metadata.namespace
  27 │           image: eeengcs/study22-acc-sender:1.0.0-SNAPSHOT
  28 │           imagePullPolicy: IfNotPresent
  29 └           name: study22-acc-sender
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 study22-acc-sender.yaml:22-29
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: KUBERNETES_NAMESPACE
  24 │               valueFrom:
  25 │                 fieldRef:
  26 │                   fieldPath: metadata.namespace
  27 │           image: eeengcs/study22-acc-sender:1.0.0-SNAPSHOT
  28 │           imagePullPolicy: IfNotPresent
  29 └           name: study22-acc-sender
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment study22-acc-sender in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 study22-acc-sender.yaml:5-8
────────────────────────────────────────
   5 ┌   labels:
   6 │     app.kubernetes.io/name: study22-acc-sender
   7 │     app.kubernetes.io/version: 1.0.0-SNAPSHOT
   8 └   name: study22-acc-sender
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container study22-acc-sender in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 study22-acc-sender.yaml:22-29
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: KUBERNETES_NAMESPACE
  24 │               valueFrom:
  25 │                 fieldRef:
  26 │                   fieldPath: metadata.namespace
  27 │           image: eeengcs/study22-acc-sender:1.0.0-SNAPSHOT
  28 │           imagePullPolicy: IfNotPresent
  29 └           name: study22-acc-sender
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment study22-acc-sender in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 study22-acc-sender.yaml:21-29
────────────────────────────────────────
  21 ┌       containers:
  22 │         - env:
  23 │             - name: KUBERNETES_NAMESPACE
  24 │               valueFrom:
  25 │                 fieldRef:
  26 │                   fieldPath: metadata.namespace
  27 │           image: eeengcs/study22-acc-sender:1.0.0-SNAPSHOT
  28 │           imagePullPolicy: IfNotPresent
  29 └           name: study22-acc-sender
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container study22-acc-sender in deployment study22-acc-sender (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 study22-acc-sender.yaml:22-29
────────────────────────────────────────
  22 ┌         - env:
  23 │             - name: KUBERNETES_NAMESPACE
  24 │               valueFrom:
  25 │                 fieldRef:
  26 │                   fieldPath: metadata.namespace
  27 │           image: eeengcs/study22-acc-sender:1.0.0-SNAPSHOT
  28 │           imagePullPolicy: IfNotPresent
  29 └           name: study22-acc-sender
────────────────────────────────────────



subdomain_2.yaml (kubernetes)
=============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'subdomain-simple-container-1' of Pod 'subdomain-simple-pod-1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 subdomain_2.yaml:9-13
────────────────────────────────────────
   9 ┌   - command:
  10 │     - sleep
  11 │     - '3600'
  12 │     image: busybox
  13 └     name: subdomain-simple-container-1
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'subdomain-simple-container-1' of Pod 'subdomain-simple-pod-1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 subdomain_2.yaml:9-13
────────────────────────────────────────
   9 ┌   - command:
  10 │     - sleep
  11 │     - '3600'
  12 │     image: busybox
  13 └     name: subdomain-simple-container-1
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'subdomain-simple-container-1' of 'pod' 'subdomain-simple-pod-1' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 subdomain_2.yaml:9-13
────────────────────────────────────────
   9 ┌   - command:
  10 │     - sleep
  11 │     - '3600'
  12 │     image: busybox
  13 └     name: subdomain-simple-container-1
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'subdomain-simple-container-1' of Pod 'subdomain-simple-pod-1' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 subdomain_2.yaml:9-13
────────────────────────────────────────
   9 ┌   - command:
  10 │     - sleep
  11 │     - '3600'
  12 │     image: busybox
  13 └     name: subdomain-simple-container-1
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'subdomain-simple-container-1' of Pod 'subdomain-simple-pod-1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 subdomain_2.yaml:9-13
────────────────────────────────────────
   9 ┌   - command:
  10 │     - sleep
  11 │     - '3600'
  12 │     image: busybox
  13 └     name: subdomain-simple-container-1
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'subdomain-simple-container-1' of Pod 'subdomain-simple-pod-1' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 subdomain_2.yaml:9-13
────────────────────────────────────────
   9 ┌   - command:
  10 │     - sleep
  11 │     - '3600'
  12 │     image: busybox
  13 └     name: subdomain-simple-container-1
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'subdomain-simple-container-1' of Pod 'subdomain-simple-pod-1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 subdomain_2.yaml:9-13
────────────────────────────────────────
   9 ┌   - command:
  10 │     - sleep
  11 │     - '3600'
  12 │     image: busybox
  13 └     name: subdomain-simple-container-1
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'subdomain-simple-container-1' of Pod 'subdomain-simple-pod-1' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 subdomain_2.yaml:9-13
────────────────────────────────────────
   9 ┌   - command:
  10 │     - sleep
  11 │     - '3600'
  12 │     image: busybox
  13 └     name: subdomain-simple-container-1
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'subdomain-simple-container-1' of Pod 'subdomain-simple-pod-1' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 subdomain_2.yaml:9-13
────────────────────────────────────────
   9 ┌   - command:
  10 │     - sleep
  11 │     - '3600'
  12 │     image: busybox
  13 └     name: subdomain-simple-container-1
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'subdomain-simple-container-1' of Pod 'subdomain-simple-pod-1' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 subdomain_2.yaml:9-13
────────────────────────────────────────
   9 ┌   - command:
  10 │     - sleep
  11 │     - '3600'
  12 │     image: busybox
  13 └     name: subdomain-simple-container-1
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'subdomain-simple-container-1' of Pod 'subdomain-simple-pod-1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 subdomain_2.yaml:9-13
────────────────────────────────────────
   9 ┌   - command:
  10 │     - sleep
  11 │     - '3600'
  12 │     image: busybox
  13 └     name: subdomain-simple-container-1
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'subdomain-simple-container-1' of Pod 'subdomain-simple-pod-1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 subdomain_2.yaml:9-13
────────────────────────────────────────
   9 ┌   - command:
  10 │     - sleep
  11 │     - '3600'
  12 │     image: busybox
  13 └     name: subdomain-simple-container-1
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 subdomain_2.yaml:9-13
────────────────────────────────────────
   9 ┌   - command:
  10 │     - sleep
  11 │     - '3600'
  12 │     image: busybox
  13 └     name: subdomain-simple-container-1
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "subdomain-simple-container-1" of pod "subdomain-simple-pod-1" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 subdomain_2.yaml:9-13
────────────────────────────────────────
   9 ┌   - command:
  10 │     - sleep
  11 │     - '3600'
  12 │     image: busybox
  13 └     name: subdomain-simple-container-1
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 subdomain_2.yaml:9-13
────────────────────────────────────────
   9 ┌   - command:
  10 │     - sleep
  11 │     - '3600'
  12 │     image: busybox
  13 └     name: subdomain-simple-container-1
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod subdomain-simple-pod-1 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 subdomain_2.yaml:4-6
────────────────────────────────────────
   4 ┌   labels:
   5 │     name: subdomain-simple-selector
   6 └   name: subdomain-simple-pod-1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container subdomain-simple-pod-1 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 subdomain_2.yaml:9-13
────────────────────────────────────────
   9 ┌   - command:
  10 │     - sleep
  11 │     - '3600'
  12 │     image: busybox
  13 └     name: subdomain-simple-container-1
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod subdomain-simple-pod-1 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 subdomain_2.yaml:8-15
────────────────────────────────────────
   8 ┌   containers:
   9 │   - command:
  10 │     - sleep
  11 │     - '3600'
  12 │     image: busybox
  13 │     name: subdomain-simple-container-1
  14 │   hostname: subdomain-simple-hostname-1
  15 └   subdomain: subdomain-simple-subdomain-service
────────────────────────────────────────



subdomain_3.yaml (kubernetes)
=============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'subdomain-simple-container-2' of Pod 'subdomain-simple-pod-2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 subdomain_3.yaml:9-13
────────────────────────────────────────
   9 ┌   - command:
  10 │     - sleep
  11 │     - '3600'
  12 │     image: busybox
  13 └     name: subdomain-simple-container-2
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'subdomain-simple-container-2' of Pod 'subdomain-simple-pod-2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 subdomain_3.yaml:9-13
────────────────────────────────────────
   9 ┌   - command:
  10 │     - sleep
  11 │     - '3600'
  12 │     image: busybox
  13 └     name: subdomain-simple-container-2
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'subdomain-simple-container-2' of 'pod' 'subdomain-simple-pod-2' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 subdomain_3.yaml:9-13
────────────────────────────────────────
   9 ┌   - command:
  10 │     - sleep
  11 │     - '3600'
  12 │     image: busybox
  13 └     name: subdomain-simple-container-2
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'subdomain-simple-container-2' of Pod 'subdomain-simple-pod-2' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 subdomain_3.yaml:9-13
────────────────────────────────────────
   9 ┌   - command:
  10 │     - sleep
  11 │     - '3600'
  12 │     image: busybox
  13 └     name: subdomain-simple-container-2
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'subdomain-simple-container-2' of Pod 'subdomain-simple-pod-2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 subdomain_3.yaml:9-13
────────────────────────────────────────
   9 ┌   - command:
  10 │     - sleep
  11 │     - '3600'
  12 │     image: busybox
  13 └     name: subdomain-simple-container-2
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'subdomain-simple-container-2' of Pod 'subdomain-simple-pod-2' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 subdomain_3.yaml:9-13
────────────────────────────────────────
   9 ┌   - command:
  10 │     - sleep
  11 │     - '3600'
  12 │     image: busybox
  13 └     name: subdomain-simple-container-2
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'subdomain-simple-container-2' of Pod 'subdomain-simple-pod-2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 subdomain_3.yaml:9-13
────────────────────────────────────────
   9 ┌   - command:
  10 │     - sleep
  11 │     - '3600'
  12 │     image: busybox
  13 └     name: subdomain-simple-container-2
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'subdomain-simple-container-2' of Pod 'subdomain-simple-pod-2' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 subdomain_3.yaml:9-13
────────────────────────────────────────
   9 ┌   - command:
  10 │     - sleep
  11 │     - '3600'
  12 │     image: busybox
  13 └     name: subdomain-simple-container-2
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'subdomain-simple-container-2' of Pod 'subdomain-simple-pod-2' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 subdomain_3.yaml:9-13
────────────────────────────────────────
   9 ┌   - command:
  10 │     - sleep
  11 │     - '3600'
  12 │     image: busybox
  13 └     name: subdomain-simple-container-2
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'subdomain-simple-container-2' of Pod 'subdomain-simple-pod-2' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 subdomain_3.yaml:9-13
────────────────────────────────────────
   9 ┌   - command:
  10 │     - sleep
  11 │     - '3600'
  12 │     image: busybox
  13 └     name: subdomain-simple-container-2
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'subdomain-simple-container-2' of Pod 'subdomain-simple-pod-2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 subdomain_3.yaml:9-13
────────────────────────────────────────
   9 ┌   - command:
  10 │     - sleep
  11 │     - '3600'
  12 │     image: busybox
  13 └     name: subdomain-simple-container-2
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'subdomain-simple-container-2' of Pod 'subdomain-simple-pod-2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 subdomain_3.yaml:9-13
────────────────────────────────────────
   9 ┌   - command:
  10 │     - sleep
  11 │     - '3600'
  12 │     image: busybox
  13 └     name: subdomain-simple-container-2
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 subdomain_3.yaml:9-13
────────────────────────────────────────
   9 ┌   - command:
  10 │     - sleep
  11 │     - '3600'
  12 │     image: busybox
  13 └     name: subdomain-simple-container-2
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "subdomain-simple-container-2" of pod "subdomain-simple-pod-2" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 subdomain_3.yaml:9-13
────────────────────────────────────────
   9 ┌   - command:
  10 │     - sleep
  11 │     - '3600'
  12 │     image: busybox
  13 └     name: subdomain-simple-container-2
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 subdomain_3.yaml:9-13
────────────────────────────────────────
   9 ┌   - command:
  10 │     - sleep
  11 │     - '3600'
  12 │     image: busybox
  13 └     name: subdomain-simple-container-2
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod subdomain-simple-pod-2 in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 subdomain_3.yaml:4-6
────────────────────────────────────────
   4 ┌   name: subdomain-simple-pod-2
   5 │   labels:
   6 └     name: subdomain-simple-selector
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container subdomain-simple-pod-2 in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 subdomain_3.yaml:9-13
────────────────────────────────────────
   9 ┌   - command:
  10 │     - sleep
  11 │     - '3600'
  12 │     image: busybox
  13 └     name: subdomain-simple-container-2
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod subdomain-simple-pod-2 in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 subdomain_3.yaml:8-15
────────────────────────────────────────
   8 ┌   containers:
   9 │   - command:
  10 │     - sleep
  11 │     - '3600'
  12 │     image: busybox
  13 │     name: subdomain-simple-container-2
  14 │   hostname: subdomain-simple-hostname-2
  15 └   subdomain: subdomain-simple-subdomain-service
────────────────────────────────────────



submodule-pod.yaml (kubernetes)
===============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'main' of Pod 'pod-in-submodule' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 submodule-pod.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: main
   8 │       image: quay.io/argoprojlabs/argocd-e2e-container:0.1
   9 └       imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'main' of Pod 'pod-in-submodule' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 submodule-pod.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: main
   8 │       image: quay.io/argoprojlabs/argocd-e2e-container:0.1
   9 └       imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'main' of 'pod' 'pod-in-submodule' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 submodule-pod.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: main
   8 │       image: quay.io/argoprojlabs/argocd-e2e-container:0.1
   9 └       imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'main' of Pod 'pod-in-submodule' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 submodule-pod.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: main
   8 │       image: quay.io/argoprojlabs/argocd-e2e-container:0.1
   9 └       imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'main' of Pod 'pod-in-submodule' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 submodule-pod.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: main
   8 │       image: quay.io/argoprojlabs/argocd-e2e-container:0.1
   9 └       imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'main' of Pod 'pod-in-submodule' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 submodule-pod.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: main
   8 │       image: quay.io/argoprojlabs/argocd-e2e-container:0.1
   9 └       imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'main' of Pod 'pod-in-submodule' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 submodule-pod.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: main
   8 │       image: quay.io/argoprojlabs/argocd-e2e-container:0.1
   9 └       imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'main' of Pod 'pod-in-submodule' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 submodule-pod.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: main
   8 │       image: quay.io/argoprojlabs/argocd-e2e-container:0.1
   9 └       imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'main' of Pod 'pod-in-submodule' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 submodule-pod.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: main
   8 │       image: quay.io/argoprojlabs/argocd-e2e-container:0.1
   9 └       imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Pod 'pod-in-submodule' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 submodule-pod.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: main
   8 │       image: quay.io/argoprojlabs/argocd-e2e-container:0.1
   9 └       imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Pod 'pod-in-submodule' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 submodule-pod.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: main
   8 │       image: quay.io/argoprojlabs/argocd-e2e-container:0.1
   9 └       imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 submodule-pod.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: main
   8 │       image: quay.io/argoprojlabs/argocd-e2e-container:0.1
   9 └       imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of pod "pod-in-submodule" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 submodule-pod.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: main
   8 │       image: quay.io/argoprojlabs/argocd-e2e-container:0.1
   9 └       imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 submodule-pod.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: main
   8 │       image: quay.io/argoprojlabs/argocd-e2e-container:0.1
   9 └       imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod pod-in-submodule in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 submodule-pod.yaml:4
────────────────────────────────────────
   4 [   name: pod-in-submodule
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-in-submodule in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 submodule-pod.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: main
   8 │       image: quay.io/argoprojlabs/argocd-e2e-container:0.1
   9 └       imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pod-in-submodule in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 submodule-pod.yaml:6-10
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: main
   8 │       image: quay.io/argoprojlabs/argocd-e2e-container:0.1
   9 │       imagePullPolicy: IfNotPresent
  10 └   terminationGracePeriodSeconds: 0
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container main in pod pod-in-submodule (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 submodule-pod.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: main
   8 │       image: quay.io/argoprojlabs/argocd-e2e-container:0.1
   9 └       imagePullPolicy: IfNotPresent
────────────────────────────────────────



submodule-pod1.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'main' of Pod 'pod-in-submodule' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 submodule-pod1.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: main
   8 │       image: quay.io/argoprojlabs/argocd-e2e-container:0.1
   9 └       imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'main' of Pod 'pod-in-submodule' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 submodule-pod1.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: main
   8 │       image: quay.io/argoprojlabs/argocd-e2e-container:0.1
   9 └       imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'main' of 'pod' 'pod-in-submodule' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 submodule-pod1.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: main
   8 │       image: quay.io/argoprojlabs/argocd-e2e-container:0.1
   9 └       imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'main' of Pod 'pod-in-submodule' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 submodule-pod1.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: main
   8 │       image: quay.io/argoprojlabs/argocd-e2e-container:0.1
   9 └       imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'main' of Pod 'pod-in-submodule' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 submodule-pod1.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: main
   8 │       image: quay.io/argoprojlabs/argocd-e2e-container:0.1
   9 └       imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'main' of Pod 'pod-in-submodule' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 submodule-pod1.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: main
   8 │       image: quay.io/argoprojlabs/argocd-e2e-container:0.1
   9 └       imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'main' of Pod 'pod-in-submodule' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 submodule-pod1.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: main
   8 │       image: quay.io/argoprojlabs/argocd-e2e-container:0.1
   9 └       imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'main' of Pod 'pod-in-submodule' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 submodule-pod1.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: main
   8 │       image: quay.io/argoprojlabs/argocd-e2e-container:0.1
   9 └       imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'main' of Pod 'pod-in-submodule' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 submodule-pod1.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: main
   8 │       image: quay.io/argoprojlabs/argocd-e2e-container:0.1
   9 └       imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'main' of Pod 'pod-in-submodule' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 submodule-pod1.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: main
   8 │       image: quay.io/argoprojlabs/argocd-e2e-container:0.1
   9 └       imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'main' of Pod 'pod-in-submodule' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 submodule-pod1.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: main
   8 │       image: quay.io/argoprojlabs/argocd-e2e-container:0.1
   9 └       imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 submodule-pod1.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: main
   8 │       image: quay.io/argoprojlabs/argocd-e2e-container:0.1
   9 └       imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "main" of pod "pod-in-submodule" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 submodule-pod1.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: main
   8 │       image: quay.io/argoprojlabs/argocd-e2e-container:0.1
   9 └       imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 submodule-pod1.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: main
   8 │       image: quay.io/argoprojlabs/argocd-e2e-container:0.1
   9 └       imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod pod-in-submodule in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 submodule-pod1.yaml:4
────────────────────────────────────────
   4 [   name: pod-in-submodule
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container pod-in-submodule in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 submodule-pod1.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: main
   8 │       image: quay.io/argoprojlabs/argocd-e2e-container:0.1
   9 └       imagePullPolicy: IfNotPresent
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod pod-in-submodule in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 submodule-pod1.yaml:6-10
────────────────────────────────────────
   6 ┌   containers:
   7 │     - name: main
   8 │       image: quay.io/argoprojlabs/argocd-e2e-container:0.1
   9 │       imagePullPolicy: IfNotPresent
  10 └   terminationGracePeriodSeconds: 0
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container main in pod pod-in-submodule (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 submodule-pod1.yaml:7-9
────────────────────────────────────────
   7 ┌     - name: main
   8 │       image: quay.io/argoprojlabs/argocd-e2e-container:0.1
   9 └       imagePullPolicy: IfNotPresent
────────────────────────────────────────



subpath.yaml (kubernetes)
=========================
Tests: 128 (SUCCESSES: 95, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 21, MEDIUM: 7, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'mysql' of Pod 'volumes-subpath-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 subpath.yaml:12-20
────────────────────────────────────────
  12 ┌     - env:
  13 │         - name: MYSQL_ROOT_PASSWORD
  14 │           value: "rootpasswd"
  15 │       image: mysql
  16 │       name: mysql
  17 │       volumeMounts:
  18 │         - mountPath: /var/lib/mysql
  19 │           name: site-data
  20 └           subPath: mysql
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'php' of Pod 'volumes-subpath-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 subpath.yaml:21-26
────────────────────────────────────────
  21 ┌     - image: php:7.0-apache
  22 │       name: php
  23 │       volumeMounts:
  24 │         - mountPath: /var/www/html
  25 │           name: site-data
  26 └           subPath: html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'mysql' of Pod 'volumes-subpath-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 subpath.yaml:12-20
────────────────────────────────────────
  12 ┌     - env:
  13 │         - name: MYSQL_ROOT_PASSWORD
  14 │           value: "rootpasswd"
  15 │       image: mysql
  16 │       name: mysql
  17 │       volumeMounts:
  18 │         - mountPath: /var/lib/mysql
  19 │           name: site-data
  20 └           subPath: mysql
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'php' of Pod 'volumes-subpath-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 subpath.yaml:21-26
────────────────────────────────────────
  21 ┌     - image: php:7.0-apache
  22 │       name: php
  23 │       volumeMounts:
  24 │         - mountPath: /var/www/html
  25 │           name: site-data
  26 └           subPath: html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'mysql' of 'pod' 'volumes-subpath-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 subpath.yaml:12-20
────────────────────────────────────────
  12 ┌     - env:
  13 │         - name: MYSQL_ROOT_PASSWORD
  14 │           value: "rootpasswd"
  15 │       image: mysql
  16 │       name: mysql
  17 │       volumeMounts:
  18 │         - mountPath: /var/lib/mysql
  19 │           name: site-data
  20 └           subPath: mysql
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'php' of 'pod' 'volumes-subpath-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 subpath.yaml:21-26
────────────────────────────────────────
  21 ┌     - image: php:7.0-apache
  22 │       name: php
  23 │       volumeMounts:
  24 │         - mountPath: /var/www/html
  25 │           name: site-data
  26 └           subPath: html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'mysql' of Pod 'volumes-subpath-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 subpath.yaml:12-20
────────────────────────────────────────
  12 ┌     - env:
  13 │         - name: MYSQL_ROOT_PASSWORD
  14 │           value: "rootpasswd"
  15 │       image: mysql
  16 │       name: mysql
  17 │       volumeMounts:
  18 │         - mountPath: /var/lib/mysql
  19 │           name: site-data
  20 └           subPath: mysql
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'php' of Pod 'volumes-subpath-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 subpath.yaml:21-26
────────────────────────────────────────
  21 ┌     - image: php:7.0-apache
  22 │       name: php
  23 │       volumeMounts:
  24 │         - mountPath: /var/www/html
  25 │           name: site-data
  26 └           subPath: html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'mysql' of Pod 'volumes-subpath-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 subpath.yaml:12-20
────────────────────────────────────────
  12 ┌     - env:
  13 │         - name: MYSQL_ROOT_PASSWORD
  14 │           value: "rootpasswd"
  15 │       image: mysql
  16 │       name: mysql
  17 │       volumeMounts:
  18 │         - mountPath: /var/lib/mysql
  19 │           name: site-data
  20 └           subPath: mysql
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'php' of Pod 'volumes-subpath-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 subpath.yaml:21-26
────────────────────────────────────────
  21 ┌     - image: php:7.0-apache
  22 │       name: php
  23 │       volumeMounts:
  24 │         - mountPath: /var/www/html
  25 │           name: site-data
  26 └           subPath: html
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'mysql' of Pod 'volumes-subpath-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 subpath.yaml:12-20
────────────────────────────────────────
  12 ┌     - env:
  13 │         - name: MYSQL_ROOT_PASSWORD
  14 │           value: "rootpasswd"
  15 │       image: mysql
  16 │       name: mysql
  17 │       volumeMounts:
  18 │         - mountPath: /var/lib/mysql
  19 │           name: site-data
  20 └           subPath: mysql
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'mysql' of Pod 'volumes-subpath-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 subpath.yaml:12-20
────────────────────────────────────────
  12 ┌     - env:
  13 │         - name: MYSQL_ROOT_PASSWORD
  14 │           value: "rootpasswd"
  15 │       image: mysql
  16 │       name: mysql
  17 │       volumeMounts:
  18 │         - mountPath: /var/lib/mysql
  19 │           name: site-data
  20 └           subPath: mysql
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'php' of Pod 'volumes-subpath-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 subpath.yaml:21-26
────────────────────────────────────────
  21 ┌     - image: php:7.0-apache
  22 │       name: php
  23 │       volumeMounts:
  24 │         - mountPath: /var/www/html
  25 │           name: site-data
  26 └           subPath: html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'mysql' of Pod 'volumes-subpath-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 subpath.yaml:12-20
────────────────────────────────────────
  12 ┌     - env:
  13 │         - name: MYSQL_ROOT_PASSWORD
  14 │           value: "rootpasswd"
  15 │       image: mysql
  16 │       name: mysql
  17 │       volumeMounts:
  18 │         - mountPath: /var/lib/mysql
  19 │           name: site-data
  20 └           subPath: mysql
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'php' of Pod 'volumes-subpath-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 subpath.yaml:21-26
────────────────────────────────────────
  21 ┌     - image: php:7.0-apache
  22 │       name: php
  23 │       volumeMounts:
  24 │         - mountPath: /var/www/html
  25 │           name: site-data
  26 └           subPath: html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'mysql' of Pod 'volumes-subpath-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 subpath.yaml:12-20
────────────────────────────────────────
  12 ┌     - env:
  13 │         - name: MYSQL_ROOT_PASSWORD
  14 │           value: "rootpasswd"
  15 │       image: mysql
  16 │       name: mysql
  17 │       volumeMounts:
  18 │         - mountPath: /var/lib/mysql
  19 │           name: site-data
  20 └           subPath: mysql
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'php' of Pod 'volumes-subpath-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 subpath.yaml:21-26
────────────────────────────────────────
  21 ┌     - image: php:7.0-apache
  22 │       name: php
  23 │       volumeMounts:
  24 │         - mountPath: /var/www/html
  25 │           name: site-data
  26 └           subPath: html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'mysql' of Pod 'volumes-subpath-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 subpath.yaml:12-20
────────────────────────────────────────
  12 ┌     - env:
  13 │         - name: MYSQL_ROOT_PASSWORD
  14 │           value: "rootpasswd"
  15 │       image: mysql
  16 │       name: mysql
  17 │       volumeMounts:
  18 │         - mountPath: /var/lib/mysql
  19 │           name: site-data
  20 └           subPath: mysql
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'php' of Pod 'volumes-subpath-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 subpath.yaml:21-26
────────────────────────────────────────
  21 ┌     - image: php:7.0-apache
  22 │       name: php
  23 │       volumeMounts:
  24 │         - mountPath: /var/www/html
  25 │           name: site-data
  26 └           subPath: html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'mysql' of Pod 'volumes-subpath-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 subpath.yaml:12-20
────────────────────────────────────────
  12 ┌     - env:
  13 │         - name: MYSQL_ROOT_PASSWORD
  14 │           value: "rootpasswd"
  15 │       image: mysql
  16 │       name: mysql
  17 │       volumeMounts:
  18 │         - mountPath: /var/lib/mysql
  19 │           name: site-data
  20 └           subPath: mysql
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'php' of Pod 'volumes-subpath-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 subpath.yaml:21-26
────────────────────────────────────────
  21 ┌     - image: php:7.0-apache
  22 │       name: php
  23 │       volumeMounts:
  24 │         - mountPath: /var/www/html
  25 │           name: site-data
  26 └           subPath: html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'mysql' of Pod 'volumes-subpath-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 subpath.yaml:12-20
────────────────────────────────────────
  12 ┌     - env:
  13 │         - name: MYSQL_ROOT_PASSWORD
  14 │           value: "rootpasswd"
  15 │       image: mysql
  16 │       name: mysql
  17 │       volumeMounts:
  18 │         - mountPath: /var/lib/mysql
  19 │           name: site-data
  20 └           subPath: mysql
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'php' of Pod 'volumes-subpath-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 subpath.yaml:21-26
────────────────────────────────────────
  21 ┌     - image: php:7.0-apache
  22 │       name: php
  23 │       volumeMounts:
  24 │         - mountPath: /var/www/html
  25 │           name: site-data
  26 └           subPath: html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 subpath.yaml:21-26
────────────────────────────────────────
  21 ┌     - image: php:7.0-apache
  22 │       name: php
  23 │       volumeMounts:
  24 │         - mountPath: /var/www/html
  25 │           name: site-data
  26 └           subPath: html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 subpath.yaml:12-20
────────────────────────────────────────
  12 ┌     - env:
  13 │         - name: MYSQL_ROOT_PASSWORD
  14 │           value: "rootpasswd"
  15 │       image: mysql
  16 │       name: mysql
  17 │       volumeMounts:
  18 │         - mountPath: /var/lib/mysql
  19 │           name: site-data
  20 └           subPath: mysql
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "mysql" of pod "volumes-subpath-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 subpath.yaml:12-20
────────────────────────────────────────
  12 ┌     - env:
  13 │         - name: MYSQL_ROOT_PASSWORD
  14 │           value: "rootpasswd"
  15 │       image: mysql
  16 │       name: mysql
  17 │       volumeMounts:
  18 │         - mountPath: /var/lib/mysql
  19 │           name: site-data
  20 └           subPath: mysql
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "php" of pod "volumes-subpath-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 subpath.yaml:21-26
────────────────────────────────────────
  21 ┌     - image: php:7.0-apache
  22 │       name: php
  23 │       volumeMounts:
  24 │         - mountPath: /var/www/html
  25 │           name: site-data
  26 └           subPath: html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 subpath.yaml:12-20
────────────────────────────────────────
  12 ┌     - env:
  13 │         - name: MYSQL_ROOT_PASSWORD
  14 │           value: "rootpasswd"
  15 │       image: mysql
  16 │       name: mysql
  17 │       volumeMounts:
  18 │         - mountPath: /var/lib/mysql
  19 │           name: site-data
  20 └           subPath: mysql
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 subpath.yaml:21-26
────────────────────────────────────────
  21 ┌     - image: php:7.0-apache
  22 │       name: php
  23 │       volumeMounts:
  24 │         - mountPath: /var/www/html
  25 │           name: site-data
  26 └           subPath: html
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod volumes-subpath-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 subpath.yaml:9
────────────────────────────────────────
   9 [   name: volumes-subpath-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container volumes-subpath-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 subpath.yaml:21-26
────────────────────────────────────────
  21 ┌     - image: php:7.0-apache
  22 │       name: php
  23 │       volumeMounts:
  24 │         - mountPath: /var/www/html
  25 │           name: site-data
  26 └           subPath: html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container volumes-subpath-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 subpath.yaml:12-20
────────────────────────────────────────
  12 ┌     - env:
  13 │         - name: MYSQL_ROOT_PASSWORD
  14 │           value: "rootpasswd"
  15 │       image: mysql
  16 │       name: mysql
  17 │       volumeMounts:
  18 │         - mountPath: /var/lib/mysql
  19 │           name: site-data
  20 └           subPath: mysql
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod volumes-subpath-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 subpath.yaml:11-30
────────────────────────────────────────
  11 ┌   containers:
  12 │     - env:
  13 │         - name: MYSQL_ROOT_PASSWORD
  14 │           value: "rootpasswd"
  15 │       image: mysql
  16 │       name: mysql
  17 │       volumeMounts:
  18 │         - mountPath: /var/lib/mysql
  19 └           name: site-data
  ..   
────────────────────────────────────────



subpathexpr.yaml (kubernetes)
=============================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'volumes-subpathexpr-container' of Pod 'volumes-subpathexpr-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 subpathexpr.yaml:9-21
────────────────────────────────────────
   9 ┌     - command: ["sleep", "3600"]
  10 │       env:
  11 │         - name: POD_NAME
  12 │           valueFrom:
  13 │             fieldRef:
  14 │               apiVersion: v1
  15 │               fieldPath: metadata.name
  16 │       image: busybox
  17 └       name: volumes-subpathexpr-container
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'volumes-subpathexpr-container' of Pod 'volumes-subpathexpr-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 subpathexpr.yaml:9-21
────────────────────────────────────────
   9 ┌     - command: ["sleep", "3600"]
  10 │       env:
  11 │         - name: POD_NAME
  12 │           valueFrom:
  13 │             fieldRef:
  14 │               apiVersion: v1
  15 │               fieldPath: metadata.name
  16 │       image: busybox
  17 └       name: volumes-subpathexpr-container
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'volumes-subpathexpr-container' of 'pod' 'volumes-subpathexpr-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 subpathexpr.yaml:9-21
────────────────────────────────────────
   9 ┌     - command: ["sleep", "3600"]
  10 │       env:
  11 │         - name: POD_NAME
  12 │           valueFrom:
  13 │             fieldRef:
  14 │               apiVersion: v1
  15 │               fieldPath: metadata.name
  16 │       image: busybox
  17 └       name: volumes-subpathexpr-container
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'volumes-subpathexpr-container' of Pod 'volumes-subpathexpr-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 subpathexpr.yaml:9-21
────────────────────────────────────────
   9 ┌     - command: ["sleep", "3600"]
  10 │       env:
  11 │         - name: POD_NAME
  12 │           valueFrom:
  13 │             fieldRef:
  14 │               apiVersion: v1
  15 │               fieldPath: metadata.name
  16 │       image: busybox
  17 └       name: volumes-subpathexpr-container
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'volumes-subpathexpr-container' of Pod 'volumes-subpathexpr-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 subpathexpr.yaml:9-21
────────────────────────────────────────
   9 ┌     - command: ["sleep", "3600"]
  10 │       env:
  11 │         - name: POD_NAME
  12 │           valueFrom:
  13 │             fieldRef:
  14 │               apiVersion: v1
  15 │               fieldPath: metadata.name
  16 │       image: busybox
  17 └       name: volumes-subpathexpr-container
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'volumes-subpathexpr-container' of Pod 'volumes-subpathexpr-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 subpathexpr.yaml:9-21
────────────────────────────────────────
   9 ┌     - command: ["sleep", "3600"]
  10 │       env:
  11 │         - name: POD_NAME
  12 │           valueFrom:
  13 │             fieldRef:
  14 │               apiVersion: v1
  15 │               fieldPath: metadata.name
  16 │       image: busybox
  17 └       name: volumes-subpathexpr-container
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'volumes-subpathexpr-container' of Pod 'volumes-subpathexpr-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 subpathexpr.yaml:9-21
────────────────────────────────────────
   9 ┌     - command: ["sleep", "3600"]
  10 │       env:
  11 │         - name: POD_NAME
  12 │           valueFrom:
  13 │             fieldRef:
  14 │               apiVersion: v1
  15 │               fieldPath: metadata.name
  16 │       image: busybox
  17 └       name: volumes-subpathexpr-container
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'volumes-subpathexpr-container' of Pod 'volumes-subpathexpr-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 subpathexpr.yaml:9-21
────────────────────────────────────────
   9 ┌     - command: ["sleep", "3600"]
  10 │       env:
  11 │         - name: POD_NAME
  12 │           valueFrom:
  13 │             fieldRef:
  14 │               apiVersion: v1
  15 │               fieldPath: metadata.name
  16 │       image: busybox
  17 └       name: volumes-subpathexpr-container
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'volumes-subpathexpr-container' of Pod 'volumes-subpathexpr-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 subpathexpr.yaml:9-21
────────────────────────────────────────
   9 ┌     - command: ["sleep", "3600"]
  10 │       env:
  11 │         - name: POD_NAME
  12 │           valueFrom:
  13 │             fieldRef:
  14 │               apiVersion: v1
  15 │               fieldPath: metadata.name
  16 │       image: busybox
  17 └       name: volumes-subpathexpr-container
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'volumes-subpathexpr-container' of Pod 'volumes-subpathexpr-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 subpathexpr.yaml:9-21
────────────────────────────────────────
   9 ┌     - command: ["sleep", "3600"]
  10 │       env:
  11 │         - name: POD_NAME
  12 │           valueFrom:
  13 │             fieldRef:
  14 │               apiVersion: v1
  15 │               fieldPath: metadata.name
  16 │       image: busybox
  17 └       name: volumes-subpathexpr-container
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'volumes-subpathexpr-container' of Pod 'volumes-subpathexpr-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 subpathexpr.yaml:9-21
────────────────────────────────────────
   9 ┌     - command: ["sleep", "3600"]
  10 │       env:
  11 │         - name: POD_NAME
  12 │           valueFrom:
  13 │             fieldRef:
  14 │               apiVersion: v1
  15 │               fieldPath: metadata.name
  16 │       image: busybox
  17 └       name: volumes-subpathexpr-container
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'volumes-subpathexpr-container' of Pod 'volumes-subpathexpr-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 subpathexpr.yaml:9-21
────────────────────────────────────────
   9 ┌     - command: ["sleep", "3600"]
  10 │       env:
  11 │         - name: POD_NAME
  12 │           valueFrom:
  13 │             fieldRef:
  14 │               apiVersion: v1
  15 │               fieldPath: metadata.name
  16 │       image: busybox
  17 └       name: volumes-subpathexpr-container
  ..   
────────────────────────────────────────


AVD-KSV-0023 (MEDIUM): Pod 'volumes-subpathexpr-pod' should not set 'spec.template.volumes.hostPath'
════════════════════════════════════════
According to pod security standard 'HostPath Volumes', HostPath volumes must be forbidden.

See https://avd.aquasec.com/misconfig/ksv023
────────────────────────────────────────
 subpathexpr.yaml:8-26
────────────────────────────────────────
   8 ┌   containers:
   9 │     - command: ["sleep", "3600"]
  10 │       env:
  11 │         - name: POD_NAME
  12 │           valueFrom:
  13 │             fieldRef:
  14 │               apiVersion: v1
  15 │               fieldPath: metadata.name
  16 └       image: busybox
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 subpathexpr.yaml:9-21
────────────────────────────────────────
   9 ┌     - command: ["sleep", "3600"]
  10 │       env:
  11 │         - name: POD_NAME
  12 │           valueFrom:
  13 │             fieldRef:
  14 │               apiVersion: v1
  15 │               fieldPath: metadata.name
  16 │       image: busybox
  17 └       name: volumes-subpathexpr-container
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "volumes-subpathexpr-container" of pod "volumes-subpathexpr-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 subpathexpr.yaml:9-21
────────────────────────────────────────
   9 ┌     - command: ["sleep", "3600"]
  10 │       env:
  11 │         - name: POD_NAME
  12 │           valueFrom:
  13 │             fieldRef:
  14 │               apiVersion: v1
  15 │               fieldPath: metadata.name
  16 │       image: busybox
  17 └       name: volumes-subpathexpr-container
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 subpathexpr.yaml:9-21
────────────────────────────────────────
   9 ┌     - command: ["sleep", "3600"]
  10 │       env:
  11 │         - name: POD_NAME
  12 │           valueFrom:
  13 │             fieldRef:
  14 │               apiVersion: v1
  15 │               fieldPath: metadata.name
  16 │       image: busybox
  17 └       name: volumes-subpathexpr-container
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod volumes-subpathexpr-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 subpathexpr.yaml:6
────────────────────────────────────────
   6 [   name: volumes-subpathexpr-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container volumes-subpathexpr-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 subpathexpr.yaml:9-21
────────────────────────────────────────
   9 ┌     - command: ["sleep", "3600"]
  10 │       env:
  11 │         - name: POD_NAME
  12 │           valueFrom:
  13 │             fieldRef:
  14 │               apiVersion: v1
  15 │               fieldPath: metadata.name
  16 │       image: busybox
  17 └       name: volumes-subpathexpr-container
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod volumes-subpathexpr-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 subpathexpr.yaml:8-26
────────────────────────────────────────
   8 ┌   containers:
   9 │     - command: ["sleep", "3600"]
  10 │       env:
  11 │         - name: POD_NAME
  12 │           valueFrom:
  13 │             fieldRef:
  14 │               apiVersion: v1
  15 │               fieldPath: metadata.name
  16 └       image: busybox
  ..   
────────────────────────────────────────



subscriber_deployment.yaml (kubernetes)
=======================================
Tests: 128 (SUCCESSES: 95, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 21, MEDIUM: 7, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app' of Deployment 'jetstream-subsciber' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 subscriber_deployment.yaml:38-56
────────────────────────────────────────
  38 ┌       - name: app
  39 │         image: jetstream_loadtest-subscriber_image:latest
  40 │         ports:
  41 │         - containerPort: 8080
  42 │           name: metrics
  43 │         env:
  44 │         - name: PL_SERVER_TLS_CERT
  45 │           value: /certs/server.crt
  46 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'wait-for-publisher' of Deployment 'jetstream-subsciber' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 subscriber_deployment.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: wait-for-publisher
  22 │         # yamllint disable-line rule:line-length
  23 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  24 │         # yamllint disable rule:indentation rule:line-length
  25 │         command: ['sh', '-c', 'set -xe;
  26 │           URL="http://jetstream-publisher.${NS}.svc.cluster.local:8080/metrics";
  27 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" ${URL}) -eq 200 ]; do
  28 │             echo "waiting for ${URL}";
  29 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app' of Deployment 'jetstream-subsciber' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 subscriber_deployment.yaml:38-56
────────────────────────────────────────
  38 ┌       - name: app
  39 │         image: jetstream_loadtest-subscriber_image:latest
  40 │         ports:
  41 │         - containerPort: 8080
  42 │           name: metrics
  43 │         env:
  44 │         - name: PL_SERVER_TLS_CERT
  45 │           value: /certs/server.crt
  46 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wait-for-publisher' of Deployment 'jetstream-subsciber' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 subscriber_deployment.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: wait-for-publisher
  22 │         # yamllint disable-line rule:line-length
  23 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  24 │         # yamllint disable rule:indentation rule:line-length
  25 │         command: ['sh', '-c', 'set -xe;
  26 │           URL="http://jetstream-publisher.${NS}.svc.cluster.local:8080/metrics";
  27 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" ${URL}) -eq 200 ]; do
  28 │             echo "waiting for ${URL}";
  29 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app' of 'deployment' 'jetstream-subsciber' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 subscriber_deployment.yaml:38-56
────────────────────────────────────────
  38 ┌       - name: app
  39 │         image: jetstream_loadtest-subscriber_image:latest
  40 │         ports:
  41 │         - containerPort: 8080
  42 │           name: metrics
  43 │         env:
  44 │         - name: PL_SERVER_TLS_CERT
  45 │           value: /certs/server.crt
  46 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wait-for-publisher' of 'deployment' 'jetstream-subsciber' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 subscriber_deployment.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: wait-for-publisher
  22 │         # yamllint disable-line rule:line-length
  23 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  24 │         # yamllint disable rule:indentation rule:line-length
  25 │         command: ['sh', '-c', 'set -xe;
  26 │           URL="http://jetstream-publisher.${NS}.svc.cluster.local:8080/metrics";
  27 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" ${URL}) -eq 200 ]; do
  28 │             echo "waiting for ${URL}";
  29 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'app' of Deployment 'jetstream-subsciber' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 subscriber_deployment.yaml:38-56
────────────────────────────────────────
  38 ┌       - name: app
  39 │         image: jetstream_loadtest-subscriber_image:latest
  40 │         ports:
  41 │         - containerPort: 8080
  42 │           name: metrics
  43 │         env:
  44 │         - name: PL_SERVER_TLS_CERT
  45 │           value: /certs/server.crt
  46 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'wait-for-publisher' of Deployment 'jetstream-subsciber' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 subscriber_deployment.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: wait-for-publisher
  22 │         # yamllint disable-line rule:line-length
  23 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  24 │         # yamllint disable rule:indentation rule:line-length
  25 │         command: ['sh', '-c', 'set -xe;
  26 │           URL="http://jetstream-publisher.${NS}.svc.cluster.local:8080/metrics";
  27 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" ${URL}) -eq 200 ]; do
  28 │             echo "waiting for ${URL}";
  29 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app' of Deployment 'jetstream-subsciber' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 subscriber_deployment.yaml:38-56
────────────────────────────────────────
  38 ┌       - name: app
  39 │         image: jetstream_loadtest-subscriber_image:latest
  40 │         ports:
  41 │         - containerPort: 8080
  42 │           name: metrics
  43 │         env:
  44 │         - name: PL_SERVER_TLS_CERT
  45 │           value: /certs/server.crt
  46 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wait-for-publisher' of Deployment 'jetstream-subsciber' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 subscriber_deployment.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: wait-for-publisher
  22 │         # yamllint disable-line rule:line-length
  23 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  24 │         # yamllint disable rule:indentation rule:line-length
  25 │         command: ['sh', '-c', 'set -xe;
  26 │           URL="http://jetstream-publisher.${NS}.svc.cluster.local:8080/metrics";
  27 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" ${URL}) -eq 200 ]; do
  28 │             echo "waiting for ${URL}";
  29 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'app' of Deployment 'jetstream-subsciber' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 subscriber_deployment.yaml:38-56
────────────────────────────────────────
  38 ┌       - name: app
  39 │         image: jetstream_loadtest-subscriber_image:latest
  40 │         ports:
  41 │         - containerPort: 8080
  42 │           name: metrics
  43 │         env:
  44 │         - name: PL_SERVER_TLS_CERT
  45 │           value: /certs/server.crt
  46 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app' of Deployment 'jetstream-subsciber' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 subscriber_deployment.yaml:38-56
────────────────────────────────────────
  38 ┌       - name: app
  39 │         image: jetstream_loadtest-subscriber_image:latest
  40 │         ports:
  41 │         - containerPort: 8080
  42 │           name: metrics
  43 │         env:
  44 │         - name: PL_SERVER_TLS_CERT
  45 │           value: /certs/server.crt
  46 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wait-for-publisher' of Deployment 'jetstream-subsciber' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 subscriber_deployment.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: wait-for-publisher
  22 │         # yamllint disable-line rule:line-length
  23 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  24 │         # yamllint disable rule:indentation rule:line-length
  25 │         command: ['sh', '-c', 'set -xe;
  26 │           URL="http://jetstream-publisher.${NS}.svc.cluster.local:8080/metrics";
  27 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" ${URL}) -eq 200 ]; do
  28 │             echo "waiting for ${URL}";
  29 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app' of Deployment 'jetstream-subsciber' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 subscriber_deployment.yaml:38-56
────────────────────────────────────────
  38 ┌       - name: app
  39 │         image: jetstream_loadtest-subscriber_image:latest
  40 │         ports:
  41 │         - containerPort: 8080
  42 │           name: metrics
  43 │         env:
  44 │         - name: PL_SERVER_TLS_CERT
  45 │           value: /certs/server.crt
  46 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'wait-for-publisher' of Deployment 'jetstream-subsciber' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 subscriber_deployment.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: wait-for-publisher
  22 │         # yamllint disable-line rule:line-length
  23 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  24 │         # yamllint disable rule:indentation rule:line-length
  25 │         command: ['sh', '-c', 'set -xe;
  26 │           URL="http://jetstream-publisher.${NS}.svc.cluster.local:8080/metrics";
  27 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" ${URL}) -eq 200 ]; do
  28 │             echo "waiting for ${URL}";
  29 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app' of Deployment 'jetstream-subsciber' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 subscriber_deployment.yaml:38-56
────────────────────────────────────────
  38 ┌       - name: app
  39 │         image: jetstream_loadtest-subscriber_image:latest
  40 │         ports:
  41 │         - containerPort: 8080
  42 │           name: metrics
  43 │         env:
  44 │         - name: PL_SERVER_TLS_CERT
  45 │           value: /certs/server.crt
  46 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'wait-for-publisher' of Deployment 'jetstream-subsciber' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 subscriber_deployment.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: wait-for-publisher
  22 │         # yamllint disable-line rule:line-length
  23 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  24 │         # yamllint disable rule:indentation rule:line-length
  25 │         command: ['sh', '-c', 'set -xe;
  26 │           URL="http://jetstream-publisher.${NS}.svc.cluster.local:8080/metrics";
  27 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" ${URL}) -eq 200 ]; do
  28 │             echo "waiting for ${URL}";
  29 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app' of Deployment 'jetstream-subsciber' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 subscriber_deployment.yaml:38-56
────────────────────────────────────────
  38 ┌       - name: app
  39 │         image: jetstream_loadtest-subscriber_image:latest
  40 │         ports:
  41 │         - containerPort: 8080
  42 │           name: metrics
  43 │         env:
  44 │         - name: PL_SERVER_TLS_CERT
  45 │           value: /certs/server.crt
  46 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'wait-for-publisher' of Deployment 'jetstream-subsciber' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 subscriber_deployment.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: wait-for-publisher
  22 │         # yamllint disable-line rule:line-length
  23 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  24 │         # yamllint disable rule:indentation rule:line-length
  25 │         command: ['sh', '-c', 'set -xe;
  26 │           URL="http://jetstream-publisher.${NS}.svc.cluster.local:8080/metrics";
  27 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" ${URL}) -eq 200 ]; do
  28 │             echo "waiting for ${URL}";
  29 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app' of Deployment 'jetstream-subsciber' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 subscriber_deployment.yaml:38-56
────────────────────────────────────────
  38 ┌       - name: app
  39 │         image: jetstream_loadtest-subscriber_image:latest
  40 │         ports:
  41 │         - containerPort: 8080
  42 │           name: metrics
  43 │         env:
  44 │         - name: PL_SERVER_TLS_CERT
  45 │           value: /certs/server.crt
  46 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wait-for-publisher' of Deployment 'jetstream-subsciber' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 subscriber_deployment.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: wait-for-publisher
  22 │         # yamllint disable-line rule:line-length
  23 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  24 │         # yamllint disable rule:indentation rule:line-length
  25 │         command: ['sh', '-c', 'set -xe;
  26 │           URL="http://jetstream-publisher.${NS}.svc.cluster.local:8080/metrics";
  27 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" ${URL}) -eq 200 ]; do
  28 │             echo "waiting for ${URL}";
  29 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app' of Deployment 'jetstream-subsciber' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 subscriber_deployment.yaml:38-56
────────────────────────────────────────
  38 ┌       - name: app
  39 │         image: jetstream_loadtest-subscriber_image:latest
  40 │         ports:
  41 │         - containerPort: 8080
  42 │           name: metrics
  43 │         env:
  44 │         - name: PL_SERVER_TLS_CERT
  45 │           value: /certs/server.crt
  46 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wait-for-publisher' of Deployment 'jetstream-subsciber' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 subscriber_deployment.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: wait-for-publisher
  22 │         # yamllint disable-line rule:line-length
  23 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  24 │         # yamllint disable rule:indentation rule:line-length
  25 │         command: ['sh', '-c', 'set -xe;
  26 │           URL="http://jetstream-publisher.${NS}.svc.cluster.local:8080/metrics";
  27 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" ${URL}) -eq 200 ]; do
  28 │             echo "waiting for ${URL}";
  29 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 subscriber_deployment.yaml:38-56
────────────────────────────────────────
  38 ┌       - name: app
  39 │         image: jetstream_loadtest-subscriber_image:latest
  40 │         ports:
  41 │         - containerPort: 8080
  42 │           name: metrics
  43 │         env:
  44 │         - name: PL_SERVER_TLS_CERT
  45 │           value: /certs/server.crt
  46 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 subscriber_deployment.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: wait-for-publisher
  22 │         # yamllint disable-line rule:line-length
  23 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  24 │         # yamllint disable rule:indentation rule:line-length
  25 │         command: ['sh', '-c', 'set -xe;
  26 │           URL="http://jetstream-publisher.${NS}.svc.cluster.local:8080/metrics";
  27 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" ${URL}) -eq 200 ]; do
  28 │             echo "waiting for ${URL}";
  29 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app" of deployment "jetstream-subsciber" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 subscriber_deployment.yaml:38-56
────────────────────────────────────────
  38 ┌       - name: app
  39 │         image: jetstream_loadtest-subscriber_image:latest
  40 │         ports:
  41 │         - containerPort: 8080
  42 │           name: metrics
  43 │         env:
  44 │         - name: PL_SERVER_TLS_CERT
  45 │           value: /certs/server.crt
  46 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wait-for-publisher" of deployment "jetstream-subsciber" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 subscriber_deployment.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: wait-for-publisher
  22 │         # yamllint disable-line rule:line-length
  23 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  24 │         # yamllint disable rule:indentation rule:line-length
  25 │         command: ['sh', '-c', 'set -xe;
  26 │           URL="http://jetstream-publisher.${NS}.svc.cluster.local:8080/metrics";
  27 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" ${URL}) -eq 200 ]; do
  28 │             echo "waiting for ${URL}";
  29 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 subscriber_deployment.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: wait-for-publisher
  22 │         # yamllint disable-line rule:line-length
  23 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  24 │         # yamllint disable rule:indentation rule:line-length
  25 │         command: ['sh', '-c', 'set -xe;
  26 │           URL="http://jetstream-publisher.${NS}.svc.cluster.local:8080/metrics";
  27 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" ${URL}) -eq 200 ]; do
  28 │             echo "waiting for ${URL}";
  29 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 subscriber_deployment.yaml:38-56
────────────────────────────────────────
  38 ┌       - name: app
  39 │         image: jetstream_loadtest-subscriber_image:latest
  40 │         ports:
  41 │         - containerPort: 8080
  42 │           name: metrics
  43 │         env:
  44 │         - name: PL_SERVER_TLS_CERT
  45 │           value: /certs/server.crt
  46 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment jetstream-subsciber in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 subscriber_deployment.yaml:5
────────────────────────────────────────
   5 [   name: jetstream-subsciber
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container jetstream-subsciber in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 subscriber_deployment.yaml:38-56
────────────────────────────────────────
  38 ┌       - name: app
  39 │         image: jetstream_loadtest-subscriber_image:latest
  40 │         ports:
  41 │         - containerPort: 8080
  42 │           name: metrics
  43 │         env:
  44 │         - name: PL_SERVER_TLS_CERT
  45 │           value: /certs/server.crt
  46 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container jetstream-subsciber in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 subscriber_deployment.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: wait-for-publisher
  22 │         # yamllint disable-line rule:line-length
  23 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  24 │         # yamllint disable rule:indentation rule:line-length
  25 │         command: ['sh', '-c', 'set -xe;
  26 │           URL="http://jetstream-publisher.${NS}.svc.cluster.local:8080/metrics";
  27 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" ${URL}) -eq 200 ]; do
  28 │             echo "waiting for ${URL}";
  29 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment jetstream-subsciber in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 subscriber_deployment.yaml:20-60
────────────────────────────────────────
  20 ┌       initContainers:
  21 │       - name: wait-for-publisher
  22 │         # yamllint disable-line rule:line-length
  23 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  24 │         # yamllint disable rule:indentation rule:line-length
  25 │         command: ['sh', '-c', 'set -xe;
  26 │           URL="http://jetstream-publisher.${NS}.svc.cluster.local:8080/metrics";
  27 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" ${URL}) -eq 200 ]; do
  28 └             echo "waiting for ${URL}";
  ..   
────────────────────────────────────────



subscriber_deployment1.yaml (kubernetes)
========================================
Tests: 128 (SUCCESSES: 95, FAILURES: 33)
Failures: 33 (UNKNOWN: 0, LOW: 21, MEDIUM: 7, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'app' of Deployment 'jetstream-subsciber' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 subscriber_deployment1.yaml:38-56
────────────────────────────────────────
  38 ┌       - name: app
  39 │         image: jetstream_loadtest-subscriber_image:latest
  40 │         ports:
  41 │         - containerPort: 8080
  42 │           name: metrics
  43 │         env:
  44 │         - name: PL_SERVER_TLS_CERT
  45 │           value: /certs/server.crt
  46 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'wait-for-publisher' of Deployment 'jetstream-subsciber' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 subscriber_deployment1.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: wait-for-publisher
  22 │         # yamllint disable-line rule:line-length
  23 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  24 │         # yamllint disable rule:indentation rule:line-length
  25 │         command: ['sh', '-c', 'set -xe;
  26 │           URL="http://jetstream-publisher.${NS}.svc.cluster.local:8080/metrics";
  27 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" ${URL}) -eq 200 ]; do
  28 │             echo "waiting for ${URL}";
  29 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'app' of Deployment 'jetstream-subsciber' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 subscriber_deployment1.yaml:38-56
────────────────────────────────────────
  38 ┌       - name: app
  39 │         image: jetstream_loadtest-subscriber_image:latest
  40 │         ports:
  41 │         - containerPort: 8080
  42 │           name: metrics
  43 │         env:
  44 │         - name: PL_SERVER_TLS_CERT
  45 │           value: /certs/server.crt
  46 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'wait-for-publisher' of Deployment 'jetstream-subsciber' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 subscriber_deployment1.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: wait-for-publisher
  22 │         # yamllint disable-line rule:line-length
  23 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  24 │         # yamllint disable rule:indentation rule:line-length
  25 │         command: ['sh', '-c', 'set -xe;
  26 │           URL="http://jetstream-publisher.${NS}.svc.cluster.local:8080/metrics";
  27 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" ${URL}) -eq 200 ]; do
  28 │             echo "waiting for ${URL}";
  29 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'app' of 'deployment' 'jetstream-subsciber' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 subscriber_deployment1.yaml:38-56
────────────────────────────────────────
  38 ┌       - name: app
  39 │         image: jetstream_loadtest-subscriber_image:latest
  40 │         ports:
  41 │         - containerPort: 8080
  42 │           name: metrics
  43 │         env:
  44 │         - name: PL_SERVER_TLS_CERT
  45 │           value: /certs/server.crt
  46 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'wait-for-publisher' of 'deployment' 'jetstream-subsciber' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 subscriber_deployment1.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: wait-for-publisher
  22 │         # yamllint disable-line rule:line-length
  23 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  24 │         # yamllint disable rule:indentation rule:line-length
  25 │         command: ['sh', '-c', 'set -xe;
  26 │           URL="http://jetstream-publisher.${NS}.svc.cluster.local:8080/metrics";
  27 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" ${URL}) -eq 200 ]; do
  28 │             echo "waiting for ${URL}";
  29 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'app' of Deployment 'jetstream-subsciber' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 subscriber_deployment1.yaml:38-56
────────────────────────────────────────
  38 ┌       - name: app
  39 │         image: jetstream_loadtest-subscriber_image:latest
  40 │         ports:
  41 │         - containerPort: 8080
  42 │           name: metrics
  43 │         env:
  44 │         - name: PL_SERVER_TLS_CERT
  45 │           value: /certs/server.crt
  46 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'wait-for-publisher' of Deployment 'jetstream-subsciber' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 subscriber_deployment1.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: wait-for-publisher
  22 │         # yamllint disable-line rule:line-length
  23 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  24 │         # yamllint disable rule:indentation rule:line-length
  25 │         command: ['sh', '-c', 'set -xe;
  26 │           URL="http://jetstream-publisher.${NS}.svc.cluster.local:8080/metrics";
  27 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" ${URL}) -eq 200 ]; do
  28 │             echo "waiting for ${URL}";
  29 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'app' of Deployment 'jetstream-subsciber' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 subscriber_deployment1.yaml:38-56
────────────────────────────────────────
  38 ┌       - name: app
  39 │         image: jetstream_loadtest-subscriber_image:latest
  40 │         ports:
  41 │         - containerPort: 8080
  42 │           name: metrics
  43 │         env:
  44 │         - name: PL_SERVER_TLS_CERT
  45 │           value: /certs/server.crt
  46 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'wait-for-publisher' of Deployment 'jetstream-subsciber' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 subscriber_deployment1.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: wait-for-publisher
  22 │         # yamllint disable-line rule:line-length
  23 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  24 │         # yamllint disable rule:indentation rule:line-length
  25 │         command: ['sh', '-c', 'set -xe;
  26 │           URL="http://jetstream-publisher.${NS}.svc.cluster.local:8080/metrics";
  27 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" ${URL}) -eq 200 ]; do
  28 │             echo "waiting for ${URL}";
  29 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'app' of Deployment 'jetstream-subsciber' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 subscriber_deployment1.yaml:38-56
────────────────────────────────────────
  38 ┌       - name: app
  39 │         image: jetstream_loadtest-subscriber_image:latest
  40 │         ports:
  41 │         - containerPort: 8080
  42 │           name: metrics
  43 │         env:
  44 │         - name: PL_SERVER_TLS_CERT
  45 │           value: /certs/server.crt
  46 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'app' of Deployment 'jetstream-subsciber' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 subscriber_deployment1.yaml:38-56
────────────────────────────────────────
  38 ┌       - name: app
  39 │         image: jetstream_loadtest-subscriber_image:latest
  40 │         ports:
  41 │         - containerPort: 8080
  42 │           name: metrics
  43 │         env:
  44 │         - name: PL_SERVER_TLS_CERT
  45 │           value: /certs/server.crt
  46 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'wait-for-publisher' of Deployment 'jetstream-subsciber' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 subscriber_deployment1.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: wait-for-publisher
  22 │         # yamllint disable-line rule:line-length
  23 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  24 │         # yamllint disable rule:indentation rule:line-length
  25 │         command: ['sh', '-c', 'set -xe;
  26 │           URL="http://jetstream-publisher.${NS}.svc.cluster.local:8080/metrics";
  27 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" ${URL}) -eq 200 ]; do
  28 │             echo "waiting for ${URL}";
  29 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'app' of Deployment 'jetstream-subsciber' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 subscriber_deployment1.yaml:38-56
────────────────────────────────────────
  38 ┌       - name: app
  39 │         image: jetstream_loadtest-subscriber_image:latest
  40 │         ports:
  41 │         - containerPort: 8080
  42 │           name: metrics
  43 │         env:
  44 │         - name: PL_SERVER_TLS_CERT
  45 │           value: /certs/server.crt
  46 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'wait-for-publisher' of Deployment 'jetstream-subsciber' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 subscriber_deployment1.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: wait-for-publisher
  22 │         # yamllint disable-line rule:line-length
  23 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  24 │         # yamllint disable rule:indentation rule:line-length
  25 │         command: ['sh', '-c', 'set -xe;
  26 │           URL="http://jetstream-publisher.${NS}.svc.cluster.local:8080/metrics";
  27 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" ${URL}) -eq 200 ]; do
  28 │             echo "waiting for ${URL}";
  29 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'app' of Deployment 'jetstream-subsciber' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 subscriber_deployment1.yaml:38-56
────────────────────────────────────────
  38 ┌       - name: app
  39 │         image: jetstream_loadtest-subscriber_image:latest
  40 │         ports:
  41 │         - containerPort: 8080
  42 │           name: metrics
  43 │         env:
  44 │         - name: PL_SERVER_TLS_CERT
  45 │           value: /certs/server.crt
  46 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'wait-for-publisher' of Deployment 'jetstream-subsciber' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 subscriber_deployment1.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: wait-for-publisher
  22 │         # yamllint disable-line rule:line-length
  23 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  24 │         # yamllint disable rule:indentation rule:line-length
  25 │         command: ['sh', '-c', 'set -xe;
  26 │           URL="http://jetstream-publisher.${NS}.svc.cluster.local:8080/metrics";
  27 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" ${URL}) -eq 200 ]; do
  28 │             echo "waiting for ${URL}";
  29 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'app' of Deployment 'jetstream-subsciber' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 subscriber_deployment1.yaml:38-56
────────────────────────────────────────
  38 ┌       - name: app
  39 │         image: jetstream_loadtest-subscriber_image:latest
  40 │         ports:
  41 │         - containerPort: 8080
  42 │           name: metrics
  43 │         env:
  44 │         - name: PL_SERVER_TLS_CERT
  45 │           value: /certs/server.crt
  46 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'wait-for-publisher' of Deployment 'jetstream-subsciber' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 subscriber_deployment1.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: wait-for-publisher
  22 │         # yamllint disable-line rule:line-length
  23 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  24 │         # yamllint disable rule:indentation rule:line-length
  25 │         command: ['sh', '-c', 'set -xe;
  26 │           URL="http://jetstream-publisher.${NS}.svc.cluster.local:8080/metrics";
  27 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" ${URL}) -eq 200 ]; do
  28 │             echo "waiting for ${URL}";
  29 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'app' of Deployment 'jetstream-subsciber' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 subscriber_deployment1.yaml:38-56
────────────────────────────────────────
  38 ┌       - name: app
  39 │         image: jetstream_loadtest-subscriber_image:latest
  40 │         ports:
  41 │         - containerPort: 8080
  42 │           name: metrics
  43 │         env:
  44 │         - name: PL_SERVER_TLS_CERT
  45 │           value: /certs/server.crt
  46 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'wait-for-publisher' of Deployment 'jetstream-subsciber' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 subscriber_deployment1.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: wait-for-publisher
  22 │         # yamllint disable-line rule:line-length
  23 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  24 │         # yamllint disable rule:indentation rule:line-length
  25 │         command: ['sh', '-c', 'set -xe;
  26 │           URL="http://jetstream-publisher.${NS}.svc.cluster.local:8080/metrics";
  27 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" ${URL}) -eq 200 ]; do
  28 │             echo "waiting for ${URL}";
  29 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'app' of Deployment 'jetstream-subsciber' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 subscriber_deployment1.yaml:38-56
────────────────────────────────────────
  38 ┌       - name: app
  39 │         image: jetstream_loadtest-subscriber_image:latest
  40 │         ports:
  41 │         - containerPort: 8080
  42 │           name: metrics
  43 │         env:
  44 │         - name: PL_SERVER_TLS_CERT
  45 │           value: /certs/server.crt
  46 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'wait-for-publisher' of Deployment 'jetstream-subsciber' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 subscriber_deployment1.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: wait-for-publisher
  22 │         # yamllint disable-line rule:line-length
  23 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  24 │         # yamllint disable rule:indentation rule:line-length
  25 │         command: ['sh', '-c', 'set -xe;
  26 │           URL="http://jetstream-publisher.${NS}.svc.cluster.local:8080/metrics";
  27 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" ${URL}) -eq 200 ]; do
  28 │             echo "waiting for ${URL}";
  29 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 subscriber_deployment1.yaml:38-56
────────────────────────────────────────
  38 ┌       - name: app
  39 │         image: jetstream_loadtest-subscriber_image:latest
  40 │         ports:
  41 │         - containerPort: 8080
  42 │           name: metrics
  43 │         env:
  44 │         - name: PL_SERVER_TLS_CERT
  45 │           value: /certs/server.crt
  46 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 subscriber_deployment1.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: wait-for-publisher
  22 │         # yamllint disable-line rule:line-length
  23 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  24 │         # yamllint disable rule:indentation rule:line-length
  25 │         command: ['sh', '-c', 'set -xe;
  26 │           URL="http://jetstream-publisher.${NS}.svc.cluster.local:8080/metrics";
  27 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" ${URL}) -eq 200 ]; do
  28 │             echo "waiting for ${URL}";
  29 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "app" of deployment "jetstream-subsciber" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 subscriber_deployment1.yaml:38-56
────────────────────────────────────────
  38 ┌       - name: app
  39 │         image: jetstream_loadtest-subscriber_image:latest
  40 │         ports:
  41 │         - containerPort: 8080
  42 │           name: metrics
  43 │         env:
  44 │         - name: PL_SERVER_TLS_CERT
  45 │           value: /certs/server.crt
  46 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "wait-for-publisher" of deployment "jetstream-subsciber" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 subscriber_deployment1.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: wait-for-publisher
  22 │         # yamllint disable-line rule:line-length
  23 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  24 │         # yamllint disable rule:indentation rule:line-length
  25 │         command: ['sh', '-c', 'set -xe;
  26 │           URL="http://jetstream-publisher.${NS}.svc.cluster.local:8080/metrics";
  27 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" ${URL}) -eq 200 ]; do
  28 │             echo "waiting for ${URL}";
  29 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 subscriber_deployment1.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: wait-for-publisher
  22 │         # yamllint disable-line rule:line-length
  23 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  24 │         # yamllint disable rule:indentation rule:line-length
  25 │         command: ['sh', '-c', 'set -xe;
  26 │           URL="http://jetstream-publisher.${NS}.svc.cluster.local:8080/metrics";
  27 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" ${URL}) -eq 200 ]; do
  28 │             echo "waiting for ${URL}";
  29 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 subscriber_deployment1.yaml:38-56
────────────────────────────────────────
  38 ┌       - name: app
  39 │         image: jetstream_loadtest-subscriber_image:latest
  40 │         ports:
  41 │         - containerPort: 8080
  42 │           name: metrics
  43 │         env:
  44 │         - name: PL_SERVER_TLS_CERT
  45 │           value: /certs/server.crt
  46 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment jetstream-subsciber in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 subscriber_deployment1.yaml:5
────────────────────────────────────────
   5 [   name: jetstream-subsciber
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container jetstream-subsciber in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 subscriber_deployment1.yaml:38-56
────────────────────────────────────────
  38 ┌       - name: app
  39 │         image: jetstream_loadtest-subscriber_image:latest
  40 │         ports:
  41 │         - containerPort: 8080
  42 │           name: metrics
  43 │         env:
  44 │         - name: PL_SERVER_TLS_CERT
  45 │           value: /certs/server.crt
  46 └         - name: PL_SERVER_TLS_KEY
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container jetstream-subsciber in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 subscriber_deployment1.yaml:21-36
────────────────────────────────────────
  21 ┌       - name: wait-for-publisher
  22 │         # yamllint disable-line rule:line-length
  23 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  24 │         # yamllint disable rule:indentation rule:line-length
  25 │         command: ['sh', '-c', 'set -xe;
  26 │           URL="http://jetstream-publisher.${NS}.svc.cluster.local:8080/metrics";
  27 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" ${URL}) -eq 200 ]; do
  28 │             echo "waiting for ${URL}";
  29 └             sleep 2;
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment jetstream-subsciber in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 subscriber_deployment1.yaml:20-60
────────────────────────────────────────
  20 ┌       initContainers:
  21 │       - name: wait-for-publisher
  22 │         # yamllint disable-line rule:line-length
  23 │         image: gcr.io/pixie-oss/pixie-dev-public/curl:multiarch-7.87.0@sha256:f7f265d5c64eb4463a43a99b6bf773f9e61a50aaa7cefaf564f43e42549a01dd
  24 │         # yamllint disable rule:indentation rule:line-length
  25 │         command: ['sh', '-c', 'set -xe;
  26 │           URL="http://jetstream-publisher.${NS}.svc.cluster.local:8080/metrics";
  27 │           until [ $(curl -m 0.5 -s -o /dev/null -w "%{http_code}" ${URL}) -eq 200 ]; do
  28 └             echo "waiting for ${URL}";
  ..   
────────────────────────────────────────



subtraction-honeypot.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'duplicate-subtraction-service' of Deployment 'duplicate-subtraction-service-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 subtraction-honeypot.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: duplicate-subtraction-service
  17 │         image: gcr.io/ceng489project/subtraction:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'duplicate-subtraction-service' of Deployment 'duplicate-subtraction-service-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 subtraction-honeypot.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: duplicate-subtraction-service
  17 │         image: gcr.io/ceng489project/subtraction:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'duplicate-subtraction-service' of 'deployment' 'duplicate-subtraction-service-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 subtraction-honeypot.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: duplicate-subtraction-service
  17 │         image: gcr.io/ceng489project/subtraction:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'duplicate-subtraction-service' of Deployment 'duplicate-subtraction-service-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 subtraction-honeypot.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: duplicate-subtraction-service
  17 │         image: gcr.io/ceng489project/subtraction:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'duplicate-subtraction-service' of Deployment 'duplicate-subtraction-service-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 subtraction-honeypot.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: duplicate-subtraction-service
  17 │         image: gcr.io/ceng489project/subtraction:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'duplicate-subtraction-service' of Deployment 'duplicate-subtraction-service-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 subtraction-honeypot.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: duplicate-subtraction-service
  17 │         image: gcr.io/ceng489project/subtraction:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'duplicate-subtraction-service' of Deployment 'duplicate-subtraction-service-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 subtraction-honeypot.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: duplicate-subtraction-service
  17 │         image: gcr.io/ceng489project/subtraction:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'duplicate-subtraction-service' of Deployment 'duplicate-subtraction-service-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 subtraction-honeypot.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: duplicate-subtraction-service
  17 │         image: gcr.io/ceng489project/subtraction:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'duplicate-subtraction-service' of Deployment 'duplicate-subtraction-service-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 subtraction-honeypot.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: duplicate-subtraction-service
  17 │         image: gcr.io/ceng489project/subtraction:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'duplicate-subtraction-service' of Deployment 'duplicate-subtraction-service-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 subtraction-honeypot.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: duplicate-subtraction-service
  17 │         image: gcr.io/ceng489project/subtraction:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'duplicate-subtraction-service' of Deployment 'duplicate-subtraction-service-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 subtraction-honeypot.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: duplicate-subtraction-service
  17 │         image: gcr.io/ceng489project/subtraction:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'duplicate-subtraction-service' of Deployment 'duplicate-subtraction-service-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 subtraction-honeypot.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: duplicate-subtraction-service
  17 │         image: gcr.io/ceng489project/subtraction:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 subtraction-honeypot.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: duplicate-subtraction-service
  17 │         image: gcr.io/ceng489project/subtraction:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "duplicate-subtraction-service" of deployment "duplicate-subtraction-service-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 subtraction-honeypot.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: duplicate-subtraction-service
  17 │         image: gcr.io/ceng489project/subtraction:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 subtraction-honeypot.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: duplicate-subtraction-service
  17 │         image: gcr.io/ceng489project/subtraction:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment duplicate-subtraction-service-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 subtraction-honeypot.yaml:4
────────────────────────────────────────
   4 [   name: duplicate-subtraction-service-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container duplicate-subtraction-service-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 subtraction-honeypot.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: duplicate-subtraction-service
  17 │         image: gcr.io/ceng489project/subtraction:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment duplicate-subtraction-service-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 subtraction-honeypot.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: duplicate-subtraction-service
  17 │         image: gcr.io/ceng489project/subtraction:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────



subtraction.yaml (kubernetes)
=============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'subtraction-service' of Deployment 'subtraction-service-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 subtraction.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: subtraction-service
  17 │         image: gcr.io/ceng489project/subtraction:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'subtraction-service' of Deployment 'subtraction-service-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 subtraction.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: subtraction-service
  17 │         image: gcr.io/ceng489project/subtraction:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'subtraction-service' of 'deployment' 'subtraction-service-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 subtraction.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: subtraction-service
  17 │         image: gcr.io/ceng489project/subtraction:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'subtraction-service' of Deployment 'subtraction-service-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 subtraction.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: subtraction-service
  17 │         image: gcr.io/ceng489project/subtraction:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'subtraction-service' of Deployment 'subtraction-service-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 subtraction.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: subtraction-service
  17 │         image: gcr.io/ceng489project/subtraction:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'subtraction-service' of Deployment 'subtraction-service-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 subtraction.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: subtraction-service
  17 │         image: gcr.io/ceng489project/subtraction:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'subtraction-service' of Deployment 'subtraction-service-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 subtraction.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: subtraction-service
  17 │         image: gcr.io/ceng489project/subtraction:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'subtraction-service' of Deployment 'subtraction-service-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 subtraction.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: subtraction-service
  17 │         image: gcr.io/ceng489project/subtraction:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'subtraction-service' of Deployment 'subtraction-service-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 subtraction.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: subtraction-service
  17 │         image: gcr.io/ceng489project/subtraction:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'subtraction-service' of Deployment 'subtraction-service-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 subtraction.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: subtraction-service
  17 │         image: gcr.io/ceng489project/subtraction:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'subtraction-service' of Deployment 'subtraction-service-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 subtraction.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: subtraction-service
  17 │         image: gcr.io/ceng489project/subtraction:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'subtraction-service' of Deployment 'subtraction-service-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 subtraction.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: subtraction-service
  17 │         image: gcr.io/ceng489project/subtraction:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 subtraction.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: subtraction-service
  17 │         image: gcr.io/ceng489project/subtraction:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "subtraction-service" of deployment "subtraction-service-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 subtraction.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: subtraction-service
  17 │         image: gcr.io/ceng489project/subtraction:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 subtraction.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: subtraction-service
  17 │         image: gcr.io/ceng489project/subtraction:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment subtraction-service-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 subtraction.yaml:4
────────────────────────────────────────
   4 [   name: subtraction-service-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container subtraction-service-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 subtraction.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: subtraction-service
  17 │         image: gcr.io/ceng489project/subtraction:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment subtraction-service-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 subtraction.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: subtraction-service
  17 │         image: gcr.io/ceng489project/subtraction:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────



subtractor-deployment.yaml (kubernetes)
=======================================
Tests: 113 (SUCCESSES: 96, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'subtractor' of Deployment 'subtractor-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 subtractor-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: subtractor
  17 │         image: iscsregistry.azurecr.io/sub:v1
  18 │         ports:
  19 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'subtractor' of Deployment 'subtractor-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 subtractor-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: subtractor
  17 │         image: iscsregistry.azurecr.io/sub:v1
  18 │         ports:
  19 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'subtractor' of 'deployment' 'subtractor-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 subtractor-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: subtractor
  17 │         image: iscsregistry.azurecr.io/sub:v1
  18 │         ports:
  19 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'subtractor' of Deployment 'subtractor-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 subtractor-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: subtractor
  17 │         image: iscsregistry.azurecr.io/sub:v1
  18 │         ports:
  19 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'subtractor' of Deployment 'subtractor-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 subtractor-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: subtractor
  17 │         image: iscsregistry.azurecr.io/sub:v1
  18 │         ports:
  19 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'subtractor' of Deployment 'subtractor-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 subtractor-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: subtractor
  17 │         image: iscsregistry.azurecr.io/sub:v1
  18 │         ports:
  19 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'subtractor' of Deployment 'subtractor-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 subtractor-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: subtractor
  17 │         image: iscsregistry.azurecr.io/sub:v1
  18 │         ports:
  19 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'subtractor' of Deployment 'subtractor-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 subtractor-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: subtractor
  17 │         image: iscsregistry.azurecr.io/sub:v1
  18 │         ports:
  19 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'subtractor' of Deployment 'subtractor-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 subtractor-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: subtractor
  17 │         image: iscsregistry.azurecr.io/sub:v1
  18 │         ports:
  19 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'subtractor' of Deployment 'subtractor-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 subtractor-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: subtractor
  17 │         image: iscsregistry.azurecr.io/sub:v1
  18 │         ports:
  19 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'subtractor' of Deployment 'subtractor-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 subtractor-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: subtractor
  17 │         image: iscsregistry.azurecr.io/sub:v1
  18 │         ports:
  19 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 subtractor-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: subtractor
  17 │         image: iscsregistry.azurecr.io/sub:v1
  18 │         ports:
  19 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "subtractor" of deployment "subtractor-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 subtractor-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: subtractor
  17 │         image: iscsregistry.azurecr.io/sub:v1
  18 │         ports:
  19 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 subtractor-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: subtractor
  17 │         image: iscsregistry.azurecr.io/sub:v1
  18 │         ports:
  19 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment subtractor-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 subtractor-deployment.yaml:4
────────────────────────────────────────
   4 [   name: subtractor-deployment
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container subtractor-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 subtractor-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: subtractor
  17 │         image: iscsregistry.azurecr.io/sub:v1
  18 │         ports:
  19 └         - containerPort: 5001
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment subtractor-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 subtractor-deployment.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: subtractor
  17 │         image: iscsregistry.azurecr.io/sub:v1
  18 │         ports:
  19 └         - containerPort: 5001
────────────────────────────────────────



succeeded-pod.yaml (kubernetes)
===============================
Tests: 113 (SUCCESSES: 96, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'succeeded' of Pod 'succeeded' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 succeeded-pod.yaml:23-25
────────────────────────────────────────
  23 ┌     - name: succeeded
  24 │       image: alpine:3.4
  25 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'succeeded' of Pod 'succeeded' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 succeeded-pod.yaml:23-25
────────────────────────────────────────
  23 ┌     - name: succeeded
  24 │       image: alpine:3.4
  25 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'succeeded' of 'pod' 'succeeded' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 succeeded-pod.yaml:23-25
────────────────────────────────────────
  23 ┌     - name: succeeded
  24 │       image: alpine:3.4
  25 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'succeeded' of Pod 'succeeded' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 succeeded-pod.yaml:23-25
────────────────────────────────────────
  23 ┌     - name: succeeded
  24 │       image: alpine:3.4
  25 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'succeeded' of Pod 'succeeded' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 succeeded-pod.yaml:23-25
────────────────────────────────────────
  23 ┌     - name: succeeded
  24 │       image: alpine:3.4
  25 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'succeeded' of Pod 'succeeded' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 succeeded-pod.yaml:23-25
────────────────────────────────────────
  23 ┌     - name: succeeded
  24 │       image: alpine:3.4
  25 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'succeeded' of Pod 'succeeded' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 succeeded-pod.yaml:23-25
────────────────────────────────────────
  23 ┌     - name: succeeded
  24 │       image: alpine:3.4
  25 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'succeeded' of Pod 'succeeded' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 succeeded-pod.yaml:23-25
────────────────────────────────────────
  23 ┌     - name: succeeded
  24 │       image: alpine:3.4
  25 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'succeeded' of Pod 'succeeded' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 succeeded-pod.yaml:23-25
────────────────────────────────────────
  23 ┌     - name: succeeded
  24 │       image: alpine:3.4
  25 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'succeeded' of Pod 'succeeded' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 succeeded-pod.yaml:23-25
────────────────────────────────────────
  23 ┌     - name: succeeded
  24 │       image: alpine:3.4
  25 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'succeeded' of Pod 'succeeded' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 succeeded-pod.yaml:23-25
────────────────────────────────────────
  23 ┌     - name: succeeded
  24 │       image: alpine:3.4
  25 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 succeeded-pod.yaml:23-25
────────────────────────────────────────
  23 ┌     - name: succeeded
  24 │       image: alpine:3.4
  25 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "succeeded" of pod "succeeded" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 succeeded-pod.yaml:23-25
────────────────────────────────────────
  23 ┌     - name: succeeded
  24 │       image: alpine:3.4
  25 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 succeeded-pod.yaml:23-25
────────────────────────────────────────
  23 ┌     - name: succeeded
  24 │       image: alpine:3.4
  25 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod succeeded in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 succeeded-pod.yaml:20
────────────────────────────────────────
  20 [   name: succeeded
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container succeeded in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 succeeded-pod.yaml:23-25
────────────────────────────────────────
  23 ┌     - name: succeeded
  24 │       image: alpine:3.4
  25 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod succeeded in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 succeeded-pod.yaml:22-26
────────────────────────────────────────
  22 ┌   containers:
  23 │     - name: succeeded
  24 │       image: alpine:3.4
  25 │       command: ["/bin/sh", "-c", "echo Succeeded"]
  26 └   restartPolicy: Never
────────────────────────────────────────



succeeded-pod1.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 96, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'succeeded' of Pod 'succeeded' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 succeeded-pod1.yaml:23-25
────────────────────────────────────────
  23 ┌     - name: succeeded
  24 │       image: alpine:3.4
  25 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'succeeded' of Pod 'succeeded' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 succeeded-pod1.yaml:23-25
────────────────────────────────────────
  23 ┌     - name: succeeded
  24 │       image: alpine:3.4
  25 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'succeeded' of 'pod' 'succeeded' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 succeeded-pod1.yaml:23-25
────────────────────────────────────────
  23 ┌     - name: succeeded
  24 │       image: alpine:3.4
  25 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'succeeded' of Pod 'succeeded' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 succeeded-pod1.yaml:23-25
────────────────────────────────────────
  23 ┌     - name: succeeded
  24 │       image: alpine:3.4
  25 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'succeeded' of Pod 'succeeded' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 succeeded-pod1.yaml:23-25
────────────────────────────────────────
  23 ┌     - name: succeeded
  24 │       image: alpine:3.4
  25 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'succeeded' of Pod 'succeeded' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 succeeded-pod1.yaml:23-25
────────────────────────────────────────
  23 ┌     - name: succeeded
  24 │       image: alpine:3.4
  25 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'succeeded' of Pod 'succeeded' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 succeeded-pod1.yaml:23-25
────────────────────────────────────────
  23 ┌     - name: succeeded
  24 │       image: alpine:3.4
  25 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'succeeded' of Pod 'succeeded' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 succeeded-pod1.yaml:23-25
────────────────────────────────────────
  23 ┌     - name: succeeded
  24 │       image: alpine:3.4
  25 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'succeeded' of Pod 'succeeded' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 succeeded-pod1.yaml:23-25
────────────────────────────────────────
  23 ┌     - name: succeeded
  24 │       image: alpine:3.4
  25 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'succeeded' of Pod 'succeeded' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 succeeded-pod1.yaml:23-25
────────────────────────────────────────
  23 ┌     - name: succeeded
  24 │       image: alpine:3.4
  25 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'succeeded' of Pod 'succeeded' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 succeeded-pod1.yaml:23-25
────────────────────────────────────────
  23 ┌     - name: succeeded
  24 │       image: alpine:3.4
  25 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 succeeded-pod1.yaml:23-25
────────────────────────────────────────
  23 ┌     - name: succeeded
  24 │       image: alpine:3.4
  25 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "succeeded" of pod "succeeded" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 succeeded-pod1.yaml:23-25
────────────────────────────────────────
  23 ┌     - name: succeeded
  24 │       image: alpine:3.4
  25 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 succeeded-pod1.yaml:23-25
────────────────────────────────────────
  23 ┌     - name: succeeded
  24 │       image: alpine:3.4
  25 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod succeeded in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 succeeded-pod1.yaml:20
────────────────────────────────────────
  20 [   name: succeeded
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container succeeded in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 succeeded-pod1.yaml:23-25
────────────────────────────────────────
  23 ┌     - name: succeeded
  24 │       image: alpine:3.4
  25 └       command: ["/bin/sh", "-c", "echo Succeeded"]
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod succeeded in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 succeeded-pod1.yaml:22-26
────────────────────────────────────────
  22 ┌   containers:
  23 │     - name: succeeded
  24 │       image: alpine:3.4
  25 │       command: ["/bin/sh", "-c", "echo Succeeded"]
  26 └   restartPolicy: Never
────────────────────────────────────────



suggest.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 93, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'suggest' of Deployment 'suggest' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 suggest.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: suggest
  17 │         image: smarthotels/suggestions:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'suggest' of Deployment 'suggest' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 suggest.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: suggest
  17 │         image: smarthotels/suggestions:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'suggest' of 'deployment' 'suggest' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 suggest.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: suggest
  17 │         image: smarthotels/suggestions:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'suggest' of Deployment 'suggest' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 suggest.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: suggest
  17 │         image: smarthotels/suggestions:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'suggest' of Deployment 'suggest' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 suggest.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: suggest
  17 │         image: smarthotels/suggestions:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'suggest' of Deployment 'suggest' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 suggest.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: suggest
  17 │         image: smarthotels/suggestions:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'suggest' of Deployment 'suggest' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 suggest.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: suggest
  17 │         image: smarthotels/suggestions:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'suggest' of Deployment 'suggest' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 suggest.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: suggest
  17 │         image: smarthotels/suggestions:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'suggest' of Deployment 'suggest' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 suggest.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: suggest
  17 │         image: smarthotels/suggestions:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'suggest' of Deployment 'suggest' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 suggest.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: suggest
  17 │         image: smarthotels/suggestions:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'suggest' of Deployment 'suggest' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 suggest.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: suggest
  17 │         image: smarthotels/suggestions:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'suggest' of Deployment 'suggest' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 suggest.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: suggest
  17 │         image: smarthotels/suggestions:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 suggest.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: suggest
  17 │         image: smarthotels/suggestions:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "suggest" of deployment "suggest" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 suggest.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: suggest
  17 │         image: smarthotels/suggestions:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 suggest.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: suggest
  17 │         image: smarthotels/suggestions:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment suggest in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 suggest.yaml:4
────────────────────────────────────────
   4 [   name: suggest
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment suggest in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container suggest in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 suggest.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: suggest
  17 │         image: smarthotels/suggestions:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment suggest in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 suggest.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: suggest
  17 │         image: smarthotels/suggestions:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container suggest in deployment suggest (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 suggest.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: suggest
  17 │         image: smarthotels/suggestions:latest
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



super-admin_1.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0111 (MEDIUM): ClusterRoleBinding 'superadmin-binding' should not bind to roles ["cluster-admin", "admin", "edit"]
════════════════════════════════════════
Either cluster-admin or those granted powerful permissions.

See https://avd.aquasec.com/misconfig/ksv111
────────────────────────────────────────
 super-admin_1.yaml:4
────────────────────────────────────────
   4 [   name: superadmin-binding
────────────────────────────────────────



superpod_pod.yaml (kubernetes)
==============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'backend' of Deployment 'superpod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 superpod_pod.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         env:
  18 │         - name: INCLUDE_EXTAUTH_HEADER
  19 └           value: 'yes'
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'backend' of Deployment 'superpod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 superpod_pod.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         env:
  18 │         - name: INCLUDE_EXTAUTH_HEADER
  19 └           value: 'yes'
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'backend' of 'deployment' 'superpod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 superpod_pod.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         env:
  18 │         - name: INCLUDE_EXTAUTH_HEADER
  19 └           value: 'yes'
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'backend' of Deployment 'superpod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 superpod_pod.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         env:
  18 │         - name: INCLUDE_EXTAUTH_HEADER
  19 └           value: 'yes'
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'backend' of Deployment 'superpod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 superpod_pod.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         env:
  18 │         - name: INCLUDE_EXTAUTH_HEADER
  19 └           value: 'yes'
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'backend' of Deployment 'superpod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 superpod_pod.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         env:
  18 │         - name: INCLUDE_EXTAUTH_HEADER
  19 └           value: 'yes'
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'backend' of Deployment 'superpod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 superpod_pod.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         env:
  18 │         - name: INCLUDE_EXTAUTH_HEADER
  19 └           value: 'yes'
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'backend' of Deployment 'superpod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 superpod_pod.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         env:
  18 │         - name: INCLUDE_EXTAUTH_HEADER
  19 └           value: 'yes'
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'backend' of Deployment 'superpod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 superpod_pod.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         env:
  18 │         - name: INCLUDE_EXTAUTH_HEADER
  19 └           value: 'yes'
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'backend' of Deployment 'superpod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 superpod_pod.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         env:
  18 │         - name: INCLUDE_EXTAUTH_HEADER
  19 └           value: 'yes'
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'backend' of Deployment 'superpod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 superpod_pod.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         env:
  18 │         - name: INCLUDE_EXTAUTH_HEADER
  19 └           value: 'yes'
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'backend' of Deployment 'superpod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 superpod_pod.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         env:
  18 │         - name: INCLUDE_EXTAUTH_HEADER
  19 └           value: 'yes'
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 superpod_pod.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         env:
  18 │         - name: INCLUDE_EXTAUTH_HEADER
  19 └           value: 'yes'
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "backend" of deployment "superpod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 superpod_pod.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         env:
  18 │         - name: INCLUDE_EXTAUTH_HEADER
  19 └           value: 'yes'
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 superpod_pod.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         env:
  18 │         - name: INCLUDE_EXTAUTH_HEADER
  19 └           value: 'yes'
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment superpod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 superpod_pod.yaml:4
────────────────────────────────────────
   4 [   name: superpod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container superpod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 superpod_pod.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: backend
  17 │         env:
  18 │         - name: INCLUDE_EXTAUTH_HEADER
  19 └           value: 'yes'
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment superpod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 superpod_pod.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: backend
  17 │         env:
  18 │         - name: INCLUDE_EXTAUTH_HEADER
  19 └           value: 'yes'
────────────────────────────────────────



superset-assert.yaml (kubernetes)
=================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): statefulset test-superset-node-default in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 superset-assert.yaml:4
────────────────────────────────────────
   4 [   name: test-superset-node-default
────────────────────────────────────────



superset-assert1.yaml (kubernetes)
==================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): statefulset test-superset-node-default in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 superset-assert1.yaml:4
────────────────────────────────────────
   4 [   name: test-superset-node-default
────────────────────────────────────────



superset-assert2.yaml (kubernetes)
==================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): statefulset test-superset-node-default in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 superset-assert2.yaml:4
────────────────────────────────────────
   4 [   name: test-superset-node-default
────────────────────────────────────────



superset-assert3.yaml (kubernetes)
==================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): statefulset test-superset-node-default in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 superset-assert3.yaml:5
────────────────────────────────────────
   5 [   name: test-superset-node-default
────────────────────────────────────────



superset-assert4.yaml (kubernetes)
==================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 0, CRITICAL: 0)

AVD-KSV-0110 (LOW): statefulset test-superset-node-default in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 superset-assert4.yaml:4
────────────────────────────────────────
   4 [   name: test-superset-node-default
────────────────────────────────────────



superset-with-ldap_1.yaml (kubernetes)
======================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'openldap' of StatefulSet 'openldap' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 superset-with-ldap_1.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: openldap
  20 │         image: docker.io/bitnami/openldap:2.5
  21 │         env:
  22 │         - name: LDAP_ADMIN_USERNAME
  23 │           value: admin
  24 │         - name: LDAP_ADMIN_PASSWORD
  25 │           value: admin
  26 │         - name: LDAP_USERS
  27 └           value: user01,user02
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'openldap' of StatefulSet 'openldap' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 superset-with-ldap_1.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: openldap
  20 │         image: docker.io/bitnami/openldap:2.5
  21 │         env:
  22 │         - name: LDAP_ADMIN_USERNAME
  23 │           value: admin
  24 │         - name: LDAP_ADMIN_PASSWORD
  25 │           value: admin
  26 │         - name: LDAP_USERS
  27 └           value: user01,user02
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'openldap' of 'statefulset' 'openldap' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 superset-with-ldap_1.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: openldap
  20 │         image: docker.io/bitnami/openldap:2.5
  21 │         env:
  22 │         - name: LDAP_ADMIN_USERNAME
  23 │           value: admin
  24 │         - name: LDAP_ADMIN_PASSWORD
  25 │           value: admin
  26 │         - name: LDAP_USERS
  27 └           value: user01,user02
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'openldap' of StatefulSet 'openldap' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 superset-with-ldap_1.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: openldap
  20 │         image: docker.io/bitnami/openldap:2.5
  21 │         env:
  22 │         - name: LDAP_ADMIN_USERNAME
  23 │           value: admin
  24 │         - name: LDAP_ADMIN_PASSWORD
  25 │           value: admin
  26 │         - name: LDAP_USERS
  27 └           value: user01,user02
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'openldap' of StatefulSet 'openldap' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 superset-with-ldap_1.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: openldap
  20 │         image: docker.io/bitnami/openldap:2.5
  21 │         env:
  22 │         - name: LDAP_ADMIN_USERNAME
  23 │           value: admin
  24 │         - name: LDAP_ADMIN_PASSWORD
  25 │           value: admin
  26 │         - name: LDAP_USERS
  27 └           value: user01,user02
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'openldap' of StatefulSet 'openldap' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 superset-with-ldap_1.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: openldap
  20 │         image: docker.io/bitnami/openldap:2.5
  21 │         env:
  22 │         - name: LDAP_ADMIN_USERNAME
  23 │           value: admin
  24 │         - name: LDAP_ADMIN_PASSWORD
  25 │           value: admin
  26 │         - name: LDAP_USERS
  27 └           value: user01,user02
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'openldap' of StatefulSet 'openldap' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 superset-with-ldap_1.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: openldap
  20 │         image: docker.io/bitnami/openldap:2.5
  21 │         env:
  22 │         - name: LDAP_ADMIN_USERNAME
  23 │           value: admin
  24 │         - name: LDAP_ADMIN_PASSWORD
  25 │           value: admin
  26 │         - name: LDAP_USERS
  27 └           value: user01,user02
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'openldap' of StatefulSet 'openldap' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 superset-with-ldap_1.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: openldap
  20 │         image: docker.io/bitnami/openldap:2.5
  21 │         env:
  22 │         - name: LDAP_ADMIN_USERNAME
  23 │           value: admin
  24 │         - name: LDAP_ADMIN_PASSWORD
  25 │           value: admin
  26 │         - name: LDAP_USERS
  27 └           value: user01,user02
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'openldap' of StatefulSet 'openldap' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 superset-with-ldap_1.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: openldap
  20 │         image: docker.io/bitnami/openldap:2.5
  21 │         env:
  22 │         - name: LDAP_ADMIN_USERNAME
  23 │           value: admin
  24 │         - name: LDAP_ADMIN_PASSWORD
  25 │           value: admin
  26 │         - name: LDAP_USERS
  27 └           value: user01,user02
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'openldap' of StatefulSet 'openldap' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 superset-with-ldap_1.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: openldap
  20 │         image: docker.io/bitnami/openldap:2.5
  21 │         env:
  22 │         - name: LDAP_ADMIN_USERNAME
  23 │           value: admin
  24 │         - name: LDAP_ADMIN_PASSWORD
  25 │           value: admin
  26 │         - name: LDAP_USERS
  27 └           value: user01,user02
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'openldap' of StatefulSet 'openldap' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 superset-with-ldap_1.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: openldap
  20 │         image: docker.io/bitnami/openldap:2.5
  21 │         env:
  22 │         - name: LDAP_ADMIN_USERNAME
  23 │           value: admin
  24 │         - name: LDAP_ADMIN_PASSWORD
  25 │           value: admin
  26 │         - name: LDAP_USERS
  27 └           value: user01,user02
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 superset-with-ldap_1.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: openldap
  20 │         image: docker.io/bitnami/openldap:2.5
  21 │         env:
  22 │         - name: LDAP_ADMIN_USERNAME
  23 │           value: admin
  24 │         - name: LDAP_ADMIN_PASSWORD
  25 │           value: admin
  26 │         - name: LDAP_USERS
  27 └           value: user01,user02
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "openldap" of statefulset "openldap" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 superset-with-ldap_1.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: openldap
  20 │         image: docker.io/bitnami/openldap:2.5
  21 │         env:
  22 │         - name: LDAP_ADMIN_USERNAME
  23 │           value: admin
  24 │         - name: LDAP_ADMIN_PASSWORD
  25 │           value: admin
  26 │         - name: LDAP_USERS
  27 └           value: user01,user02
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 superset-with-ldap_1.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: openldap
  20 │         image: docker.io/bitnami/openldap:2.5
  21 │         env:
  22 │         - name: LDAP_ADMIN_USERNAME
  23 │           value: admin
  24 │         - name: LDAP_ADMIN_PASSWORD
  25 │           value: admin
  26 │         - name: LDAP_USERS
  27 └           value: user01,user02
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset openldap in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 superset-with-ldap_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: openldap
   5 │   labels:
   6 └     app.kubernetes.io/name: openldap
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container openldap in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 superset-with-ldap_1.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: openldap
  20 │         image: docker.io/bitnami/openldap:2.5
  21 │         env:
  22 │         - name: LDAP_ADMIN_USERNAME
  23 │           value: admin
  24 │         - name: LDAP_ADMIN_PASSWORD
  25 │           value: admin
  26 │         - name: LDAP_USERS
  27 └           value: user01,user02
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset openldap in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 superset-with-ldap_1.yaml:18-50
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: openldap
  20 │         image: docker.io/bitnami/openldap:2.5
  21 │         env:
  22 │         - name: LDAP_ADMIN_USERNAME
  23 │           value: admin
  24 │         - name: LDAP_ADMIN_PASSWORD
  25 │           value: admin
  26 └         - name: LDAP_USERS
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container openldap in statefulset openldap (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 superset-with-ldap_1.yaml:19-43
────────────────────────────────────────
  19 ┌       - name: openldap
  20 │         image: docker.io/bitnami/openldap:2.5
  21 │         env:
  22 │         - name: LDAP_ADMIN_USERNAME
  23 │           value: admin
  24 │         - name: LDAP_ADMIN_PASSWORD
  25 │           value: admin
  26 │         - name: LDAP_USERS
  27 └           value: user01,user02
  ..   
────────────────────────────────────────



supervisor-deployment.yaml (kubernetes)
=======================================
Tests: 113 (SUCCESSES: 96, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'supervisor' of Deployment 'supervisor-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 supervisor-deployment.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: supervisor
  19 │           image: us-central1-docker.pkg.dev/hubs-dev-333333/ocho-osai/osai-kube/supervisor@sha256:26567404e17d33bb529e7ad4cd31189fefa7c0a1fb1a68f9cc4fbba51db1d557
  20 │           env:
  21 │             - name: ARTIFACT_REGISTRY
  22 │               valueFrom:
  23 │                 configMapKeyRef:
  24 │                   name: registry-config
  25 │                   key: artifactRegistry
  26 │           ports:
  27 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'supervisor' of Deployment 'supervisor-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 supervisor-deployment.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: supervisor
  19 │           image: us-central1-docker.pkg.dev/hubs-dev-333333/ocho-osai/osai-kube/supervisor@sha256:26567404e17d33bb529e7ad4cd31189fefa7c0a1fb1a68f9cc4fbba51db1d557
  20 │           env:
  21 │             - name: ARTIFACT_REGISTRY
  22 │               valueFrom:
  23 │                 configMapKeyRef:
  24 │                   name: registry-config
  25 │                   key: artifactRegistry
  26 │           ports:
  27 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'supervisor' of 'deployment' 'supervisor-deployment' in 'osai-kube' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 supervisor-deployment.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: supervisor
  19 │           image: us-central1-docker.pkg.dev/hubs-dev-333333/ocho-osai/osai-kube/supervisor@sha256:26567404e17d33bb529e7ad4cd31189fefa7c0a1fb1a68f9cc4fbba51db1d557
  20 │           env:
  21 │             - name: ARTIFACT_REGISTRY
  22 │               valueFrom:
  23 │                 configMapKeyRef:
  24 │                   name: registry-config
  25 │                   key: artifactRegistry
  26 │           ports:
  27 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'supervisor' of Deployment 'supervisor-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 supervisor-deployment.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: supervisor
  19 │           image: us-central1-docker.pkg.dev/hubs-dev-333333/ocho-osai/osai-kube/supervisor@sha256:26567404e17d33bb529e7ad4cd31189fefa7c0a1fb1a68f9cc4fbba51db1d557
  20 │           env:
  21 │             - name: ARTIFACT_REGISTRY
  22 │               valueFrom:
  23 │                 configMapKeyRef:
  24 │                   name: registry-config
  25 │                   key: artifactRegistry
  26 │           ports:
  27 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'supervisor' of Deployment 'supervisor-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 supervisor-deployment.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: supervisor
  19 │           image: us-central1-docker.pkg.dev/hubs-dev-333333/ocho-osai/osai-kube/supervisor@sha256:26567404e17d33bb529e7ad4cd31189fefa7c0a1fb1a68f9cc4fbba51db1d557
  20 │           env:
  21 │             - name: ARTIFACT_REGISTRY
  22 │               valueFrom:
  23 │                 configMapKeyRef:
  24 │                   name: registry-config
  25 │                   key: artifactRegistry
  26 │           ports:
  27 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'supervisor' of Deployment 'supervisor-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 supervisor-deployment.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: supervisor
  19 │           image: us-central1-docker.pkg.dev/hubs-dev-333333/ocho-osai/osai-kube/supervisor@sha256:26567404e17d33bb529e7ad4cd31189fefa7c0a1fb1a68f9cc4fbba51db1d557
  20 │           env:
  21 │             - name: ARTIFACT_REGISTRY
  22 │               valueFrom:
  23 │                 configMapKeyRef:
  24 │                   name: registry-config
  25 │                   key: artifactRegistry
  26 │           ports:
  27 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'supervisor' of Deployment 'supervisor-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 supervisor-deployment.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: supervisor
  19 │           image: us-central1-docker.pkg.dev/hubs-dev-333333/ocho-osai/osai-kube/supervisor@sha256:26567404e17d33bb529e7ad4cd31189fefa7c0a1fb1a68f9cc4fbba51db1d557
  20 │           env:
  21 │             - name: ARTIFACT_REGISTRY
  22 │               valueFrom:
  23 │                 configMapKeyRef:
  24 │                   name: registry-config
  25 │                   key: artifactRegistry
  26 │           ports:
  27 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'supervisor' of Deployment 'supervisor-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 supervisor-deployment.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: supervisor
  19 │           image: us-central1-docker.pkg.dev/hubs-dev-333333/ocho-osai/osai-kube/supervisor@sha256:26567404e17d33bb529e7ad4cd31189fefa7c0a1fb1a68f9cc4fbba51db1d557
  20 │           env:
  21 │             - name: ARTIFACT_REGISTRY
  22 │               valueFrom:
  23 │                 configMapKeyRef:
  24 │                   name: registry-config
  25 │                   key: artifactRegistry
  26 │           ports:
  27 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'supervisor' of Deployment 'supervisor-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 supervisor-deployment.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: supervisor
  19 │           image: us-central1-docker.pkg.dev/hubs-dev-333333/ocho-osai/osai-kube/supervisor@sha256:26567404e17d33bb529e7ad4cd31189fefa7c0a1fb1a68f9cc4fbba51db1d557
  20 │           env:
  21 │             - name: ARTIFACT_REGISTRY
  22 │               valueFrom:
  23 │                 configMapKeyRef:
  24 │                   name: registry-config
  25 │                   key: artifactRegistry
  26 │           ports:
  27 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'supervisor' of Deployment 'supervisor-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 supervisor-deployment.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: supervisor
  19 │           image: us-central1-docker.pkg.dev/hubs-dev-333333/ocho-osai/osai-kube/supervisor@sha256:26567404e17d33bb529e7ad4cd31189fefa7c0a1fb1a68f9cc4fbba51db1d557
  20 │           env:
  21 │             - name: ARTIFACT_REGISTRY
  22 │               valueFrom:
  23 │                 configMapKeyRef:
  24 │                   name: registry-config
  25 │                   key: artifactRegistry
  26 │           ports:
  27 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'supervisor' of Deployment 'supervisor-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 supervisor-deployment.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: supervisor
  19 │           image: us-central1-docker.pkg.dev/hubs-dev-333333/ocho-osai/osai-kube/supervisor@sha256:26567404e17d33bb529e7ad4cd31189fefa7c0a1fb1a68f9cc4fbba51db1d557
  20 │           env:
  21 │             - name: ARTIFACT_REGISTRY
  22 │               valueFrom:
  23 │                 configMapKeyRef:
  24 │                   name: registry-config
  25 │                   key: artifactRegistry
  26 │           ports:
  27 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 supervisor-deployment.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: supervisor
  19 │           image: us-central1-docker.pkg.dev/hubs-dev-333333/ocho-osai/osai-kube/supervisor@sha256:26567404e17d33bb529e7ad4cd31189fefa7c0a1fb1a68f9cc4fbba51db1d557
  20 │           env:
  21 │             - name: ARTIFACT_REGISTRY
  22 │               valueFrom:
  23 │                 configMapKeyRef:
  24 │                   name: registry-config
  25 │                   key: artifactRegistry
  26 │           ports:
  27 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "supervisor" of deployment "supervisor-deployment" in "osai-kube" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 supervisor-deployment.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: supervisor
  19 │           image: us-central1-docker.pkg.dev/hubs-dev-333333/ocho-osai/osai-kube/supervisor@sha256:26567404e17d33bb529e7ad4cd31189fefa7c0a1fb1a68f9cc4fbba51db1d557
  20 │           env:
  21 │             - name: ARTIFACT_REGISTRY
  22 │               valueFrom:
  23 │                 configMapKeyRef:
  24 │                   name: registry-config
  25 │                   key: artifactRegistry
  26 │           ports:
  27 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 supervisor-deployment.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: supervisor
  19 │           image: us-central1-docker.pkg.dev/hubs-dev-333333/ocho-osai/osai-kube/supervisor@sha256:26567404e17d33bb529e7ad4cd31189fefa7c0a1fb1a68f9cc4fbba51db1d557
  20 │           env:
  21 │             - name: ARTIFACT_REGISTRY
  22 │               valueFrom:
  23 │                 configMapKeyRef:
  24 │                   name: registry-config
  25 │                   key: artifactRegistry
  26 │           ports:
  27 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container supervisor-deployment in osai-kube namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 supervisor-deployment.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: supervisor
  19 │           image: us-central1-docker.pkg.dev/hubs-dev-333333/ocho-osai/osai-kube/supervisor@sha256:26567404e17d33bb529e7ad4cd31189fefa7c0a1fb1a68f9cc4fbba51db1d557
  20 │           env:
  21 │             - name: ARTIFACT_REGISTRY
  22 │               valueFrom:
  23 │                 configMapKeyRef:
  24 │                   name: registry-config
  25 │                   key: artifactRegistry
  26 │           ports:
  27 └             - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment supervisor-deployment in osai-kube namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 supervisor-deployment.yaml:16-27
────────────────────────────────────────
  16 ┌       serviceAccountName: default # Specify the Service Account here
  17 │       containers:
  18 │         - name: supervisor
  19 │           image: us-central1-docker.pkg.dev/hubs-dev-333333/ocho-osai/osai-kube/supervisor@sha256:26567404e17d33bb529e7ad4cd31189fefa7c0a1fb1a68f9cc4fbba51db1d557
  20 │           env:
  21 │             - name: ARTIFACT_REGISTRY
  22 │               valueFrom:
  23 │                 configMapKeyRef:
  24 └                   name: registry-config
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container supervisor in deployment supervisor-deployment (namespace: osai-kube) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 supervisor-deployment.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: supervisor
  19 │           image: us-central1-docker.pkg.dev/hubs-dev-333333/ocho-osai/osai-kube/supervisor@sha256:26567404e17d33bb529e7ad4cd31189fefa7c0a1fb1a68f9cc4fbba51db1d557
  20 │           env:
  21 │             - name: ARTIFACT_REGISTRY
  22 │               valueFrom:
  23 │                 configMapKeyRef:
  24 │                   name: registry-config
  25 │                   key: artifactRegistry
  26 │           ports:
  27 └             - containerPort: 5000
────────────────────────────────────────



support-db-deployment.yaml (kubernetes)
=======================================
Tests: 113 (SUCCESSES: 96, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'support-db' of Deployment 'support-db' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 support-db-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: support-db
  17 │         image: mysql:5.7
  18 │         ports:
  19 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'support-db' of Deployment 'support-db' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 support-db-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: support-db
  17 │         image: mysql:5.7
  18 │         ports:
  19 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'support-db' of 'deployment' 'support-db' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 support-db-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: support-db
  17 │         image: mysql:5.7
  18 │         ports:
  19 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'support-db' of Deployment 'support-db' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 support-db-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: support-db
  17 │         image: mysql:5.7
  18 │         ports:
  19 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'support-db' of Deployment 'support-db' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 support-db-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: support-db
  17 │         image: mysql:5.7
  18 │         ports:
  19 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'support-db' of Deployment 'support-db' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 support-db-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: support-db
  17 │         image: mysql:5.7
  18 │         ports:
  19 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'support-db' of Deployment 'support-db' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 support-db-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: support-db
  17 │         image: mysql:5.7
  18 │         ports:
  19 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'support-db' of Deployment 'support-db' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 support-db-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: support-db
  17 │         image: mysql:5.7
  18 │         ports:
  19 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'support-db' of Deployment 'support-db' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 support-db-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: support-db
  17 │         image: mysql:5.7
  18 │         ports:
  19 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'support-db' of Deployment 'support-db' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 support-db-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: support-db
  17 │         image: mysql:5.7
  18 │         ports:
  19 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'support-db' of Deployment 'support-db' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 support-db-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: support-db
  17 │         image: mysql:5.7
  18 │         ports:
  19 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 support-db-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: support-db
  17 │         image: mysql:5.7
  18 │         ports:
  19 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "support-db" of deployment "support-db" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 support-db-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: support-db
  17 │         image: mysql:5.7
  18 │         ports:
  19 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 support-db-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: support-db
  17 │         image: mysql:5.7
  18 │         ports:
  19 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment support-db in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 support-db-deployment.yaml:4
────────────────────────────────────────
   4 [   name: support-db
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container support-db in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 support-db-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: support-db
  17 │         image: mysql:5.7
  18 │         ports:
  19 └         - containerPort: 3306
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment support-db in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 support-db-deployment.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: support-db
  17 │         image: mysql:5.7
  18 │         ports:
  19 └         - containerPort: 3306
────────────────────────────────────────



support-service-deployment.yaml (kubernetes)
============================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'support-service' of Deployment 'support-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 support-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: support-service
  17 │         image: ificiency/support-service:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'support-service' of Deployment 'support-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 support-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: support-service
  17 │         image: ificiency/support-service:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'support-service' of 'deployment' 'support-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 support-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: support-service
  17 │         image: ificiency/support-service:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'support-service' of Deployment 'support-service' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 support-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: support-service
  17 │         image: ificiency/support-service:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'support-service' of Deployment 'support-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 support-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: support-service
  17 │         image: ificiency/support-service:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'support-service' of Deployment 'support-service' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 support-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: support-service
  17 │         image: ificiency/support-service:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'support-service' of Deployment 'support-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 support-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: support-service
  17 │         image: ificiency/support-service:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'support-service' of Deployment 'support-service' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 support-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: support-service
  17 │         image: ificiency/support-service:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'support-service' of Deployment 'support-service' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 support-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: support-service
  17 │         image: ificiency/support-service:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'support-service' of Deployment 'support-service' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 support-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: support-service
  17 │         image: ificiency/support-service:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'support-service' of Deployment 'support-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 support-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: support-service
  17 │         image: ificiency/support-service:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'support-service' of Deployment 'support-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 support-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: support-service
  17 │         image: ificiency/support-service:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 support-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: support-service
  17 │         image: ificiency/support-service:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "support-service" of deployment "support-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 support-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: support-service
  17 │         image: ificiency/support-service:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 support-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: support-service
  17 │         image: ificiency/support-service:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment support-service in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 support-service-deployment.yaml:4
────────────────────────────────────────
   4 [   name: support-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container support-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 support-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: support-service
  17 │         image: ificiency/support-service:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment support-service in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 support-service-deployment.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: support-service
  17 │         image: ificiency/support-service:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container support-service in deployment support-service (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 support-service-deployment.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: support-service
  17 │         image: ificiency/support-service:latest
  18 │         ports:
  19 └         - containerPort: 5000
────────────────────────────────────────



support-tier.yaml (kubernetes)
==============================
Tests: 129 (SUCCESSES: 95, FAILURES: 34)
Failures: 34 (UNKNOWN: 0, LOW: 21, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'counter' of Deployment 'support-tier' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 support-tier.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: counter
  21 │           image: lrakai/microservices:counter-v1
  22 │           env:
  23 │             - name: API_URL
  24 │               # DNS for service discovery
  25 │               # Naming pattern:
  26 │               #   IP address: <service_name>.<service_namespace>
  27 │               #   Port: needs to be extracted from SRV DNS record
  28 └               value: http://app-tier.deployments:8080
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'poller' of Deployment 'support-tier' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 support-tier.yaml:30-34
────────────────────────────────────────
  30 ┌         - name: poller
  31 │           image: lrakai/microservices:poller-v1
  32 │           env:
  33 │             - name: API_URL
  34 └               value: http://app-tier:$(APP_TIER_SERVICE_PORT)
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'counter' of Deployment 'support-tier' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 support-tier.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: counter
  21 │           image: lrakai/microservices:counter-v1
  22 │           env:
  23 │             - name: API_URL
  24 │               # DNS for service discovery
  25 │               # Naming pattern:
  26 │               #   IP address: <service_name>.<service_namespace>
  27 │               #   Port: needs to be extracted from SRV DNS record
  28 └               value: http://app-tier.deployments:8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'poller' of Deployment 'support-tier' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 support-tier.yaml:30-34
────────────────────────────────────────
  30 ┌         - name: poller
  31 │           image: lrakai/microservices:poller-v1
  32 │           env:
  33 │             - name: API_URL
  34 └               value: http://app-tier:$(APP_TIER_SERVICE_PORT)
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'counter' of 'deployment' 'support-tier' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 support-tier.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: counter
  21 │           image: lrakai/microservices:counter-v1
  22 │           env:
  23 │             - name: API_URL
  24 │               # DNS for service discovery
  25 │               # Naming pattern:
  26 │               #   IP address: <service_name>.<service_namespace>
  27 │               #   Port: needs to be extracted from SRV DNS record
  28 └               value: http://app-tier.deployments:8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'poller' of 'deployment' 'support-tier' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 support-tier.yaml:30-34
────────────────────────────────────────
  30 ┌         - name: poller
  31 │           image: lrakai/microservices:poller-v1
  32 │           env:
  33 │             - name: API_URL
  34 └               value: http://app-tier:$(APP_TIER_SERVICE_PORT)
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'counter' of Deployment 'support-tier' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 support-tier.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: counter
  21 │           image: lrakai/microservices:counter-v1
  22 │           env:
  23 │             - name: API_URL
  24 │               # DNS for service discovery
  25 │               # Naming pattern:
  26 │               #   IP address: <service_name>.<service_namespace>
  27 │               #   Port: needs to be extracted from SRV DNS record
  28 └               value: http://app-tier.deployments:8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'poller' of Deployment 'support-tier' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 support-tier.yaml:30-34
────────────────────────────────────────
  30 ┌         - name: poller
  31 │           image: lrakai/microservices:poller-v1
  32 │           env:
  33 │             - name: API_URL
  34 └               value: http://app-tier:$(APP_TIER_SERVICE_PORT)
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'counter' of Deployment 'support-tier' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 support-tier.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: counter
  21 │           image: lrakai/microservices:counter-v1
  22 │           env:
  23 │             - name: API_URL
  24 │               # DNS for service discovery
  25 │               # Naming pattern:
  26 │               #   IP address: <service_name>.<service_namespace>
  27 │               #   Port: needs to be extracted from SRV DNS record
  28 └               value: http://app-tier.deployments:8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'poller' of Deployment 'support-tier' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 support-tier.yaml:30-34
────────────────────────────────────────
  30 ┌         - name: poller
  31 │           image: lrakai/microservices:poller-v1
  32 │           env:
  33 │             - name: API_URL
  34 └               value: http://app-tier:$(APP_TIER_SERVICE_PORT)
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'counter' of Deployment 'support-tier' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 support-tier.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: counter
  21 │           image: lrakai/microservices:counter-v1
  22 │           env:
  23 │             - name: API_URL
  24 │               # DNS for service discovery
  25 │               # Naming pattern:
  26 │               #   IP address: <service_name>.<service_namespace>
  27 │               #   Port: needs to be extracted from SRV DNS record
  28 └               value: http://app-tier.deployments:8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'poller' of Deployment 'support-tier' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 support-tier.yaml:30-34
────────────────────────────────────────
  30 ┌         - name: poller
  31 │           image: lrakai/microservices:poller-v1
  32 │           env:
  33 │             - name: API_URL
  34 └               value: http://app-tier:$(APP_TIER_SERVICE_PORT)
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'counter' of Deployment 'support-tier' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 support-tier.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: counter
  21 │           image: lrakai/microservices:counter-v1
  22 │           env:
  23 │             - name: API_URL
  24 │               # DNS for service discovery
  25 │               # Naming pattern:
  26 │               #   IP address: <service_name>.<service_namespace>
  27 │               #   Port: needs to be extracted from SRV DNS record
  28 └               value: http://app-tier.deployments:8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'poller' of Deployment 'support-tier' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 support-tier.yaml:30-34
────────────────────────────────────────
  30 ┌         - name: poller
  31 │           image: lrakai/microservices:poller-v1
  32 │           env:
  33 │             - name: API_URL
  34 └               value: http://app-tier:$(APP_TIER_SERVICE_PORT)
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'counter' of Deployment 'support-tier' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 support-tier.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: counter
  21 │           image: lrakai/microservices:counter-v1
  22 │           env:
  23 │             - name: API_URL
  24 │               # DNS for service discovery
  25 │               # Naming pattern:
  26 │               #   IP address: <service_name>.<service_namespace>
  27 │               #   Port: needs to be extracted from SRV DNS record
  28 └               value: http://app-tier.deployments:8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'poller' of Deployment 'support-tier' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 support-tier.yaml:30-34
────────────────────────────────────────
  30 ┌         - name: poller
  31 │           image: lrakai/microservices:poller-v1
  32 │           env:
  33 │             - name: API_URL
  34 └               value: http://app-tier:$(APP_TIER_SERVICE_PORT)
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'counter' of Deployment 'support-tier' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 support-tier.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: counter
  21 │           image: lrakai/microservices:counter-v1
  22 │           env:
  23 │             - name: API_URL
  24 │               # DNS for service discovery
  25 │               # Naming pattern:
  26 │               #   IP address: <service_name>.<service_namespace>
  27 │               #   Port: needs to be extracted from SRV DNS record
  28 └               value: http://app-tier.deployments:8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'poller' of Deployment 'support-tier' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 support-tier.yaml:30-34
────────────────────────────────────────
  30 ┌         - name: poller
  31 │           image: lrakai/microservices:poller-v1
  32 │           env:
  33 │             - name: API_URL
  34 └               value: http://app-tier:$(APP_TIER_SERVICE_PORT)
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'counter' of Deployment 'support-tier' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 support-tier.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: counter
  21 │           image: lrakai/microservices:counter-v1
  22 │           env:
  23 │             - name: API_URL
  24 │               # DNS for service discovery
  25 │               # Naming pattern:
  26 │               #   IP address: <service_name>.<service_namespace>
  27 │               #   Port: needs to be extracted from SRV DNS record
  28 └               value: http://app-tier.deployments:8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'poller' of Deployment 'support-tier' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 support-tier.yaml:30-34
────────────────────────────────────────
  30 ┌         - name: poller
  31 │           image: lrakai/microservices:poller-v1
  32 │           env:
  33 │             - name: API_URL
  34 └               value: http://app-tier:$(APP_TIER_SERVICE_PORT)
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'counter' of Deployment 'support-tier' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 support-tier.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: counter
  21 │           image: lrakai/microservices:counter-v1
  22 │           env:
  23 │             - name: API_URL
  24 │               # DNS for service discovery
  25 │               # Naming pattern:
  26 │               #   IP address: <service_name>.<service_namespace>
  27 │               #   Port: needs to be extracted from SRV DNS record
  28 └               value: http://app-tier.deployments:8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'poller' of Deployment 'support-tier' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 support-tier.yaml:30-34
────────────────────────────────────────
  30 ┌         - name: poller
  31 │           image: lrakai/microservices:poller-v1
  32 │           env:
  33 │             - name: API_URL
  34 └               value: http://app-tier:$(APP_TIER_SERVICE_PORT)
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 support-tier.yaml:30-34
────────────────────────────────────────
  30 ┌         - name: poller
  31 │           image: lrakai/microservices:poller-v1
  32 │           env:
  33 │             - name: API_URL
  34 └               value: http://app-tier:$(APP_TIER_SERVICE_PORT)
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 support-tier.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: counter
  21 │           image: lrakai/microservices:counter-v1
  22 │           env:
  23 │             - name: API_URL
  24 │               # DNS for service discovery
  25 │               # Naming pattern:
  26 │               #   IP address: <service_name>.<service_namespace>
  27 │               #   Port: needs to be extracted from SRV DNS record
  28 └               value: http://app-tier.deployments:8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "counter" of deployment "support-tier" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 support-tier.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: counter
  21 │           image: lrakai/microservices:counter-v1
  22 │           env:
  23 │             - name: API_URL
  24 │               # DNS for service discovery
  25 │               # Naming pattern:
  26 │               #   IP address: <service_name>.<service_namespace>
  27 │               #   Port: needs to be extracted from SRV DNS record
  28 └               value: http://app-tier.deployments:8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "poller" of deployment "support-tier" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 support-tier.yaml:30-34
────────────────────────────────────────
  30 ┌         - name: poller
  31 │           image: lrakai/microservices:poller-v1
  32 │           env:
  33 │             - name: API_URL
  34 └               value: http://app-tier:$(APP_TIER_SERVICE_PORT)
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 support-tier.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: counter
  21 │           image: lrakai/microservices:counter-v1
  22 │           env:
  23 │             - name: API_URL
  24 │               # DNS for service discovery
  25 │               # Naming pattern:
  26 │               #   IP address: <service_name>.<service_namespace>
  27 │               #   Port: needs to be extracted from SRV DNS record
  28 └               value: http://app-tier.deployments:8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 support-tier.yaml:30-34
────────────────────────────────────────
  30 ┌         - name: poller
  31 │           image: lrakai/microservices:poller-v1
  32 │           env:
  33 │             - name: API_URL
  34 └               value: http://app-tier:$(APP_TIER_SERVICE_PORT)
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment support-tier in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 support-tier.yaml:4-7
────────────────────────────────────────
   4 ┌   name: support-tier
   5 │   labels:
   6 │     app: microservices
   7 └     tier: support
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container support-tier in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 support-tier.yaml:30-34
────────────────────────────────────────
  30 ┌         - name: poller
  31 │           image: lrakai/microservices:poller-v1
  32 │           env:
  33 │             - name: API_URL
  34 └               value: http://app-tier:$(APP_TIER_SERVICE_PORT)
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container support-tier in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 support-tier.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: counter
  21 │           image: lrakai/microservices:counter-v1
  22 │           env:
  23 │             - name: API_URL
  24 │               # DNS for service discovery
  25 │               # Naming pattern:
  26 │               #   IP address: <service_name>.<service_namespace>
  27 │               #   Port: needs to be extracted from SRV DNS record
  28 └               value: http://app-tier.deployments:8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment support-tier in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 support-tier.yaml:19-34
────────────────────────────────────────
  19 ┌       containers:
  20 │         - name: counter
  21 │           image: lrakai/microservices:counter-v1
  22 │           env:
  23 │             - name: API_URL
  24 │               # DNS for service discovery
  25 │               # Naming pattern:
  26 │               #   IP address: <service_name>.<service_namespace>
  27 └               #   Port: needs to be extracted from SRV DNS record
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container counter in deployment support-tier (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 support-tier.yaml:20-28
────────────────────────────────────────
  20 ┌         - name: counter
  21 │           image: lrakai/microservices:counter-v1
  22 │           env:
  23 │             - name: API_URL
  24 │               # DNS for service discovery
  25 │               # Naming pattern:
  26 │               #   IP address: <service_name>.<service_namespace>
  27 │               #   Port: needs to be extracted from SRV DNS record
  28 └               value: http://app-tier.deployments:8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container poller in deployment support-tier (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 support-tier.yaml:30-34
────────────────────────────────────────
  30 ┌         - name: poller
  31 │           image: lrakai/microservices:poller-v1
  32 │           env:
  33 │             - name: API_URL
  34 └               value: http://app-tier:$(APP_TIER_SERVICE_PORT)
────────────────────────────────────────



surrealdb-migrate.job.yaml (kubernetes)
=======================================
Tests: 113 (SUCCESSES: 96, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'surrealdb-migrate' of Job 'surrealdb-migrate' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 surrealdb-migrate.job.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: surrealdb-migrate
  19 │           image: archismanmridha/surrealdb-migrate:0.0.1
  20 │           volumeMounts:
  21 │             - mountPath: /migrations.surql
  22 │               name: migrations
  23 │               subPath: schema.surql
  24 │               readOnly: true
  25 │           env:
  26 │             - name: ENDPOINT
  27 └               value: ws://surrealdb:8000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'surrealdb-migrate' of Job 'surrealdb-migrate' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 surrealdb-migrate.job.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: surrealdb-migrate
  19 │           image: archismanmridha/surrealdb-migrate:0.0.1
  20 │           volumeMounts:
  21 │             - mountPath: /migrations.surql
  22 │               name: migrations
  23 │               subPath: schema.surql
  24 │               readOnly: true
  25 │           env:
  26 │             - name: ENDPOINT
  27 └               value: ws://surrealdb:8000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'surrealdb-migrate' of 'job' 'surrealdb-migrate' in 'surrealdb' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 surrealdb-migrate.job.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: surrealdb-migrate
  19 │           image: archismanmridha/surrealdb-migrate:0.0.1
  20 │           volumeMounts:
  21 │             - mountPath: /migrations.surql
  22 │               name: migrations
  23 │               subPath: schema.surql
  24 │               readOnly: true
  25 │           env:
  26 │             - name: ENDPOINT
  27 └               value: ws://surrealdb:8000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'surrealdb-migrate' of Job 'surrealdb-migrate' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 surrealdb-migrate.job.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: surrealdb-migrate
  19 │           image: archismanmridha/surrealdb-migrate:0.0.1
  20 │           volumeMounts:
  21 │             - mountPath: /migrations.surql
  22 │               name: migrations
  23 │               subPath: schema.surql
  24 │               readOnly: true
  25 │           env:
  26 │             - name: ENDPOINT
  27 └               value: ws://surrealdb:8000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'surrealdb-migrate' of Job 'surrealdb-migrate' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 surrealdb-migrate.job.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: surrealdb-migrate
  19 │           image: archismanmridha/surrealdb-migrate:0.0.1
  20 │           volumeMounts:
  21 │             - mountPath: /migrations.surql
  22 │               name: migrations
  23 │               subPath: schema.surql
  24 │               readOnly: true
  25 │           env:
  26 │             - name: ENDPOINT
  27 └               value: ws://surrealdb:8000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'surrealdb-migrate' of Job 'surrealdb-migrate' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 surrealdb-migrate.job.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: surrealdb-migrate
  19 │           image: archismanmridha/surrealdb-migrate:0.0.1
  20 │           volumeMounts:
  21 │             - mountPath: /migrations.surql
  22 │               name: migrations
  23 │               subPath: schema.surql
  24 │               readOnly: true
  25 │           env:
  26 │             - name: ENDPOINT
  27 └               value: ws://surrealdb:8000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'surrealdb-migrate' of Job 'surrealdb-migrate' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 surrealdb-migrate.job.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: surrealdb-migrate
  19 │           image: archismanmridha/surrealdb-migrate:0.0.1
  20 │           volumeMounts:
  21 │             - mountPath: /migrations.surql
  22 │               name: migrations
  23 │               subPath: schema.surql
  24 │               readOnly: true
  25 │           env:
  26 │             - name: ENDPOINT
  27 └               value: ws://surrealdb:8000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'surrealdb-migrate' of Job 'surrealdb-migrate' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 surrealdb-migrate.job.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: surrealdb-migrate
  19 │           image: archismanmridha/surrealdb-migrate:0.0.1
  20 │           volumeMounts:
  21 │             - mountPath: /migrations.surql
  22 │               name: migrations
  23 │               subPath: schema.surql
  24 │               readOnly: true
  25 │           env:
  26 │             - name: ENDPOINT
  27 └               value: ws://surrealdb:8000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'surrealdb-migrate' of Job 'surrealdb-migrate' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 surrealdb-migrate.job.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: surrealdb-migrate
  19 │           image: archismanmridha/surrealdb-migrate:0.0.1
  20 │           volumeMounts:
  21 │             - mountPath: /migrations.surql
  22 │               name: migrations
  23 │               subPath: schema.surql
  24 │               readOnly: true
  25 │           env:
  26 │             - name: ENDPOINT
  27 └               value: ws://surrealdb:8000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'surrealdb-migrate' of Job 'surrealdb-migrate' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 surrealdb-migrate.job.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: surrealdb-migrate
  19 │           image: archismanmridha/surrealdb-migrate:0.0.1
  20 │           volumeMounts:
  21 │             - mountPath: /migrations.surql
  22 │               name: migrations
  23 │               subPath: schema.surql
  24 │               readOnly: true
  25 │           env:
  26 │             - name: ENDPOINT
  27 └               value: ws://surrealdb:8000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'surrealdb-migrate' of Job 'surrealdb-migrate' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 surrealdb-migrate.job.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: surrealdb-migrate
  19 │           image: archismanmridha/surrealdb-migrate:0.0.1
  20 │           volumeMounts:
  21 │             - mountPath: /migrations.surql
  22 │               name: migrations
  23 │               subPath: schema.surql
  24 │               readOnly: true
  25 │           env:
  26 │             - name: ENDPOINT
  27 └               value: ws://surrealdb:8000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 surrealdb-migrate.job.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: surrealdb-migrate
  19 │           image: archismanmridha/surrealdb-migrate:0.0.1
  20 │           volumeMounts:
  21 │             - mountPath: /migrations.surql
  22 │               name: migrations
  23 │               subPath: schema.surql
  24 │               readOnly: true
  25 │           env:
  26 │             - name: ENDPOINT
  27 └               value: ws://surrealdb:8000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "surrealdb-migrate" of job "surrealdb-migrate" in "surrealdb" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 surrealdb-migrate.job.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: surrealdb-migrate
  19 │           image: archismanmridha/surrealdb-migrate:0.0.1
  20 │           volumeMounts:
  21 │             - mountPath: /migrations.surql
  22 │               name: migrations
  23 │               subPath: schema.surql
  24 │               readOnly: true
  25 │           env:
  26 │             - name: ENDPOINT
  27 └               value: ws://surrealdb:8000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 surrealdb-migrate.job.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: surrealdb-migrate
  19 │           image: archismanmridha/surrealdb-migrate:0.0.1
  20 │           volumeMounts:
  21 │             - mountPath: /migrations.surql
  22 │               name: migrations
  23 │               subPath: schema.surql
  24 │               readOnly: true
  25 │           env:
  26 │             - name: ENDPOINT
  27 └               value: ws://surrealdb:8000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container surrealdb-migrate in surrealdb namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 surrealdb-migrate.job.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: surrealdb-migrate
  19 │           image: archismanmridha/surrealdb-migrate:0.0.1
  20 │           volumeMounts:
  21 │             - mountPath: /migrations.surql
  22 │               name: migrations
  23 │               subPath: schema.surql
  24 │               readOnly: true
  25 │           env:
  26 │             - name: ENDPOINT
  27 └               value: ws://surrealdb:8000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job surrealdb-migrate in surrealdb namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 surrealdb-migrate.job.yaml:16-31
────────────────────────────────────────
  16 ┌       restartPolicy: Never
  17 │       containers:
  18 │         - name: surrealdb-migrate
  19 │           image: archismanmridha/surrealdb-migrate:0.0.1
  20 │           volumeMounts:
  21 │             - mountPath: /migrations.surql
  22 │               name: migrations
  23 │               subPath: schema.surql
  24 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container surrealdb-migrate in job surrealdb-migrate (namespace: surrealdb) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 surrealdb-migrate.job.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: surrealdb-migrate
  19 │           image: archismanmridha/surrealdb-migrate:0.0.1
  20 │           volumeMounts:
  21 │             - mountPath: /migrations.surql
  22 │               name: migrations
  23 │               subPath: schema.surql
  24 │               readOnly: true
  25 │           env:
  26 │             - name: ENDPOINT
  27 └               value: ws://surrealdb:8000
────────────────────────────────────────



surrealdb-migrate.job1.yaml (kubernetes)
========================================
Tests: 113 (SUCCESSES: 96, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'surrealdb-migrate' of Job 'surrealdb-migrate' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 surrealdb-migrate.job1.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: surrealdb-migrate
  19 │           image: archismanmridha/surrealdb-migrate:0.0.1
  20 │           volumeMounts:
  21 │             - mountPath: /migrations.surql
  22 │               name: migrations
  23 │               subPath: schema.surql
  24 │               readOnly: true
  25 │           env:
  26 │             - name: ENDPOINT
  27 └               value: ws://surrealdb:8000
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'surrealdb-migrate' of Job 'surrealdb-migrate' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 surrealdb-migrate.job1.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: surrealdb-migrate
  19 │           image: archismanmridha/surrealdb-migrate:0.0.1
  20 │           volumeMounts:
  21 │             - mountPath: /migrations.surql
  22 │               name: migrations
  23 │               subPath: schema.surql
  24 │               readOnly: true
  25 │           env:
  26 │             - name: ENDPOINT
  27 └               value: ws://surrealdb:8000
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'surrealdb-migrate' of 'job' 'surrealdb-migrate' in 'surrealdb' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 surrealdb-migrate.job1.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: surrealdb-migrate
  19 │           image: archismanmridha/surrealdb-migrate:0.0.1
  20 │           volumeMounts:
  21 │             - mountPath: /migrations.surql
  22 │               name: migrations
  23 │               subPath: schema.surql
  24 │               readOnly: true
  25 │           env:
  26 │             - name: ENDPOINT
  27 └               value: ws://surrealdb:8000
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'surrealdb-migrate' of Job 'surrealdb-migrate' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 surrealdb-migrate.job1.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: surrealdb-migrate
  19 │           image: archismanmridha/surrealdb-migrate:0.0.1
  20 │           volumeMounts:
  21 │             - mountPath: /migrations.surql
  22 │               name: migrations
  23 │               subPath: schema.surql
  24 │               readOnly: true
  25 │           env:
  26 │             - name: ENDPOINT
  27 └               value: ws://surrealdb:8000
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'surrealdb-migrate' of Job 'surrealdb-migrate' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 surrealdb-migrate.job1.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: surrealdb-migrate
  19 │           image: archismanmridha/surrealdb-migrate:0.0.1
  20 │           volumeMounts:
  21 │             - mountPath: /migrations.surql
  22 │               name: migrations
  23 │               subPath: schema.surql
  24 │               readOnly: true
  25 │           env:
  26 │             - name: ENDPOINT
  27 └               value: ws://surrealdb:8000
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'surrealdb-migrate' of Job 'surrealdb-migrate' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 surrealdb-migrate.job1.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: surrealdb-migrate
  19 │           image: archismanmridha/surrealdb-migrate:0.0.1
  20 │           volumeMounts:
  21 │             - mountPath: /migrations.surql
  22 │               name: migrations
  23 │               subPath: schema.surql
  24 │               readOnly: true
  25 │           env:
  26 │             - name: ENDPOINT
  27 └               value: ws://surrealdb:8000
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'surrealdb-migrate' of Job 'surrealdb-migrate' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 surrealdb-migrate.job1.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: surrealdb-migrate
  19 │           image: archismanmridha/surrealdb-migrate:0.0.1
  20 │           volumeMounts:
  21 │             - mountPath: /migrations.surql
  22 │               name: migrations
  23 │               subPath: schema.surql
  24 │               readOnly: true
  25 │           env:
  26 │             - name: ENDPOINT
  27 └               value: ws://surrealdb:8000
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'surrealdb-migrate' of Job 'surrealdb-migrate' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 surrealdb-migrate.job1.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: surrealdb-migrate
  19 │           image: archismanmridha/surrealdb-migrate:0.0.1
  20 │           volumeMounts:
  21 │             - mountPath: /migrations.surql
  22 │               name: migrations
  23 │               subPath: schema.surql
  24 │               readOnly: true
  25 │           env:
  26 │             - name: ENDPOINT
  27 └               value: ws://surrealdb:8000
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'surrealdb-migrate' of Job 'surrealdb-migrate' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 surrealdb-migrate.job1.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: surrealdb-migrate
  19 │           image: archismanmridha/surrealdb-migrate:0.0.1
  20 │           volumeMounts:
  21 │             - mountPath: /migrations.surql
  22 │               name: migrations
  23 │               subPath: schema.surql
  24 │               readOnly: true
  25 │           env:
  26 │             - name: ENDPOINT
  27 └               value: ws://surrealdb:8000
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'surrealdb-migrate' of Job 'surrealdb-migrate' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 surrealdb-migrate.job1.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: surrealdb-migrate
  19 │           image: archismanmridha/surrealdb-migrate:0.0.1
  20 │           volumeMounts:
  21 │             - mountPath: /migrations.surql
  22 │               name: migrations
  23 │               subPath: schema.surql
  24 │               readOnly: true
  25 │           env:
  26 │             - name: ENDPOINT
  27 └               value: ws://surrealdb:8000
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'surrealdb-migrate' of Job 'surrealdb-migrate' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 surrealdb-migrate.job1.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: surrealdb-migrate
  19 │           image: archismanmridha/surrealdb-migrate:0.0.1
  20 │           volumeMounts:
  21 │             - mountPath: /migrations.surql
  22 │               name: migrations
  23 │               subPath: schema.surql
  24 │               readOnly: true
  25 │           env:
  26 │             - name: ENDPOINT
  27 └               value: ws://surrealdb:8000
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 surrealdb-migrate.job1.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: surrealdb-migrate
  19 │           image: archismanmridha/surrealdb-migrate:0.0.1
  20 │           volumeMounts:
  21 │             - mountPath: /migrations.surql
  22 │               name: migrations
  23 │               subPath: schema.surql
  24 │               readOnly: true
  25 │           env:
  26 │             - name: ENDPOINT
  27 └               value: ws://surrealdb:8000
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "surrealdb-migrate" of job "surrealdb-migrate" in "surrealdb" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 surrealdb-migrate.job1.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: surrealdb-migrate
  19 │           image: archismanmridha/surrealdb-migrate:0.0.1
  20 │           volumeMounts:
  21 │             - mountPath: /migrations.surql
  22 │               name: migrations
  23 │               subPath: schema.surql
  24 │               readOnly: true
  25 │           env:
  26 │             - name: ENDPOINT
  27 └               value: ws://surrealdb:8000
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 surrealdb-migrate.job1.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: surrealdb-migrate
  19 │           image: archismanmridha/surrealdb-migrate:0.0.1
  20 │           volumeMounts:
  21 │             - mountPath: /migrations.surql
  22 │               name: migrations
  23 │               subPath: schema.surql
  24 │               readOnly: true
  25 │           env:
  26 │             - name: ENDPOINT
  27 └               value: ws://surrealdb:8000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container surrealdb-migrate in surrealdb namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 surrealdb-migrate.job1.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: surrealdb-migrate
  19 │           image: archismanmridha/surrealdb-migrate:0.0.1
  20 │           volumeMounts:
  21 │             - mountPath: /migrations.surql
  22 │               name: migrations
  23 │               subPath: schema.surql
  24 │               readOnly: true
  25 │           env:
  26 │             - name: ENDPOINT
  27 └               value: ws://surrealdb:8000
────────────────────────────────────────


AVD-KSV-0118 (HIGH): job surrealdb-migrate in surrealdb namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 surrealdb-migrate.job1.yaml:16-31
────────────────────────────────────────
  16 ┌       restartPolicy: Never
  17 │       containers:
  18 │         - name: surrealdb-migrate
  19 │           image: archismanmridha/surrealdb-migrate:0.0.1
  20 │           volumeMounts:
  21 │             - mountPath: /migrations.surql
  22 │               name: migrations
  23 │               subPath: schema.surql
  24 └               readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container surrealdb-migrate in job surrealdb-migrate (namespace: surrealdb) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 surrealdb-migrate.job1.yaml:18-27
────────────────────────────────────────
  18 ┌         - name: surrealdb-migrate
  19 │           image: archismanmridha/surrealdb-migrate:0.0.1
  20 │           volumeMounts:
  21 │             - mountPath: /migrations.surql
  22 │               name: migrations
  23 │               subPath: schema.surql
  24 │               readOnly: true
  25 │           env:
  26 │             - name: ENDPOINT
  27 └               value: ws://surrealdb:8000
────────────────────────────────────────



sv-statefulset.yaml (kubernetes)
================================
Tests: 112 (SUCCESSES: 102, FAILURES: 10)
Failures: 10 (UNKNOWN: 0, LOW: 6, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0011 (LOW): Container 'soavirt' of StatefulSet 'soavirt' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 sv-statefulset.yaml:33-87
────────────────────────────────────────
  33 ┌       - name: soavirt
  34 │         image: parasoft/soavirt-server
  35 │         imagePullPolicy: IfNotPresent
  36 │         securityContext:
  37 │           allowPrivilegeEscalation: false
  38 │           capabilities:
  39 │             drop: ["ALL"]
  40 │           seccompProfile:
  41 └             type: RuntimeDefault
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'soavirt' of StatefulSet 'soavirt' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 sv-statefulset.yaml:33-87
────────────────────────────────────────
  33 ┌       - name: soavirt
  34 │         image: parasoft/soavirt-server
  35 │         imagePullPolicy: IfNotPresent
  36 │         securityContext:
  37 │           allowPrivilegeEscalation: false
  38 │           capabilities:
  39 │             drop: ["ALL"]
  40 │           seccompProfile:
  41 └             type: RuntimeDefault
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'soavirt' of StatefulSet 'soavirt' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 sv-statefulset.yaml:33-87
────────────────────────────────────────
  33 ┌       - name: soavirt
  34 │         image: parasoft/soavirt-server
  35 │         imagePullPolicy: IfNotPresent
  36 │         securityContext:
  37 │           allowPrivilegeEscalation: false
  38 │           capabilities:
  39 │             drop: ["ALL"]
  40 │           seccompProfile:
  41 └             type: RuntimeDefault
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'soavirt' of StatefulSet 'soavirt' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 sv-statefulset.yaml:33-87
────────────────────────────────────────
  33 ┌       - name: soavirt
  34 │         image: parasoft/soavirt-server
  35 │         imagePullPolicy: IfNotPresent
  36 │         securityContext:
  37 │           allowPrivilegeEscalation: false
  38 │           capabilities:
  39 │             drop: ["ALL"]
  40 │           seccompProfile:
  41 └             type: RuntimeDefault
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'soavirt' of StatefulSet 'soavirt' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 sv-statefulset.yaml:33-87
────────────────────────────────────────
  33 ┌       - name: soavirt
  34 │         image: parasoft/soavirt-server
  35 │         imagePullPolicy: IfNotPresent
  36 │         securityContext:
  37 │           allowPrivilegeEscalation: false
  38 │           capabilities:
  39 │             drop: ["ALL"]
  40 │           seccompProfile:
  41 └             type: RuntimeDefault
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'soavirt' of StatefulSet 'soavirt' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 sv-statefulset.yaml:33-87
────────────────────────────────────────
  33 ┌       - name: soavirt
  34 │         image: parasoft/soavirt-server
  35 │         imagePullPolicy: IfNotPresent
  36 │         securityContext:
  37 │           allowPrivilegeEscalation: false
  38 │           capabilities:
  39 │             drop: ["ALL"]
  40 │           seccompProfile:
  41 └             type: RuntimeDefault
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'soavirt' of StatefulSet 'soavirt' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 sv-statefulset.yaml:33-87
────────────────────────────────────────
  33 ┌       - name: soavirt
  34 │         image: parasoft/soavirt-server
  35 │         imagePullPolicy: IfNotPresent
  36 │         securityContext:
  37 │           allowPrivilegeEscalation: false
  38 │           capabilities:
  39 │             drop: ["ALL"]
  40 │           seccompProfile:
  41 └             type: RuntimeDefault
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'soavirt' of StatefulSet 'soavirt' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 sv-statefulset.yaml:33-87
────────────────────────────────────────
  33 ┌       - name: soavirt
  34 │         image: parasoft/soavirt-server
  35 │         imagePullPolicy: IfNotPresent
  36 │         securityContext:
  37 │           allowPrivilegeEscalation: false
  38 │           capabilities:
  39 │             drop: ["ALL"]
  40 │           seccompProfile:
  41 └             type: RuntimeDefault
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'soavirt' of StatefulSet 'soavirt' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 sv-statefulset.yaml:33-87
────────────────────────────────────────
  33 ┌       - name: soavirt
  34 │         image: parasoft/soavirt-server
  35 │         imagePullPolicy: IfNotPresent
  36 │         securityContext:
  37 │           allowPrivilegeEscalation: false
  38 │           capabilities:
  39 │             drop: ["ALL"]
  40 │           seccompProfile:
  41 └             type: RuntimeDefault
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container soavirt in statefulset soavirt (namespace: parasoft-ns) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 sv-statefulset.yaml:33-87
────────────────────────────────────────
  33 ┌       - name: soavirt
  34 │         image: parasoft/soavirt-server
  35 │         imagePullPolicy: IfNotPresent
  36 │         securityContext:
  37 │           allowPrivilegeEscalation: false
  38 │           capabilities:
  39 │             drop: ["ALL"]
  40 │           seccompProfile:
  41 └             type: RuntimeDefault
  ..   
────────────────────────────────────────



svc-bad.yaml (kubernetes)
=========================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'badsvc01' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



svc-bad10.yaml (kubernetes)
===========================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'badsvc01' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



svc-bad15.yaml (kubernetes)
===========================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'badsvc01' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



svc-bad20.yaml (kubernetes)
===========================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'badsvc01' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



svc-bad5.yaml (kubernetes)
==========================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'badsvc01' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



svc-clusterip4.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-container' of Pod 'nginx-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 svc-clusterip4.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 svc-clusterip4.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-container' of 'pod' 'nginx-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 svc-clusterip4.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 svc-clusterip4.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-container' of Pod 'nginx-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 svc-clusterip4.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-container' of Pod 'nginx-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 svc-clusterip4.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-container' of Pod 'nginx-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 svc-clusterip4.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 svc-clusterip4.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 svc-clusterip4.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 svc-clusterip4.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 svc-clusterip4.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 svc-clusterip4.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 svc-clusterip4.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-container" of pod "nginx-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 svc-clusterip4.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 svc-clusterip4.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 svc-clusterip4.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx-pod
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod nginx-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 svc-clusterip4.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 svc-clusterip4.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────



svc-deploy-foo_1.yaml (kubernetes)
==================================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'foo-container' of Deployment 'foo-deploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 svc-deploy-foo_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: foo-container
  17 │         image: whatwant/node-web:2.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'foo-container' of Deployment 'foo-deploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 svc-deploy-foo_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: foo-container
  17 │         image: whatwant/node-web:2.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'foo-container' of 'deployment' 'foo-deploy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 svc-deploy-foo_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: foo-container
  17 │         image: whatwant/node-web:2.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'foo-container' of Deployment 'foo-deploy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 svc-deploy-foo_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: foo-container
  17 │         image: whatwant/node-web:2.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'foo-container' of Deployment 'foo-deploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 svc-deploy-foo_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: foo-container
  17 │         image: whatwant/node-web:2.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'foo-container' of Deployment 'foo-deploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 svc-deploy-foo_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: foo-container
  17 │         image: whatwant/node-web:2.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'foo-container' of Deployment 'foo-deploy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 svc-deploy-foo_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: foo-container
  17 │         image: whatwant/node-web:2.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'foo-container' of Deployment 'foo-deploy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 svc-deploy-foo_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: foo-container
  17 │         image: whatwant/node-web:2.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'foo-container' of Deployment 'foo-deploy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 svc-deploy-foo_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: foo-container
  17 │         image: whatwant/node-web:2.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'foo-container' of Deployment 'foo-deploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 svc-deploy-foo_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: foo-container
  17 │         image: whatwant/node-web:2.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'foo-container' of Deployment 'foo-deploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 svc-deploy-foo_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: foo-container
  17 │         image: whatwant/node-web:2.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 svc-deploy-foo_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: foo-container
  17 │         image: whatwant/node-web:2.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "foo-container" of deployment "foo-deploy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 svc-deploy-foo_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: foo-container
  17 │         image: whatwant/node-web:2.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 svc-deploy-foo_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: foo-container
  17 │         image: whatwant/node-web:2.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment foo-deploy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 svc-deploy-foo_1.yaml:4
────────────────────────────────────────
   4 [   name: foo-deploy
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container foo-deploy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 svc-deploy-foo_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: foo-container
  17 │         image: whatwant/node-web:2.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment foo-deploy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 svc-deploy-foo_1.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: foo-container
  17 │         image: whatwant/node-web:2.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container foo-container in deployment foo-deploy (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 svc-deploy-foo_1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: foo-container
  17 │         image: whatwant/node-web:2.0
  18 │         ports:
  19 └         - containerPort: 8080
────────────────────────────────────────



svc-dns-pod.yaml (kubernetes)
=============================
Tests: 113 (SUCCESSES: 96, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'alpine-dns' of Pod 'svc-dns-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 svc-dns-pod.yaml:10-15
────────────────────────────────────────
  10 ┌   - name: alpine-dns
  11 │     image: alpine
  12 │     command:
  13 │       - /bin/sh
  14 │       - -c
  15 └       - |
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'alpine-dns' of Pod 'svc-dns-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 svc-dns-pod.yaml:10-15
────────────────────────────────────────
  10 ┌   - name: alpine-dns
  11 │     image: alpine
  12 │     command:
  13 │       - /bin/sh
  14 │       - -c
  15 └       - |
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'alpine-dns' of 'pod' 'svc-dns-pod' in 'service-namespace' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 svc-dns-pod.yaml:10-15
────────────────────────────────────────
  10 ┌   - name: alpine-dns
  11 │     image: alpine
  12 │     command:
  13 │       - /bin/sh
  14 │       - -c
  15 └       - |
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'alpine-dns' of Pod 'svc-dns-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 svc-dns-pod.yaml:10-15
────────────────────────────────────────
  10 ┌   - name: alpine-dns
  11 │     image: alpine
  12 │     command:
  13 │       - /bin/sh
  14 │       - -c
  15 └       - |
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'alpine-dns' of Pod 'svc-dns-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 svc-dns-pod.yaml:10-15
────────────────────────────────────────
  10 ┌   - name: alpine-dns
  11 │     image: alpine
  12 │     command:
  13 │       - /bin/sh
  14 │       - -c
  15 └       - |
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'alpine-dns' of Pod 'svc-dns-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 svc-dns-pod.yaml:10-15
────────────────────────────────────────
  10 ┌   - name: alpine-dns
  11 │     image: alpine
  12 │     command:
  13 │       - /bin/sh
  14 │       - -c
  15 └       - |
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'alpine-dns' of Pod 'svc-dns-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 svc-dns-pod.yaml:10-15
────────────────────────────────────────
  10 ┌   - name: alpine-dns
  11 │     image: alpine
  12 │     command:
  13 │       - /bin/sh
  14 │       - -c
  15 └       - |
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'alpine-dns' of Pod 'svc-dns-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 svc-dns-pod.yaml:10-15
────────────────────────────────────────
  10 ┌   - name: alpine-dns
  11 │     image: alpine
  12 │     command:
  13 │       - /bin/sh
  14 │       - -c
  15 └       - |
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'alpine-dns' of Pod 'svc-dns-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 svc-dns-pod.yaml:10-15
────────────────────────────────────────
  10 ┌   - name: alpine-dns
  11 │     image: alpine
  12 │     command:
  13 │       - /bin/sh
  14 │       - -c
  15 └       - |
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'alpine-dns' of Pod 'svc-dns-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 svc-dns-pod.yaml:10-15
────────────────────────────────────────
  10 ┌   - name: alpine-dns
  11 │     image: alpine
  12 │     command:
  13 │       - /bin/sh
  14 │       - -c
  15 └       - |
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'alpine-dns' of Pod 'svc-dns-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 svc-dns-pod.yaml:10-15
────────────────────────────────────────
  10 ┌   - name: alpine-dns
  11 │     image: alpine
  12 │     command:
  13 │       - /bin/sh
  14 │       - -c
  15 └       - |
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'alpine-dns' of Pod 'svc-dns-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 svc-dns-pod.yaml:10-15
────────────────────────────────────────
  10 ┌   - name: alpine-dns
  11 │     image: alpine
  12 │     command:
  13 │       - /bin/sh
  14 │       - -c
  15 └       - |
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 svc-dns-pod.yaml:10-15
────────────────────────────────────────
  10 ┌   - name: alpine-dns
  11 │     image: alpine
  12 │     command:
  13 │       - /bin/sh
  14 │       - -c
  15 └       - |
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "alpine-dns" of pod "svc-dns-pod" in "service-namespace" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 svc-dns-pod.yaml:10-15
────────────────────────────────────────
  10 ┌   - name: alpine-dns
  11 │     image: alpine
  12 │     command:
  13 │       - /bin/sh
  14 │       - -c
  15 └       - |
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 svc-dns-pod.yaml:10-15
────────────────────────────────────────
  10 ┌   - name: alpine-dns
  11 │     image: alpine
  12 │     command:
  13 │       - /bin/sh
  14 │       - -c
  15 └       - |
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container svc-dns-pod in service-namespace namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 svc-dns-pod.yaml:10-15
────────────────────────────────────────
  10 ┌   - name: alpine-dns
  11 │     image: alpine
  12 │     command:
  13 │       - /bin/sh
  14 │       - -c
  15 └       - |
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod svc-dns-pod in service-namespace namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 svc-dns-pod.yaml:9-15
────────────────────────────────────────
   9 ┌   containers:
  10 │   - name: alpine-dns
  11 │     image: alpine
  12 │     command:
  13 │       - /bin/sh
  14 │       - -c
  15 └       - |
────────────────────────────────────────



svc-elasticsearch.yaml (kubernetes)
===================================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'elasticsearch' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 svc-elasticsearch.yaml:7-11
────────────────────────────────────────
   7 ┌   selector:
   8 │     app: elasticsearch
   9 │   ports:
  10 │     - port: 9200
  11 └       protocol: TCP
────────────────────────────────────────



svc-good10_2.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'goodsvc03' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



svc-good15_2.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'goodsvc03' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



svc-good20_2.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'goodsvc03' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



svc-good5_2.yaml (kubernetes)
=============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'goodsvc03' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



svc-good_2.yaml (kubernetes)
============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'goodsvc03' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



svc-ingress.yaml (kubernetes)
=============================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'apple' of Deployment 'apple-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 svc-ingress.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: apple
  17 │         image: hashicorp/http-echo
  18 │         args:
  19 │         - -text=apple
  20 │         ports:
  21 └         - containerPort: 5678
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'apple' of Deployment 'apple-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 svc-ingress.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: apple
  17 │         image: hashicorp/http-echo
  18 │         args:
  19 │         - -text=apple
  20 │         ports:
  21 └         - containerPort: 5678
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'apple' of 'deployment' 'apple-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 svc-ingress.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: apple
  17 │         image: hashicorp/http-echo
  18 │         args:
  19 │         - -text=apple
  20 │         ports:
  21 └         - containerPort: 5678
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'apple' of Deployment 'apple-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 svc-ingress.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: apple
  17 │         image: hashicorp/http-echo
  18 │         args:
  19 │         - -text=apple
  20 │         ports:
  21 └         - containerPort: 5678
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'apple' of Deployment 'apple-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 svc-ingress.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: apple
  17 │         image: hashicorp/http-echo
  18 │         args:
  19 │         - -text=apple
  20 │         ports:
  21 └         - containerPort: 5678
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'apple' of Deployment 'apple-app' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 svc-ingress.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: apple
  17 │         image: hashicorp/http-echo
  18 │         args:
  19 │         - -text=apple
  20 │         ports:
  21 └         - containerPort: 5678
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'apple' of Deployment 'apple-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 svc-ingress.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: apple
  17 │         image: hashicorp/http-echo
  18 │         args:
  19 │         - -text=apple
  20 │         ports:
  21 └         - containerPort: 5678
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'apple' of Deployment 'apple-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 svc-ingress.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: apple
  17 │         image: hashicorp/http-echo
  18 │         args:
  19 │         - -text=apple
  20 │         ports:
  21 └         - containerPort: 5678
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'apple' of Deployment 'apple-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 svc-ingress.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: apple
  17 │         image: hashicorp/http-echo
  18 │         args:
  19 │         - -text=apple
  20 │         ports:
  21 └         - containerPort: 5678
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'apple' of Deployment 'apple-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 svc-ingress.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: apple
  17 │         image: hashicorp/http-echo
  18 │         args:
  19 │         - -text=apple
  20 │         ports:
  21 └         - containerPort: 5678
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'apple' of Deployment 'apple-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 svc-ingress.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: apple
  17 │         image: hashicorp/http-echo
  18 │         args:
  19 │         - -text=apple
  20 │         ports:
  21 └         - containerPort: 5678
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'apple' of Deployment 'apple-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 svc-ingress.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: apple
  17 │         image: hashicorp/http-echo
  18 │         args:
  19 │         - -text=apple
  20 │         ports:
  21 └         - containerPort: 5678
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 svc-ingress.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: apple
  17 │         image: hashicorp/http-echo
  18 │         args:
  19 │         - -text=apple
  20 │         ports:
  21 └         - containerPort: 5678
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "apple" of deployment "apple-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 svc-ingress.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: apple
  17 │         image: hashicorp/http-echo
  18 │         args:
  19 │         - -text=apple
  20 │         ports:
  21 └         - containerPort: 5678
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 svc-ingress.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: apple
  17 │         image: hashicorp/http-echo
  18 │         args:
  19 │         - -text=apple
  20 │         ports:
  21 └         - containerPort: 5678
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment apple-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 svc-ingress.yaml:4
────────────────────────────────────────
   4 [   name: apple-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container apple-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 svc-ingress.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: apple
  17 │         image: hashicorp/http-echo
  18 │         args:
  19 │         - -text=apple
  20 │         ports:
  21 └         - containerPort: 5678
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment apple-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 svc-ingress.yaml:15-21
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: apple
  17 │         image: hashicorp/http-echo
  18 │         args:
  19 │         - -text=apple
  20 │         ports:
  21 └         - containerPort: 5678
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container apple in deployment apple-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 svc-ingress.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: apple
  17 │         image: hashicorp/http-echo
  18 │         args:
  19 │         - -text=apple
  20 │         ports:
  21 └         - containerPort: 5678
────────────────────────────────────────



svc-ingress_2.yaml (kubernetes)
===============================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'banana' of Deployment 'banana-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 svc-ingress_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: banana
  17 │         image: hashicorp/http-echo
  18 │         args:
  19 │         - -text=banana
  20 │         ports:
  21 └         - containerPort: 5678
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'banana' of Deployment 'banana-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 svc-ingress_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: banana
  17 │         image: hashicorp/http-echo
  18 │         args:
  19 │         - -text=banana
  20 │         ports:
  21 └         - containerPort: 5678
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'banana' of 'deployment' 'banana-app' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 svc-ingress_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: banana
  17 │         image: hashicorp/http-echo
  18 │         args:
  19 │         - -text=banana
  20 │         ports:
  21 └         - containerPort: 5678
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'banana' of Deployment 'banana-app' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 svc-ingress_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: banana
  17 │         image: hashicorp/http-echo
  18 │         args:
  19 │         - -text=banana
  20 │         ports:
  21 └         - containerPort: 5678
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'banana' of Deployment 'banana-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 svc-ingress_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: banana
  17 │         image: hashicorp/http-echo
  18 │         args:
  19 │         - -text=banana
  20 │         ports:
  21 └         - containerPort: 5678
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'banana' of Deployment 'banana-app' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 svc-ingress_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: banana
  17 │         image: hashicorp/http-echo
  18 │         args:
  19 │         - -text=banana
  20 │         ports:
  21 └         - containerPort: 5678
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'banana' of Deployment 'banana-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 svc-ingress_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: banana
  17 │         image: hashicorp/http-echo
  18 │         args:
  19 │         - -text=banana
  20 │         ports:
  21 └         - containerPort: 5678
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'banana' of Deployment 'banana-app' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 svc-ingress_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: banana
  17 │         image: hashicorp/http-echo
  18 │         args:
  19 │         - -text=banana
  20 │         ports:
  21 └         - containerPort: 5678
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'banana' of Deployment 'banana-app' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 svc-ingress_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: banana
  17 │         image: hashicorp/http-echo
  18 │         args:
  19 │         - -text=banana
  20 │         ports:
  21 └         - containerPort: 5678
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'banana' of Deployment 'banana-app' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 svc-ingress_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: banana
  17 │         image: hashicorp/http-echo
  18 │         args:
  19 │         - -text=banana
  20 │         ports:
  21 └         - containerPort: 5678
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'banana' of Deployment 'banana-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 svc-ingress_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: banana
  17 │         image: hashicorp/http-echo
  18 │         args:
  19 │         - -text=banana
  20 │         ports:
  21 └         - containerPort: 5678
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'banana' of Deployment 'banana-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 svc-ingress_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: banana
  17 │         image: hashicorp/http-echo
  18 │         args:
  19 │         - -text=banana
  20 │         ports:
  21 └         - containerPort: 5678
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 svc-ingress_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: banana
  17 │         image: hashicorp/http-echo
  18 │         args:
  19 │         - -text=banana
  20 │         ports:
  21 └         - containerPort: 5678
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "banana" of deployment "banana-app" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 svc-ingress_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: banana
  17 │         image: hashicorp/http-echo
  18 │         args:
  19 │         - -text=banana
  20 │         ports:
  21 └         - containerPort: 5678
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 svc-ingress_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: banana
  17 │         image: hashicorp/http-echo
  18 │         args:
  19 │         - -text=banana
  20 │         ports:
  21 └         - containerPort: 5678
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment banana-app in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 svc-ingress_2.yaml:4
────────────────────────────────────────
   4 [   name: banana-app
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container banana-app in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 svc-ingress_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: banana
  17 │         image: hashicorp/http-echo
  18 │         args:
  19 │         - -text=banana
  20 │         ports:
  21 └         - containerPort: 5678
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment banana-app in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 svc-ingress_2.yaml:15-21
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: banana
  17 │         image: hashicorp/http-echo
  18 │         args:
  19 │         - -text=banana
  20 │         ports:
  21 └         - containerPort: 5678
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container banana in deployment banana-app (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 svc-ingress_2.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: banana
  17 │         image: hashicorp/http-echo
  18 │         args:
  19 │         - -text=banana
  20 │         ports:
  21 └         - containerPort: 5678
────────────────────────────────────────



svc-kibana.yaml (kubernetes)
============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0037 (MEDIUM): Service 'kibana' should not be set with 'kube-system' namespace
════════════════════════════════════════
ensure that user resources are not placed in kube-system namespace

See https://avd.aquasec.com/misconfig/no-user-pods-in-system-namespace
────────────────────────────────────────
 svc-kibana.yaml:7-12
────────────────────────────────────────
   7 ┌   type: "NodePort"
   8 │   selector:
   9 │     app: kibana
  10 │   ports:
  11 │     - port: 5601
  12 └       protocol: TCP
────────────────────────────────────────



svc-lab-deploy.yaml (kubernetes)
================================
Tests: 113 (SUCCESSES: 96, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'http-test' of Deployment 'svc-lab' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 svc-lab-deploy.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: http-test
  17 │         image: python:2.7
  18 │         command: ["/bin/bash","-c","echo \"<h>Welcome to my Pod $(hostname)</h>\" > index.html; python -m SimpleHTTPServer 8080"]
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'http-test' of Deployment 'svc-lab' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 svc-lab-deploy.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: http-test
  17 │         image: python:2.7
  18 │         command: ["/bin/bash","-c","echo \"<h>Welcome to my Pod $(hostname)</h>\" > index.html; python -m SimpleHTTPServer 8080"]
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'http-test' of 'deployment' 'svc-lab' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 svc-lab-deploy.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: http-test
  17 │         image: python:2.7
  18 │         command: ["/bin/bash","-c","echo \"<h>Welcome to my Pod $(hostname)</h>\" > index.html; python -m SimpleHTTPServer 8080"]
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'http-test' of Deployment 'svc-lab' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 svc-lab-deploy.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: http-test
  17 │         image: python:2.7
  18 │         command: ["/bin/bash","-c","echo \"<h>Welcome to my Pod $(hostname)</h>\" > index.html; python -m SimpleHTTPServer 8080"]
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'http-test' of Deployment 'svc-lab' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 svc-lab-deploy.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: http-test
  17 │         image: python:2.7
  18 │         command: ["/bin/bash","-c","echo \"<h>Welcome to my Pod $(hostname)</h>\" > index.html; python -m SimpleHTTPServer 8080"]
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'http-test' of Deployment 'svc-lab' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 svc-lab-deploy.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: http-test
  17 │         image: python:2.7
  18 │         command: ["/bin/bash","-c","echo \"<h>Welcome to my Pod $(hostname)</h>\" > index.html; python -m SimpleHTTPServer 8080"]
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'http-test' of Deployment 'svc-lab' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 svc-lab-deploy.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: http-test
  17 │         image: python:2.7
  18 │         command: ["/bin/bash","-c","echo \"<h>Welcome to my Pod $(hostname)</h>\" > index.html; python -m SimpleHTTPServer 8080"]
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'http-test' of Deployment 'svc-lab' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 svc-lab-deploy.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: http-test
  17 │         image: python:2.7
  18 │         command: ["/bin/bash","-c","echo \"<h>Welcome to my Pod $(hostname)</h>\" > index.html; python -m SimpleHTTPServer 8080"]
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'http-test' of Deployment 'svc-lab' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 svc-lab-deploy.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: http-test
  17 │         image: python:2.7
  18 │         command: ["/bin/bash","-c","echo \"<h>Welcome to my Pod $(hostname)</h>\" > index.html; python -m SimpleHTTPServer 8080"]
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'http-test' of Deployment 'svc-lab' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 svc-lab-deploy.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: http-test
  17 │         image: python:2.7
  18 │         command: ["/bin/bash","-c","echo \"<h>Welcome to my Pod $(hostname)</h>\" > index.html; python -m SimpleHTTPServer 8080"]
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'http-test' of Deployment 'svc-lab' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 svc-lab-deploy.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: http-test
  17 │         image: python:2.7
  18 │         command: ["/bin/bash","-c","echo \"<h>Welcome to my Pod $(hostname)</h>\" > index.html; python -m SimpleHTTPServer 8080"]
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 svc-lab-deploy.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: http-test
  17 │         image: python:2.7
  18 │         command: ["/bin/bash","-c","echo \"<h>Welcome to my Pod $(hostname)</h>\" > index.html; python -m SimpleHTTPServer 8080"]
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "http-test" of deployment "svc-lab" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 svc-lab-deploy.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: http-test
  17 │         image: python:2.7
  18 │         command: ["/bin/bash","-c","echo \"<h>Welcome to my Pod $(hostname)</h>\" > index.html; python -m SimpleHTTPServer 8080"]
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 svc-lab-deploy.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: http-test
  17 │         image: python:2.7
  18 │         command: ["/bin/bash","-c","echo \"<h>Welcome to my Pod $(hostname)</h>\" > index.html; python -m SimpleHTTPServer 8080"]
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment svc-lab in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 svc-lab-deploy.yaml:4
────────────────────────────────────────
   4 [   name: svc-lab
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container svc-lab in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 svc-lab-deploy.yaml:16-21
────────────────────────────────────────
  16 ┌       - name: http-test
  17 │         image: python:2.7
  18 │         command: ["/bin/bash","-c","echo \"<h>Welcome to my Pod $(hostname)</h>\" > index.html; python -m SimpleHTTPServer 8080"]
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment svc-lab in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 svc-lab-deploy.yaml:15-21
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: http-test
  17 │         image: python:2.7
  18 │         command: ["/bin/bash","-c","echo \"<h>Welcome to my Pod $(hostname)</h>\" > index.html; python -m SimpleHTTPServer 8080"]
  19 │         ports:
  20 │         - name: http
  21 └           containerPort: 8080
────────────────────────────────────────



svc-loadbalancer2.yaml (kubernetes)
===================================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-container' of Pod 'nginx-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 svc-loadbalancer2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 svc-loadbalancer2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-container' of 'pod' 'nginx-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 svc-loadbalancer2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 svc-loadbalancer2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-container' of Pod 'nginx-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 svc-loadbalancer2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-container' of Pod 'nginx-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 svc-loadbalancer2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-container' of Pod 'nginx-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 svc-loadbalancer2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 svc-loadbalancer2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 svc-loadbalancer2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 svc-loadbalancer2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 svc-loadbalancer2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 svc-loadbalancer2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 svc-loadbalancer2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-container" of pod "nginx-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 svc-loadbalancer2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 svc-loadbalancer2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 svc-loadbalancer2.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx-pod
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod nginx-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 svc-loadbalancer2.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 svc-loadbalancer2.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────



svc-nodeport5.yaml (kubernetes)
===============================
Tests: 113 (SUCCESSES: 94, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx-container' of Pod 'nginx-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 svc-nodeport5.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 svc-nodeport5.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx-container' of 'pod' 'nginx-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 svc-nodeport5.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 svc-nodeport5.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx-container' of Pod 'nginx-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 svc-nodeport5.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'nginx-container' of Pod 'nginx-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 svc-nodeport5.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx-container' of Pod 'nginx-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 svc-nodeport5.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 svc-nodeport5.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 svc-nodeport5.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 svc-nodeport5.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 svc-nodeport5.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx-container' of Pod 'nginx-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 svc-nodeport5.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 svc-nodeport5.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx-container" of pod "nginx-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 svc-nodeport5.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 svc-nodeport5.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod nginx-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 svc-nodeport5.yaml:4-6
────────────────────────────────────────
   4 ┌   name: nginx-pod
   5 │   labels:
   6 └     app: nginx
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): pod nginx-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container nginx-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 svc-nodeport5.yaml:9-12
────────────────────────────────────────
   9 ┌   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod nginx-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 svc-nodeport5.yaml:8-12
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: nginx-container
  10 │     image: nginx:latest
  11 │     ports:
  12 └     - containerPort: 80
────────────────────────────────────────



svc-sts1_1.yaml (kubernetes)
============================
Tests: 113 (SUCCESSES: 96, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of StatefulSet 'my-sts' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 svc-sts1_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: nginx:1.23.1
  19 │         volumeMounts:
  20 │         - name: my-pv
  21 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of StatefulSet 'my-sts' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 svc-sts1_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: nginx:1.23.1
  19 │         volumeMounts:
  20 │         - name: my-pv
  21 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'statefulset' 'my-sts' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 svc-sts1_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: nginx:1.23.1
  19 │         volumeMounts:
  20 │         - name: my-pv
  21 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of StatefulSet 'my-sts' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 svc-sts1_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: nginx:1.23.1
  19 │         volumeMounts:
  20 │         - name: my-pv
  21 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of StatefulSet 'my-sts' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 svc-sts1_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: nginx:1.23.1
  19 │         volumeMounts:
  20 │         - name: my-pv
  21 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of StatefulSet 'my-sts' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 svc-sts1_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: nginx:1.23.1
  19 │         volumeMounts:
  20 │         - name: my-pv
  21 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of StatefulSet 'my-sts' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 svc-sts1_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: nginx:1.23.1
  19 │         volumeMounts:
  20 │         - name: my-pv
  21 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of StatefulSet 'my-sts' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 svc-sts1_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: nginx:1.23.1
  19 │         volumeMounts:
  20 │         - name: my-pv
  21 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of StatefulSet 'my-sts' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 svc-sts1_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: nginx:1.23.1
  19 │         volumeMounts:
  20 │         - name: my-pv
  21 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of StatefulSet 'my-sts' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 svc-sts1_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: nginx:1.23.1
  19 │         volumeMounts:
  20 │         - name: my-pv
  21 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of StatefulSet 'my-sts' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 svc-sts1_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: nginx:1.23.1
  19 │         volumeMounts:
  20 │         - name: my-pv
  21 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 svc-sts1_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: nginx:1.23.1
  19 │         volumeMounts:
  20 │         - name: my-pv
  21 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of statefulset "my-sts" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 svc-sts1_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: nginx:1.23.1
  19 │         volumeMounts:
  20 │         - name: my-pv
  21 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 svc-sts1_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: nginx:1.23.1
  19 │         volumeMounts:
  20 │         - name: my-pv
  21 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset my-sts in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 svc-sts1_1.yaml:4
────────────────────────────────────────
   4 [   name: my-sts
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-sts in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 svc-sts1_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: nginx:1.23.1
  19 │         volumeMounts:
  20 │         - name: my-pv
  21 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset my-sts in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 svc-sts1_1.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: my-container
  18 │         image: nginx:1.23.1
  19 │         volumeMounts:
  20 │         - name: my-pv
  21 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────



svc-sts2_1.yaml (kubernetes)
============================
Tests: 113 (SUCCESSES: 96, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of StatefulSet 'my-sts' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 svc-sts2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: nginx:1.23.1
  19 │         volumeMounts:
  20 │         - name: my-pv
  21 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of StatefulSet 'my-sts' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 svc-sts2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: nginx:1.23.1
  19 │         volumeMounts:
  20 │         - name: my-pv
  21 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'statefulset' 'my-sts' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 svc-sts2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: nginx:1.23.1
  19 │         volumeMounts:
  20 │         - name: my-pv
  21 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of StatefulSet 'my-sts' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 svc-sts2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: nginx:1.23.1
  19 │         volumeMounts:
  20 │         - name: my-pv
  21 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of StatefulSet 'my-sts' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 svc-sts2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: nginx:1.23.1
  19 │         volumeMounts:
  20 │         - name: my-pv
  21 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of StatefulSet 'my-sts' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 svc-sts2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: nginx:1.23.1
  19 │         volumeMounts:
  20 │         - name: my-pv
  21 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of StatefulSet 'my-sts' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 svc-sts2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: nginx:1.23.1
  19 │         volumeMounts:
  20 │         - name: my-pv
  21 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of StatefulSet 'my-sts' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 svc-sts2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: nginx:1.23.1
  19 │         volumeMounts:
  20 │         - name: my-pv
  21 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of StatefulSet 'my-sts' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 svc-sts2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: nginx:1.23.1
  19 │         volumeMounts:
  20 │         - name: my-pv
  21 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of StatefulSet 'my-sts' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 svc-sts2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: nginx:1.23.1
  19 │         volumeMounts:
  20 │         - name: my-pv
  21 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of StatefulSet 'my-sts' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 svc-sts2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: nginx:1.23.1
  19 │         volumeMounts:
  20 │         - name: my-pv
  21 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 svc-sts2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: nginx:1.23.1
  19 │         volumeMounts:
  20 │         - name: my-pv
  21 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of statefulset "my-sts" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 svc-sts2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: nginx:1.23.1
  19 │         volumeMounts:
  20 │         - name: my-pv
  21 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 svc-sts2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: nginx:1.23.1
  19 │         volumeMounts:
  20 │         - name: my-pv
  21 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset my-sts in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 svc-sts2_1.yaml:4
────────────────────────────────────────
   4 [   name: my-sts
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-sts in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 svc-sts2_1.yaml:17-21
────────────────────────────────────────
  17 ┌       - name: my-container
  18 │         image: nginx:1.23.1
  19 │         volumeMounts:
  20 │         - name: my-pv
  21 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset my-sts in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 svc-sts2_1.yaml:16-21
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: my-container
  18 │         image: nginx:1.23.1
  19 │         volumeMounts:
  20 │         - name: my-pv
  21 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────



svc-sts_1.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 96, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-container' of StatefulSet 'my-sts' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 svc-sts_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: my-container
  19 │         image: nginx:1.23.1
  20 │         volumeMounts:
  21 │         - name: my-pv
  22 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-container' of StatefulSet 'my-sts' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 svc-sts_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: my-container
  19 │         image: nginx:1.23.1
  20 │         volumeMounts:
  21 │         - name: my-pv
  22 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-container' of 'statefulset' 'my-sts' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 svc-sts_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: my-container
  19 │         image: nginx:1.23.1
  20 │         volumeMounts:
  21 │         - name: my-pv
  22 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-container' of StatefulSet 'my-sts' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 svc-sts_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: my-container
  19 │         image: nginx:1.23.1
  20 │         volumeMounts:
  21 │         - name: my-pv
  22 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-container' of StatefulSet 'my-sts' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 svc-sts_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: my-container
  19 │         image: nginx:1.23.1
  20 │         volumeMounts:
  21 │         - name: my-pv
  22 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-container' of StatefulSet 'my-sts' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 svc-sts_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: my-container
  19 │         image: nginx:1.23.1
  20 │         volumeMounts:
  21 │         - name: my-pv
  22 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-container' of StatefulSet 'my-sts' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 svc-sts_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: my-container
  19 │         image: nginx:1.23.1
  20 │         volumeMounts:
  21 │         - name: my-pv
  22 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-container' of StatefulSet 'my-sts' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 svc-sts_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: my-container
  19 │         image: nginx:1.23.1
  20 │         volumeMounts:
  21 │         - name: my-pv
  22 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-container' of StatefulSet 'my-sts' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 svc-sts_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: my-container
  19 │         image: nginx:1.23.1
  20 │         volumeMounts:
  21 │         - name: my-pv
  22 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-container' of StatefulSet 'my-sts' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 svc-sts_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: my-container
  19 │         image: nginx:1.23.1
  20 │         volumeMounts:
  21 │         - name: my-pv
  22 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-container' of StatefulSet 'my-sts' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 svc-sts_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: my-container
  19 │         image: nginx:1.23.1
  20 │         volumeMounts:
  21 │         - name: my-pv
  22 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 svc-sts_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: my-container
  19 │         image: nginx:1.23.1
  20 │         volumeMounts:
  21 │         - name: my-pv
  22 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-container" of statefulset "my-sts" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 svc-sts_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: my-container
  19 │         image: nginx:1.23.1
  20 │         volumeMounts:
  21 │         - name: my-pv
  22 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 svc-sts_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: my-container
  19 │         image: nginx:1.23.1
  20 │         volumeMounts:
  21 │         - name: my-pv
  22 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0110 (LOW): statefulset my-sts in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 svc-sts_1.yaml:4-5
────────────────────────────────────────
   4 ┌   name: my-sts
   5 └   namespace: default
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-sts in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 svc-sts_1.yaml:18-22
────────────────────────────────────────
  18 ┌       - name: my-container
  19 │         image: nginx:1.23.1
  20 │         volumeMounts:
  21 │         - name: my-pv
  22 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────


AVD-KSV-0118 (HIGH): statefulset my-sts in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 svc-sts_1.yaml:17-22
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: my-container
  19 │         image: nginx:1.23.1
  20 │         volumeMounts:
  21 │         - name: my-pv
  22 └           mountPath: /usr/share/nginx/html
────────────────────────────────────────



svc-test-pod.yaml (kubernetes)
==============================
Tests: 113 (SUCCESSES: 95, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'alpine-test' of Pod 'svc-test-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 svc-test-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: alpine-test
  10 │     image: alpine
  11 │     command:
  12 │       - /bin/sh
  13 │       - -c
  14 └       - |
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'alpine-test' of Pod 'svc-test-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 svc-test-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: alpine-test
  10 │     image: alpine
  11 │     command:
  12 │       - /bin/sh
  13 │       - -c
  14 └       - |
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'alpine-test' of 'pod' 'svc-test-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 svc-test-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: alpine-test
  10 │     image: alpine
  11 │     command:
  12 │       - /bin/sh
  13 │       - -c
  14 └       - |
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'alpine-test' of Pod 'svc-test-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 svc-test-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: alpine-test
  10 │     image: alpine
  11 │     command:
  12 │       - /bin/sh
  13 │       - -c
  14 └       - |
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'alpine-test' of Pod 'svc-test-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 svc-test-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: alpine-test
  10 │     image: alpine
  11 │     command:
  12 │       - /bin/sh
  13 │       - -c
  14 └       - |
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'alpine-test' of Pod 'svc-test-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 svc-test-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: alpine-test
  10 │     image: alpine
  11 │     command:
  12 │       - /bin/sh
  13 │       - -c
  14 └       - |
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'alpine-test' of Pod 'svc-test-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 svc-test-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: alpine-test
  10 │     image: alpine
  11 │     command:
  12 │       - /bin/sh
  13 │       - -c
  14 └       - |
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'alpine-test' of Pod 'svc-test-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 svc-test-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: alpine-test
  10 │     image: alpine
  11 │     command:
  12 │       - /bin/sh
  13 │       - -c
  14 └       - |
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'alpine-test' of Pod 'svc-test-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 svc-test-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: alpine-test
  10 │     image: alpine
  11 │     command:
  12 │       - /bin/sh
  13 │       - -c
  14 └       - |
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'alpine-test' of Pod 'svc-test-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 svc-test-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: alpine-test
  10 │     image: alpine
  11 │     command:
  12 │       - /bin/sh
  13 │       - -c
  14 └       - |
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'alpine-test' of Pod 'svc-test-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 svc-test-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: alpine-test
  10 │     image: alpine
  11 │     command:
  12 │       - /bin/sh
  13 │       - -c
  14 └       - |
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'alpine-test' of Pod 'svc-test-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 svc-test-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: alpine-test
  10 │     image: alpine
  11 │     command:
  12 │       - /bin/sh
  13 │       - -c
  14 └       - |
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 svc-test-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: alpine-test
  10 │     image: alpine
  11 │     command:
  12 │       - /bin/sh
  13 │       - -c
  14 └       - |
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "alpine-test" of pod "svc-test-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 svc-test-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: alpine-test
  10 │     image: alpine
  11 │     command:
  12 │       - /bin/sh
  13 │       - -c
  14 └       - |
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 svc-test-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: alpine-test
  10 │     image: alpine
  11 │     command:
  12 │       - /bin/sh
  13 │       - -c
  14 └       - |
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod svc-test-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 svc-test-pod.yaml:4-6
────────────────────────────────────────
   4 ┌   name: svc-test-pod
   5 │   labels:
   6 └     name: svc-test-pod
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container svc-test-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 svc-test-pod.yaml:9-14
────────────────────────────────────────
   9 ┌   - name: alpine-test
  10 │     image: alpine
  11 │     command:
  12 │       - /bin/sh
  13 │       - -c
  14 └       - |
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod svc-test-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 svc-test-pod.yaml:8-14
────────────────────────────────────────
   8 ┌   containers:
   9 │   - name: alpine-test
  10 │     image: alpine
  11 │     command:
  12 │       - /bin/sh
  13 │       - -c
  14 └       - |
────────────────────────────────────────



svc.time-api.yaml (kubernetes)
==============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'time-api' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



svc.time-api1.yaml (kubernetes)
===============================
Tests: 112 (SUCCESSES: 111, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'time-api' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



svc1100.yaml (kubernetes)
=========================
Tests: 113 (SUCCESSES: 100, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'svc1' of Deployment 'svc1' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 svc1100.yaml:19-37
────────────────────────────────────────
  19 ┌       - image: ttl.sh/iamsumit/svc1:go-k8s
  20 │         name: svc1
  21 │         imagePullPolicy: Always
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /
  25 │             port: 8080
  26 │           initialDelaySeconds: 30
  27 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'svc1' of Deployment 'svc1' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 svc1100.yaml:19-37
────────────────────────────────────────
  19 ┌       - image: ttl.sh/iamsumit/svc1:go-k8s
  20 │         name: svc1
  21 │         imagePullPolicy: Always
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /
  25 │             port: 8080
  26 │           initialDelaySeconds: 30
  27 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'svc1' of 'deployment' 'svc1' in 'go-k8s' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 svc1100.yaml:19-37
────────────────────────────────────────
  19 ┌       - image: ttl.sh/iamsumit/svc1:go-k8s
  20 │         name: svc1
  21 │         imagePullPolicy: Always
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /
  25 │             port: 8080
  26 │           initialDelaySeconds: 30
  27 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'svc1' of Deployment 'svc1' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 svc1100.yaml:19-37
────────────────────────────────────────
  19 ┌       - image: ttl.sh/iamsumit/svc1:go-k8s
  20 │         name: svc1
  21 │         imagePullPolicy: Always
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /
  25 │             port: 8080
  26 │           initialDelaySeconds: 30
  27 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'svc1' of Deployment 'svc1' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 svc1100.yaml:19-37
────────────────────────────────────────
  19 ┌       - image: ttl.sh/iamsumit/svc1:go-k8s
  20 │         name: svc1
  21 │         imagePullPolicy: Always
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /
  25 │             port: 8080
  26 │           initialDelaySeconds: 30
  27 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'svc1' of Deployment 'svc1' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 svc1100.yaml:19-37
────────────────────────────────────────
  19 ┌       - image: ttl.sh/iamsumit/svc1:go-k8s
  20 │         name: svc1
  21 │         imagePullPolicy: Always
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /
  25 │             port: 8080
  26 │           initialDelaySeconds: 30
  27 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'svc1' of Deployment 'svc1' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 svc1100.yaml:19-37
────────────────────────────────────────
  19 ┌       - image: ttl.sh/iamsumit/svc1:go-k8s
  20 │         name: svc1
  21 │         imagePullPolicy: Always
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /
  25 │             port: 8080
  26 │           initialDelaySeconds: 30
  27 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 svc1100.yaml:19-37
────────────────────────────────────────
  19 ┌       - image: ttl.sh/iamsumit/svc1:go-k8s
  20 │         name: svc1
  21 │         imagePullPolicy: Always
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /
  25 │             port: 8080
  26 │           initialDelaySeconds: 30
  27 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "svc1" of deployment "svc1" in "go-k8s" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 svc1100.yaml:19-37
────────────────────────────────────────
  19 ┌       - image: ttl.sh/iamsumit/svc1:go-k8s
  20 │         name: svc1
  21 │         imagePullPolicy: Always
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /
  25 │             port: 8080
  26 │           initialDelaySeconds: 30
  27 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 svc1100.yaml:19-37
────────────────────────────────────────
  19 ┌       - image: ttl.sh/iamsumit/svc1:go-k8s
  20 │         name: svc1
  21 │         imagePullPolicy: Always
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /
  25 │             port: 8080
  26 │           initialDelaySeconds: 30
  27 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container svc1 in go-k8s namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 svc1100.yaml:19-37
────────────────────────────────────────
  19 ┌       - image: ttl.sh/iamsumit/svc1:go-k8s
  20 │         name: svc1
  21 │         imagePullPolicy: Always
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /
  25 │             port: 8080
  26 │           initialDelaySeconds: 30
  27 └         readinessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment svc1 in go-k8s namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 svc1100.yaml:18-37
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: ttl.sh/iamsumit/svc1:go-k8s
  20 │         name: svc1
  21 │         imagePullPolicy: Always
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /
  25 │             port: 8080
  26 └           initialDelaySeconds: 30
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container svc1 in deployment svc1 (namespace: go-k8s) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 svc1100.yaml:19-37
────────────────────────────────────────
  19 ┌       - image: ttl.sh/iamsumit/svc1:go-k8s
  20 │         name: svc1
  21 │         imagePullPolicy: Always
  22 │         livenessProbe:
  23 │           httpGet:
  24 │             path: /
  25 │             port: 8080
  26 │           initialDelaySeconds: 30
  27 └         readinessProbe:
  ..   
────────────────────────────────────────



svc157.yaml (kubernetes)
========================
Tests: 113 (SUCCESSES: 96, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'deployment-test-back' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 svc157.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: nginx
  19 └         image: nginx:alpine
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'deployment-test-back' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 svc157.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: nginx
  19 └         image: nginx:alpine
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'deployment-test-back' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 svc157.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: nginx
  19 └         image: nginx:alpine
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'deployment-test-back' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 svc157.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: nginx
  19 └         image: nginx:alpine
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'deployment-test-back' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 svc157.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: nginx
  19 └         image: nginx:alpine
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'deployment-test-back' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 svc157.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: nginx
  19 └         image: nginx:alpine
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'deployment-test-back' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 svc157.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: nginx
  19 └         image: nginx:alpine
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'deployment-test-back' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 svc157.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: nginx
  19 └         image: nginx:alpine
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'deployment-test-back' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 svc157.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: nginx
  19 └         image: nginx:alpine
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'deployment-test-back' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 svc157.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: nginx
  19 └         image: nginx:alpine
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'deployment-test-back' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 svc157.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: nginx
  19 └         image: nginx:alpine
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 svc157.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: nginx
  19 └         image: nginx:alpine
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "deployment-test-back" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 svc157.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: nginx
  19 └         image: nginx:alpine
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 svc157.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: nginx
  19 └         image: nginx:alpine
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment deployment-test-back in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 svc157.yaml:4-6
────────────────────────────────────────
   4 ┌   name: deployment-test-back
   5 │   labels:
   6 └     app: back
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container deployment-test-back in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 svc157.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: nginx
  19 └         image: nginx:alpine
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment deployment-test-back in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 svc157.yaml:17-19
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 └         image: nginx:alpine
────────────────────────────────────────



svc158.yaml (kubernetes)
========================
Tests: 113 (SUCCESSES: 96, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 11, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 svc158.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: nginx
  19 └         image: nginx:alpine
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'nginx' of Deployment 'deployment-test' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 svc158.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: nginx
  19 └         image: nginx:alpine
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'nginx' of 'deployment' 'deployment-test' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 svc158.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: nginx
  19 └         image: nginx:alpine
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 svc158.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: nginx
  19 └         image: nginx:alpine
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 svc158.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: nginx
  19 └         image: nginx:alpine
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 svc158.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: nginx
  19 └         image: nginx:alpine
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 svc158.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: nginx
  19 └         image: nginx:alpine
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 svc158.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: nginx
  19 └         image: nginx:alpine
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 svc158.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: nginx
  19 └         image: nginx:alpine
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 svc158.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: nginx
  19 └         image: nginx:alpine
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'nginx' of Deployment 'deployment-test' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 svc158.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: nginx
  19 └         image: nginx:alpine
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 svc158.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: nginx
  19 └         image: nginx:alpine
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "nginx" of deployment "deployment-test" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 svc158.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: nginx
  19 └         image: nginx:alpine
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 svc158.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: nginx
  19 └         image: nginx:alpine
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment deployment-test in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 svc158.yaml:4-6
────────────────────────────────────────
   4 ┌   name: deployment-test
   5 │   labels:
   6 └     app: front
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container deployment-test in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 svc158.yaml:18-19
────────────────────────────────────────
  18 ┌       - name: nginx
  19 └         image: nginx:alpine
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment deployment-test in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 svc158.yaml:17-19
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: nginx
  19 └         image: nginx:alpine
────────────────────────────────────────



svc2100_2.yaml (kubernetes)
===========================
Tests: 113 (SUCCESSES: 100, FAILURES: 13)
Failures: 13 (UNKNOWN: 0, LOW: 6, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'svc2' of Deployment 'svc2' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 svc2100_2.yaml:19-48
────────────────────────────────────────
  19 ┌       - image: ttl.sh/iamsumit/svc2:go-k8s
  20 │         name: svc2
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: SVC1_ENDPOINT
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: svc2-config
  27 └               key: SVC1_ENDPOINT
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'svc2' of Deployment 'svc2' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 svc2100_2.yaml:19-48
────────────────────────────────────────
  19 ┌       - image: ttl.sh/iamsumit/svc2:go-k8s
  20 │         name: svc2
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: SVC1_ENDPOINT
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: svc2-config
  27 └               key: SVC1_ENDPOINT
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'svc2' of 'deployment' 'svc2' in 'go-k8s' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 svc2100_2.yaml:19-48
────────────────────────────────────────
  19 ┌       - image: ttl.sh/iamsumit/svc2:go-k8s
  20 │         name: svc2
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: SVC1_ENDPOINT
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: svc2-config
  27 └               key: SVC1_ENDPOINT
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'svc2' of Deployment 'svc2' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 svc2100_2.yaml:19-48
────────────────────────────────────────
  19 ┌       - image: ttl.sh/iamsumit/svc2:go-k8s
  20 │         name: svc2
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: SVC1_ENDPOINT
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: svc2-config
  27 └               key: SVC1_ENDPOINT
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'svc2' of Deployment 'svc2' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 svc2100_2.yaml:19-48
────────────────────────────────────────
  19 ┌       - image: ttl.sh/iamsumit/svc2:go-k8s
  20 │         name: svc2
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: SVC1_ENDPOINT
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: svc2-config
  27 └               key: SVC1_ENDPOINT
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'svc2' of Deployment 'svc2' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 svc2100_2.yaml:19-48
────────────────────────────────────────
  19 ┌       - image: ttl.sh/iamsumit/svc2:go-k8s
  20 │         name: svc2
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: SVC1_ENDPOINT
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: svc2-config
  27 └               key: SVC1_ENDPOINT
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'svc2' of Deployment 'svc2' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 svc2100_2.yaml:19-48
────────────────────────────────────────
  19 ┌       - image: ttl.sh/iamsumit/svc2:go-k8s
  20 │         name: svc2
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: SVC1_ENDPOINT
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: svc2-config
  27 └               key: SVC1_ENDPOINT
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 svc2100_2.yaml:19-48
────────────────────────────────────────
  19 ┌       - image: ttl.sh/iamsumit/svc2:go-k8s
  20 │         name: svc2
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: SVC1_ENDPOINT
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: svc2-config
  27 └               key: SVC1_ENDPOINT
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "svc2" of deployment "svc2" in "go-k8s" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 svc2100_2.yaml:19-48
────────────────────────────────────────
  19 ┌       - image: ttl.sh/iamsumit/svc2:go-k8s
  20 │         name: svc2
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: SVC1_ENDPOINT
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: svc2-config
  27 └               key: SVC1_ENDPOINT
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 svc2100_2.yaml:19-48
────────────────────────────────────────
  19 ┌       - image: ttl.sh/iamsumit/svc2:go-k8s
  20 │         name: svc2
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: SVC1_ENDPOINT
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: svc2-config
  27 └               key: SVC1_ENDPOINT
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container svc2 in go-k8s namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 svc2100_2.yaml:19-48
────────────────────────────────────────
  19 ┌       - image: ttl.sh/iamsumit/svc2:go-k8s
  20 │         name: svc2
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: SVC1_ENDPOINT
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: svc2-config
  27 └               key: SVC1_ENDPOINT
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment svc2 in go-k8s namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 svc2100_2.yaml:18-52
────────────────────────────────────────
  18 ┌       containers:
  19 │       - image: ttl.sh/iamsumit/svc2:go-k8s
  20 │         name: svc2
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: SVC1_ENDPOINT
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 └               name: svc2-config
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container svc2 in deployment svc2 (namespace: go-k8s) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 svc2100_2.yaml:19-48
────────────────────────────────────────
  19 ┌       - image: ttl.sh/iamsumit/svc2:go-k8s
  20 │         name: svc2
  21 │         imagePullPolicy: Always
  22 │         env:
  23 │         - name: SVC1_ENDPOINT
  24 │           valueFrom:
  25 │             configMapKeyRef:
  26 │               name: svc2-config
  27 └               key: SVC1_ENDPOINT
  ..   
────────────────────────────────────────


