
Report Summary

┌────────────────────────────────────────────────────┬────────────┬───────────────────┐
│                       Target                       │    Type    │ Misconfigurations │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ServiceAccount588.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ServiceAccount82.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ServiceAccount958.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ServiceAccount959.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ServiceAccount960.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ServiceAccount961.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ServiceAccount962.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ServiceAccount963.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ServiceAccount964.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ServiceAccount965.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ServiceAccount_ClusterRole_ClusterRoleBinding.yaml │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ServiceAccount_Deployment.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ServiceAccount_Deployment_1.yaml                   │ kubernetes │        14         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ServiceAccount_Role_RoleBinding1.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ServiceAccount_Role_RoleBinding1_1.yaml            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ServiceAccount_Role_RoleBinding1_2.yaml            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ServiceAccounts1.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ServiceAccounts2.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ServiceAccounts3.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ServiceAccounts4.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ServiceAccounts_1.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ServiceAccounts_token_Secrets_1.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ServiceAccounts_token_Secrets_2.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ServiceRole.yaml                                   │ kubernetes │         4         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ServiceWod.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ ServiceWod_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Service_1.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Service_11.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Service_12.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Services.yaml                                      │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Services137.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Services137_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Services264.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Services33.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Services33_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ Services_1.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceAPI.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceAccount52.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceAccount660.yaml                             │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceAccount660_1.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceAccount660_2.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceAccount662.yaml                             │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceAccount662_1.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceAccount662_2.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceAccount909.yaml                             │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceAccount909_1.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceAccount909_2.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceAccount91.yaml                              │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceAccount916.yaml                             │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceAccount916_1.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceAccount916_2.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceAccount91_1.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceAccount91_2.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceAccount948.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceAccount98.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceAccount99.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceAccountClusterRole.yaml                     │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceAccountClusterRole_1.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceAccountClusterRole_2.yaml                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceAccountRole.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceAccountRole_1.yaml                          │ kubernetes │         3         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceAccountRole_2.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceClusterIP.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceLoadBalancer.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceLoadBalancer1.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceMine.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceMysql.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceNode.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceNodePort.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_13.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_1_loadbalancer_single.yaml                 │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_1_loadbalancer_single_1.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_2.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_2_loadbalancer_multi.yaml                  │ kubernetes │        35         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_2_loadbalancer_multi_1.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_3_loadbalancer_autoscaling.yaml            │ kubernetes │        20         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_3_loadbalancer_autoscaling_1.yaml          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_3_loadbalancer_autoscaling_2.yaml          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account1.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account10.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account100.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account101.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account102.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account103.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account104.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account105.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account106.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account107.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account108.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account109.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account11.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account110.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account111.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account112.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account113.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account114.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account115.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account117.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account118.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account119.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account12.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account120.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account121.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account122.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account124.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account125.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account126.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account127.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account128.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account129.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account13.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account130.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account131.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account132.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account133.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account134.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account135.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account136.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account137.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account138.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account139.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account14.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account140.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account141.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account143.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account144.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account145.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account146.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account147.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account148.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account149.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account15.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account150.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account151.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account152.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account153.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account154.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account155.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account156.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account157.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account158.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account159.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account16.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account160.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account161.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account162.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account163.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account165.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account166.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account167.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account168.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account169.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account17.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account170.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account171.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account172.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account173.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account174.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account175.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account176.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account177.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account178.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account179.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account18.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account181.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account182.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account183.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account184.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account185.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account186.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account187.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account188.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account189.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account19.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account190.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account191.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ service_account192.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicea_1.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceacc_secret.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceacc_secret_1.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceacc_secret_2.yaml                           │ kubernetes │         5         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceacc_secret_3.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount55.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount56.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount569.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount57.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount572.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount58.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount59.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount60.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount602.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount61.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount614.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount615.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount617.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount62.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount63.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount64.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount658.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount658_1.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount667.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount667_1.yaml                           │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount667_2.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount676.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount705.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount705_1.yaml                           │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount705_2.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount705_3.yaml                           │ kubernetes │        18         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount710.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount711.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount712.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount713.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount714.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount726.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount747.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount747_1.yaml                           │ kubernetes │         3         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount747_2.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount747_3.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount748.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount748_1.yaml                           │ kubernetes │         3         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount748_2.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount748_3.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount749.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount806.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount81.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount867.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount877.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount88.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount88_1.yaml                            │ kubernetes │         3         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount88_2.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount88_3.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount89.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount89_1.yaml                            │ kubernetes │         3         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount89_2.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount89_3.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount90.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount934.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount934_1.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount939.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount940.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount940_1.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount941.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount941_1.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount942.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount942_1.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount944.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccount968.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceaccounts.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceandingress.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceandingress1.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceandingress10.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceandingress2.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceandingress3.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceandingress4.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceandingress5.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceandingress6.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceandingress7.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceandingress8.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceandingress9.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceb.yaml                                      │ kubernetes │        18         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceb1.yaml                                     │ kubernetes │        18         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceb1_1.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceb_1.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicebinding-runtime-v1.0.0.yaml                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicebinding-runtime-v1.0.0_10.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicebinding-runtime-v1.0.0_11.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicebinding-runtime-v1.0.0_12.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicebinding-runtime-v1.0.0_13.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicebinding-runtime-v1.0.0_14.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicebinding-runtime-v1.0.0_15.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicebinding-runtime-v1.0.0_16.yaml              │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicebinding-runtime-v1.0.0_19.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicebinding-runtime-v1.0.0_20.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicebinding-runtime-v1.0.0_21.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicebinding-runtime-v1.0.0_3.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicebinding-runtime-v1.0.0_4.yaml               │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicebinding-runtime-v1.0.0_5.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicebinding-runtime-v1.0.0_6.yaml               │ kubernetes │         3         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicebinding-runtime-v1.0.0_7.yaml               │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicebinding-runtime-v1.0.0_8.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicebinding-runtime-v1.0.0_9.yaml               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicec.yaml                                      │ kubernetes │        18         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicec1.yaml                                     │ kubernetes │        18         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicec1_1.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicec_1.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicecatalog-apiservice.yaml                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicecatalog-apiservice1.yaml                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicecatalog-svc.yaml                            │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicecatalog-svc1.yaml                           │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicecontent.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicedb.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicedb1.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicedb_1.yaml                                   │ kubernetes │        18         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicediscovery-assert.yaml                       │ kubernetes │         2         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicediscovery-deployment.yaml                   │ kubernetes │        16         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicediscovery-tcp-service.yaml                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicediscovery.yaml                              │ kubernetes │        15         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicegraph_1.yaml                                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicemonitor626.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicemonitor627.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicemonitor838.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicemonitor839.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services-deployment.yaml                           │ kubernetes │        30         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services-deployment1.yaml                          │ kubernetes │        19         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services-deployment_1.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services-deployment_2.yaml                         │ kubernetes │        30         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services-deployment_3.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services-deployment_4.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services-deployment_5.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services-deployment_6.yaml                         │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services-service.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services1.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services10.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services100.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services100_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services101.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services101_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services101_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services102.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services102_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services103.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services103_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services104.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services104_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services105.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services105_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services106.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services106_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services106_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services107.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services107_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services108.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services109.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services109_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services109_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services109_3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services109_4.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services10_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services10_2.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services110.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services1100.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services110_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services111.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services111_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services112.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services112_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services112_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services112_3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services113.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services113_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services113_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services113_3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services114.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services114_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services114_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services114_3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services115.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services115_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services116.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services116_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services117.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services117_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services118.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services118_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services118_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services118_3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services119.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services119_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services120.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services120_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services120_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services120_3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services121.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services121_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services121_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services121_3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services122.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services122_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services122_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services122_3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services123.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services123_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services124.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services124_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services125.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services125_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services126.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services126_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services126_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services126_3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services127.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services127_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services128.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services128_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services128_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services13.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services130.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services132.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services132_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services132_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services134.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services134_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services134_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services136.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services136_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services138.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services139.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services14.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services140.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services140_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services140_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services140_3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services140_4.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services141.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services141_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services142.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services142_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services142_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services144.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services145.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services145_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services146.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services148.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services148_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services149.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services149_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services149_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services149_3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services14_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services14_2.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services14_3.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services15.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services150.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services150_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services151.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services151_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services152.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services152_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services153.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services153_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services15_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services16.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services16_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services17.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services170.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services172.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services172_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services172_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services172_3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services173.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services173_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services176.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services177.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services178.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services179.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services17_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services17_2.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services17_3.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services18.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services180.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services183.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services183_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services184.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services184_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services185.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services187.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services188.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services189.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services189_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services189_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services18_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services18_2.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services18_3.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services19.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services190.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services190_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services191.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services191_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services191_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services192.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services192_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services193.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services194.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services194_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services195.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services195_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services195_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services195_3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services196.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services196_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services197.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services197_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services197_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services197_3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services198.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services198_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services199.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services199_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services199_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services199_3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services19_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services19_2.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services19_3.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services1_1.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services1_2.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services20.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services201.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services202.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services202_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services203.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services203_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services203_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services203_3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services204.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services204_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services205.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services206.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services206_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services209.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services209_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services209_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services209_3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services20_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services21.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services211.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services211_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services212.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services212_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services212_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services212_3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services213.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services213_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services213_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services213_3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services214.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services214_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services214_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services214_3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services216.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services217.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services21_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services22.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services220.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services223.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services224.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services225.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services226.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services226_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services226_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services226_3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services227.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services227_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services227_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services227_3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services229.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services229_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services229_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services22_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services23.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services230.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services230_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services230_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services231.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services232.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services233.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services233_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services234.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services234_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services235.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services235_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services236.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services237.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services238.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services239.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services23_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services23_2.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services23_3.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services24.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services240.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services240_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services240_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services240_3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services241.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services241_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services241_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services245.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services24_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services25.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services251.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services252.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services253.yaml                                   │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services253_1.yaml                                 │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services253_2.yaml                                 │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services253_3.yaml                                 │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services254.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services254_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services255.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services255_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services258.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services258_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services258_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services258_3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services258_4.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services258_5.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services258_6.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services258_7.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services25_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services25_2.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services25_3.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services26.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services263.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services265.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services265_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services265_2.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services265_3.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services265_4.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services267.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services267_1.yaml                                 │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services26_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services26_2.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services26_3.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services27.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services27_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services27_2.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services27_3.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services29.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services2_1.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services3.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services31.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services310.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services310_1.yaml                                 │ kubernetes │        18         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services32.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services34.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services34_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services34_2.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services35_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services36.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services36_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services37.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services38.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services38_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services39.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services3_1.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services4.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services40.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services40_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services40_2.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services40_3.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services41.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services41_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services41_2.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services41_3.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services42.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services42_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services43.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services43_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services43_2.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services46.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services47.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services47_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services47_2.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services47_3.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services48.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services48_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services49.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services49_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services5.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services50.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services50_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services50_2.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services50_3.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services51.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services51_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services51_2.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services51_3.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services52.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services52_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services52_2.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services52_3.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services53.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services53_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services54.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services54_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services55.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services55_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services56.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services56_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services56_2.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services56_3.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services57.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services57_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services58.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services58_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services58_2.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services58_3.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services59.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services59_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services59_2.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services59_3.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services5_1.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services6.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services60.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services60_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services60_2.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services60_3.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services62.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services64.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services65.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services66.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services66_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services66_2.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services67.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services67_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services68.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services7.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services76.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services76_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services76_2.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services76_3.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services77.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services77_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services78.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services79.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services79_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services7_1.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services7_2.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services7_3.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services8.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services83.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services83_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services84.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services84_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services85.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services85_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services86.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services87.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services88.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services88_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services89.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services8_1.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services8_2.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services8_3.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services9.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services90.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services90_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services91.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services91_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services92.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services93.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services93_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services94.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services94_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services95.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services95_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services96.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services96_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services97.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services97_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services98.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services98_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services99.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services99_1.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services9_1.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services_and_networking.yaml                       │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services_api-nombreDelProyecto.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services_editor_role.yaml                          │ kubernetes │         1         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services_hashgen.yaml                              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services_hashgen1.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services_hashgen2.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services_mysql-nombreDelProyecto.yaml              │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services_viewer_role.yaml                          │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ services_web-nombreDelProyecto.yaml                │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicetoken.yaml                                  │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicev2.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicev21.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicev22.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicev23.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ serviceweb.yaml                                    │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicex-deploy.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicex-deploy_1.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicex-deploy_2.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicex-deploy_3.yaml                             │ kubernetes │        18         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicex-deployment.yaml                           │ kubernetes │        17         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicex3.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicex3_1.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicex3_2.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicex3_3.yaml                                   │ kubernetes │        17         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicex3_4.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicey-deploy.yaml                               │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicey-deploy_1.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicey-deploy_2.yaml                             │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicey-deploy_3.yaml                             │ kubernetes │        18         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicey-deployment.yaml                           │ kubernetes │        17         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicey3.yaml                                     │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicey3_1.yaml                                   │ kubernetes │         0         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicey3_2.yaml                                   │ kubernetes │        17         │
├────────────────────────────────────────────────────┼────────────┼───────────────────┤
│ servicey3_3.yaml                                   │ kubernetes │         0         │
└────────────────────────────────────────────────────┴────────────┴───────────────────┘
Legend:
- '-': Not scanned
- '0': Clean (no security findings detected)


ServiceAccount_Deployment_1.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 101, FAILURES: 14)
Failures: 14 (UNKNOWN: 0, LOW: 6, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'data-engineering-app' of Deployment 'data-engineering-app' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 ServiceAccount_Deployment_1.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: data-engineering-app
  16 │         image: nginx:latest
  17 │         ports:
  18 │         - containerPort: 80
  19 │         env:
  20 │         - name: AWS_REGION
  21 │           value: "\u201Cus-west-2\u201D"
  22 │         - name: WHATS_THIS_EVEN_NEED_CONFIGS_FOR
  23 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'data-engineering-app' of Deployment 'data-engineering-app' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 ServiceAccount_Deployment_1.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: data-engineering-app
  16 │         image: nginx:latest
  17 │         ports:
  18 │         - containerPort: 80
  19 │         env:
  20 │         - name: AWS_REGION
  21 │           value: "\u201Cus-west-2\u201D"
  22 │         - name: WHATS_THIS_EVEN_NEED_CONFIGS_FOR
  23 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'data-engineering-app' of 'deployment' 'data-engineering-app' in 'data-engineering' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 ServiceAccount_Deployment_1.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: data-engineering-app
  16 │         image: nginx:latest
  17 │         ports:
  18 │         - containerPort: 80
  19 │         env:
  20 │         - name: AWS_REGION
  21 │           value: "\u201Cus-west-2\u201D"
  22 │         - name: WHATS_THIS_EVEN_NEED_CONFIGS_FOR
  23 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'data-engineering-app' of Deployment 'data-engineering-app' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 ServiceAccount_Deployment_1.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: data-engineering-app
  16 │         image: nginx:latest
  17 │         ports:
  18 │         - containerPort: 80
  19 │         env:
  20 │         - name: AWS_REGION
  21 │           value: "\u201Cus-west-2\u201D"
  22 │         - name: WHATS_THIS_EVEN_NEED_CONFIGS_FOR
  23 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'data-engineering-app' of Deployment 'data-engineering-app' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 ServiceAccount_Deployment_1.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: data-engineering-app
  16 │         image: nginx:latest
  17 │         ports:
  18 │         - containerPort: 80
  19 │         env:
  20 │         - name: AWS_REGION
  21 │           value: "\u201Cus-west-2\u201D"
  22 │         - name: WHATS_THIS_EVEN_NEED_CONFIGS_FOR
  23 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'data-engineering-app' of Deployment 'data-engineering-app' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 ServiceAccount_Deployment_1.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: data-engineering-app
  16 │         image: nginx:latest
  17 │         ports:
  18 │         - containerPort: 80
  19 │         env:
  20 │         - name: AWS_REGION
  21 │           value: "\u201Cus-west-2\u201D"
  22 │         - name: WHATS_THIS_EVEN_NEED_CONFIGS_FOR
  23 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'data-engineering-app' of Deployment 'data-engineering-app' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 ServiceAccount_Deployment_1.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: data-engineering-app
  16 │         image: nginx:latest
  17 │         ports:
  18 │         - containerPort: 80
  19 │         env:
  20 │         - name: AWS_REGION
  21 │           value: "\u201Cus-west-2\u201D"
  22 │         - name: WHATS_THIS_EVEN_NEED_CONFIGS_FOR
  23 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'data-engineering-app' of Deployment 'data-engineering-app' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 ServiceAccount_Deployment_1.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: data-engineering-app
  16 │         image: nginx:latest
  17 │         ports:
  18 │         - containerPort: 80
  19 │         env:
  20 │         - name: AWS_REGION
  21 │           value: "\u201Cus-west-2\u201D"
  22 │         - name: WHATS_THIS_EVEN_NEED_CONFIGS_FOR
  23 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 ServiceAccount_Deployment_1.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: data-engineering-app
  16 │         image: nginx:latest
  17 │         ports:
  18 │         - containerPort: 80
  19 │         env:
  20 │         - name: AWS_REGION
  21 │           value: "\u201Cus-west-2\u201D"
  22 │         - name: WHATS_THIS_EVEN_NEED_CONFIGS_FOR
  23 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "data-engineering-app" of deployment "data-engineering-app" in "data-engineering" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 ServiceAccount_Deployment_1.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: data-engineering-app
  16 │         image: nginx:latest
  17 │         ports:
  18 │         - containerPort: 80
  19 │         env:
  20 │         - name: AWS_REGION
  21 │           value: "\u201Cus-west-2\u201D"
  22 │         - name: WHATS_THIS_EVEN_NEED_CONFIGS_FOR
  23 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 ServiceAccount_Deployment_1.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: data-engineering-app
  16 │         image: nginx:latest
  17 │         ports:
  18 │         - containerPort: 80
  19 │         env:
  20 │         - name: AWS_REGION
  21 │           value: "\u201Cus-west-2\u201D"
  22 │         - name: WHATS_THIS_EVEN_NEED_CONFIGS_FOR
  23 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment data-engineering-app in data-engineering namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container data-engineering-app in data-engineering namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ServiceAccount_Deployment_1.yaml:15-33
────────────────────────────────────────
  15 ┌       - name: data-engineering-app
  16 │         image: nginx:latest
  17 │         ports:
  18 │         - containerPort: 80
  19 │         env:
  20 │         - name: AWS_REGION
  21 │           value: "\u201Cus-west-2\u201D"
  22 │         - name: WHATS_THIS_EVEN_NEED_CONFIGS_FOR
  23 └           valueFrom:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment data-engineering-app in data-engineering namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 ServiceAccount_Deployment_1.yaml:13-33
────────────────────────────────────────
  13 ┌       serviceAccountName: data-engineering-app
  14 │       containers:
  15 │       - name: data-engineering-app
  16 │         image: nginx:latest
  17 │         ports:
  18 │         - containerPort: 80
  19 │         env:
  20 │         - name: AWS_REGION
  21 └           value: "\u201Cus-west-2\u201D"
  ..   
────────────────────────────────────────



ServiceRole.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 110, FAILURES: 4)
Failures: 4 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'argocd-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 ServiceRole.yaml:8-10
────────────────────────────────────────
   8 ┌ - apiGroups: [""]
   9 │   resources: ["deployments", "services", "pods", "configmaps", "secrets"]
  10 └   verbs: ["get", "list", "watch", "create", "update", "delete"]
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): Role 'argocd-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 ServiceRole.yaml:8-10
────────────────────────────────────────
   8 ┌ - apiGroups: [""]
   9 │   resources: ["deployments", "services", "pods", "configmaps", "secrets"]
  10 └   verbs: ["get", "list", "watch", "create", "update", "delete"]
────────────────────────────────────────


AVD-KSV-0056 (HIGH): Role 'argocd-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 ServiceRole.yaml:8-10
────────────────────────────────────────
   8 ┌ - apiGroups: [""]
   9 │   resources: ["deployments", "services", "pods", "configmaps", "secrets"]
  10 └   verbs: ["get", "list", "watch", "create", "update", "delete"]
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'argocd-role' shouldn't have access to manage secrets in namespace 'argocd'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 ServiceRole.yaml:8-10
────────────────────────────────────────
   8 ┌ - apiGroups: [""]
   9 │   resources: ["deployments", "services", "pods", "configmaps", "secrets"]
  10 └   verbs: ["get", "list", "watch", "create", "update", "delete"]
────────────────────────────────────────



serviceAccount660.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'jenkins-admin' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 serviceAccount660.yaml:6-11
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - '*'
  10 │   verbs:
  11 └   - '*'
────────────────────────────────────────



serviceAccount662.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'jenkins-admin' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 serviceAccount662.yaml:6-11
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - '*'
  10 │   verbs:
  11 └   - '*'
────────────────────────────────────────



serviceAccount909.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'jenkins-admin' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 serviceAccount909.yaml:6-11
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - '*'
  10 │   verbs:
  11 └   - '*'
────────────────────────────────────────



serviceAccount91.yaml (kubernetes)
==================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'jenkins-admin' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 serviceAccount91.yaml:6-11
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - '*'
  10 │   verbs:
  11 └   - '*'
────────────────────────────────────────



serviceAccount916.yaml (kubernetes)
===================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'jenkins-admin' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 serviceAccount916.yaml:6-11
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - '*'
  10 │   verbs:
  11 └   - '*'
────────────────────────────────────────



serviceAccountClusterRole.yaml (kubernetes)
===========================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 1)

AVD-KSV-0046 (CRITICAL): ClusterRole 'jenkins-admin' shouldn't manage all resources
════════════════════════════════════════
Full control of the cluster resources, and therefore also root on all nodes where workloads can run and has access to all pods, secrets, and data.

See https://avd.aquasec.com/misconfig/ksv046
────────────────────────────────────────
 serviceAccountClusterRole.yaml:6-11
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   resources:
   9 │   - '*'
  10 │   verbs:
  11 └   - '*'
────────────────────────────────────────



serviceAccountRole_1.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 111, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'jenkins' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 serviceAccountRole_1.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - pods
  13 │   verbs:
  14 │   - create
  15 │   - delete
  16 │   - get
  17 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0053 (HIGH): Role 'jenkins' should not have access to resource '["pods/exec"]' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to exec into a container with privileged access to the host or with an attached SA with higher RBAC permissions is a common escalation path to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv053
────────────────────────────────────────
 serviceAccountRole_1.yaml:21-32
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - pods/exec
  25 │   verbs:
  26 │   - create
  27 │   - delete
  28 │   - get
  29 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'jenkins' shouldn't have access to manage secrets in namespace 'devops-tools'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 serviceAccountRole_1.yaml:41-46
────────────────────────────────────────
  41 ┌ - apiGroups:
  42 │   - ''
  43 │   resources:
  44 │   - secrets
  45 │   verbs:
  46 └   - get
────────────────────────────────────────



service_1_loadbalancer_single.yaml (kubernetes)
===============================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'practice-web' of Deployment 'my-web-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service_1_loadbalancer_single.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: practice-web
  19 │         image: rvmoskvitin/k8sphp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'practice-web' of Deployment 'my-web-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service_1_loadbalancer_single.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: practice-web
  19 │         image: rvmoskvitin/k8sphp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'practice-web' of 'deployment' 'my-web-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service_1_loadbalancer_single.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: practice-web
  19 │         image: rvmoskvitin/k8sphp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'practice-web' of Deployment 'my-web-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service_1_loadbalancer_single.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: practice-web
  19 │         image: rvmoskvitin/k8sphp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'practice-web' of Deployment 'my-web-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service_1_loadbalancer_single.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: practice-web
  19 │         image: rvmoskvitin/k8sphp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'practice-web' of Deployment 'my-web-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service_1_loadbalancer_single.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: practice-web
  19 │         image: rvmoskvitin/k8sphp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'practice-web' of Deployment 'my-web-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service_1_loadbalancer_single.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: practice-web
  19 │         image: rvmoskvitin/k8sphp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'practice-web' of Deployment 'my-web-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service_1_loadbalancer_single.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: practice-web
  19 │         image: rvmoskvitin/k8sphp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'practice-web' of Deployment 'my-web-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service_1_loadbalancer_single.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: practice-web
  19 │         image: rvmoskvitin/k8sphp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'practice-web' of Deployment 'my-web-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service_1_loadbalancer_single.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: practice-web
  19 │         image: rvmoskvitin/k8sphp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'practice-web' of Deployment 'my-web-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service_1_loadbalancer_single.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: practice-web
  19 │         image: rvmoskvitin/k8sphp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'practice-web' of Deployment 'my-web-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service_1_loadbalancer_single.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: practice-web
  19 │         image: rvmoskvitin/k8sphp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service_1_loadbalancer_single.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: practice-web
  19 │         image: rvmoskvitin/k8sphp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "practice-web" of deployment "my-web-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service_1_loadbalancer_single.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: practice-web
  19 │         image: rvmoskvitin/k8sphp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service_1_loadbalancer_single.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: practice-web
  19 │         image: rvmoskvitin/k8sphp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment my-web-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service_1_loadbalancer_single.yaml:4-6
────────────────────────────────────────
   4 ┌   name: my-web-deployment
   5 │   labels:
   6 └     app: my-k8s-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment my-web-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-web-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service_1_loadbalancer_single.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: practice-web
  19 │         image: rvmoskvitin/k8sphp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-web-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service_1_loadbalancer_single.yaml:17-21
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: practice-web
  19 │         image: rvmoskvitin/k8sphp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container practice-web in deployment my-web-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service_1_loadbalancer_single.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: practice-web
  19 │         image: rvmoskvitin/k8sphp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



service_2_loadbalancer_multi.yaml (kubernetes)
==============================================
Tests: 130 (SUCCESSES: 95, FAILURES: 35)
Failures: 35 (UNKNOWN: 0, LOW: 21, MEDIUM: 9, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'my-web' of Deployment 'my-web-deployment-multi-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service_2_loadbalancer_multi.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: my-web
  19 │         image: rvmoskvitin/k8sphp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'not-my-web' of Deployment 'my-web-deployment-multi-pod' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service_2_loadbalancer_multi.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: not-my-web
  23 │         image: tomcat:8.5.38
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'my-web' of Deployment 'my-web-deployment-multi-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service_2_loadbalancer_multi.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: my-web
  19 │         image: rvmoskvitin/k8sphp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'not-my-web' of Deployment 'my-web-deployment-multi-pod' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service_2_loadbalancer_multi.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: not-my-web
  23 │         image: tomcat:8.5.38
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'my-web' of 'deployment' 'my-web-deployment-multi-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service_2_loadbalancer_multi.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: my-web
  19 │         image: rvmoskvitin/k8sphp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'not-my-web' of 'deployment' 'my-web-deployment-multi-pod' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service_2_loadbalancer_multi.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: not-my-web
  23 │         image: tomcat:8.5.38
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'my-web' of Deployment 'my-web-deployment-multi-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service_2_loadbalancer_multi.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: my-web
  19 │         image: rvmoskvitin/k8sphp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'not-my-web' of Deployment 'my-web-deployment-multi-pod' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service_2_loadbalancer_multi.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: not-my-web
  23 │         image: tomcat:8.5.38
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'my-web' of Deployment 'my-web-deployment-multi-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service_2_loadbalancer_multi.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: my-web
  19 │         image: rvmoskvitin/k8sphp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'not-my-web' of Deployment 'my-web-deployment-multi-pod' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service_2_loadbalancer_multi.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: not-my-web
  23 │         image: tomcat:8.5.38
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'my-web' of Deployment 'my-web-deployment-multi-pod' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service_2_loadbalancer_multi.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: my-web
  19 │         image: rvmoskvitin/k8sphp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'my-web' of Deployment 'my-web-deployment-multi-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service_2_loadbalancer_multi.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: my-web
  19 │         image: rvmoskvitin/k8sphp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'not-my-web' of Deployment 'my-web-deployment-multi-pod' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service_2_loadbalancer_multi.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: not-my-web
  23 │         image: tomcat:8.5.38
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'my-web' of Deployment 'my-web-deployment-multi-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service_2_loadbalancer_multi.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: my-web
  19 │         image: rvmoskvitin/k8sphp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'not-my-web' of Deployment 'my-web-deployment-multi-pod' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service_2_loadbalancer_multi.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: not-my-web
  23 │         image: tomcat:8.5.38
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'my-web' of Deployment 'my-web-deployment-multi-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service_2_loadbalancer_multi.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: my-web
  19 │         image: rvmoskvitin/k8sphp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'not-my-web' of Deployment 'my-web-deployment-multi-pod' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service_2_loadbalancer_multi.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: not-my-web
  23 │         image: tomcat:8.5.38
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'my-web' of Deployment 'my-web-deployment-multi-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service_2_loadbalancer_multi.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: my-web
  19 │         image: rvmoskvitin/k8sphp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'not-my-web' of Deployment 'my-web-deployment-multi-pod' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service_2_loadbalancer_multi.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: not-my-web
  23 │         image: tomcat:8.5.38
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'my-web' of Deployment 'my-web-deployment-multi-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service_2_loadbalancer_multi.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: my-web
  19 │         image: rvmoskvitin/k8sphp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'not-my-web' of Deployment 'my-web-deployment-multi-pod' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service_2_loadbalancer_multi.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: not-my-web
  23 │         image: tomcat:8.5.38
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'my-web' of Deployment 'my-web-deployment-multi-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service_2_loadbalancer_multi.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: my-web
  19 │         image: rvmoskvitin/k8sphp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'not-my-web' of Deployment 'my-web-deployment-multi-pod' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service_2_loadbalancer_multi.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: not-my-web
  23 │         image: tomcat:8.5.38
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service_2_loadbalancer_multi.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: not-my-web
  23 │         image: tomcat:8.5.38
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service_2_loadbalancer_multi.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: my-web
  19 │         image: rvmoskvitin/k8sphp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "my-web" of deployment "my-web-deployment-multi-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service_2_loadbalancer_multi.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: my-web
  19 │         image: rvmoskvitin/k8sphp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "not-my-web" of deployment "my-web-deployment-multi-pod" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service_2_loadbalancer_multi.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: not-my-web
  23 │         image: tomcat:8.5.38
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service_2_loadbalancer_multi.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: my-web
  19 │         image: rvmoskvitin/k8sphp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service_2_loadbalancer_multi.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: not-my-web
  23 │         image: tomcat:8.5.38
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment my-web-deployment-multi-pod in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service_2_loadbalancer_multi.yaml:4-6
────────────────────────────────────────
   4 ┌   name: my-web-deployment-multi-pod
   5 │   labels:
   6 └     app: my-k8s-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment my-web-deployment-multi-pod in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-web-deployment-multi-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service_2_loadbalancer_multi.yaml:22-25
────────────────────────────────────────
  22 ┌       - name: not-my-web
  23 │         image: tomcat:8.5.38
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-web-deployment-multi-pod in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service_2_loadbalancer_multi.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: my-web
  19 │         image: rvmoskvitin/k8sphp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-web-deployment-multi-pod in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service_2_loadbalancer_multi.yaml:17-25
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: my-web
  19 │         image: rvmoskvitin/k8sphp:latest
  20 │         ports:
  21 │         - containerPort: 80
  22 │       - name: not-my-web
  23 │         image: tomcat:8.5.38
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container my-web in deployment my-web-deployment-multi-pod (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service_2_loadbalancer_multi.yaml:18-21
────────────────────────────────────────
  18 ┌       - name: my-web
  19 │         image: rvmoskvitin/k8sphp:latest
  20 │         ports:
  21 └         - containerPort: 80
────────────────────────────────────────



service_3_loadbalancer_autoscaling.yaml (kubernetes)
====================================================
Tests: 115 (SUCCESSES: 95, FAILURES: 20)
Failures: 20 (UNKNOWN: 0, LOW: 11, MEDIUM: 6, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'practice-web' of Deployment 'my-web-deployment-autoscaling' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 service_3_loadbalancer_autoscaling.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: practice-web
  18 │         image: rvmoskvitin/k8sphp:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'practice-web' of Deployment 'my-web-deployment-autoscaling' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 service_3_loadbalancer_autoscaling.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: practice-web
  18 │         image: rvmoskvitin/k8sphp:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'practice-web' of 'deployment' 'my-web-deployment-autoscaling' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 service_3_loadbalancer_autoscaling.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: practice-web
  18 │         image: rvmoskvitin/k8sphp:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'practice-web' of Deployment 'my-web-deployment-autoscaling' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 service_3_loadbalancer_autoscaling.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: practice-web
  18 │         image: rvmoskvitin/k8sphp:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'practice-web' of Deployment 'my-web-deployment-autoscaling' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 service_3_loadbalancer_autoscaling.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: practice-web
  18 │         image: rvmoskvitin/k8sphp:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'practice-web' of Deployment 'my-web-deployment-autoscaling' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 service_3_loadbalancer_autoscaling.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: practice-web
  18 │         image: rvmoskvitin/k8sphp:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'practice-web' of Deployment 'my-web-deployment-autoscaling' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 service_3_loadbalancer_autoscaling.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: practice-web
  18 │         image: rvmoskvitin/k8sphp:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'practice-web' of Deployment 'my-web-deployment-autoscaling' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 service_3_loadbalancer_autoscaling.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: practice-web
  18 │         image: rvmoskvitin/k8sphp:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'practice-web' of Deployment 'my-web-deployment-autoscaling' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 service_3_loadbalancer_autoscaling.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: practice-web
  18 │         image: rvmoskvitin/k8sphp:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'practice-web' of Deployment 'my-web-deployment-autoscaling' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 service_3_loadbalancer_autoscaling.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: practice-web
  18 │         image: rvmoskvitin/k8sphp:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'practice-web' of Deployment 'my-web-deployment-autoscaling' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 service_3_loadbalancer_autoscaling.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: practice-web
  18 │         image: rvmoskvitin/k8sphp:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'practice-web' of Deployment 'my-web-deployment-autoscaling' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 service_3_loadbalancer_autoscaling.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: practice-web
  18 │         image: rvmoskvitin/k8sphp:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 service_3_loadbalancer_autoscaling.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: practice-web
  18 │         image: rvmoskvitin/k8sphp:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "practice-web" of deployment "my-web-deployment-autoscaling" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 service_3_loadbalancer_autoscaling.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: practice-web
  18 │         image: rvmoskvitin/k8sphp:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 service_3_loadbalancer_autoscaling.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: practice-web
  18 │         image: rvmoskvitin/k8sphp:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment my-web-deployment-autoscaling in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 service_3_loadbalancer_autoscaling.yaml:4-6
────────────────────────────────────────
   4 ┌   name: my-web-deployment-autoscaling
   5 │   labels:
   6 └     app: my-k8s-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment my-web-deployment-autoscaling in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container my-web-deployment-autoscaling in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service_3_loadbalancer_autoscaling.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: practice-web
  18 │         image: rvmoskvitin/k8sphp:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment my-web-deployment-autoscaling in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 service_3_loadbalancer_autoscaling.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: practice-web
  18 │         image: rvmoskvitin/k8sphp:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container practice-web in deployment my-web-deployment-autoscaling (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 service_3_loadbalancer_autoscaling.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: practice-web
  18 │         image: rvmoskvitin/k8sphp:latest
  19 │         ports:
  20 └         - containerPort: 80
────────────────────────────────────────



serviceacc_secret_2.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 109, FAILURES: 5)
Failures: 5 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 2)

AVD-KSV-0041 (CRITICAL): ClusterRole 'deploy-bp-role' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 serviceacc_secret_2.yaml:6-45
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   - apps
   9 │   - batch
  10 │   - extensions
  11 │   - policy
  12 │   - rbac.authorization.k8s.io
  13 │   - roles.rbac.authorization.k8s.io
  14 └   - authorization.k8s.io
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'deploy-bp-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 serviceacc_secret_2.yaml:6-45
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   - apps
   9 │   - batch
  10 │   - extensions
  11 │   - policy
  12 │   - rbac.authorization.k8s.io
  13 │   - roles.rbac.authorization.k8s.io
  14 └   - authorization.k8s.io
  ..   
────────────────────────────────────────


AVD-KSV-0049 (MEDIUM): ClusterRole 'deploy-bp-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 serviceacc_secret_2.yaml:6-45
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   - apps
   9 │   - batch
  10 │   - extensions
  11 │   - policy
  12 │   - rbac.authorization.k8s.io
  13 │   - roles.rbac.authorization.k8s.io
  14 └   - authorization.k8s.io
  ..   
────────────────────────────────────────


AVD-KSV-0050 (CRITICAL): ClusterRole 'deploy-bp-role' should not have access to resources ["roles", "rolebindings"] for verbs ["create", "update", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
An effective level of access equivalent to cluster-admin should not be provided.

See https://avd.aquasec.com/misconfig/ksv050
────────────────────────────────────────
 serviceacc_secret_2.yaml:6-45
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   - apps
   9 │   - batch
  10 │   - extensions
  11 │   - policy
  12 │   - rbac.authorization.k8s.io
  13 │   - roles.rbac.authorization.k8s.io
  14 └   - authorization.k8s.io
  ..   
────────────────────────────────────────


AVD-KSV-0056 (HIGH): ClusterRole 'deploy-bp-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 serviceacc_secret_2.yaml:6-45
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - ''
   8 │   - apps
   9 │   - batch
  10 │   - extensions
  11 │   - policy
  12 │   - rbac.authorization.k8s.io
  13 │   - roles.rbac.authorization.k8s.io
  14 └   - authorization.k8s.io
  ..   
────────────────────────────────────────



serviceaccount667_1.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'pod-creator' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 serviceaccount667_1.yaml:7-15
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - pods
  11 │   verbs:
  12 │   - create
  13 │   - get
  14 │   - watch
  15 └   - list
────────────────────────────────────────



serviceaccount705_1.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 1)

AVD-KSV-0045 (CRITICAL): Role permits wildcard verb on specific resources
════════════════════════════════════════
Check whether role permits wildcard verb on specific resources

See https://avd.aquasec.com/misconfig/ksv045
────────────────────────────────────────
 serviceaccount705_1.yaml:7-12
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - secrets
  11 │   verbs:
  12 └   - '*'
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'secret-manager-role' shouldn't have access to manage secrets in namespace 'devstore'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 serviceaccount705_1.yaml:7-12
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - secrets
  11 │   verbs:
  12 └   - '*'
────────────────────────────────────────



serviceaccount705_3.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'ssl-manager' of Pod 'ssl-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 serviceaccount705_3.yaml:8-13
────────────────────────────────────────
   8 ┌   - name: ssl-manager
   9 │     image: nicolaka/netshoot
  10 │     stdin: true
  11 │     tty: true
  12 │     terminationMessagePath: /dev/termination-log
  13 └     terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'ssl-manager' of Pod 'ssl-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 serviceaccount705_3.yaml:8-13
────────────────────────────────────────
   8 ┌   - name: ssl-manager
   9 │     image: nicolaka/netshoot
  10 │     stdin: true
  11 │     tty: true
  12 │     terminationMessagePath: /dev/termination-log
  13 └     terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'ssl-manager' of 'pod' 'ssl-manager' in 'devstore' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 serviceaccount705_3.yaml:8-13
────────────────────────────────────────
   8 ┌   - name: ssl-manager
   9 │     image: nicolaka/netshoot
  10 │     stdin: true
  11 │     tty: true
  12 │     terminationMessagePath: /dev/termination-log
  13 └     terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'ssl-manager' of Pod 'ssl-manager' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 serviceaccount705_3.yaml:8-13
────────────────────────────────────────
   8 ┌   - name: ssl-manager
   9 │     image: nicolaka/netshoot
  10 │     stdin: true
  11 │     tty: true
  12 │     terminationMessagePath: /dev/termination-log
  13 └     terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'ssl-manager' of Pod 'ssl-manager' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 serviceaccount705_3.yaml:8-13
────────────────────────────────────────
   8 ┌   - name: ssl-manager
   9 │     image: nicolaka/netshoot
  10 │     stdin: true
  11 │     tty: true
  12 │     terminationMessagePath: /dev/termination-log
  13 └     terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'ssl-manager' of Pod 'ssl-manager' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 serviceaccount705_3.yaml:8-13
────────────────────────────────────────
   8 ┌   - name: ssl-manager
   9 │     image: nicolaka/netshoot
  10 │     stdin: true
  11 │     tty: true
  12 │     terminationMessagePath: /dev/termination-log
  13 └     terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'ssl-manager' of Pod 'ssl-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 serviceaccount705_3.yaml:8-13
────────────────────────────────────────
   8 ┌   - name: ssl-manager
   9 │     image: nicolaka/netshoot
  10 │     stdin: true
  11 │     tty: true
  12 │     terminationMessagePath: /dev/termination-log
  13 └     terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'ssl-manager' of Pod 'ssl-manager' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 serviceaccount705_3.yaml:8-13
────────────────────────────────────────
   8 ┌   - name: ssl-manager
   9 │     image: nicolaka/netshoot
  10 │     stdin: true
  11 │     tty: true
  12 │     terminationMessagePath: /dev/termination-log
  13 └     terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'ssl-manager' of Pod 'ssl-manager' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 serviceaccount705_3.yaml:8-13
────────────────────────────────────────
   8 ┌   - name: ssl-manager
   9 │     image: nicolaka/netshoot
  10 │     stdin: true
  11 │     tty: true
  12 │     terminationMessagePath: /dev/termination-log
  13 └     terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'ssl-manager' of Pod 'ssl-manager' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 serviceaccount705_3.yaml:8-13
────────────────────────────────────────
   8 ┌   - name: ssl-manager
   9 │     image: nicolaka/netshoot
  10 │     stdin: true
  11 │     tty: true
  12 │     terminationMessagePath: /dev/termination-log
  13 └     terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'ssl-manager' of Pod 'ssl-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 serviceaccount705_3.yaml:8-13
────────────────────────────────────────
   8 ┌   - name: ssl-manager
   9 │     image: nicolaka/netshoot
  10 │     stdin: true
  11 │     tty: true
  12 │     terminationMessagePath: /dev/termination-log
  13 └     terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'ssl-manager' of Pod 'ssl-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 serviceaccount705_3.yaml:8-13
────────────────────────────────────────
   8 ┌   - name: ssl-manager
   9 │     image: nicolaka/netshoot
  10 │     stdin: true
  11 │     tty: true
  12 │     terminationMessagePath: /dev/termination-log
  13 └     terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 serviceaccount705_3.yaml:8-13
────────────────────────────────────────
   8 ┌   - name: ssl-manager
   9 │     image: nicolaka/netshoot
  10 │     stdin: true
  11 │     tty: true
  12 │     terminationMessagePath: /dev/termination-log
  13 └     terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "ssl-manager" of pod "ssl-manager" in "devstore" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 serviceaccount705_3.yaml:8-13
────────────────────────────────────────
   8 ┌   - name: ssl-manager
   9 │     image: nicolaka/netshoot
  10 │     stdin: true
  11 │     tty: true
  12 │     terminationMessagePath: /dev/termination-log
  13 └     terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 serviceaccount705_3.yaml:8-13
────────────────────────────────────────
   8 ┌   - name: ssl-manager
   9 │     image: nicolaka/netshoot
  10 │     stdin: true
  11 │     tty: true
  12 │     terminationMessagePath: /dev/termination-log
  13 └     terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container ssl-manager in devstore namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 serviceaccount705_3.yaml:8-13
────────────────────────────────────────
   8 ┌   - name: ssl-manager
   9 │     image: nicolaka/netshoot
  10 │     stdin: true
  11 │     tty: true
  12 │     terminationMessagePath: /dev/termination-log
  13 └     terminationMessagePolicy: File
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod ssl-manager in devstore namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 serviceaccount705_3.yaml:7-16
────────────────────────────────────────
   7 ┌   containers:
   8 │   - name: ssl-manager
   9 │     image: nicolaka/netshoot
  10 │     stdin: true
  11 │     tty: true
  12 │     terminationMessagePath: /dev/termination-log
  13 │     terminationMessagePolicy: File
  14 │   dnsPolicy: ClusterFirst
  15 │   restartPolicy: Always
  16 └   serviceAccountName: secret-manager
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container ssl-manager in pod ssl-manager (namespace: devstore) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 serviceaccount705_3.yaml:8-13
────────────────────────────────────────
   8 ┌   - name: ssl-manager
   9 │     image: nicolaka/netshoot
  10 │     stdin: true
  11 │     tty: true
  12 │     terminationMessagePath: /dev/termination-log
  13 └     terminationMessagePolicy: File
────────────────────────────────────────



serviceaccount747_1.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 111, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'jenkins-agent' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 serviceaccount747_1.yaml:40-51
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ''
  42 │   resources:
  43 │   - secrets
  44 │   verbs:
  45 │   - create
  46 │   - delete
  47 │   - get
  48 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'jenkins-agent' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 serviceaccount747_1.yaml:8-19
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - ''
  10 │   resources:
  11 │   - pods
  12 │   verbs:
  13 │   - create
  14 │   - delete
  15 │   - get
  16 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0053 (HIGH): ClusterRole 'jenkins-agent' should not have access to resource '["pods/exec"]' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to exec into a container with privileged access to the host or with an attached SA with higher RBAC permissions is a common escalation path to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv053
────────────────────────────────────────
 serviceaccount747_1.yaml:20-31
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - pods/exec
  24 │   verbs:
  25 │   - create
  26 │   - delete
  27 │   - get
  28 └   - list
  ..   
────────────────────────────────────────



serviceaccount748_1.yaml (kubernetes)
=====================================
Tests: 114 (SUCCESSES: 111, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'jenkins' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 serviceaccount748_1.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - pods
  13 │   verbs:
  14 │   - create
  15 │   - delete
  16 │   - get
  17 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0053 (HIGH): Role 'jenkins' should not have access to resource '["pods/exec"]' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to exec into a container with privileged access to the host or with an attached SA with higher RBAC permissions is a common escalation path to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv053
────────────────────────────────────────
 serviceaccount748_1.yaml:21-32
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - pods/exec
  25 │   verbs:
  26 │   - create
  27 │   - delete
  28 │   - get
  29 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'jenkins' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 serviceaccount748_1.yaml:41-46
────────────────────────────────────────
  41 ┌ - apiGroups:
  42 │   - ''
  43 │   resources:
  44 │   - secrets
  45 │   verbs:
  46 └   - get
────────────────────────────────────────



serviceaccount88_1.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 111, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 1, CRITICAL: 1)

AVD-KSV-0041 (CRITICAL): ClusterRole 'jenkins-agent' shouldn't have access to manage resource 'secrets'
════════════════════════════════════════
Viewing secrets at the cluster-scope is akin to cluster-admin in most clusters as there are typically at least one service accounts (their token stored in a secret) bound to cluster-admin directly or a role/clusterrole that gives similar permissions.

See https://avd.aquasec.com/misconfig/ksv041
────────────────────────────────────────
 serviceaccount88_1.yaml:40-51
────────────────────────────────────────
  40 ┌ - apiGroups:
  41 │   - ''
  42 │   resources:
  43 │   - secrets
  44 │   verbs:
  45 │   - create
  46 │   - delete
  47 │   - get
  48 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'jenkins-agent' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 serviceaccount88_1.yaml:8-19
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - ''
  10 │   resources:
  11 │   - pods
  12 │   verbs:
  13 │   - create
  14 │   - delete
  15 │   - get
  16 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0053 (HIGH): ClusterRole 'jenkins-agent' should not have access to resource '["pods/exec"]' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to exec into a container with privileged access to the host or with an attached SA with higher RBAC permissions is a common escalation path to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv053
────────────────────────────────────────
 serviceaccount88_1.yaml:20-31
────────────────────────────────────────
  20 ┌ - apiGroups:
  21 │   - ''
  22 │   resources:
  23 │   - pods/exec
  24 │   verbs:
  25 │   - create
  26 │   - delete
  27 │   - get
  28 └   - list
  ..   
────────────────────────────────────────



serviceaccount89_1.yaml (kubernetes)
====================================
Tests: 114 (SUCCESSES: 111, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 2, HIGH: 1, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): Role 'jenkins' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 serviceaccount89_1.yaml:9-20
────────────────────────────────────────
   9 ┌ - apiGroups:
  10 │   - ''
  11 │   resources:
  12 │   - pods
  13 │   verbs:
  14 │   - create
  15 │   - delete
  16 │   - get
  17 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0053 (HIGH): Role 'jenkins' should not have access to resource '["pods/exec"]' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to exec into a container with privileged access to the host or with an attached SA with higher RBAC permissions is a common escalation path to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv053
────────────────────────────────────────
 serviceaccount89_1.yaml:21-32
────────────────────────────────────────
  21 ┌ - apiGroups:
  22 │   - ''
  23 │   resources:
  24 │   - pods/exec
  25 │   verbs:
  26 │   - create
  27 │   - delete
  28 │   - get
  29 └   - list
  ..   
────────────────────────────────────────


AVD-KSV-0113 (MEDIUM): Role 'jenkins' shouldn't have access to manage secrets in namespace 'default'
════════════════════════════════════════
Viewing secrets at the namespace scope can lead to escalation if another service account in that namespace has a higher privileged rolebinding or clusterrolebinding bound.

See https://avd.aquasec.com/misconfig/ksv113
────────────────────────────────────────
 serviceaccount89_1.yaml:41-46
────────────────────────────────────────
  41 ┌ - apiGroups:
  42 │   - ''
  43 │   resources:
  44 │   - secrets
  45 │   verbs:
  46 └   - get
────────────────────────────────────────



serviceb.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'serviceb' of Deployment 'serviceb-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 serviceb.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: serviceb
  20 │         image: duizhang/k8s-workshop-serviceb
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         - name: UPSTREAM_SERVICE
  25 │           value: http://servicec-service:8080
  26 │         ports:
  27 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'serviceb' of Deployment 'serviceb-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 serviceb.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: serviceb
  20 │         image: duizhang/k8s-workshop-serviceb
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         - name: UPSTREAM_SERVICE
  25 │           value: http://servicec-service:8080
  26 │         ports:
  27 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'serviceb' of 'deployment' 'serviceb-deployment' in 'kubernetes-workshop' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 serviceb.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: serviceb
  20 │         image: duizhang/k8s-workshop-serviceb
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         - name: UPSTREAM_SERVICE
  25 │           value: http://servicec-service:8080
  26 │         ports:
  27 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'serviceb' of Deployment 'serviceb-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 serviceb.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: serviceb
  20 │         image: duizhang/k8s-workshop-serviceb
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         - name: UPSTREAM_SERVICE
  25 │           value: http://servicec-service:8080
  26 │         ports:
  27 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'serviceb' of Deployment 'serviceb-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 serviceb.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: serviceb
  20 │         image: duizhang/k8s-workshop-serviceb
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         - name: UPSTREAM_SERVICE
  25 │           value: http://servicec-service:8080
  26 │         ports:
  27 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'serviceb' of Deployment 'serviceb-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 serviceb.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: serviceb
  20 │         image: duizhang/k8s-workshop-serviceb
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         - name: UPSTREAM_SERVICE
  25 │           value: http://servicec-service:8080
  26 │         ports:
  27 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'serviceb' of Deployment 'serviceb-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 serviceb.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: serviceb
  20 │         image: duizhang/k8s-workshop-serviceb
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         - name: UPSTREAM_SERVICE
  25 │           value: http://servicec-service:8080
  26 │         ports:
  27 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'serviceb' of Deployment 'serviceb-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 serviceb.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: serviceb
  20 │         image: duizhang/k8s-workshop-serviceb
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         - name: UPSTREAM_SERVICE
  25 │           value: http://servicec-service:8080
  26 │         ports:
  27 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'serviceb' of Deployment 'serviceb-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 serviceb.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: serviceb
  20 │         image: duizhang/k8s-workshop-serviceb
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         - name: UPSTREAM_SERVICE
  25 │           value: http://servicec-service:8080
  26 │         ports:
  27 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'serviceb' of Deployment 'serviceb-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 serviceb.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: serviceb
  20 │         image: duizhang/k8s-workshop-serviceb
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         - name: UPSTREAM_SERVICE
  25 │           value: http://servicec-service:8080
  26 │         ports:
  27 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'serviceb' of Deployment 'serviceb-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 serviceb.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: serviceb
  20 │         image: duizhang/k8s-workshop-serviceb
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         - name: UPSTREAM_SERVICE
  25 │           value: http://servicec-service:8080
  26 │         ports:
  27 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'serviceb' of Deployment 'serviceb-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 serviceb.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: serviceb
  20 │         image: duizhang/k8s-workshop-serviceb
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         - name: UPSTREAM_SERVICE
  25 │           value: http://servicec-service:8080
  26 │         ports:
  27 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 serviceb.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: serviceb
  20 │         image: duizhang/k8s-workshop-serviceb
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         - name: UPSTREAM_SERVICE
  25 │           value: http://servicec-service:8080
  26 │         ports:
  27 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "serviceb" of deployment "serviceb-deployment" in "kubernetes-workshop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 serviceb.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: serviceb
  20 │         image: duizhang/k8s-workshop-serviceb
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         - name: UPSTREAM_SERVICE
  25 │           value: http://servicec-service:8080
  26 │         ports:
  27 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 serviceb.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: serviceb
  20 │         image: duizhang/k8s-workshop-serviceb
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         - name: UPSTREAM_SERVICE
  25 │           value: http://servicec-service:8080
  26 │         ports:
  27 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container serviceb-deployment in kubernetes-workshop namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 serviceb.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: serviceb
  20 │         image: duizhang/k8s-workshop-serviceb
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         - name: UPSTREAM_SERVICE
  25 │           value: http://servicec-service:8080
  26 │         ports:
  27 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment serviceb-deployment in kubernetes-workshop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 serviceb.yaml:18-27
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: serviceb
  20 │         image: duizhang/k8s-workshop-serviceb
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         - name: UPSTREAM_SERVICE
  25 │           value: http://servicec-service:8080
  26 │         ports:
  27 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container serviceb in deployment serviceb-deployment (namespace: kubernetes-workshop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 serviceb.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: serviceb
  20 │         image: duizhang/k8s-workshop-serviceb
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         - name: UPSTREAM_SERVICE
  25 │           value: http://servicec-service:8080
  26 │         ports:
  27 └         - containerPort: 8080
────────────────────────────────────────



serviceb1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'serviceb' of Deployment 'serviceb-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 serviceb1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: serviceb
  20 │         image: duizhang/k8s-workshop-serviceb
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         - name: UPSTREAM_SERVICE
  25 │           value: http://servicec-service:8080
  26 │         ports:
  27 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'serviceb' of Deployment 'serviceb-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 serviceb1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: serviceb
  20 │         image: duizhang/k8s-workshop-serviceb
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         - name: UPSTREAM_SERVICE
  25 │           value: http://servicec-service:8080
  26 │         ports:
  27 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'serviceb' of 'deployment' 'serviceb-deployment' in 'kubernetes-workshop' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 serviceb1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: serviceb
  20 │         image: duizhang/k8s-workshop-serviceb
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         - name: UPSTREAM_SERVICE
  25 │           value: http://servicec-service:8080
  26 │         ports:
  27 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'serviceb' of Deployment 'serviceb-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 serviceb1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: serviceb
  20 │         image: duizhang/k8s-workshop-serviceb
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         - name: UPSTREAM_SERVICE
  25 │           value: http://servicec-service:8080
  26 │         ports:
  27 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'serviceb' of Deployment 'serviceb-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 serviceb1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: serviceb
  20 │         image: duizhang/k8s-workshop-serviceb
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         - name: UPSTREAM_SERVICE
  25 │           value: http://servicec-service:8080
  26 │         ports:
  27 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'serviceb' of Deployment 'serviceb-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 serviceb1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: serviceb
  20 │         image: duizhang/k8s-workshop-serviceb
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         - name: UPSTREAM_SERVICE
  25 │           value: http://servicec-service:8080
  26 │         ports:
  27 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'serviceb' of Deployment 'serviceb-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 serviceb1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: serviceb
  20 │         image: duizhang/k8s-workshop-serviceb
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         - name: UPSTREAM_SERVICE
  25 │           value: http://servicec-service:8080
  26 │         ports:
  27 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'serviceb' of Deployment 'serviceb-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 serviceb1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: serviceb
  20 │         image: duizhang/k8s-workshop-serviceb
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         - name: UPSTREAM_SERVICE
  25 │           value: http://servicec-service:8080
  26 │         ports:
  27 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'serviceb' of Deployment 'serviceb-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 serviceb1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: serviceb
  20 │         image: duizhang/k8s-workshop-serviceb
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         - name: UPSTREAM_SERVICE
  25 │           value: http://servicec-service:8080
  26 │         ports:
  27 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'serviceb' of Deployment 'serviceb-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 serviceb1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: serviceb
  20 │         image: duizhang/k8s-workshop-serviceb
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         - name: UPSTREAM_SERVICE
  25 │           value: http://servicec-service:8080
  26 │         ports:
  27 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'serviceb' of Deployment 'serviceb-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 serviceb1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: serviceb
  20 │         image: duizhang/k8s-workshop-serviceb
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         - name: UPSTREAM_SERVICE
  25 │           value: http://servicec-service:8080
  26 │         ports:
  27 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'serviceb' of Deployment 'serviceb-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 serviceb1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: serviceb
  20 │         image: duizhang/k8s-workshop-serviceb
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         - name: UPSTREAM_SERVICE
  25 │           value: http://servicec-service:8080
  26 │         ports:
  27 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 serviceb1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: serviceb
  20 │         image: duizhang/k8s-workshop-serviceb
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         - name: UPSTREAM_SERVICE
  25 │           value: http://servicec-service:8080
  26 │         ports:
  27 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "serviceb" of deployment "serviceb-deployment" in "kubernetes-workshop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 serviceb1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: serviceb
  20 │         image: duizhang/k8s-workshop-serviceb
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         - name: UPSTREAM_SERVICE
  25 │           value: http://servicec-service:8080
  26 │         ports:
  27 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 serviceb1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: serviceb
  20 │         image: duizhang/k8s-workshop-serviceb
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         - name: UPSTREAM_SERVICE
  25 │           value: http://servicec-service:8080
  26 │         ports:
  27 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container serviceb-deployment in kubernetes-workshop namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 serviceb1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: serviceb
  20 │         image: duizhang/k8s-workshop-serviceb
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         - name: UPSTREAM_SERVICE
  25 │           value: http://servicec-service:8080
  26 │         ports:
  27 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment serviceb-deployment in kubernetes-workshop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 serviceb1.yaml:18-27
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: serviceb
  20 │         image: duizhang/k8s-workshop-serviceb
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         - name: UPSTREAM_SERVICE
  25 │           value: http://servicec-service:8080
  26 │         ports:
  27 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container serviceb in deployment serviceb-deployment (namespace: kubernetes-workshop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 serviceb1.yaml:19-27
────────────────────────────────────────
  19 ┌       - name: serviceb
  20 │         image: duizhang/k8s-workshop-serviceb
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         - name: UPSTREAM_SERVICE
  25 │           value: http://servicec-service:8080
  26 │         ports:
  27 └         - containerPort: 8080
────────────────────────────────────────



servicebinding-runtime-v1.0.0_16.yaml (kubernetes)
==================================================
Tests: 123 (SUCCESSES: 104, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 12, MEDIUM: 5, HIGH: 2, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'kube-rbac-proxy' of Deployment 'servicebinding-controller-manager' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 servicebinding-runtime-v1.0.0_16.yaml:61-78
────────────────────────────────────────
  61 ┌       - args:
  62 │         - --secure-listen-address=0.0.0.0:8443
  63 │         - --upstream=http://127.0.0.1:8080/
  64 │         - --logtostderr=true
  65 │         - --v=0
  66 │         image: ghcr.io/servicebinding/runtime/bundle@sha256:cce54dd49197fb943e0de058e4f261a236bdce8c78be27d6005262f8747dff65
  67 │         name: kube-rbac-proxy
  68 │         ports:
  69 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'kube-rbac-proxy' of Deployment 'servicebinding-controller-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 servicebinding-runtime-v1.0.0_16.yaml:61-78
────────────────────────────────────────
  61 ┌       - args:
  62 │         - --secure-listen-address=0.0.0.0:8443
  63 │         - --upstream=http://127.0.0.1:8080/
  64 │         - --logtostderr=true
  65 │         - --v=0
  66 │         image: ghcr.io/servicebinding/runtime/bundle@sha256:cce54dd49197fb943e0de058e4f261a236bdce8c78be27d6005262f8747dff65
  67 │         name: kube-rbac-proxy
  68 │         ports:
  69 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'manager' of Deployment 'servicebinding-controller-manager' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 servicebinding-runtime-v1.0.0_16.yaml:26-60
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --health-probe-bind-address=:8081
  28 │         - --metrics-bind-address=127.0.0.1:8080
  29 │         - --leader-elect
  30 │         image: ghcr.io/servicebinding/runtime/bundle@sha256:2389ffe76c5fe22fdee5aac3ddf56c50de67eab2ccf5da7c79fc7317b5baf6ed
  31 │         livenessProbe:
  32 │           httpGet:
  33 │             path: /healthz
  34 └             port: 8081
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'kube-rbac-proxy' of 'deployment' 'servicebinding-controller-manager' in 'servicebinding-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 servicebinding-runtime-v1.0.0_16.yaml:61-78
────────────────────────────────────────
  61 ┌       - args:
  62 │         - --secure-listen-address=0.0.0.0:8443
  63 │         - --upstream=http://127.0.0.1:8080/
  64 │         - --logtostderr=true
  65 │         - --v=0
  66 │         image: ghcr.io/servicebinding/runtime/bundle@sha256:cce54dd49197fb943e0de058e4f261a236bdce8c78be27d6005262f8747dff65
  67 │         name: kube-rbac-proxy
  68 │         ports:
  69 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'manager' of 'deployment' 'servicebinding-controller-manager' in 'servicebinding-system' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 servicebinding-runtime-v1.0.0_16.yaml:26-60
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --health-probe-bind-address=:8081
  28 │         - --metrics-bind-address=127.0.0.1:8080
  29 │         - --leader-elect
  30 │         image: ghcr.io/servicebinding/runtime/bundle@sha256:2389ffe76c5fe22fdee5aac3ddf56c50de67eab2ccf5da7c79fc7317b5baf6ed
  31 │         livenessProbe:
  32 │           httpGet:
  33 │             path: /healthz
  34 └             port: 8081
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'kube-rbac-proxy' of Deployment 'servicebinding-controller-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 servicebinding-runtime-v1.0.0_16.yaml:61-78
────────────────────────────────────────
  61 ┌       - args:
  62 │         - --secure-listen-address=0.0.0.0:8443
  63 │         - --upstream=http://127.0.0.1:8080/
  64 │         - --logtostderr=true
  65 │         - --v=0
  66 │         image: ghcr.io/servicebinding/runtime/bundle@sha256:cce54dd49197fb943e0de058e4f261a236bdce8c78be27d6005262f8747dff65
  67 │         name: kube-rbac-proxy
  68 │         ports:
  69 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'manager' of Deployment 'servicebinding-controller-manager' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 servicebinding-runtime-v1.0.0_16.yaml:26-60
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --health-probe-bind-address=:8081
  28 │         - --metrics-bind-address=127.0.0.1:8080
  29 │         - --leader-elect
  30 │         image: ghcr.io/servicebinding/runtime/bundle@sha256:2389ffe76c5fe22fdee5aac3ddf56c50de67eab2ccf5da7c79fc7317b5baf6ed
  31 │         livenessProbe:
  32 │           httpGet:
  33 │             path: /healthz
  34 └             port: 8081
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'kube-rbac-proxy' of Deployment 'servicebinding-controller-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 servicebinding-runtime-v1.0.0_16.yaml:61-78
────────────────────────────────────────
  61 ┌       - args:
  62 │         - --secure-listen-address=0.0.0.0:8443
  63 │         - --upstream=http://127.0.0.1:8080/
  64 │         - --logtostderr=true
  65 │         - --v=0
  66 │         image: ghcr.io/servicebinding/runtime/bundle@sha256:cce54dd49197fb943e0de058e4f261a236bdce8c78be27d6005262f8747dff65
  67 │         name: kube-rbac-proxy
  68 │         ports:
  69 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'manager' of Deployment 'servicebinding-controller-manager' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 servicebinding-runtime-v1.0.0_16.yaml:26-60
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --health-probe-bind-address=:8081
  28 │         - --metrics-bind-address=127.0.0.1:8080
  29 │         - --leader-elect
  30 │         image: ghcr.io/servicebinding/runtime/bundle@sha256:2389ffe76c5fe22fdee5aac3ddf56c50de67eab2ccf5da7c79fc7317b5baf6ed
  31 │         livenessProbe:
  32 │           httpGet:
  33 │             path: /healthz
  34 └             port: 8081
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'kube-rbac-proxy' of Deployment 'servicebinding-controller-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 servicebinding-runtime-v1.0.0_16.yaml:61-78
────────────────────────────────────────
  61 ┌       - args:
  62 │         - --secure-listen-address=0.0.0.0:8443
  63 │         - --upstream=http://127.0.0.1:8080/
  64 │         - --logtostderr=true
  65 │         - --v=0
  66 │         image: ghcr.io/servicebinding/runtime/bundle@sha256:cce54dd49197fb943e0de058e4f261a236bdce8c78be27d6005262f8747dff65
  67 │         name: kube-rbac-proxy
  68 │         ports:
  69 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'manager' of Deployment 'servicebinding-controller-manager' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 servicebinding-runtime-v1.0.0_16.yaml:26-60
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --health-probe-bind-address=:8081
  28 │         - --metrics-bind-address=127.0.0.1:8080
  29 │         - --leader-elect
  30 │         image: ghcr.io/servicebinding/runtime/bundle@sha256:2389ffe76c5fe22fdee5aac3ddf56c50de67eab2ccf5da7c79fc7317b5baf6ed
  31 │         livenessProbe:
  32 │           httpGet:
  33 │             path: /healthz
  34 └             port: 8081
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 servicebinding-runtime-v1.0.0_16.yaml:26-60
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --health-probe-bind-address=:8081
  28 │         - --metrics-bind-address=127.0.0.1:8080
  29 │         - --leader-elect
  30 │         image: ghcr.io/servicebinding/runtime/bundle@sha256:2389ffe76c5fe22fdee5aac3ddf56c50de67eab2ccf5da7c79fc7317b5baf6ed
  31 │         livenessProbe:
  32 │           httpGet:
  33 │             path: /healthz
  34 └             port: 8081
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 servicebinding-runtime-v1.0.0_16.yaml:61-78
────────────────────────────────────────
  61 ┌       - args:
  62 │         - --secure-listen-address=0.0.0.0:8443
  63 │         - --upstream=http://127.0.0.1:8080/
  64 │         - --logtostderr=true
  65 │         - --v=0
  66 │         image: ghcr.io/servicebinding/runtime/bundle@sha256:cce54dd49197fb943e0de058e4f261a236bdce8c78be27d6005262f8747dff65
  67 │         name: kube-rbac-proxy
  68 │         ports:
  69 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "kube-rbac-proxy" of deployment "servicebinding-controller-manager" in "servicebinding-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 servicebinding-runtime-v1.0.0_16.yaml:61-78
────────────────────────────────────────
  61 ┌       - args:
  62 │         - --secure-listen-address=0.0.0.0:8443
  63 │         - --upstream=http://127.0.0.1:8080/
  64 │         - --logtostderr=true
  65 │         - --v=0
  66 │         image: ghcr.io/servicebinding/runtime/bundle@sha256:cce54dd49197fb943e0de058e4f261a236bdce8c78be27d6005262f8747dff65
  67 │         name: kube-rbac-proxy
  68 │         ports:
  69 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "manager" of deployment "servicebinding-controller-manager" in "servicebinding-system" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 servicebinding-runtime-v1.0.0_16.yaml:26-60
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --health-probe-bind-address=:8081
  28 │         - --metrics-bind-address=127.0.0.1:8080
  29 │         - --leader-elect
  30 │         image: ghcr.io/servicebinding/runtime/bundle@sha256:2389ffe76c5fe22fdee5aac3ddf56c50de67eab2ccf5da7c79fc7317b5baf6ed
  31 │         livenessProbe:
  32 │           httpGet:
  33 │             path: /healthz
  34 └             port: 8081
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 servicebinding-runtime-v1.0.0_16.yaml:26-60
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --health-probe-bind-address=:8081
  28 │         - --metrics-bind-address=127.0.0.1:8080
  29 │         - --leader-elect
  30 │         image: ghcr.io/servicebinding/runtime/bundle@sha256:2389ffe76c5fe22fdee5aac3ddf56c50de67eab2ccf5da7c79fc7317b5baf6ed
  31 │         livenessProbe:
  32 │           httpGet:
  33 │             path: /healthz
  34 └             port: 8081
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 servicebinding-runtime-v1.0.0_16.yaml:61-78
────────────────────────────────────────
  61 ┌       - args:
  62 │         - --secure-listen-address=0.0.0.0:8443
  63 │         - --upstream=http://127.0.0.1:8080/
  64 │         - --logtostderr=true
  65 │         - --v=0
  66 │         image: ghcr.io/servicebinding/runtime/bundle@sha256:cce54dd49197fb943e0de058e4f261a236bdce8c78be27d6005262f8747dff65
  67 │         name: kube-rbac-proxy
  68 │         ports:
  69 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container kube-rbac-proxy in deployment servicebinding-controller-manager (namespace: servicebinding-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 servicebinding-runtime-v1.0.0_16.yaml:61-78
────────────────────────────────────────
  61 ┌       - args:
  62 │         - --secure-listen-address=0.0.0.0:8443
  63 │         - --upstream=http://127.0.0.1:8080/
  64 │         - --logtostderr=true
  65 │         - --v=0
  66 │         image: ghcr.io/servicebinding/runtime/bundle@sha256:cce54dd49197fb943e0de058e4f261a236bdce8c78be27d6005262f8747dff65
  67 │         name: kube-rbac-proxy
  68 │         ports:
  69 └         - containerPort: 8443
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container manager in deployment servicebinding-controller-manager (namespace: servicebinding-system) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 servicebinding-runtime-v1.0.0_16.yaml:26-60
────────────────────────────────────────
  26 ┌       - args:
  27 │         - --health-probe-bind-address=:8081
  28 │         - --metrics-bind-address=127.0.0.1:8080
  29 │         - --leader-elect
  30 │         image: ghcr.io/servicebinding/runtime/bundle@sha256:2389ffe76c5fe22fdee5aac3ddf56c50de67eab2ccf5da7c79fc7317b5baf6ed
  31 │         livenessProbe:
  32 │           httpGet:
  33 │             path: /healthz
  34 └             port: 8081
  ..   
────────────────────────────────────────



servicebinding-runtime-v1.0.0_4.yaml (kubernetes)
=================================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 1, HIGH: 0, CRITICAL: 0)

AVD-KSV-0049 (MEDIUM): Role 'servicebinding-leader-election-role' should not have access to resource 'configmaps' for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Some workloads leverage configmaps to store sensitive data or configuration parameters that affect runtime behavior that can be modified by an attacker or combined with another issue to potentially lead to compromise.

See https://avd.aquasec.com/misconfig/ksv049
────────────────────────────────────────
 servicebinding-runtime-v1.0.0_4.yaml:7-18
────────────────────────────────────────
   7 ┌ - apiGroups:
   8 │   - ''
   9 │   resources:
  10 │   - configmaps
  11 │   verbs:
  12 │   - get
  13 │   - list
  14 │   - watch
  15 └   - create
  ..   
────────────────────────────────────────



servicebinding-runtime-v1.0.0_6.yaml (kubernetes)
=================================================
Tests: 116 (SUCCESSES: 113, FAILURES: 3)
Failures: 3 (UNKNOWN: 0, LOW: 0, MEDIUM: 3, HIGH: 0, CRITICAL: 0)

AVD-KSV-0048 (MEDIUM): ClusterRole 'servicebinding-k8s-workloads-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 servicebinding-runtime-v1.0.0_6.yaml:8-17
────────────────────────────────────────
   8 ┌ - apiGroups:
   9 │   - ''
  10 │   resources:
  11 │   - replicationcontrollers
  12 │   verbs:
  13 │   - get
  14 │   - list
  15 │   - watch
  16 │   - update
  17 └   - patch
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'servicebinding-k8s-workloads-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 servicebinding-runtime-v1.0.0_6.yaml:18-30
────────────────────────────────────────
  18 ┌ - apiGroups:
  19 │   - apps
  20 │   resources:
  21 │   - daemonsets
  22 │   - deployments
  23 │   - replicasets
  24 │   - statefulsets
  25 │   verbs:
  26 └   - get
  ..   
────────────────────────────────────────


AVD-KSV-0048 (MEDIUM): ClusterRole 'servicebinding-k8s-workloads-role' should not have access to resources ["pods", "deployments", "jobs", "cronjobs", "statefulsets", "daemonsets", "replicasets", "replicationcontrollers"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Depending on the policies enforced by the admission controller, this permission ranges from the ability to steal compute (crypto) by running workloads or allowing for creating workloads that escape to the node as root and escalation to cluster-admin.

See https://avd.aquasec.com/misconfig/ksv048
────────────────────────────────────────
 servicebinding-runtime-v1.0.0_6.yaml:31-41
────────────────────────────────────────
  31 ┌ - apiGroups:
  32 │   - batch
  33 │   resources:
  34 │   - cronjobs
  35 │   - jobs
  36 │   verbs:
  37 │   - get
  38 │   - list
  39 └   - watch
  ..   
────────────────────────────────────────



servicebinding-runtime-v1.0.0_7.yaml (kubernetes)
=================================================
Tests: 115 (SUCCESSES: 113, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 0, CRITICAL: 2)

AVD-KSV-0114 (CRITICAL): ClusterRole 'servicebinding-manager-role' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 servicebinding-runtime-v1.0.0_7.yaml:6-16
────────────────────────────────────────
   6 ┌ - apiGroups:
   7 │   - admissionregistration.k8s.io
   8 │   resources:
   9 │   - mutatingwebhookconfigurations
  10 │   verbs:
  11 │   - create
  12 │   - get
  13 │   - list
  14 └   - patch
  ..   
────────────────────────────────────────


AVD-KSV-0114 (CRITICAL): ClusterRole 'servicebinding-manager-role' should not have access to resources ["mutatingwebhookconfigurations", "validatingwebhookconfigurations"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
Webhooks can silently intercept or actively mutate/block resources as they are being created or updated. This includes secrets and pod specs.

See https://avd.aquasec.com/misconfig/ksv114
────────────────────────────────────────
 servicebinding-runtime-v1.0.0_7.yaml:17-27
────────────────────────────────────────
  17 ┌ - apiGroups:
  18 │   - admissionregistration.k8s.io
  19 │   resources:
  20 │   - validatingwebhookconfigurations
  21 │   verbs:
  22 │   - create
  23 │   - get
  24 │   - list
  25 └   - patch
  ..   
────────────────────────────────────────



servicec.yaml (kubernetes)
==========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'servicec' of Deployment 'servicec-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 servicec.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: servicec
  20 │         image: duizhang/k8s-workshop-servicec
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'servicec' of Deployment 'servicec-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 servicec.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: servicec
  20 │         image: duizhang/k8s-workshop-servicec
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'servicec' of 'deployment' 'servicec-deployment' in 'kubernetes-workshop' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 servicec.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: servicec
  20 │         image: duizhang/k8s-workshop-servicec
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'servicec' of Deployment 'servicec-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 servicec.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: servicec
  20 │         image: duizhang/k8s-workshop-servicec
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'servicec' of Deployment 'servicec-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 servicec.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: servicec
  20 │         image: duizhang/k8s-workshop-servicec
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'servicec' of Deployment 'servicec-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 servicec.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: servicec
  20 │         image: duizhang/k8s-workshop-servicec
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'servicec' of Deployment 'servicec-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 servicec.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: servicec
  20 │         image: duizhang/k8s-workshop-servicec
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'servicec' of Deployment 'servicec-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 servicec.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: servicec
  20 │         image: duizhang/k8s-workshop-servicec
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'servicec' of Deployment 'servicec-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 servicec.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: servicec
  20 │         image: duizhang/k8s-workshop-servicec
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'servicec' of Deployment 'servicec-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 servicec.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: servicec
  20 │         image: duizhang/k8s-workshop-servicec
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'servicec' of Deployment 'servicec-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 servicec.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: servicec
  20 │         image: duizhang/k8s-workshop-servicec
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'servicec' of Deployment 'servicec-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 servicec.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: servicec
  20 │         image: duizhang/k8s-workshop-servicec
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 servicec.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: servicec
  20 │         image: duizhang/k8s-workshop-servicec
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "servicec" of deployment "servicec-deployment" in "kubernetes-workshop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 servicec.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: servicec
  20 │         image: duizhang/k8s-workshop-servicec
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 servicec.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: servicec
  20 │         image: duizhang/k8s-workshop-servicec
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container servicec-deployment in kubernetes-workshop namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 servicec.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: servicec
  20 │         image: duizhang/k8s-workshop-servicec
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment servicec-deployment in kubernetes-workshop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 servicec.yaml:18-25
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: servicec
  20 │         image: duizhang/k8s-workshop-servicec
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container servicec in deployment servicec-deployment (namespace: kubernetes-workshop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 servicec.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: servicec
  20 │         image: duizhang/k8s-workshop-servicec
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────



servicec1.yaml (kubernetes)
===========================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'servicec' of Deployment 'servicec-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 servicec1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: servicec
  20 │         image: duizhang/k8s-workshop-servicec
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'servicec' of Deployment 'servicec-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 servicec1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: servicec
  20 │         image: duizhang/k8s-workshop-servicec
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'servicec' of 'deployment' 'servicec-deployment' in 'kubernetes-workshop' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 servicec1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: servicec
  20 │         image: duizhang/k8s-workshop-servicec
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'servicec' of Deployment 'servicec-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 servicec1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: servicec
  20 │         image: duizhang/k8s-workshop-servicec
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'servicec' of Deployment 'servicec-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 servicec1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: servicec
  20 │         image: duizhang/k8s-workshop-servicec
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'servicec' of Deployment 'servicec-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 servicec1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: servicec
  20 │         image: duizhang/k8s-workshop-servicec
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'servicec' of Deployment 'servicec-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 servicec1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: servicec
  20 │         image: duizhang/k8s-workshop-servicec
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'servicec' of Deployment 'servicec-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 servicec1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: servicec
  20 │         image: duizhang/k8s-workshop-servicec
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'servicec' of Deployment 'servicec-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 servicec1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: servicec
  20 │         image: duizhang/k8s-workshop-servicec
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'servicec' of Deployment 'servicec-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 servicec1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: servicec
  20 │         image: duizhang/k8s-workshop-servicec
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'servicec' of Deployment 'servicec-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 servicec1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: servicec
  20 │         image: duizhang/k8s-workshop-servicec
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'servicec' of Deployment 'servicec-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 servicec1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: servicec
  20 │         image: duizhang/k8s-workshop-servicec
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 servicec1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: servicec
  20 │         image: duizhang/k8s-workshop-servicec
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "servicec" of deployment "servicec-deployment" in "kubernetes-workshop" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 servicec1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: servicec
  20 │         image: duizhang/k8s-workshop-servicec
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 servicec1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: servicec
  20 │         image: duizhang/k8s-workshop-servicec
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container servicec-deployment in kubernetes-workshop namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 servicec1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: servicec
  20 │         image: duizhang/k8s-workshop-servicec
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment servicec-deployment in kubernetes-workshop namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 servicec1.yaml:18-25
────────────────────────────────────────
  18 ┌       containers:
  19 │       - name: servicec
  20 │         image: duizhang/k8s-workshop-servicec
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container servicec in deployment servicec-deployment (namespace: kubernetes-workshop) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 servicec1.yaml:19-25
────────────────────────────────────────
  19 ┌       - name: servicec
  20 │         image: duizhang/k8s-workshop-servicec
  21 │         env:
  22 │         - name: VERSION
  23 │           value: v1.0
  24 │         ports:
  25 └         - containerPort: 8080
────────────────────────────────────────



servicedb_1.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'servicedb-app' of Deployment 'servicedb-deploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 servicedb_1.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: servicedb-app
  19 │         image: rosazuccara/microservice-servicedb:deploy-v2
  20 │         ports:
  21 │         - containerPort: 5003
  22 │         volumeMounts:
  23 │         - name: vol-config-servicedb
  24 │           mountPath: /ServiceDB/config_servicedb.cfg
  25 │           subPath: config_servicedb.cfg
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'servicedb-app' of Deployment 'servicedb-deploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 servicedb_1.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: servicedb-app
  19 │         image: rosazuccara/microservice-servicedb:deploy-v2
  20 │         ports:
  21 │         - containerPort: 5003
  22 │         volumeMounts:
  23 │         - name: vol-config-servicedb
  24 │           mountPath: /ServiceDB/config_servicedb.cfg
  25 │           subPath: config_servicedb.cfg
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'servicedb-app' of 'deployment' 'servicedb-deploy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 servicedb_1.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: servicedb-app
  19 │         image: rosazuccara/microservice-servicedb:deploy-v2
  20 │         ports:
  21 │         - containerPort: 5003
  22 │         volumeMounts:
  23 │         - name: vol-config-servicedb
  24 │           mountPath: /ServiceDB/config_servicedb.cfg
  25 │           subPath: config_servicedb.cfg
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'servicedb-app' of Deployment 'servicedb-deploy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 servicedb_1.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: servicedb-app
  19 │         image: rosazuccara/microservice-servicedb:deploy-v2
  20 │         ports:
  21 │         - containerPort: 5003
  22 │         volumeMounts:
  23 │         - name: vol-config-servicedb
  24 │           mountPath: /ServiceDB/config_servicedb.cfg
  25 │           subPath: config_servicedb.cfg
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'servicedb-app' of Deployment 'servicedb-deploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 servicedb_1.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: servicedb-app
  19 │         image: rosazuccara/microservice-servicedb:deploy-v2
  20 │         ports:
  21 │         - containerPort: 5003
  22 │         volumeMounts:
  23 │         - name: vol-config-servicedb
  24 │           mountPath: /ServiceDB/config_servicedb.cfg
  25 │           subPath: config_servicedb.cfg
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'servicedb-app' of Deployment 'servicedb-deploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 servicedb_1.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: servicedb-app
  19 │         image: rosazuccara/microservice-servicedb:deploy-v2
  20 │         ports:
  21 │         - containerPort: 5003
  22 │         volumeMounts:
  23 │         - name: vol-config-servicedb
  24 │           mountPath: /ServiceDB/config_servicedb.cfg
  25 │           subPath: config_servicedb.cfg
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'servicedb-app' of Deployment 'servicedb-deploy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 servicedb_1.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: servicedb-app
  19 │         image: rosazuccara/microservice-servicedb:deploy-v2
  20 │         ports:
  21 │         - containerPort: 5003
  22 │         volumeMounts:
  23 │         - name: vol-config-servicedb
  24 │           mountPath: /ServiceDB/config_servicedb.cfg
  25 │           subPath: config_servicedb.cfg
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'servicedb-app' of Deployment 'servicedb-deploy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 servicedb_1.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: servicedb-app
  19 │         image: rosazuccara/microservice-servicedb:deploy-v2
  20 │         ports:
  21 │         - containerPort: 5003
  22 │         volumeMounts:
  23 │         - name: vol-config-servicedb
  24 │           mountPath: /ServiceDB/config_servicedb.cfg
  25 │           subPath: config_servicedb.cfg
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'servicedb-app' of Deployment 'servicedb-deploy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 servicedb_1.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: servicedb-app
  19 │         image: rosazuccara/microservice-servicedb:deploy-v2
  20 │         ports:
  21 │         - containerPort: 5003
  22 │         volumeMounts:
  23 │         - name: vol-config-servicedb
  24 │           mountPath: /ServiceDB/config_servicedb.cfg
  25 │           subPath: config_servicedb.cfg
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'servicedb-app' of Deployment 'servicedb-deploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 servicedb_1.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: servicedb-app
  19 │         image: rosazuccara/microservice-servicedb:deploy-v2
  20 │         ports:
  21 │         - containerPort: 5003
  22 │         volumeMounts:
  23 │         - name: vol-config-servicedb
  24 │           mountPath: /ServiceDB/config_servicedb.cfg
  25 │           subPath: config_servicedb.cfg
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'servicedb-app' of Deployment 'servicedb-deploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 servicedb_1.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: servicedb-app
  19 │         image: rosazuccara/microservice-servicedb:deploy-v2
  20 │         ports:
  21 │         - containerPort: 5003
  22 │         volumeMounts:
  23 │         - name: vol-config-servicedb
  24 │           mountPath: /ServiceDB/config_servicedb.cfg
  25 │           subPath: config_servicedb.cfg
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 servicedb_1.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: servicedb-app
  19 │         image: rosazuccara/microservice-servicedb:deploy-v2
  20 │         ports:
  21 │         - containerPort: 5003
  22 │         volumeMounts:
  23 │         - name: vol-config-servicedb
  24 │           mountPath: /ServiceDB/config_servicedb.cfg
  25 │           subPath: config_servicedb.cfg
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "servicedb-app" of deployment "servicedb-deploy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 servicedb_1.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: servicedb-app
  19 │         image: rosazuccara/microservice-servicedb:deploy-v2
  20 │         ports:
  21 │         - containerPort: 5003
  22 │         volumeMounts:
  23 │         - name: vol-config-servicedb
  24 │           mountPath: /ServiceDB/config_servicedb.cfg
  25 │           subPath: config_servicedb.cfg
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 servicedb_1.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: servicedb-app
  19 │         image: rosazuccara/microservice-servicedb:deploy-v2
  20 │         ports:
  21 │         - containerPort: 5003
  22 │         volumeMounts:
  23 │         - name: vol-config-servicedb
  24 │           mountPath: /ServiceDB/config_servicedb.cfg
  25 │           subPath: config_servicedb.cfg
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment servicedb-deploy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 servicedb_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: servicedb-deploy
   5 │   labels:
   6 └     app: servicedb
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container servicedb-deploy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 servicedb_1.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: servicedb-app
  19 │         image: rosazuccara/microservice-servicedb:deploy-v2
  20 │         ports:
  21 │         - containerPort: 5003
  22 │         volumeMounts:
  23 │         - name: vol-config-servicedb
  24 │           mountPath: /ServiceDB/config_servicedb.cfg
  25 │           subPath: config_servicedb.cfg
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment servicedb-deploy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 servicedb_1.yaml:17-53
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: servicedb-app
  19 │         image: rosazuccara/microservice-servicedb:deploy-v2
  20 │         ports:
  21 │         - containerPort: 5003
  22 │         volumeMounts:
  23 │         - name: vol-config-servicedb
  24 │           mountPath: /ServiceDB/config_servicedb.cfg
  25 └           subPath: config_servicedb.cfg
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container servicedb-app in deployment servicedb-deploy (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 servicedb_1.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: servicedb-app
  19 │         image: rosazuccara/microservice-servicedb:deploy-v2
  20 │         ports:
  21 │         - containerPort: 5003
  22 │         volumeMounts:
  23 │         - name: vol-config-servicedb
  24 │           mountPath: /ServiceDB/config_servicedb.cfg
  25 │           subPath: config_servicedb.cfg
  26 └         env:
  ..   
────────────────────────────────────────



servicediscovery-assert.yaml (kubernetes)
=========================================
Tests: 114 (SUCCESSES: 112, FAILURES: 2)
Failures: 2 (UNKNOWN: 0, LOW: 1, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0110 (LOW): pod access-service in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 servicediscovery-assert.yaml:4
────────────────────────────────────────
   4 [   name: access-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod access-service in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 servicediscovery-assert.yaml:1-9
────────────────────────────────────────
   1 ┌ apiVersion: v1
   2 │ kind: Pod
   3 │ metadata:
   4 │   name: access-service
   5 │ status:
   6 │   phase: Running
   7 │   ~.containerStatuses:
   8 │     ready: true
   9 └     restartCount: 0
────────────────────────────────────────



servicediscovery-deployment.yaml (kubernetes)
=============================================
Tests: 115 (SUCCESSES: 99, FAILURES: 16)
Failures: 16 (UNKNOWN: 0, LOW: 8, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'servicediscovery' of Deployment 'servicediscovery' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 servicediscovery-deployment.yaml:42-72
────────────────────────────────────────
  42 ┌         - env:
  43 │             - name: JAVA_TOOL_OPTIONS
  44 │               value: -XX:ActiveProcessorCount=4 -XX:MaxDirectMemorySize=100M
  45 │             - name: ZIPKIN_URI
  46 │               value: http://zipkin:9411/
  47 │           image: ghcr.io/tobias-pe/distributed-systems-energy-efficiency/servicediscovery:latest
  48 │           imagePullPolicy: Always
  49 │           livenessProbe:
  50 └             failureThreshold: 5
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'servicediscovery' of Deployment 'servicediscovery' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 servicediscovery-deployment.yaml:42-72
────────────────────────────────────────
  42 ┌         - env:
  43 │             - name: JAVA_TOOL_OPTIONS
  44 │               value: -XX:ActiveProcessorCount=4 -XX:MaxDirectMemorySize=100M
  45 │             - name: ZIPKIN_URI
  46 │               value: http://zipkin:9411/
  47 │           image: ghcr.io/tobias-pe/distributed-systems-energy-efficiency/servicediscovery:latest
  48 │           imagePullPolicy: Always
  49 │           livenessProbe:
  50 └             failureThreshold: 5
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'servicediscovery' of 'deployment' 'servicediscovery' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 servicediscovery-deployment.yaml:42-72
────────────────────────────────────────
  42 ┌         - env:
  43 │             - name: JAVA_TOOL_OPTIONS
  44 │               value: -XX:ActiveProcessorCount=4 -XX:MaxDirectMemorySize=100M
  45 │             - name: ZIPKIN_URI
  46 │               value: http://zipkin:9411/
  47 │           image: ghcr.io/tobias-pe/distributed-systems-energy-efficiency/servicediscovery:latest
  48 │           imagePullPolicy: Always
  49 │           livenessProbe:
  50 └             failureThreshold: 5
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'servicediscovery' of Deployment 'servicediscovery' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 servicediscovery-deployment.yaml:42-72
────────────────────────────────────────
  42 ┌         - env:
  43 │             - name: JAVA_TOOL_OPTIONS
  44 │               value: -XX:ActiveProcessorCount=4 -XX:MaxDirectMemorySize=100M
  45 │             - name: ZIPKIN_URI
  46 │               value: http://zipkin:9411/
  47 │           image: ghcr.io/tobias-pe/distributed-systems-energy-efficiency/servicediscovery:latest
  48 │           imagePullPolicy: Always
  49 │           livenessProbe:
  50 └             failureThreshold: 5
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'servicediscovery' of Deployment 'servicediscovery' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 servicediscovery-deployment.yaml:42-72
────────────────────────────────────────
  42 ┌         - env:
  43 │             - name: JAVA_TOOL_OPTIONS
  44 │               value: -XX:ActiveProcessorCount=4 -XX:MaxDirectMemorySize=100M
  45 │             - name: ZIPKIN_URI
  46 │               value: http://zipkin:9411/
  47 │           image: ghcr.io/tobias-pe/distributed-systems-energy-efficiency/servicediscovery:latest
  48 │           imagePullPolicy: Always
  49 │           livenessProbe:
  50 └             failureThreshold: 5
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'servicediscovery' of Deployment 'servicediscovery' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 servicediscovery-deployment.yaml:42-72
────────────────────────────────────────
  42 ┌         - env:
  43 │             - name: JAVA_TOOL_OPTIONS
  44 │               value: -XX:ActiveProcessorCount=4 -XX:MaxDirectMemorySize=100M
  45 │             - name: ZIPKIN_URI
  46 │               value: http://zipkin:9411/
  47 │           image: ghcr.io/tobias-pe/distributed-systems-energy-efficiency/servicediscovery:latest
  48 │           imagePullPolicy: Always
  49 │           livenessProbe:
  50 └             failureThreshold: 5
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'servicediscovery' of Deployment 'servicediscovery' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 servicediscovery-deployment.yaml:42-72
────────────────────────────────────────
  42 ┌         - env:
  43 │             - name: JAVA_TOOL_OPTIONS
  44 │               value: -XX:ActiveProcessorCount=4 -XX:MaxDirectMemorySize=100M
  45 │             - name: ZIPKIN_URI
  46 │               value: http://zipkin:9411/
  47 │           image: ghcr.io/tobias-pe/distributed-systems-energy-efficiency/servicediscovery:latest
  48 │           imagePullPolicy: Always
  49 │           livenessProbe:
  50 └             failureThreshold: 5
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'servicediscovery' of Deployment 'servicediscovery' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 servicediscovery-deployment.yaml:42-72
────────────────────────────────────────
  42 ┌         - env:
  43 │             - name: JAVA_TOOL_OPTIONS
  44 │               value: -XX:ActiveProcessorCount=4 -XX:MaxDirectMemorySize=100M
  45 │             - name: ZIPKIN_URI
  46 │               value: http://zipkin:9411/
  47 │           image: ghcr.io/tobias-pe/distributed-systems-energy-efficiency/servicediscovery:latest
  48 │           imagePullPolicy: Always
  49 │           livenessProbe:
  50 └             failureThreshold: 5
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'servicediscovery' of Deployment 'servicediscovery' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 servicediscovery-deployment.yaml:42-72
────────────────────────────────────────
  42 ┌         - env:
  43 │             - name: JAVA_TOOL_OPTIONS
  44 │               value: -XX:ActiveProcessorCount=4 -XX:MaxDirectMemorySize=100M
  45 │             - name: ZIPKIN_URI
  46 │               value: http://zipkin:9411/
  47 │           image: ghcr.io/tobias-pe/distributed-systems-energy-efficiency/servicediscovery:latest
  48 │           imagePullPolicy: Always
  49 │           livenessProbe:
  50 └             failureThreshold: 5
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 servicediscovery-deployment.yaml:42-72
────────────────────────────────────────
  42 ┌         - env:
  43 │             - name: JAVA_TOOL_OPTIONS
  44 │               value: -XX:ActiveProcessorCount=4 -XX:MaxDirectMemorySize=100M
  45 │             - name: ZIPKIN_URI
  46 │               value: http://zipkin:9411/
  47 │           image: ghcr.io/tobias-pe/distributed-systems-energy-efficiency/servicediscovery:latest
  48 │           imagePullPolicy: Always
  49 │           livenessProbe:
  50 └             failureThreshold: 5
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "servicediscovery" of deployment "servicediscovery" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 servicediscovery-deployment.yaml:42-72
────────────────────────────────────────
  42 ┌         - env:
  43 │             - name: JAVA_TOOL_OPTIONS
  44 │               value: -XX:ActiveProcessorCount=4 -XX:MaxDirectMemorySize=100M
  45 │             - name: ZIPKIN_URI
  46 │               value: http://zipkin:9411/
  47 │           image: ghcr.io/tobias-pe/distributed-systems-energy-efficiency/servicediscovery:latest
  48 │           imagePullPolicy: Always
  49 │           livenessProbe:
  50 └             failureThreshold: 5
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 servicediscovery-deployment.yaml:42-72
────────────────────────────────────────
  42 ┌         - env:
  43 │             - name: JAVA_TOOL_OPTIONS
  44 │               value: -XX:ActiveProcessorCount=4 -XX:MaxDirectMemorySize=100M
  45 │             - name: ZIPKIN_URI
  46 │               value: http://zipkin:9411/
  47 │           image: ghcr.io/tobias-pe/distributed-systems-energy-efficiency/servicediscovery:latest
  48 │           imagePullPolicy: Always
  49 │           livenessProbe:
  50 └             failureThreshold: 5
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment servicediscovery in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 servicediscovery-deployment.yaml:4-18
────────────────────────────────────────
   4 ┌   annotations:
   5 │     kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o ./kubernetes/
   6 │     kompose.image-pull-policy: Always
   7 │     kompose.service.healthcheck.liveness.http_get_path: /actuator/health/liveness
   8 │     kompose.service.healthcheck.liveness.http_get_port: "8761"
   9 │     kompose.service.healthcheck.readiness.http_get_path: /actuator/health/readiness
  10 │     kompose.service.healthcheck.readiness.http_get_port: "8761"
  11 │     kompose.service.healthcheck.readiness.retries: "3"
  12 └     kompose.service.healthcheck.readiness.start_period: 8s
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container servicediscovery in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 servicediscovery-deployment.yaml:42-72
────────────────────────────────────────
  42 ┌         - env:
  43 │             - name: JAVA_TOOL_OPTIONS
  44 │               value: -XX:ActiveProcessorCount=4 -XX:MaxDirectMemorySize=100M
  45 │             - name: ZIPKIN_URI
  46 │               value: http://zipkin:9411/
  47 │           image: ghcr.io/tobias-pe/distributed-systems-energy-efficiency/servicediscovery:latest
  48 │           imagePullPolicy: Always
  49 │           livenessProbe:
  50 └             failureThreshold: 5
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment servicediscovery in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 servicediscovery-deployment.yaml:41-73
────────────────────────────────────────
  41 ┌       containers:
  42 │         - env:
  43 │             - name: JAVA_TOOL_OPTIONS
  44 │               value: -XX:ActiveProcessorCount=4 -XX:MaxDirectMemorySize=100M
  45 │             - name: ZIPKIN_URI
  46 │               value: http://zipkin:9411/
  47 │           image: ghcr.io/tobias-pe/distributed-systems-energy-efficiency/servicediscovery:latest
  48 │           imagePullPolicy: Always
  49 └           livenessProbe:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container servicediscovery in deployment servicediscovery (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 servicediscovery-deployment.yaml:42-72
────────────────────────────────────────
  42 ┌         - env:
  43 │             - name: JAVA_TOOL_OPTIONS
  44 │               value: -XX:ActiveProcessorCount=4 -XX:MaxDirectMemorySize=100M
  45 │             - name: ZIPKIN_URI
  46 │               value: http://zipkin:9411/
  47 │           image: ghcr.io/tobias-pe/distributed-systems-energy-efficiency/servicediscovery:latest
  48 │           imagePullPolicy: Always
  49 │           livenessProbe:
  50 └             failureThreshold: 5
  ..   
────────────────────────────────────────



servicediscovery.yaml (kubernetes)
==================================
Tests: 115 (SUCCESSES: 100, FAILURES: 15)
Failures: 15 (UNKNOWN: 0, LOW: 9, MEDIUM: 3, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'access-service' of Pod 'access-service' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 servicediscovery.yaml:14-39
────────────────────────────────────────
  14 ┌   - name: access-service
  15 │     image: busybox:1.35
  16 │     env:
  17 │     - name: URL
  18 │       valueFrom:
  19 │         configMapKeyRef:
  20 │           name: caddy-service-discovery 
  21 │           key: url
  22 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'access-service' of Pod 'access-service' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 servicediscovery.yaml:14-39
────────────────────────────────────────
  14 ┌   - name: access-service
  15 │     image: busybox:1.35
  16 │     env:
  17 │     - name: URL
  18 │       valueFrom:
  19 │         configMapKeyRef:
  20 │           name: caddy-service-discovery 
  21 │           key: url
  22 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'access-service' of 'pod' 'access-service' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 servicediscovery.yaml:14-39
────────────────────────────────────────
  14 ┌   - name: access-service
  15 │     image: busybox:1.35
  16 │     env:
  17 │     - name: URL
  18 │       valueFrom:
  19 │         configMapKeyRef:
  20 │           name: caddy-service-discovery 
  21 │           key: url
  22 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'access-service' of Pod 'access-service' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 servicediscovery.yaml:14-39
────────────────────────────────────────
  14 ┌   - name: access-service
  15 │     image: busybox:1.35
  16 │     env:
  17 │     - name: URL
  18 │       valueFrom:
  19 │         configMapKeyRef:
  20 │           name: caddy-service-discovery 
  21 │           key: url
  22 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'access-service' of Pod 'access-service' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 servicediscovery.yaml:14-39
────────────────────────────────────────
  14 ┌   - name: access-service
  15 │     image: busybox:1.35
  16 │     env:
  17 │     - name: URL
  18 │       valueFrom:
  19 │         configMapKeyRef:
  20 │           name: caddy-service-discovery 
  21 │           key: url
  22 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'access-service' of Pod 'access-service' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 servicediscovery.yaml:14-39
────────────────────────────────────────
  14 ┌   - name: access-service
  15 │     image: busybox:1.35
  16 │     env:
  17 │     - name: URL
  18 │       valueFrom:
  19 │         configMapKeyRef:
  20 │           name: caddy-service-discovery 
  21 │           key: url
  22 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'access-service' of Pod 'access-service' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 servicediscovery.yaml:14-39
────────────────────────────────────────
  14 ┌   - name: access-service
  15 │     image: busybox:1.35
  16 │     env:
  17 │     - name: URL
  18 │       valueFrom:
  19 │         configMapKeyRef:
  20 │           name: caddy-service-discovery 
  21 │           key: url
  22 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'access-service' of Pod 'access-service' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 servicediscovery.yaml:14-39
────────────────────────────────────────
  14 ┌   - name: access-service
  15 │     image: busybox:1.35
  16 │     env:
  17 │     - name: URL
  18 │       valueFrom:
  19 │         configMapKeyRef:
  20 │           name: caddy-service-discovery 
  21 │           key: url
  22 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'access-service' of Pod 'access-service' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 servicediscovery.yaml:14-39
────────────────────────────────────────
  14 ┌   - name: access-service
  15 │     image: busybox:1.35
  16 │     env:
  17 │     - name: URL
  18 │       valueFrom:
  19 │         configMapKeyRef:
  20 │           name: caddy-service-discovery 
  21 │           key: url
  22 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 servicediscovery.yaml:14-39
────────────────────────────────────────
  14 ┌   - name: access-service
  15 │     image: busybox:1.35
  16 │     env:
  17 │     - name: URL
  18 │       valueFrom:
  19 │         configMapKeyRef:
  20 │           name: caddy-service-discovery 
  21 │           key: url
  22 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "access-service" of pod "access-service" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 servicediscovery.yaml:14-39
────────────────────────────────────────
  14 ┌   - name: access-service
  15 │     image: busybox:1.35
  16 │     env:
  17 │     - name: URL
  18 │       valueFrom:
  19 │         configMapKeyRef:
  20 │           name: caddy-service-discovery 
  21 │           key: url
  22 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 servicediscovery.yaml:14-39
────────────────────────────────────────
  14 ┌   - name: access-service
  15 │     image: busybox:1.35
  16 │     env:
  17 │     - name: URL
  18 │       valueFrom:
  19 │         configMapKeyRef:
  20 │           name: caddy-service-discovery 
  21 │           key: url
  22 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): pod access-service in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 servicediscovery.yaml:8-10
────────────────────────────────────────
   8 ┌   name: access-service
   9 │   labels:
  10 └     name: access-service
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container access-service in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 servicediscovery.yaml:14-39
────────────────────────────────────────
  14 ┌   - name: access-service
  15 │     image: busybox:1.35
  16 │     env:
  17 │     - name: URL
  18 │       valueFrom:
  19 │         configMapKeyRef:
  20 │           name: caddy-service-discovery 
  21 │           key: url
  22 └     command:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): pod access-service in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 servicediscovery.yaml:12-39
────────────────────────────────────────
  12 ┌   serviceAccountName: test
  13 │   containers:
  14 │   - name: access-service
  15 │     image: busybox:1.35
  16 │     env:
  17 │     - name: URL
  18 │       valueFrom:
  19 │         configMapKeyRef:
  20 └           name: caddy-service-discovery 
  ..   
────────────────────────────────────────



services-deployment.yaml (kubernetes)
=====================================
Tests: 126 (SUCCESSES: 96, FAILURES: 30)
Failures: 30 (UNKNOWN: 0, LOW: 17, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'init-db' of Deployment 'micro-products-deploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 services-deployment.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: init-db
  16 │         image: busybox
  17 │         command:
  18 │         - sh
  19 │         - -c
  20 └         - until nc -z micro-postgres-service 5432; do echo waiting for db; sleep 2;
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'micro-products' of Deployment 'micro-products-deploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 services-deployment.yaml:23-44
────────────────────────────────────────
  23 ┌       - name: micro-products
  24 │         image: bbiegajlo/micro-products:0.5.0
  25 │         env:
  26 │         - name: DATABASE_HOST
  27 │           value: micro-postgres-service
  28 │         - name: DATABASE_PORT
  29 │           value: '5432'
  30 │         - name: DATABASE_USER
  31 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'init-db' of Deployment 'micro-products-deploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 services-deployment.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: init-db
  16 │         image: busybox
  17 │         command:
  18 │         - sh
  19 │         - -c
  20 └         - until nc -z micro-postgres-service 5432; do echo waiting for db; sleep 2;
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'micro-products' of Deployment 'micro-products-deploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 services-deployment.yaml:23-44
────────────────────────────────────────
  23 ┌       - name: micro-products
  24 │         image: bbiegajlo/micro-products:0.5.0
  25 │         env:
  26 │         - name: DATABASE_HOST
  27 │           value: micro-postgres-service
  28 │         - name: DATABASE_PORT
  29 │           value: '5432'
  30 │         - name: DATABASE_USER
  31 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'init-db' of 'deployment' 'micro-products-deploy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 services-deployment.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: init-db
  16 │         image: busybox
  17 │         command:
  18 │         - sh
  19 │         - -c
  20 └         - until nc -z micro-postgres-service 5432; do echo waiting for db; sleep 2;
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'micro-products' of 'deployment' 'micro-products-deploy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 services-deployment.yaml:23-44
────────────────────────────────────────
  23 ┌       - name: micro-products
  24 │         image: bbiegajlo/micro-products:0.5.0
  25 │         env:
  26 │         - name: DATABASE_HOST
  27 │           value: micro-postgres-service
  28 │         - name: DATABASE_PORT
  29 │           value: '5432'
  30 │         - name: DATABASE_USER
  31 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'init-db' of Deployment 'micro-products-deploy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 services-deployment.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: init-db
  16 │         image: busybox
  17 │         command:
  18 │         - sh
  19 │         - -c
  20 └         - until nc -z micro-postgres-service 5432; do echo waiting for db; sleep 2;
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'init-db' of Deployment 'micro-products-deploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 services-deployment.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: init-db
  16 │         image: busybox
  17 │         command:
  18 │         - sh
  19 │         - -c
  20 └         - until nc -z micro-postgres-service 5432; do echo waiting for db; sleep 2;
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'micro-products' of Deployment 'micro-products-deploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 services-deployment.yaml:23-44
────────────────────────────────────────
  23 ┌       - name: micro-products
  24 │         image: bbiegajlo/micro-products:0.5.0
  25 │         env:
  26 │         - name: DATABASE_HOST
  27 │           value: micro-postgres-service
  28 │         - name: DATABASE_PORT
  29 │           value: '5432'
  30 │         - name: DATABASE_USER
  31 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'init-db' of Deployment 'micro-products-deploy' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 services-deployment.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: init-db
  16 │         image: busybox
  17 │         command:
  18 │         - sh
  19 │         - -c
  20 └         - until nc -z micro-postgres-service 5432; do echo waiting for db; sleep 2;
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'init-db' of Deployment 'micro-products-deploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 services-deployment.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: init-db
  16 │         image: busybox
  17 │         command:
  18 │         - sh
  19 │         - -c
  20 └         - until nc -z micro-postgres-service 5432; do echo waiting for db; sleep 2;
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'micro-products' of Deployment 'micro-products-deploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 services-deployment.yaml:23-44
────────────────────────────────────────
  23 ┌       - name: micro-products
  24 │         image: bbiegajlo/micro-products:0.5.0
  25 │         env:
  26 │         - name: DATABASE_HOST
  27 │           value: micro-postgres-service
  28 │         - name: DATABASE_PORT
  29 │           value: '5432'
  30 │         - name: DATABASE_USER
  31 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'init-db' of Deployment 'micro-products-deploy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 services-deployment.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: init-db
  16 │         image: busybox
  17 │         command:
  18 │         - sh
  19 │         - -c
  20 └         - until nc -z micro-postgres-service 5432; do echo waiting for db; sleep 2;
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'init-db' of Deployment 'micro-products-deploy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 services-deployment.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: init-db
  16 │         image: busybox
  17 │         command:
  18 │         - sh
  19 │         - -c
  20 └         - until nc -z micro-postgres-service 5432; do echo waiting for db; sleep 2;
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'init-db' of Deployment 'micro-products-deploy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 services-deployment.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: init-db
  16 │         image: busybox
  17 │         command:
  18 │         - sh
  19 │         - -c
  20 └         - until nc -z micro-postgres-service 5432; do echo waiting for db; sleep 2;
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'init-db' of Deployment 'micro-products-deploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 services-deployment.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: init-db
  16 │         image: busybox
  17 │         command:
  18 │         - sh
  19 │         - -c
  20 └         - until nc -z micro-postgres-service 5432; do echo waiting for db; sleep 2;
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'micro-products' of Deployment 'micro-products-deploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 services-deployment.yaml:23-44
────────────────────────────────────────
  23 ┌       - name: micro-products
  24 │         image: bbiegajlo/micro-products:0.5.0
  25 │         env:
  26 │         - name: DATABASE_HOST
  27 │           value: micro-postgres-service
  28 │         - name: DATABASE_PORT
  29 │           value: '5432'
  30 │         - name: DATABASE_USER
  31 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'init-db' of Deployment 'micro-products-deploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 services-deployment.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: init-db
  16 │         image: busybox
  17 │         command:
  18 │         - sh
  19 │         - -c
  20 └         - until nc -z micro-postgres-service 5432; do echo waiting for db; sleep 2;
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'micro-products' of Deployment 'micro-products-deploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 services-deployment.yaml:23-44
────────────────────────────────────────
  23 ┌       - name: micro-products
  24 │         image: bbiegajlo/micro-products:0.5.0
  25 │         env:
  26 │         - name: DATABASE_HOST
  27 │           value: micro-postgres-service
  28 │         - name: DATABASE_PORT
  29 │           value: '5432'
  30 │         - name: DATABASE_USER
  31 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 services-deployment.yaml:23-44
────────────────────────────────────────
  23 ┌       - name: micro-products
  24 │         image: bbiegajlo/micro-products:0.5.0
  25 │         env:
  26 │         - name: DATABASE_HOST
  27 │           value: micro-postgres-service
  28 │         - name: DATABASE_PORT
  29 │           value: '5432'
  30 │         - name: DATABASE_USER
  31 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 services-deployment.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: init-db
  16 │         image: busybox
  17 │         command:
  18 │         - sh
  19 │         - -c
  20 └         - until nc -z micro-postgres-service 5432; do echo waiting for db; sleep 2;
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "init-db" of deployment "micro-products-deploy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 services-deployment.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: init-db
  16 │         image: busybox
  17 │         command:
  18 │         - sh
  19 │         - -c
  20 └         - until nc -z micro-postgres-service 5432; do echo waiting for db; sleep 2;
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "micro-products" of deployment "micro-products-deploy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 services-deployment.yaml:23-44
────────────────────────────────────────
  23 ┌       - name: micro-products
  24 │         image: bbiegajlo/micro-products:0.5.0
  25 │         env:
  26 │         - name: DATABASE_HOST
  27 │           value: micro-postgres-service
  28 │         - name: DATABASE_PORT
  29 │           value: '5432'
  30 │         - name: DATABASE_USER
  31 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 services-deployment.yaml:23-44
────────────────────────────────────────
  23 ┌       - name: micro-products
  24 │         image: bbiegajlo/micro-products:0.5.0
  25 │         env:
  26 │         - name: DATABASE_HOST
  27 │           value: micro-postgres-service
  28 │         - name: DATABASE_PORT
  29 │           value: '5432'
  30 │         - name: DATABASE_USER
  31 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 services-deployment.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: init-db
  16 │         image: busybox
  17 │         command:
  18 │         - sh
  19 │         - -c
  20 └         - until nc -z micro-postgres-service 5432; do echo waiting for db; sleep 2;
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment micro-products-deploy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 services-deployment.yaml:4
────────────────────────────────────────
   4 [   name: micro-products-deploy
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container micro-products-deploy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 services-deployment.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: init-db
  16 │         image: busybox
  17 │         command:
  18 │         - sh
  19 │         - -c
  20 └         - until nc -z micro-postgres-service 5432; do echo waiting for db; sleep 2;
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container micro-products-deploy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 services-deployment.yaml:23-44
────────────────────────────────────────
  23 ┌       - name: micro-products
  24 │         image: bbiegajlo/micro-products:0.5.0
  25 │         env:
  26 │         - name: DATABASE_HOST
  27 │           value: micro-postgres-service
  28 │         - name: DATABASE_PORT
  29 │           value: '5432'
  30 │         - name: DATABASE_USER
  31 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment micro-products-deploy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 services-deployment.yaml:14-44
────────────────────────────────────────
  14 ┌       initContainers:
  15 │       - name: init-db
  16 │         image: busybox
  17 │         command:
  18 │         - sh
  19 │         - -c
  20 │         - until nc -z micro-postgres-service 5432; do echo waiting for db; sleep 2;
  21 │           done;
  22 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container micro-products in deployment micro-products-deploy (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 services-deployment.yaml:23-44
────────────────────────────────────────
  23 ┌       - name: micro-products
  24 │         image: bbiegajlo/micro-products:0.5.0
  25 │         env:
  26 │         - name: DATABASE_HOST
  27 │           value: micro-postgres-service
  28 │         - name: DATABASE_PORT
  29 │           value: '5432'
  30 │         - name: DATABASE_USER
  31 └           value: postgres
  ..   
────────────────────────────────────────



services-deployment1.yaml (kubernetes)
======================================
Tests: 115 (SUCCESSES: 96, FAILURES: 19)
Failures: 19 (UNKNOWN: 0, LOW: 11, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'services' of Deployment 'services-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 services-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: services
  17 │         image: venugopal87/nginx-multipath-demo:v1 
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'services' of Deployment 'services-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 services-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: services
  17 │         image: venugopal87/nginx-multipath-demo:v1 
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'services' of 'deployment' 'services-deployment' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 services-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: services
  17 │         image: venugopal87/nginx-multipath-demo:v1 
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'services' of Deployment 'services-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 services-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: services
  17 │         image: venugopal87/nginx-multipath-demo:v1 
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'services' of Deployment 'services-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 services-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: services
  17 │         image: venugopal87/nginx-multipath-demo:v1 
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'services' of Deployment 'services-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 services-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: services
  17 │         image: venugopal87/nginx-multipath-demo:v1 
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'services' of Deployment 'services-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 services-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: services
  17 │         image: venugopal87/nginx-multipath-demo:v1 
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'services' of Deployment 'services-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 services-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: services
  17 │         image: venugopal87/nginx-multipath-demo:v1 
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'services' of Deployment 'services-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 services-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: services
  17 │         image: venugopal87/nginx-multipath-demo:v1 
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'services' of Deployment 'services-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 services-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: services
  17 │         image: venugopal87/nginx-multipath-demo:v1 
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'services' of Deployment 'services-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 services-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: services
  17 │         image: venugopal87/nginx-multipath-demo:v1 
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 services-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: services
  17 │         image: venugopal87/nginx-multipath-demo:v1 
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "services" of deployment "services-deployment" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 services-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: services
  17 │         image: venugopal87/nginx-multipath-demo:v1 
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 services-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: services
  17 │         image: venugopal87/nginx-multipath-demo:v1 
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment services-deployment in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 services-deployment1.yaml:4
────────────────────────────────────────
   4 [   name: services-deployment
────────────────────────────────────────


AVD-KSV-0117 (MEDIUM): deployment services-deployment in default namespace should not set spec.template.spec.containers.ports.containerPort to less than 1024
════════════════════════════════════════
The ports which are lower than 1024 receive and transmit various sensitive and privileged data. Allowing containers to use them can bring serious implications.

See https://avd.aquasec.com/misconfig/ksv117
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container services-deployment in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 services-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: services
  17 │         image: venugopal87/nginx-multipath-demo:v1 
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment services-deployment in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 services-deployment1.yaml:15-19
────────────────────────────────────────
  15 ┌       containers:
  16 │       - name: services
  17 │         image: venugopal87/nginx-multipath-demo:v1 
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container services in deployment services-deployment (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 services-deployment1.yaml:16-19
────────────────────────────────────────
  16 ┌       - name: services
  17 │         image: venugopal87/nginx-multipath-demo:v1 
  18 │         ports:
  19 └         - containerPort: 80
────────────────────────────────────────



services-deployment_2.yaml (kubernetes)
=======================================
Tests: 126 (SUCCESSES: 96, FAILURES: 30)
Failures: 30 (UNKNOWN: 0, LOW: 17, MEDIUM: 8, HIGH: 5, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'init-db' of Deployment 'micro-orders-deploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 services-deployment_2.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: init-db
  16 │         image: busybox
  17 │         command:
  18 │         - sh
  19 │         - -c
  20 └         - until nc -z micro-postgres-service 5432; do echo waiting for db; sleep 2;
────────────────────────────────────────


AVD-KSV-0001 (MEDIUM): Container 'micro-orders' of Deployment 'micro-orders-deploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 services-deployment_2.yaml:23-44
────────────────────────────────────────
  23 ┌       - name: micro-orders
  24 │         image: bbiegajlo/micro-orders:0.4.0
  25 │         env:
  26 │         - name: DATABASE_HOST
  27 │           value: micro-postgres-service
  28 │         - name: DATABASE_PORT
  29 │           value: '5432'
  30 │         - name: DATABASE_USER
  31 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'init-db' of Deployment 'micro-orders-deploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 services-deployment_2.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: init-db
  16 │         image: busybox
  17 │         command:
  18 │         - sh
  19 │         - -c
  20 └         - until nc -z micro-postgres-service 5432; do echo waiting for db; sleep 2;
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'micro-orders' of Deployment 'micro-orders-deploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 services-deployment_2.yaml:23-44
────────────────────────────────────────
  23 ┌       - name: micro-orders
  24 │         image: bbiegajlo/micro-orders:0.4.0
  25 │         env:
  26 │         - name: DATABASE_HOST
  27 │           value: micro-postgres-service
  28 │         - name: DATABASE_PORT
  29 │           value: '5432'
  30 │         - name: DATABASE_USER
  31 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'init-db' of 'deployment' 'micro-orders-deploy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 services-deployment_2.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: init-db
  16 │         image: busybox
  17 │         command:
  18 │         - sh
  19 │         - -c
  20 └         - until nc -z micro-postgres-service 5432; do echo waiting for db; sleep 2;
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'micro-orders' of 'deployment' 'micro-orders-deploy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 services-deployment_2.yaml:23-44
────────────────────────────────────────
  23 ┌       - name: micro-orders
  24 │         image: bbiegajlo/micro-orders:0.4.0
  25 │         env:
  26 │         - name: DATABASE_HOST
  27 │           value: micro-postgres-service
  28 │         - name: DATABASE_PORT
  29 │           value: '5432'
  30 │         - name: DATABASE_USER
  31 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'init-db' of Deployment 'micro-orders-deploy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 services-deployment_2.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: init-db
  16 │         image: busybox
  17 │         command:
  18 │         - sh
  19 │         - -c
  20 └         - until nc -z micro-postgres-service 5432; do echo waiting for db; sleep 2;
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'init-db' of Deployment 'micro-orders-deploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 services-deployment_2.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: init-db
  16 │         image: busybox
  17 │         command:
  18 │         - sh
  19 │         - -c
  20 └         - until nc -z micro-postgres-service 5432; do echo waiting for db; sleep 2;
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'micro-orders' of Deployment 'micro-orders-deploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 services-deployment_2.yaml:23-44
────────────────────────────────────────
  23 ┌       - name: micro-orders
  24 │         image: bbiegajlo/micro-orders:0.4.0
  25 │         env:
  26 │         - name: DATABASE_HOST
  27 │           value: micro-postgres-service
  28 │         - name: DATABASE_PORT
  29 │           value: '5432'
  30 │         - name: DATABASE_USER
  31 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'init-db' of Deployment 'micro-orders-deploy' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 services-deployment_2.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: init-db
  16 │         image: busybox
  17 │         command:
  18 │         - sh
  19 │         - -c
  20 └         - until nc -z micro-postgres-service 5432; do echo waiting for db; sleep 2;
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'init-db' of Deployment 'micro-orders-deploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 services-deployment_2.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: init-db
  16 │         image: busybox
  17 │         command:
  18 │         - sh
  19 │         - -c
  20 └         - until nc -z micro-postgres-service 5432; do echo waiting for db; sleep 2;
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'micro-orders' of Deployment 'micro-orders-deploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 services-deployment_2.yaml:23-44
────────────────────────────────────────
  23 ┌       - name: micro-orders
  24 │         image: bbiegajlo/micro-orders:0.4.0
  25 │         env:
  26 │         - name: DATABASE_HOST
  27 │           value: micro-postgres-service
  28 │         - name: DATABASE_PORT
  29 │           value: '5432'
  30 │         - name: DATABASE_USER
  31 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'init-db' of Deployment 'micro-orders-deploy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 services-deployment_2.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: init-db
  16 │         image: busybox
  17 │         command:
  18 │         - sh
  19 │         - -c
  20 └         - until nc -z micro-postgres-service 5432; do echo waiting for db; sleep 2;
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'init-db' of Deployment 'micro-orders-deploy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 services-deployment_2.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: init-db
  16 │         image: busybox
  17 │         command:
  18 │         - sh
  19 │         - -c
  20 └         - until nc -z micro-postgres-service 5432; do echo waiting for db; sleep 2;
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'init-db' of Deployment 'micro-orders-deploy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 services-deployment_2.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: init-db
  16 │         image: busybox
  17 │         command:
  18 │         - sh
  19 │         - -c
  20 └         - until nc -z micro-postgres-service 5432; do echo waiting for db; sleep 2;
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'init-db' of Deployment 'micro-orders-deploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 services-deployment_2.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: init-db
  16 │         image: busybox
  17 │         command:
  18 │         - sh
  19 │         - -c
  20 └         - until nc -z micro-postgres-service 5432; do echo waiting for db; sleep 2;
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'micro-orders' of Deployment 'micro-orders-deploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 services-deployment_2.yaml:23-44
────────────────────────────────────────
  23 ┌       - name: micro-orders
  24 │         image: bbiegajlo/micro-orders:0.4.0
  25 │         env:
  26 │         - name: DATABASE_HOST
  27 │           value: micro-postgres-service
  28 │         - name: DATABASE_PORT
  29 │           value: '5432'
  30 │         - name: DATABASE_USER
  31 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'init-db' of Deployment 'micro-orders-deploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 services-deployment_2.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: init-db
  16 │         image: busybox
  17 │         command:
  18 │         - sh
  19 │         - -c
  20 └         - until nc -z micro-postgres-service 5432; do echo waiting for db; sleep 2;
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'micro-orders' of Deployment 'micro-orders-deploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 services-deployment_2.yaml:23-44
────────────────────────────────────────
  23 ┌       - name: micro-orders
  24 │         image: bbiegajlo/micro-orders:0.4.0
  25 │         env:
  26 │         - name: DATABASE_HOST
  27 │           value: micro-postgres-service
  28 │         - name: DATABASE_PORT
  29 │           value: '5432'
  30 │         - name: DATABASE_USER
  31 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 services-deployment_2.yaml:23-44
────────────────────────────────────────
  23 ┌       - name: micro-orders
  24 │         image: bbiegajlo/micro-orders:0.4.0
  25 │         env:
  26 │         - name: DATABASE_HOST
  27 │           value: micro-postgres-service
  28 │         - name: DATABASE_PORT
  29 │           value: '5432'
  30 │         - name: DATABASE_USER
  31 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 services-deployment_2.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: init-db
  16 │         image: busybox
  17 │         command:
  18 │         - sh
  19 │         - -c
  20 └         - until nc -z micro-postgres-service 5432; do echo waiting for db; sleep 2;
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "init-db" of deployment "micro-orders-deploy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 services-deployment_2.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: init-db
  16 │         image: busybox
  17 │         command:
  18 │         - sh
  19 │         - -c
  20 └         - until nc -z micro-postgres-service 5432; do echo waiting for db; sleep 2;
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "micro-orders" of deployment "micro-orders-deploy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 services-deployment_2.yaml:23-44
────────────────────────────────────────
  23 ┌       - name: micro-orders
  24 │         image: bbiegajlo/micro-orders:0.4.0
  25 │         env:
  26 │         - name: DATABASE_HOST
  27 │           value: micro-postgres-service
  28 │         - name: DATABASE_PORT
  29 │           value: '5432'
  30 │         - name: DATABASE_USER
  31 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 services-deployment_2.yaml:23-44
────────────────────────────────────────
  23 ┌       - name: micro-orders
  24 │         image: bbiegajlo/micro-orders:0.4.0
  25 │         env:
  26 │         - name: DATABASE_HOST
  27 │           value: micro-postgres-service
  28 │         - name: DATABASE_PORT
  29 │           value: '5432'
  30 │         - name: DATABASE_USER
  31 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 services-deployment_2.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: init-db
  16 │         image: busybox
  17 │         command:
  18 │         - sh
  19 │         - -c
  20 └         - until nc -z micro-postgres-service 5432; do echo waiting for db; sleep 2;
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment micro-orders-deploy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 services-deployment_2.yaml:4
────────────────────────────────────────
   4 [   name: micro-orders-deploy
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container micro-orders-deploy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 services-deployment_2.yaml:15-20
────────────────────────────────────────
  15 ┌       - name: init-db
  16 │         image: busybox
  17 │         command:
  18 │         - sh
  19 │         - -c
  20 └         - until nc -z micro-postgres-service 5432; do echo waiting for db; sleep 2;
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container micro-orders-deploy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 services-deployment_2.yaml:23-44
────────────────────────────────────────
  23 ┌       - name: micro-orders
  24 │         image: bbiegajlo/micro-orders:0.4.0
  25 │         env:
  26 │         - name: DATABASE_HOST
  27 │           value: micro-postgres-service
  28 │         - name: DATABASE_PORT
  29 │           value: '5432'
  30 │         - name: DATABASE_USER
  31 └           value: postgres
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment micro-orders-deploy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 services-deployment_2.yaml:14-44
────────────────────────────────────────
  14 ┌       initContainers:
  15 │       - name: init-db
  16 │         image: busybox
  17 │         command:
  18 │         - sh
  19 │         - -c
  20 │         - until nc -z micro-postgres-service 5432; do echo waiting for db; sleep 2;
  21 │           done;
  22 └       containers:
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container micro-orders in deployment micro-orders-deploy (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 services-deployment_2.yaml:23-44
────────────────────────────────────────
  23 ┌       - name: micro-orders
  24 │         image: bbiegajlo/micro-orders:0.4.0
  25 │         env:
  26 │         - name: DATABASE_HOST
  27 │           value: micro-postgres-service
  28 │         - name: DATABASE_PORT
  29 │           value: '5432'
  30 │         - name: DATABASE_USER
  31 └           value: postgres
  ..   
────────────────────────────────────────



services253.yaml (kubernetes)
=============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'mabbox' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



services253_1.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'tplinkwifi' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



services253_2.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'rocky' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



services253_3.yaml (kubernetes)
===============================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0108 (HIGH): Service 'cluster' in 'default' namespace should not set external IPs or external Name
════════════════════════════════════════
Services with external IP addresses allows direct access from the internet and might expose risk for CVE-2020-8554

See https://avd.aquasec.com/misconfig/avd-ksv-0108
────────────────────────────────────────



services310_1.yaml (kubernetes)
===============================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 11, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'servicebucket-app' of Deployment 'servicebucket-deploy' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 services310_1.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: servicebucket-app
  19 │         image: rosazuccara/microservice-services3:deploy-v2
  20 │         ports:
  21 │         - containerPort: 5002
  22 │         volumeMounts:
  23 │         - name: vol-config-services3
  24 │           mountPath: /ServiceS3/config_serviceS3.cfg
  25 │           subPath: config_serviceS3.cfg
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'servicebucket-app' of Deployment 'servicebucket-deploy' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 services310_1.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: servicebucket-app
  19 │         image: rosazuccara/microservice-services3:deploy-v2
  20 │         ports:
  21 │         - containerPort: 5002
  22 │         volumeMounts:
  23 │         - name: vol-config-services3
  24 │           mountPath: /ServiceS3/config_serviceS3.cfg
  25 │           subPath: config_serviceS3.cfg
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'servicebucket-app' of 'deployment' 'servicebucket-deploy' in 'default' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 services310_1.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: servicebucket-app
  19 │         image: rosazuccara/microservice-services3:deploy-v2
  20 │         ports:
  21 │         - containerPort: 5002
  22 │         volumeMounts:
  23 │         - name: vol-config-services3
  24 │           mountPath: /ServiceS3/config_serviceS3.cfg
  25 │           subPath: config_serviceS3.cfg
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'servicebucket-app' of Deployment 'servicebucket-deploy' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 services310_1.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: servicebucket-app
  19 │         image: rosazuccara/microservice-services3:deploy-v2
  20 │         ports:
  21 │         - containerPort: 5002
  22 │         volumeMounts:
  23 │         - name: vol-config-services3
  24 │           mountPath: /ServiceS3/config_serviceS3.cfg
  25 │           subPath: config_serviceS3.cfg
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'servicebucket-app' of Deployment 'servicebucket-deploy' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 services310_1.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: servicebucket-app
  19 │         image: rosazuccara/microservice-services3:deploy-v2
  20 │         ports:
  21 │         - containerPort: 5002
  22 │         volumeMounts:
  23 │         - name: vol-config-services3
  24 │           mountPath: /ServiceS3/config_serviceS3.cfg
  25 │           subPath: config_serviceS3.cfg
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'servicebucket-app' of Deployment 'servicebucket-deploy' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 services310_1.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: servicebucket-app
  19 │         image: rosazuccara/microservice-services3:deploy-v2
  20 │         ports:
  21 │         - containerPort: 5002
  22 │         volumeMounts:
  23 │         - name: vol-config-services3
  24 │           mountPath: /ServiceS3/config_serviceS3.cfg
  25 │           subPath: config_serviceS3.cfg
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'servicebucket-app' of Deployment 'servicebucket-deploy' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 services310_1.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: servicebucket-app
  19 │         image: rosazuccara/microservice-services3:deploy-v2
  20 │         ports:
  21 │         - containerPort: 5002
  22 │         volumeMounts:
  23 │         - name: vol-config-services3
  24 │           mountPath: /ServiceS3/config_serviceS3.cfg
  25 │           subPath: config_serviceS3.cfg
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'servicebucket-app' of Deployment 'servicebucket-deploy' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 services310_1.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: servicebucket-app
  19 │         image: rosazuccara/microservice-services3:deploy-v2
  20 │         ports:
  21 │         - containerPort: 5002
  22 │         volumeMounts:
  23 │         - name: vol-config-services3
  24 │           mountPath: /ServiceS3/config_serviceS3.cfg
  25 │           subPath: config_serviceS3.cfg
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'servicebucket-app' of Deployment 'servicebucket-deploy' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 services310_1.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: servicebucket-app
  19 │         image: rosazuccara/microservice-services3:deploy-v2
  20 │         ports:
  21 │         - containerPort: 5002
  22 │         volumeMounts:
  23 │         - name: vol-config-services3
  24 │           mountPath: /ServiceS3/config_serviceS3.cfg
  25 │           subPath: config_serviceS3.cfg
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'servicebucket-app' of Deployment 'servicebucket-deploy' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 services310_1.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: servicebucket-app
  19 │         image: rosazuccara/microservice-services3:deploy-v2
  20 │         ports:
  21 │         - containerPort: 5002
  22 │         volumeMounts:
  23 │         - name: vol-config-services3
  24 │           mountPath: /ServiceS3/config_serviceS3.cfg
  25 │           subPath: config_serviceS3.cfg
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'servicebucket-app' of Deployment 'servicebucket-deploy' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 services310_1.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: servicebucket-app
  19 │         image: rosazuccara/microservice-services3:deploy-v2
  20 │         ports:
  21 │         - containerPort: 5002
  22 │         volumeMounts:
  23 │         - name: vol-config-services3
  24 │           mountPath: /ServiceS3/config_serviceS3.cfg
  25 │           subPath: config_serviceS3.cfg
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 services310_1.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: servicebucket-app
  19 │         image: rosazuccara/microservice-services3:deploy-v2
  20 │         ports:
  21 │         - containerPort: 5002
  22 │         volumeMounts:
  23 │         - name: vol-config-services3
  24 │           mountPath: /ServiceS3/config_serviceS3.cfg
  25 │           subPath: config_serviceS3.cfg
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "servicebucket-app" of deployment "servicebucket-deploy" in "default" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 services310_1.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: servicebucket-app
  19 │         image: rosazuccara/microservice-services3:deploy-v2
  20 │         ports:
  21 │         - containerPort: 5002
  22 │         volumeMounts:
  23 │         - name: vol-config-services3
  24 │           mountPath: /ServiceS3/config_serviceS3.cfg
  25 │           subPath: config_serviceS3.cfg
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 services310_1.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: servicebucket-app
  19 │         image: rosazuccara/microservice-services3:deploy-v2
  20 │         ports:
  21 │         - containerPort: 5002
  22 │         volumeMounts:
  23 │         - name: vol-config-services3
  24 │           mountPath: /ServiceS3/config_serviceS3.cfg
  25 │           subPath: config_serviceS3.cfg
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0110 (LOW): deployment servicebucket-deploy in default namespace should set metadata.namespace to a non-default namespace
════════════════════════════════════════
Checks whether a workload is running in the default namespace.

See https://avd.aquasec.com/misconfig/ksv110
────────────────────────────────────────
 services310_1.yaml:4-6
────────────────────────────────────────
   4 ┌   name: servicebucket-deploy
   5 │   labels:
   6 └     app: servicebucket
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container servicebucket-deploy in default namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 services310_1.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: servicebucket-app
  19 │         image: rosazuccara/microservice-services3:deploy-v2
  20 │         ports:
  21 │         - containerPort: 5002
  22 │         volumeMounts:
  23 │         - name: vol-config-services3
  24 │           mountPath: /ServiceS3/config_serviceS3.cfg
  25 │           subPath: config_serviceS3.cfg
  26 └         env:
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment servicebucket-deploy in default namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 services310_1.yaml:17-53
────────────────────────────────────────
  17 ┌       containers:
  18 │       - name: servicebucket-app
  19 │         image: rosazuccara/microservice-services3:deploy-v2
  20 │         ports:
  21 │         - containerPort: 5002
  22 │         volumeMounts:
  23 │         - name: vol-config-services3
  24 │           mountPath: /ServiceS3/config_serviceS3.cfg
  25 └           subPath: config_serviceS3.cfg
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container servicebucket-app in deployment servicebucket-deploy (namespace: default) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 services310_1.yaml:18-49
────────────────────────────────────────
  18 ┌       - name: servicebucket-app
  19 │         image: rosazuccara/microservice-services3:deploy-v2
  20 │         ports:
  21 │         - containerPort: 5002
  22 │         volumeMounts:
  23 │         - name: vol-config-services3
  24 │           mountPath: /ServiceS3/config_serviceS3.cfg
  25 │           subPath: config_serviceS3.cfg
  26 └         env:
  ..   
────────────────────────────────────────



services_editor_role.yaml (kubernetes)
======================================
Tests: 114 (SUCCESSES: 113, FAILURES: 1)
Failures: 1 (UNKNOWN: 0, LOW: 0, MEDIUM: 0, HIGH: 1, CRITICAL: 0)

AVD-KSV-0056 (HIGH): ClusterRole 'services-editor-role' should not have access to resources ["services", "endpoints", "endpointslices", "networkpolicies", "ingresses"] for verbs ["create", "update", "patch", "delete", "deletecollection", "impersonate", "*"]
════════════════════════════════════════
The ability to control which pods get service traffic directed to them allows for interception attacks. Controlling network policy allows for bypassing lateral movement restrictions.

See https://avd.aquasec.com/misconfig/ksv056
────────────────────────────────────────
 services_editor_role.yaml:10-21
────────────────────────────────────────
  10 ┌ - apiGroups:
  11 │   - pagerduty.dutycontroller.io
  12 │   resources:
  13 │   - services
  14 │   verbs:
  15 │   - create
  16 │   - delete
  17 │   - get
  18 └   - list
  ..   
────────────────────────────────────────



servicex-deploy_3.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'servicex' of Deployment 'servicex' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 servicex-deploy_3.yaml:21-30
────────────────────────────────────────
  21 ┌       - name: servicex
  22 │         image: alikantunali/s2s:latest
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         volumeMounts:
  27 │         - name: config-volume
  28 │           mountPath: /app/kpf/enable-config
  29 │         - name: cleverbit-secret
  30 └           mountPath: /app/kpf/secret
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'servicex' of Deployment 'servicex' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 servicex-deploy_3.yaml:21-30
────────────────────────────────────────
  21 ┌       - name: servicex
  22 │         image: alikantunali/s2s:latest
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         volumeMounts:
  27 │         - name: config-volume
  28 │           mountPath: /app/kpf/enable-config
  29 │         - name: cleverbit-secret
  30 └           mountPath: /app/kpf/secret
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'servicex' of 'deployment' 'servicex' in 'servicex' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 servicex-deploy_3.yaml:21-30
────────────────────────────────────────
  21 ┌       - name: servicex
  22 │         image: alikantunali/s2s:latest
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         volumeMounts:
  27 │         - name: config-volume
  28 │           mountPath: /app/kpf/enable-config
  29 │         - name: cleverbit-secret
  30 └           mountPath: /app/kpf/secret
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'servicex' of Deployment 'servicex' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 servicex-deploy_3.yaml:21-30
────────────────────────────────────────
  21 ┌       - name: servicex
  22 │         image: alikantunali/s2s:latest
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         volumeMounts:
  27 │         - name: config-volume
  28 │           mountPath: /app/kpf/enable-config
  29 │         - name: cleverbit-secret
  30 └           mountPath: /app/kpf/secret
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'servicex' of Deployment 'servicex' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 servicex-deploy_3.yaml:21-30
────────────────────────────────────────
  21 ┌       - name: servicex
  22 │         image: alikantunali/s2s:latest
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         volumeMounts:
  27 │         - name: config-volume
  28 │           mountPath: /app/kpf/enable-config
  29 │         - name: cleverbit-secret
  30 └           mountPath: /app/kpf/secret
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'servicex' of Deployment 'servicex' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 servicex-deploy_3.yaml:21-30
────────────────────────────────────────
  21 ┌       - name: servicex
  22 │         image: alikantunali/s2s:latest
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         volumeMounts:
  27 │         - name: config-volume
  28 │           mountPath: /app/kpf/enable-config
  29 │         - name: cleverbit-secret
  30 └           mountPath: /app/kpf/secret
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'servicex' of Deployment 'servicex' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 servicex-deploy_3.yaml:21-30
────────────────────────────────────────
  21 ┌       - name: servicex
  22 │         image: alikantunali/s2s:latest
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         volumeMounts:
  27 │         - name: config-volume
  28 │           mountPath: /app/kpf/enable-config
  29 │         - name: cleverbit-secret
  30 └           mountPath: /app/kpf/secret
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'servicex' of Deployment 'servicex' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 servicex-deploy_3.yaml:21-30
────────────────────────────────────────
  21 ┌       - name: servicex
  22 │         image: alikantunali/s2s:latest
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         volumeMounts:
  27 │         - name: config-volume
  28 │           mountPath: /app/kpf/enable-config
  29 │         - name: cleverbit-secret
  30 └           mountPath: /app/kpf/secret
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'servicex' of Deployment 'servicex' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 servicex-deploy_3.yaml:21-30
────────────────────────────────────────
  21 ┌       - name: servicex
  22 │         image: alikantunali/s2s:latest
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         volumeMounts:
  27 │         - name: config-volume
  28 │           mountPath: /app/kpf/enable-config
  29 │         - name: cleverbit-secret
  30 └           mountPath: /app/kpf/secret
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'servicex' of Deployment 'servicex' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 servicex-deploy_3.yaml:21-30
────────────────────────────────────────
  21 ┌       - name: servicex
  22 │         image: alikantunali/s2s:latest
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         volumeMounts:
  27 │         - name: config-volume
  28 │           mountPath: /app/kpf/enable-config
  29 │         - name: cleverbit-secret
  30 └           mountPath: /app/kpf/secret
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'servicex' of Deployment 'servicex' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 servicex-deploy_3.yaml:21-30
────────────────────────────────────────
  21 ┌       - name: servicex
  22 │         image: alikantunali/s2s:latest
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         volumeMounts:
  27 │         - name: config-volume
  28 │           mountPath: /app/kpf/enable-config
  29 │         - name: cleverbit-secret
  30 └           mountPath: /app/kpf/secret
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'servicex' of Deployment 'servicex' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 servicex-deploy_3.yaml:21-30
────────────────────────────────────────
  21 ┌       - name: servicex
  22 │         image: alikantunali/s2s:latest
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         volumeMounts:
  27 │         - name: config-volume
  28 │           mountPath: /app/kpf/enable-config
  29 │         - name: cleverbit-secret
  30 └           mountPath: /app/kpf/secret
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 servicex-deploy_3.yaml:21-30
────────────────────────────────────────
  21 ┌       - name: servicex
  22 │         image: alikantunali/s2s:latest
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         volumeMounts:
  27 │         - name: config-volume
  28 │           mountPath: /app/kpf/enable-config
  29 │         - name: cleverbit-secret
  30 └           mountPath: /app/kpf/secret
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "servicex" of deployment "servicex" in "servicex" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 servicex-deploy_3.yaml:21-30
────────────────────────────────────────
  21 ┌       - name: servicex
  22 │         image: alikantunali/s2s:latest
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         volumeMounts:
  27 │         - name: config-volume
  28 │           mountPath: /app/kpf/enable-config
  29 │         - name: cleverbit-secret
  30 └           mountPath: /app/kpf/secret
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 servicex-deploy_3.yaml:21-30
────────────────────────────────────────
  21 ┌       - name: servicex
  22 │         image: alikantunali/s2s:latest
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         volumeMounts:
  27 │         - name: config-volume
  28 │           mountPath: /app/kpf/enable-config
  29 │         - name: cleverbit-secret
  30 └           mountPath: /app/kpf/secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container servicex in servicex namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 servicex-deploy_3.yaml:21-30
────────────────────────────────────────
  21 ┌       - name: servicex
  22 │         image: alikantunali/s2s:latest
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         volumeMounts:
  27 │         - name: config-volume
  28 │           mountPath: /app/kpf/enable-config
  29 │         - name: cleverbit-secret
  30 └           mountPath: /app/kpf/secret
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment servicex in servicex namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 servicex-deploy_3.yaml:19-40
────────────────────────────────────────
  19 ┌       serviceAccountName: servicex
  20 │       containers:
  21 │       - name: servicex
  22 │         image: alikantunali/s2s:latest
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         volumeMounts:
  27 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container servicex in deployment servicex (namespace: servicex) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 servicex-deploy_3.yaml:21-30
────────────────────────────────────────
  21 ┌       - name: servicex
  22 │         image: alikantunali/s2s:latest
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         volumeMounts:
  27 │         - name: config-volume
  28 │           mountPath: /app/kpf/enable-config
  29 │         - name: cleverbit-secret
  30 └           mountPath: /app/kpf/secret
────────────────────────────────────────



servicex-deployment.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'servicex' of Deployment 'servicex-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 servicex-deployment.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: servicex
  18 │         image: s2s
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: secret-volume
  23 │           mountPath: /app/kpf/secret
  24 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'servicex' of Deployment 'servicex-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 servicex-deployment.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: servicex
  18 │         image: s2s
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: secret-volume
  23 │           mountPath: /app/kpf/secret
  24 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'servicex' of 'deployment' 'servicex-deployment' in 'servicex' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 servicex-deployment.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: servicex
  18 │         image: s2s
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: secret-volume
  23 │           mountPath: /app/kpf/secret
  24 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'servicex' of Deployment 'servicex-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 servicex-deployment.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: servicex
  18 │         image: s2s
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: secret-volume
  23 │           mountPath: /app/kpf/secret
  24 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'servicex' of Deployment 'servicex-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 servicex-deployment.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: servicex
  18 │         image: s2s
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: secret-volume
  23 │           mountPath: /app/kpf/secret
  24 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'servicex' of Deployment 'servicex-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 servicex-deployment.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: servicex
  18 │         image: s2s
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: secret-volume
  23 │           mountPath: /app/kpf/secret
  24 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'servicex' of Deployment 'servicex-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 servicex-deployment.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: servicex
  18 │         image: s2s
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: secret-volume
  23 │           mountPath: /app/kpf/secret
  24 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'servicex' of Deployment 'servicex-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 servicex-deployment.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: servicex
  18 │         image: s2s
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: secret-volume
  23 │           mountPath: /app/kpf/secret
  24 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'servicex' of Deployment 'servicex-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 servicex-deployment.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: servicex
  18 │         image: s2s
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: secret-volume
  23 │           mountPath: /app/kpf/secret
  24 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'servicex' of Deployment 'servicex-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 servicex-deployment.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: servicex
  18 │         image: s2s
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: secret-volume
  23 │           mountPath: /app/kpf/secret
  24 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'servicex' of Deployment 'servicex-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 servicex-deployment.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: servicex
  18 │         image: s2s
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: secret-volume
  23 │           mountPath: /app/kpf/secret
  24 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'servicex' of Deployment 'servicex-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 servicex-deployment.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: servicex
  18 │         image: s2s
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: secret-volume
  23 │           mountPath: /app/kpf/secret
  24 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 servicex-deployment.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: servicex
  18 │         image: s2s
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: secret-volume
  23 │           mountPath: /app/kpf/secret
  24 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "servicex" of deployment "servicex-deployment" in "servicex" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 servicex-deployment.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: servicex
  18 │         image: s2s
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: secret-volume
  23 │           mountPath: /app/kpf/secret
  24 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 servicex-deployment.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: servicex
  18 │         image: s2s
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: secret-volume
  23 │           mountPath: /app/kpf/secret
  24 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container servicex-deployment in servicex namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 servicex-deployment.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: servicex
  18 │         image: s2s
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: secret-volume
  23 │           mountPath: /app/kpf/secret
  24 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment servicex-deployment in servicex namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 servicex-deployment.yaml:16-28
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: servicex
  18 │         image: s2s
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: secret-volume
  23 │           mountPath: /app/kpf/secret
  24 └           readOnly: true
  ..   
────────────────────────────────────────



servicex3_3.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'servicex' of Deployment 'servicex' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 servicex3_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: servicex
  18 │         image: 4719/s2s:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: url-secret
  23 │           mountPath: /app/kpf/secret
  24 │           readOnly: true
  25 └         - name: enable-config
  ..   
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'servicex' of Deployment 'servicex' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 servicex3_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: servicex
  18 │         image: 4719/s2s:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: url-secret
  23 │           mountPath: /app/kpf/secret
  24 │           readOnly: true
  25 └         - name: enable-config
  ..   
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'servicex' of 'deployment' 'servicex' in 'servicex' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 servicex3_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: servicex
  18 │         image: 4719/s2s:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: url-secret
  23 │           mountPath: /app/kpf/secret
  24 │           readOnly: true
  25 └         - name: enable-config
  ..   
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'servicex' of Deployment 'servicex' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 servicex3_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: servicex
  18 │         image: 4719/s2s:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: url-secret
  23 │           mountPath: /app/kpf/secret
  24 │           readOnly: true
  25 └         - name: enable-config
  ..   
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'servicex' of Deployment 'servicex' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 servicex3_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: servicex
  18 │         image: 4719/s2s:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: url-secret
  23 │           mountPath: /app/kpf/secret
  24 │           readOnly: true
  25 └         - name: enable-config
  ..   
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'servicex' of Deployment 'servicex' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 servicex3_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: servicex
  18 │         image: 4719/s2s:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: url-secret
  23 │           mountPath: /app/kpf/secret
  24 │           readOnly: true
  25 └         - name: enable-config
  ..   
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'servicex' of Deployment 'servicex' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 servicex3_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: servicex
  18 │         image: 4719/s2s:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: url-secret
  23 │           mountPath: /app/kpf/secret
  24 │           readOnly: true
  25 └         - name: enable-config
  ..   
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'servicex' of Deployment 'servicex' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 servicex3_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: servicex
  18 │         image: 4719/s2s:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: url-secret
  23 │           mountPath: /app/kpf/secret
  24 │           readOnly: true
  25 └         - name: enable-config
  ..   
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'servicex' of Deployment 'servicex' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 servicex3_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: servicex
  18 │         image: 4719/s2s:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: url-secret
  23 │           mountPath: /app/kpf/secret
  24 │           readOnly: true
  25 └         - name: enable-config
  ..   
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'servicex' of Deployment 'servicex' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 servicex3_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: servicex
  18 │         image: 4719/s2s:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: url-secret
  23 │           mountPath: /app/kpf/secret
  24 │           readOnly: true
  25 └         - name: enable-config
  ..   
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'servicex' of Deployment 'servicex' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 servicex3_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: servicex
  18 │         image: 4719/s2s:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: url-secret
  23 │           mountPath: /app/kpf/secret
  24 │           readOnly: true
  25 └         - name: enable-config
  ..   
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 servicex3_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: servicex
  18 │         image: 4719/s2s:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: url-secret
  23 │           mountPath: /app/kpf/secret
  24 │           readOnly: true
  25 └         - name: enable-config
  ..   
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "servicex" of deployment "servicex" in "servicex" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 servicex3_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: servicex
  18 │         image: 4719/s2s:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: url-secret
  23 │           mountPath: /app/kpf/secret
  24 │           readOnly: true
  25 └         - name: enable-config
  ..   
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 servicex3_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: servicex
  18 │         image: 4719/s2s:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: url-secret
  23 │           mountPath: /app/kpf/secret
  24 │           readOnly: true
  25 └         - name: enable-config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container servicex in servicex namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 servicex3_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: servicex
  18 │         image: 4719/s2s:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: url-secret
  23 │           mountPath: /app/kpf/secret
  24 │           readOnly: true
  25 └         - name: enable-config
  ..   
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment servicex in servicex namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 servicex3_3.yaml:16-34
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: servicex
  18 │         image: 4719/s2s:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: url-secret
  23 │           mountPath: /app/kpf/secret
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container servicex in deployment servicex (namespace: servicex) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 servicex3_3.yaml:17-27
────────────────────────────────────────
  17 ┌       - name: servicex
  18 │         image: 4719/s2s:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: url-secret
  23 │           mountPath: /app/kpf/secret
  24 │           readOnly: true
  25 └         - name: enable-config
  ..   
────────────────────────────────────────



servicey-deploy_3.yaml (kubernetes)
===================================
Tests: 115 (SUCCESSES: 97, FAILURES: 18)
Failures: 18 (UNKNOWN: 0, LOW: 10, MEDIUM: 5, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'servicey' of Deployment 'servicey' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 servicey-deploy_3.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: servicey
  22 │         image: alikantunali/s2s:latest
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         volumeMounts:
  27 │         - name: config-volume
  28 │           mountPath: /app/kpf/enable-config
  29 └           readyOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'servicey' of Deployment 'servicey' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 servicey-deploy_3.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: servicey
  22 │         image: alikantunali/s2s:latest
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         volumeMounts:
  27 │         - name: config-volume
  28 │           mountPath: /app/kpf/enable-config
  29 └           readyOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'servicey' of 'deployment' 'servicey' in 'servicey' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 servicey-deploy_3.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: servicey
  22 │         image: alikantunali/s2s:latest
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         volumeMounts:
  27 │         - name: config-volume
  28 │           mountPath: /app/kpf/enable-config
  29 └           readyOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'servicey' of Deployment 'servicey' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 servicey-deploy_3.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: servicey
  22 │         image: alikantunali/s2s:latest
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         volumeMounts:
  27 │         - name: config-volume
  28 │           mountPath: /app/kpf/enable-config
  29 └           readyOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'servicey' of Deployment 'servicey' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 servicey-deploy_3.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: servicey
  22 │         image: alikantunali/s2s:latest
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         volumeMounts:
  27 │         - name: config-volume
  28 │           mountPath: /app/kpf/enable-config
  29 └           readyOnly: true
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'servicey' of Deployment 'servicey' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 servicey-deploy_3.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: servicey
  22 │         image: alikantunali/s2s:latest
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         volumeMounts:
  27 │         - name: config-volume
  28 │           mountPath: /app/kpf/enable-config
  29 └           readyOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'servicey' of Deployment 'servicey' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 servicey-deploy_3.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: servicey
  22 │         image: alikantunali/s2s:latest
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         volumeMounts:
  27 │         - name: config-volume
  28 │           mountPath: /app/kpf/enable-config
  29 └           readyOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'servicey' of Deployment 'servicey' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 servicey-deploy_3.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: servicey
  22 │         image: alikantunali/s2s:latest
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         volumeMounts:
  27 │         - name: config-volume
  28 │           mountPath: /app/kpf/enable-config
  29 └           readyOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'servicey' of Deployment 'servicey' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 servicey-deploy_3.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: servicey
  22 │         image: alikantunali/s2s:latest
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         volumeMounts:
  27 │         - name: config-volume
  28 │           mountPath: /app/kpf/enable-config
  29 └           readyOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'servicey' of Deployment 'servicey' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 servicey-deploy_3.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: servicey
  22 │         image: alikantunali/s2s:latest
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         volumeMounts:
  27 │         - name: config-volume
  28 │           mountPath: /app/kpf/enable-config
  29 └           readyOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'servicey' of Deployment 'servicey' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 servicey-deploy_3.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: servicey
  22 │         image: alikantunali/s2s:latest
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         volumeMounts:
  27 │         - name: config-volume
  28 │           mountPath: /app/kpf/enable-config
  29 └           readyOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'servicey' of Deployment 'servicey' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 servicey-deploy_3.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: servicey
  22 │         image: alikantunali/s2s:latest
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         volumeMounts:
  27 │         - name: config-volume
  28 │           mountPath: /app/kpf/enable-config
  29 └           readyOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 servicey-deploy_3.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: servicey
  22 │         image: alikantunali/s2s:latest
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         volumeMounts:
  27 │         - name: config-volume
  28 │           mountPath: /app/kpf/enable-config
  29 └           readyOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "servicey" of deployment "servicey" in "servicey" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 servicey-deploy_3.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: servicey
  22 │         image: alikantunali/s2s:latest
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         volumeMounts:
  27 │         - name: config-volume
  28 │           mountPath: /app/kpf/enable-config
  29 └           readyOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 servicey-deploy_3.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: servicey
  22 │         image: alikantunali/s2s:latest
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         volumeMounts:
  27 │         - name: config-volume
  28 │           mountPath: /app/kpf/enable-config
  29 └           readyOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container servicey in servicey namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 servicey-deploy_3.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: servicey
  22 │         image: alikantunali/s2s:latest
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         volumeMounts:
  27 │         - name: config-volume
  28 │           mountPath: /app/kpf/enable-config
  29 └           readyOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment servicey in servicey namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 servicey-deploy_3.yaml:19-36
────────────────────────────────────────
  19 ┌       serviceAccountName: servicey
  20 │       containers:
  21 │       - name: servicey
  22 │         image: alikantunali/s2s:latest
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         volumeMounts:
  27 └         - name: config-volume
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container servicey in deployment servicey (namespace: servicey) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 servicey-deploy_3.yaml:21-29
────────────────────────────────────────
  21 ┌       - name: servicey
  22 │         image: alikantunali/s2s:latest
  23 │         imagePullPolicy: IfNotPresent
  24 │         ports:
  25 │         - containerPort: 8080
  26 │         volumeMounts:
  27 │         - name: config-volume
  28 │           mountPath: /app/kpf/enable-config
  29 └           readyOnly: true
────────────────────────────────────────



servicey-deployment.yaml (kubernetes)
=====================================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'servicey' of Deployment 'servicey-deployment' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 servicey-deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: servicey
  18 │         image: s2s
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'servicey' of Deployment 'servicey-deployment' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 servicey-deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: servicey
  18 │         image: s2s
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'servicey' of 'deployment' 'servicey-deployment' in 'servicey' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 servicey-deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: servicey
  18 │         image: s2s
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'servicey' of Deployment 'servicey-deployment' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 servicey-deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: servicey
  18 │         image: s2s
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'servicey' of Deployment 'servicey-deployment' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 servicey-deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: servicey
  18 │         image: s2s
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0013 (MEDIUM): Container 'servicey' of Deployment 'servicey-deployment' should specify an image tag
════════════════════════════════════════
It is best to avoid using the ':latest' image tag when deploying containers in production. Doing so makes it hard to track which version of the image is running, and hard to roll back the version.

See https://avd.aquasec.com/misconfig/ksv013
────────────────────────────────────────
 servicey-deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: servicey
  18 │         image: s2s
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'servicey' of Deployment 'servicey-deployment' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 servicey-deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: servicey
  18 │         image: s2s
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'servicey' of Deployment 'servicey-deployment' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 servicey-deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: servicey
  18 │         image: s2s
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'servicey' of Deployment 'servicey-deployment' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 servicey-deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: servicey
  18 │         image: s2s
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'servicey' of Deployment 'servicey-deployment' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 servicey-deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: servicey
  18 │         image: s2s
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'servicey' of Deployment 'servicey-deployment' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 servicey-deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: servicey
  18 │         image: s2s
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'servicey' of Deployment 'servicey-deployment' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 servicey-deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: servicey
  18 │         image: s2s
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 servicey-deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: servicey
  18 │         image: s2s
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "servicey" of deployment "servicey-deployment" in "servicey" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 servicey-deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: servicey
  18 │         image: s2s
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 servicey-deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: servicey
  18 │         image: s2s
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container servicey-deployment in servicey namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 servicey-deployment.yaml:17-20
────────────────────────────────────────
  17 ┌       - name: servicey
  18 │         image: s2s
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment servicey-deployment in servicey namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 servicey-deployment.yaml:16-20
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: servicey
  18 │         image: s2s
  19 │         ports:
  20 └         - containerPort: 8080
────────────────────────────────────────



servicey3_2.yaml (kubernetes)
=============================
Tests: 115 (SUCCESSES: 98, FAILURES: 17)
Failures: 17 (UNKNOWN: 0, LOW: 10, MEDIUM: 4, HIGH: 3, CRITICAL: 0)

AVD-KSV-0001 (MEDIUM): Container 'servicey' of Deployment 'servicey' should set 'securityContext.allowPrivilegeEscalation' to false
════════════════════════════════════════
A program inside the container can elevate its own privileges and run as root, which might give the program control over the container and node.

See https://avd.aquasec.com/misconfig/ksv001
────────────────────────────────────────
 servicey3_2.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: servicey
  18 │         image: 4719/s2s:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: enable-config
  23 │           mountPath: /app/kpf/enable-config
  24 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0003 (LOW): Container 'servicey' of Deployment 'servicey' should add 'ALL' to 'securityContext.capabilities.drop'
════════════════════════════════════════
The container should drop all default capabilities and add only those that are needed for its execution.

See https://avd.aquasec.com/misconfig/ksv003
────────────────────────────────────────
 servicey3_2.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: servicey
  18 │         image: 4719/s2s:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: enable-config
  23 │           mountPath: /app/kpf/enable-config
  24 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0004 (LOW): Container 'servicey' of 'deployment' 'servicey' in 'servicey' namespace should set securityContext.capabilities.drop
════════════════════════════════════════
Security best practices require containers to run with minimal required capabilities.

See https://avd.aquasec.com/misconfig/ksv004
────────────────────────────────────────
 servicey3_2.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: servicey
  18 │         image: 4719/s2s:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: enable-config
  23 │           mountPath: /app/kpf/enable-config
  24 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0011 (LOW): Container 'servicey' of Deployment 'servicey' should set 'resources.limits.cpu'
════════════════════════════════════════
Enforcing CPU limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv011
────────────────────────────────────────
 servicey3_2.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: servicey
  18 │         image: 4719/s2s:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: enable-config
  23 │           mountPath: /app/kpf/enable-config
  24 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0012 (MEDIUM): Container 'servicey' of Deployment 'servicey' should set 'securityContext.runAsNonRoot' to true
════════════════════════════════════════
Force the running image to run as a non-root user to ensure least privileges.

See https://avd.aquasec.com/misconfig/ksv012
────────────────────────────────────────
 servicey3_2.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: servicey
  18 │         image: 4719/s2s:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: enable-config
  23 │           mountPath: /app/kpf/enable-config
  24 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0014 (HIGH): Container 'servicey' of Deployment 'servicey' should set 'securityContext.readOnlyRootFilesystem' to true
════════════════════════════════════════
An immutable root file system prevents applications from writing to their local disk. This can limit intrusions, as attackers will not be able to tamper with the file system or write foreign executables to disk.

See https://avd.aquasec.com/misconfig/ksv014
────────────────────────────────────────
 servicey3_2.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: servicey
  18 │         image: 4719/s2s:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: enable-config
  23 │           mountPath: /app/kpf/enable-config
  24 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0015 (LOW): Container 'servicey' of Deployment 'servicey' should set 'resources.requests.cpu'
════════════════════════════════════════
When containers have resource requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv015
────────────────────────────────────────
 servicey3_2.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: servicey
  18 │         image: 4719/s2s:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: enable-config
  23 │           mountPath: /app/kpf/enable-config
  24 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0016 (LOW): Container 'servicey' of Deployment 'servicey' should set 'resources.requests.memory'
════════════════════════════════════════
When containers have memory requests specified, the scheduler can make better decisions about which nodes to place pods on, and how to deal with resource contention.

See https://avd.aquasec.com/misconfig/ksv016
────────────────────────────────────────
 servicey3_2.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: servicey
  18 │         image: 4719/s2s:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: enable-config
  23 │           mountPath: /app/kpf/enable-config
  24 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0018 (LOW): Container 'servicey' of Deployment 'servicey' should set 'resources.limits.memory'
════════════════════════════════════════
Enforcing memory limits prevents DoS via resource exhaustion.

See https://avd.aquasec.com/misconfig/ksv018
────────────────────────────────────────
 servicey3_2.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: servicey
  18 │         image: 4719/s2s:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: enable-config
  23 │           mountPath: /app/kpf/enable-config
  24 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0020 (LOW): Container 'servicey' of Deployment 'servicey' should set 'securityContext.runAsUser' > 10000
════════════════════════════════════════
Force the container to run with user ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv020
────────────────────────────────────────
 servicey3_2.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: servicey
  18 │         image: 4719/s2s:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: enable-config
  23 │           mountPath: /app/kpf/enable-config
  24 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0021 (LOW): Container 'servicey' of Deployment 'servicey' should set 'securityContext.runAsGroup' > 10000
════════════════════════════════════════
Force the container to run with group ID > 10000 to avoid conflicts with the host’s user table.

See https://avd.aquasec.com/misconfig/ksv021
────────────────────────────────────────
 servicey3_2.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: servicey
  18 │         image: 4719/s2s:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: enable-config
  23 │           mountPath: /app/kpf/enable-config
  24 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0030 (LOW): Either Pod or Container should set 'securityContext.seccompProfile.type' to 'RuntimeDefault'
════════════════════════════════════════
According to pod security standard 'Seccomp', the RuntimeDefault seccomp profile must be required, or allow specific additional profiles.

See https://avd.aquasec.com/misconfig/ksv030
────────────────────────────────────────
 servicey3_2.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: servicey
  18 │         image: 4719/s2s:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: enable-config
  23 │           mountPath: /app/kpf/enable-config
  24 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0104 (MEDIUM): container "servicey" of deployment "servicey" in "servicey" namespace should specify a seccomp profile
════════════════════════════════════════
A program inside the container can bypass Seccomp protection policies.

See https://avd.aquasec.com/misconfig/ksv104
────────────────────────────────────────
 servicey3_2.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: servicey
  18 │         image: 4719/s2s:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: enable-config
  23 │           mountPath: /app/kpf/enable-config
  24 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0106 (LOW): container should drop all
════════════════════════════════════════
Containers must drop ALL capabilities, and are only permitted to add back the NET_BIND_SERVICE capability.

See https://avd.aquasec.com/misconfig/ksv106
────────────────────────────────────────
 servicey3_2.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: servicey
  18 │         image: 4719/s2s:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: enable-config
  23 │           mountPath: /app/kpf/enable-config
  24 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): container servicey in servicey namespace is using the default security context
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 servicey3_2.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: servicey
  18 │         image: 4719/s2s:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: enable-config
  23 │           mountPath: /app/kpf/enable-config
  24 └           readOnly: true
────────────────────────────────────────


AVD-KSV-0118 (HIGH): deployment servicey in servicey namespace is using the default security context, which allows root privileges
════════════════════════════════════════
Security context controls the allocation of security parameters for the pod/container/volume, ensuring the appropriate level of protection. Relying on default security context may expose vulnerabilities to potential attacks that rely on privileged access.

See https://avd.aquasec.com/misconfig/ksv118
────────────────────────────────────────
 servicey3_2.yaml:16-28
────────────────────────────────────────
  16 ┌       containers:
  17 │       - name: servicey
  18 │         image: 4719/s2s:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: enable-config
  23 │           mountPath: /app/kpf/enable-config
  24 └           readOnly: true
  ..   
────────────────────────────────────────


AVD-KSV-0125 (MEDIUM): Container servicey in deployment servicey (namespace: servicey) uses an image from an untrusted registry.
════════════════════════════════════════
Ensure that all containers use images only from trusted registry domains.

See https://avd.aquasec.com/misconfig/ksv0125
────────────────────────────────────────
 servicey3_2.yaml:17-24
────────────────────────────────────────
  17 ┌       - name: servicey
  18 │         image: 4719/s2s:v1
  19 │         ports:
  20 │         - containerPort: 8080
  21 │         volumeMounts:
  22 │         - name: enable-config
  23 │           mountPath: /app/kpf/enable-config
  24 └           readOnly: true
────────────────────────────────────────


